// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/block.proto

#include "protos/perfetto/trace/ftrace/block.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.bytes_)*/ 0u
} {}
struct BlockRqIssueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqIssueFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqIssueFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqIssueFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqIssueFtraceEventDefaultTypeInternal _BlockRqIssueFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockBioBackmergeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioBackmergeFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioBackmergeFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioBackmergeFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioBackmergeFtraceEventDefaultTypeInternal _BlockBioBackmergeFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockBioBounceFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioBounceFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioBounceFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioBounceFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioBounceFtraceEventDefaultTypeInternal _BlockBioBounceFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.error_)*/ 0
} {}
struct BlockBioCompleteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioCompleteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioCompleteFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioCompleteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioCompleteFtraceEventDefaultTypeInternal _BlockBioCompleteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockBioFrontmergeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioFrontmergeFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioFrontmergeFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioFrontmergeFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioFrontmergeFtraceEventDefaultTypeInternal _BlockBioFrontmergeFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockBioQueueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioQueueFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioQueueFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioQueueFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioQueueFtraceEventDefaultTypeInternal _BlockBioQueueFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.old_dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.old_sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockBioRemapFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockBioRemapFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockBioRemapFtraceEventDefaultTypeInternal() {}
  union {
    BlockBioRemapFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockBioRemapFtraceEventDefaultTypeInternal _BlockBioRemapFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.size_)*/ ::uint64_t{0u}
} {}
struct BlockDirtyBufferFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDirtyBufferFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDirtyBufferFtraceEventDefaultTypeInternal() {}
  union {
    BlockDirtyBufferFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDirtyBufferFtraceEventDefaultTypeInternal _BlockDirtyBufferFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockGetrqFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockGetrqFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockGetrqFtraceEventDefaultTypeInternal() {}
  union {
    BlockGetrqFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockGetrqFtraceEventDefaultTypeInternal _BlockGetrqFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockPlugFtraceEvent::BlockPlugFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct BlockPlugFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPlugFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPlugFtraceEventDefaultTypeInternal() {}
  union {
    BlockPlugFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPlugFtraceEventDefaultTypeInternal _BlockPlugFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.errors_)*/ 0
} {}
struct BlockRqAbortFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqAbortFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqAbortFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqAbortFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqAbortFtraceEventDefaultTypeInternal _BlockRqAbortFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.errors_)*/ 0

  , /*decltype(_impl_.error_)*/ 0
} {}
struct BlockRqCompleteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqCompleteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqCompleteFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqCompleteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqCompleteFtraceEventDefaultTypeInternal _BlockRqCompleteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.bytes_)*/ 0u
} {}
struct BlockRqInsertFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqInsertFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqInsertFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqInsertFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqInsertFtraceEventDefaultTypeInternal _BlockRqInsertFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.old_dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.nr_bios_)*/ 0u

  , /*decltype(_impl_.old_sector_)*/ ::uint64_t{0u}
} {}
struct BlockRqRemapFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqRemapFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqRemapFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqRemapFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqRemapFtraceEventDefaultTypeInternal _BlockRqRemapFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u

  , /*decltype(_impl_.errors_)*/ 0
} {}
struct BlockRqRequeueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRqRequeueFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRqRequeueFtraceEventDefaultTypeInternal() {}
  union {
    BlockRqRequeueFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRqRequeueFtraceEventDefaultTypeInternal _BlockRqRequeueFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_sector_)*/ 0u
} {}
struct BlockSleeprqFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockSleeprqFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockSleeprqFtraceEventDefaultTypeInternal() {}
  union {
    BlockSleeprqFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockSleeprqFtraceEventDefaultTypeInternal _BlockSleeprqFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockSplitFtraceEvent::BlockSplitFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rwbs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.new_sector_)*/ ::uint64_t{0u}
} {}
struct BlockSplitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockSplitFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockSplitFtraceEventDefaultTypeInternal() {}
  union {
    BlockSplitFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockSplitFtraceEventDefaultTypeInternal _BlockSplitFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dev_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sector_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.size_)*/ ::uint64_t{0u}
} {}
struct BlockTouchBufferFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockTouchBufferFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockTouchBufferFtraceEventDefaultTypeInternal() {}
  union {
    BlockTouchBufferFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockTouchBufferFtraceEventDefaultTypeInternal _BlockTouchBufferFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nr_rq_)*/ 0
} {}
struct BlockUnplugFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockUnplugFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockUnplugFtraceEventDefaultTypeInternal() {}
  union {
    BlockUnplugFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockUnplugFtraceEventDefaultTypeInternal _BlockUnplugFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[19];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.comm_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqIssueFtraceEvent, _impl_.cmd_),
    3,
    4,
    5,
    6,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBackmergeFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioBounceFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _impl_.error_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioCompleteFtraceEvent, _impl_.rwbs_),
    1,
    2,
    3,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioFrontmergeFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioQueueFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_.old_dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_.old_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockBioRemapFtraceEvent, _impl_.rwbs_),
    1,
    2,
    5,
    3,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockDirtyBufferFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockDirtyBufferFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockDirtyBufferFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockDirtyBufferFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockDirtyBufferFtraceEvent, _impl_.size_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockGetrqFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockPlugFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockPlugFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockPlugFtraceEvent, _impl_.comm_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_.errors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqAbortFtraceEvent, _impl_.cmd_),
    2,
    3,
    4,
    5,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.errors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.cmd_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqCompleteFtraceEvent, _impl_.error_),
    2,
    3,
    4,
    5,
    0,
    1,
    6,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.comm_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqInsertFtraceEvent, _impl_.cmd_),
    3,
    4,
    5,
    6,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.old_dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.old_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.nr_bios_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRemapFtraceEvent, _impl_.rwbs_),
    1,
    2,
    4,
    3,
    6,
    5,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_.errors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockRqRequeueFtraceEvent, _impl_.cmd_),
    2,
    3,
    4,
    5,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _impl_.nr_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSleeprqFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _impl_.new_sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _impl_.rwbs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockSplitFtraceEvent, _impl_.comm_),
    2,
    3,
    4,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockTouchBufferFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockTouchBufferFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockTouchBufferFtraceEvent, _impl_.dev_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockTouchBufferFtraceEvent, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockTouchBufferFtraceEvent, _impl_.size_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockUnplugFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockUnplugFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockUnplugFtraceEvent, _impl_.nr_rq_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BlockUnplugFtraceEvent, _impl_.comm_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::perfetto::protos::BlockRqIssueFtraceEvent)},
        { 22, 35, -1, sizeof(::perfetto::protos::BlockBioBackmergeFtraceEvent)},
        { 40, 53, -1, sizeof(::perfetto::protos::BlockBioBounceFtraceEvent)},
        { 58, 71, -1, sizeof(::perfetto::protos::BlockBioCompleteFtraceEvent)},
        { 76, 89, -1, sizeof(::perfetto::protos::BlockBioFrontmergeFtraceEvent)},
        { 94, 107, -1, sizeof(::perfetto::protos::BlockBioQueueFtraceEvent)},
        { 112, 126, -1, sizeof(::perfetto::protos::BlockBioRemapFtraceEvent)},
        { 132, 143, -1, sizeof(::perfetto::protos::BlockDirtyBufferFtraceEvent)},
        { 146, 159, -1, sizeof(::perfetto::protos::BlockGetrqFtraceEvent)},
        { 164, 173, -1, sizeof(::perfetto::protos::BlockPlugFtraceEvent)},
        { 174, 188, -1, sizeof(::perfetto::protos::BlockRqAbortFtraceEvent)},
        { 194, 209, -1, sizeof(::perfetto::protos::BlockRqCompleteFtraceEvent)},
        { 216, 231, -1, sizeof(::perfetto::protos::BlockRqInsertFtraceEvent)},
        { 238, 253, -1, sizeof(::perfetto::protos::BlockRqRemapFtraceEvent)},
        { 260, 274, -1, sizeof(::perfetto::protos::BlockRqRequeueFtraceEvent)},
        { 280, 293, -1, sizeof(::perfetto::protos::BlockSleeprqFtraceEvent)},
        { 298, 311, -1, sizeof(::perfetto::protos::BlockSplitFtraceEvent)},
        { 316, 327, -1, sizeof(::perfetto::protos::BlockTouchBufferFtraceEvent)},
        { 330, 340, -1, sizeof(::perfetto::protos::BlockUnplugFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_BlockRqIssueFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockBioBackmergeFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockBioBounceFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockBioCompleteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockBioFrontmergeFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockBioQueueFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockBioRemapFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockDirtyBufferFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockGetrqFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockPlugFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockRqAbortFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockRqCompleteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockRqInsertFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockRqRemapFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockRqRequeueFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockSleeprqFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockSplitFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockTouchBufferFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BlockUnplugFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(protos/perfetto/trace/ftrace/block.pro"
    "to\022\017perfetto.protos\"\201\001\n\027BlockRqIssueFtra"
    "ceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\021\n\t"
    "nr_sector\030\003 \001(\r\022\r\n\005bytes\030\004 \001(\r\022\014\n\004rwbs\030\005"
    " \001(\t\022\014\n\004comm\030\006 \001(\t\022\013\n\003cmd\030\007 \001(\t\"j\n\034Block"
    "BioBackmergeFtraceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n\006"
    "sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001(\r\022\014\n\004rwbs\030"
    "\004 \001(\t\022\014\n\004comm\030\005 \001(\t\"g\n\031BlockBioBounceFtr"
    "aceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\021\n"
    "\tnr_sector\030\003 \001(\r\022\014\n\004rwbs\030\004 \001(\t\022\014\n\004comm\030\005"
    " \001(\t\"j\n\033BlockBioCompleteFtraceEvent\022\013\n\003d"
    "ev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 "
    "\001(\r\022\r\n\005error\030\004 \001(\005\022\014\n\004rwbs\030\005 \001(\t\"k\n\035Bloc"
    "kBioFrontmergeFtraceEvent\022\013\n\003dev\030\001 \001(\004\022\016"
    "\n\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001(\r\022\014\n\004rwb"
    "s\030\004 \001(\t\022\014\n\004comm\030\005 \001(\t\"f\n\030BlockBioQueueFt"
    "raceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\021"
    "\n\tnr_sector\030\003 \001(\r\022\014\n\004rwbs\030\004 \001(\t\022\014\n\004comm\030"
    "\005 \001(\t\"}\n\030BlockBioRemapFtraceEvent\022\013\n\003dev"
    "\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001("
    "\r\022\017\n\007old_dev\030\004 \001(\004\022\022\n\nold_sector\030\005 \001(\004\022\014"
    "\n\004rwbs\030\006 \001(\t\"H\n\033BlockDirtyBufferFtraceEv"
    "ent\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\014\n\004size"
    "\030\003 \001(\004\"c\n\025BlockGetrqFtraceEvent\022\013\n\003dev\030\001"
    " \001(\004\022\016\n\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001(\r\022"
    "\014\n\004rwbs\030\004 \001(\t\022\014\n\004comm\030\005 \001(\t\"$\n\024BlockPlug"
    "FtraceEvent\022\014\n\004comm\030\001 \001(\t\"t\n\027BlockRqAbor"
    "tFtraceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001("
    "\004\022\021\n\tnr_sector\030\003 \001(\r\022\016\n\006errors\030\004 \001(\005\022\014\n\004"
    "rwbs\030\005 \001(\t\022\013\n\003cmd\030\006 \001(\t\"\206\001\n\032BlockRqCompl"
    "eteFtraceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 "
    "\001(\004\022\021\n\tnr_sector\030\003 \001(\r\022\016\n\006errors\030\004 \001(\005\022\014"
    "\n\004rwbs\030\005 \001(\t\022\013\n\003cmd\030\006 \001(\t\022\r\n\005error\030\007 \001(\005"
    "\"\202\001\n\030BlockRqInsertFtraceEvent\022\013\n\003dev\030\001 \001"
    "(\004\022\016\n\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001(\r\022\r\n"
    "\005bytes\030\004 \001(\r\022\014\n\004rwbs\030\005 \001(\t\022\014\n\004comm\030\006 \001(\t"
    "\022\013\n\003cmd\030\007 \001(\t\"\215\001\n\027BlockRqRemapFtraceEven"
    "t\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\021\n\tnr_sec"
    "tor\030\003 \001(\r\022\017\n\007old_dev\030\004 \001(\004\022\022\n\nold_sector"
    "\030\005 \001(\004\022\017\n\007nr_bios\030\006 \001(\r\022\014\n\004rwbs\030\007 \001(\t\"v\n"
    "\031BlockRqRequeueFtraceEvent\022\013\n\003dev\030\001 \001(\004\022"
    "\016\n\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001(\r\022\016\n\006er"
    "rors\030\004 \001(\005\022\014\n\004rwbs\030\005 \001(\t\022\013\n\003cmd\030\006 \001(\t\"e\n"
    "\027BlockSleeprqFtraceEvent\022\013\n\003dev\030\001 \001(\004\022\016\n"
    "\006sector\030\002 \001(\004\022\021\n\tnr_sector\030\003 \001(\r\022\014\n\004rwbs"
    "\030\004 \001(\t\022\014\n\004comm\030\005 \001(\t\"d\n\025BlockSplitFtrace"
    "Event\022\013\n\003dev\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\022\n\nne"
    "w_sector\030\003 \001(\004\022\014\n\004rwbs\030\004 \001(\t\022\014\n\004comm\030\005 \001"
    "(\t\"H\n\033BlockTouchBufferFtraceEvent\022\013\n\003dev"
    "\030\001 \001(\004\022\016\n\006sector\030\002 \001(\004\022\014\n\004size\030\003 \001(\004\"5\n\026"
    "BlockUnplugFtraceEvent\022\r\n\005nr_rq\030\001 \001(\005\022\014\n"
    "\004comm\030\002 \001(\t"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto = {
    false,
    false,
    2051,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto,
    "protos/perfetto/trace/ftrace/block.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
    nullptr,
    0,
    19,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class BlockRqIssueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqIssueFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockRqIssueFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqIssueFtraceEvent)
}
BlockRqIssueFtraceEvent::BlockRqIssueFtraceEvent(const BlockRqIssueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRqIssueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.bytes_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bytes_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqIssueFtraceEvent)
}

inline void BlockRqIssueFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.bytes_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqIssueFtraceEvent::~BlockRqIssueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqIssueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqIssueFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqIssueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqIssueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqIssueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRqIssueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqIssueFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqIssueFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqIssueFtraceEvent.cmd");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRqIssueFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqIssueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional uint32 bytes = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_bytes(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqIssueFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string comm = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqIssueFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string cmd = 7;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqIssueFtraceEvent.cmd");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqIssueFtraceEvent)
  return target;
}

::size_t BlockRqIssueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqIssueFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional string cmd = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional uint32 bytes = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRqIssueFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRqIssueFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRqIssueFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockRqIssueFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRqIssueFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockRqIssueFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqIssueFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRqIssueFtraceEvent::CopyFrom(const BlockRqIssueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqIssueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqIssueFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqIssueFtraceEvent::InternalSwap(BlockRqIssueFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, lhs_arena,
                                       &other->_impl_.cmd_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqIssueFtraceEvent, _impl_.bytes_)
      + sizeof(BlockRqIssueFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(BlockRqIssueFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRqIssueFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[0]);
}
// ===================================================================

class BlockBioBackmergeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioBackmergeFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockBioBackmergeFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioBackmergeFtraceEvent)
}
BlockBioBackmergeFtraceEvent::BlockBioBackmergeFtraceEvent(const BlockBioBackmergeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBioBackmergeFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioBackmergeFtraceEvent)
}

inline void BlockBioBackmergeFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioBackmergeFtraceEvent::~BlockBioBackmergeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioBackmergeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioBackmergeFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioBackmergeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioBackmergeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBioBackmergeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioBackmergeFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockBioBackmergeFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioBackmergeFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioBackmergeFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioBackmergeFtraceEvent)
  return target;
}

::size_t BlockBioBackmergeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBioBackmergeFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBioBackmergeFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBioBackmergeFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockBioBackmergeFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBioBackmergeFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockBioBackmergeFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBioBackmergeFtraceEvent::CopyFrom(const BlockBioBackmergeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioBackmergeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioBackmergeFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioBackmergeFtraceEvent::InternalSwap(BlockBioBackmergeFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioBackmergeFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioBackmergeFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioBackmergeFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBioBackmergeFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[1]);
}
// ===================================================================

class BlockBioBounceFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioBounceFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockBioBounceFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioBounceFtraceEvent)
}
BlockBioBounceFtraceEvent::BlockBioBounceFtraceEvent(const BlockBioBounceFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBioBounceFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioBounceFtraceEvent)
}

inline void BlockBioBounceFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioBounceFtraceEvent::~BlockBioBounceFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioBounceFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioBounceFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioBounceFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioBounceFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioBounceFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBioBounceFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioBounceFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioBounceFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockBioBounceFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioBounceFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioBounceFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioBounceFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioBounceFtraceEvent)
  return target;
}

::size_t BlockBioBounceFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioBounceFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBioBounceFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBioBounceFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBioBounceFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockBioBounceFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBioBounceFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockBioBounceFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioBounceFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBioBounceFtraceEvent::CopyFrom(const BlockBioBounceFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioBounceFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioBounceFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioBounceFtraceEvent::InternalSwap(BlockBioBounceFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioBounceFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioBounceFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioBounceFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBioBounceFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[2]);
}
// ===================================================================

class BlockBioCompleteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioCompleteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockBioCompleteFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioCompleteFtraceEvent)
}
BlockBioCompleteFtraceEvent::BlockBioCompleteFtraceEvent(const BlockBioCompleteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBioCompleteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.error_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioCompleteFtraceEvent)
}

inline void BlockBioCompleteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.error_) { 0 }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioCompleteFtraceEvent::~BlockBioCompleteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioCompleteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioCompleteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
}

void BlockBioCompleteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioCompleteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rwbs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBioCompleteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_error(&has_bits);
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioCompleteFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockBioCompleteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional int32 error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_error(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioCompleteFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioCompleteFtraceEvent)
  return target;
}

::size_t BlockBioCompleteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional int32 error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBioCompleteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBioCompleteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBioCompleteFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockBioCompleteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBioCompleteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockBioCompleteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBioCompleteFtraceEvent::CopyFrom(const BlockBioCompleteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioCompleteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioCompleteFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioCompleteFtraceEvent::InternalSwap(BlockBioCompleteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioCompleteFtraceEvent, _impl_.error_)
      + sizeof(BlockBioCompleteFtraceEvent::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(BlockBioCompleteFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBioCompleteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[3]);
}
// ===================================================================

class BlockBioFrontmergeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioFrontmergeFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockBioFrontmergeFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioFrontmergeFtraceEvent)
}
BlockBioFrontmergeFtraceEvent::BlockBioFrontmergeFtraceEvent(const BlockBioFrontmergeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBioFrontmergeFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioFrontmergeFtraceEvent)
}

inline void BlockBioFrontmergeFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioFrontmergeFtraceEvent::~BlockBioFrontmergeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioFrontmergeFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioFrontmergeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioFrontmergeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBioFrontmergeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioFrontmergeFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockBioFrontmergeFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioFrontmergeFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioFrontmergeFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  return target;
}

::size_t BlockBioFrontmergeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBioFrontmergeFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBioFrontmergeFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBioFrontmergeFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockBioFrontmergeFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBioFrontmergeFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockBioFrontmergeFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBioFrontmergeFtraceEvent::CopyFrom(const BlockBioFrontmergeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioFrontmergeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioFrontmergeFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioFrontmergeFtraceEvent::InternalSwap(BlockBioFrontmergeFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioFrontmergeFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioFrontmergeFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioFrontmergeFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBioFrontmergeFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[4]);
}
// ===================================================================

class BlockBioQueueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioQueueFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockBioQueueFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioQueueFtraceEvent)
}
BlockBioQueueFtraceEvent::BlockBioQueueFtraceEvent(const BlockBioQueueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBioQueueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioQueueFtraceEvent)
}

inline void BlockBioQueueFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioQueueFtraceEvent::~BlockBioQueueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioQueueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioQueueFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockBioQueueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioQueueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioQueueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBioQueueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioQueueFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioQueueFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockBioQueueFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioQueueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioQueueFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioQueueFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioQueueFtraceEvent)
  return target;
}

::size_t BlockBioQueueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioQueueFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBioQueueFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBioQueueFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBioQueueFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockBioQueueFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBioQueueFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockBioQueueFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioQueueFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBioQueueFtraceEvent::CopyFrom(const BlockBioQueueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioQueueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioQueueFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioQueueFtraceEvent::InternalSwap(BlockBioQueueFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioQueueFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioQueueFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioQueueFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBioQueueFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[5]);
}
// ===================================================================

class BlockBioRemapFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockBioRemapFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockBioRemapFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_old_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockBioRemapFtraceEvent)
}
BlockBioRemapFtraceEvent::BlockBioRemapFtraceEvent(const BlockBioRemapFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockBioRemapFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.old_dev_) {}

    , decltype(_impl_.old_sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockBioRemapFtraceEvent)
}

inline void BlockBioRemapFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.old_dev_) { ::uint64_t{0u} }

    , decltype(_impl_.old_sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockBioRemapFtraceEvent::~BlockBioRemapFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockBioRemapFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockBioRemapFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
}

void BlockBioRemapFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockBioRemapFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockBioRemapFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rwbs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockBioRemapFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 old_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_old_dev(&has_bits);
          _impl_.old_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 old_sector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_old_sector(&has_bits);
          _impl_.old_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockBioRemapFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockBioRemapFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockBioRemapFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional uint64 old_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_old_dev(), target);
  }

  // optional uint64 old_sector = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_old_sector(), target);
  }

  // optional string rwbs = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockBioRemapFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockBioRemapFtraceEvent)
  return target;
}

::size_t BlockBioRemapFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockBioRemapFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rwbs = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint64 old_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_old_dev());
    }

    // optional uint64 old_sector = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_old_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockBioRemapFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockBioRemapFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockBioRemapFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockBioRemapFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockBioRemapFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockBioRemapFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockBioRemapFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_dev_ = from._impl_.old_dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.old_sector_ = from._impl_.old_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockBioRemapFtraceEvent::CopyFrom(const BlockBioRemapFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockBioRemapFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBioRemapFtraceEvent::IsInitialized() const {
  return true;
}

void BlockBioRemapFtraceEvent::InternalSwap(BlockBioRemapFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockBioRemapFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockBioRemapFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockBioRemapFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockBioRemapFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[6]);
}
// ===================================================================

class BlockDirtyBufferFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockDirtyBufferFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockDirtyBufferFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockDirtyBufferFtraceEvent)
}
BlockDirtyBufferFtraceEvent::BlockDirtyBufferFtraceEvent(const BlockDirtyBufferFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockDirtyBufferFtraceEvent)
}

inline void BlockDirtyBufferFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.size_) { ::uint64_t{0u} }

  };
}

BlockDirtyBufferFtraceEvent::~BlockDirtyBufferFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockDirtyBufferFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockDirtyBufferFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockDirtyBufferFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockDirtyBufferFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockDirtyBufferFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockDirtyBufferFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockDirtyBufferFtraceEvent)
  return target;
}

::size_t BlockDirtyBufferFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint64 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockDirtyBufferFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockDirtyBufferFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockDirtyBufferFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockDirtyBufferFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockDirtyBufferFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockDirtyBufferFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockDirtyBufferFtraceEvent::CopyFrom(const BlockDirtyBufferFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockDirtyBufferFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDirtyBufferFtraceEvent::IsInitialized() const {
  return true;
}

void BlockDirtyBufferFtraceEvent::InternalSwap(BlockDirtyBufferFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockDirtyBufferFtraceEvent, _impl_.size_)
      + sizeof(BlockDirtyBufferFtraceEvent::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BlockDirtyBufferFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockDirtyBufferFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[7]);
}
// ===================================================================

class BlockGetrqFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockGetrqFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockGetrqFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockGetrqFtraceEvent)
}
BlockGetrqFtraceEvent::BlockGetrqFtraceEvent(const BlockGetrqFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockGetrqFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockGetrqFtraceEvent)
}

inline void BlockGetrqFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockGetrqFtraceEvent::~BlockGetrqFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockGetrqFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockGetrqFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockGetrqFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockGetrqFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockGetrqFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockGetrqFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockGetrqFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockGetrqFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockGetrqFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockGetrqFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockGetrqFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockGetrqFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockGetrqFtraceEvent)
  return target;
}

::size_t BlockGetrqFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockGetrqFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockGetrqFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockGetrqFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockGetrqFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockGetrqFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockGetrqFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockGetrqFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockGetrqFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockGetrqFtraceEvent::CopyFrom(const BlockGetrqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockGetrqFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGetrqFtraceEvent::IsInitialized() const {
  return true;
}

void BlockGetrqFtraceEvent::InternalSwap(BlockGetrqFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockGetrqFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockGetrqFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockGetrqFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockGetrqFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[8]);
}
// ===================================================================

class BlockPlugFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockPlugFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockPlugFtraceEvent, _impl_._has_bits_);
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockPlugFtraceEvent::BlockPlugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockPlugFtraceEvent)
}
BlockPlugFtraceEvent::BlockPlugFtraceEvent(const BlockPlugFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockPlugFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockPlugFtraceEvent)
}

inline void BlockPlugFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockPlugFtraceEvent::~BlockPlugFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockPlugFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockPlugFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comm_.Destroy();
}

void BlockPlugFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockPlugFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockPlugFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.comm_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockPlugFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string comm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockPlugFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockPlugFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockPlugFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string comm = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockPlugFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockPlugFtraceEvent)
  return target;
}

::size_t BlockPlugFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockPlugFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string comm = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_comm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockPlugFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockPlugFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockPlugFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockPlugFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockPlugFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockPlugFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockPlugFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_comm(from._internal_comm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPlugFtraceEvent::CopyFrom(const BlockPlugFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockPlugFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPlugFtraceEvent::IsInitialized() const {
  return true;
}

void BlockPlugFtraceEvent::InternalSwap(BlockPlugFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockPlugFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[9]);
}
// ===================================================================

class BlockRqAbortFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqAbortFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockRqAbortFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqAbortFtraceEvent)
}
BlockRqAbortFtraceEvent::BlockRqAbortFtraceEvent(const BlockRqAbortFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRqAbortFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.errors_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.errors_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqAbortFtraceEvent)
}

inline void BlockRqAbortFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.errors_) { 0 }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqAbortFtraceEvent::~BlockRqAbortFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqAbortFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqAbortFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqAbortFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqAbortFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqAbortFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.errors_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRqAbortFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqAbortFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqAbortFtraceEvent.cmd");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRqAbortFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqAbortFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional int32 errors = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_errors(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqAbortFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string cmd = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqAbortFtraceEvent.cmd");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqAbortFtraceEvent)
  return target;
}

::size_t BlockRqAbortFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqAbortFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string cmd = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional int32 errors = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_errors());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRqAbortFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRqAbortFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRqAbortFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockRqAbortFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRqAbortFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockRqAbortFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqAbortFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRqAbortFtraceEvent::CopyFrom(const BlockRqAbortFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqAbortFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqAbortFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqAbortFtraceEvent::InternalSwap(BlockRqAbortFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, lhs_arena,
                                       &other->_impl_.cmd_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqAbortFtraceEvent, _impl_.errors_)
      + sizeof(BlockRqAbortFtraceEvent::_impl_.errors_)
      - PROTOBUF_FIELD_OFFSET(BlockRqAbortFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRqAbortFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[10]);
}
// ===================================================================

class BlockRqCompleteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqCompleteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockRqCompleteFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqCompleteFtraceEvent)
}
BlockRqCompleteFtraceEvent::BlockRqCompleteFtraceEvent(const BlockRqCompleteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRqCompleteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.errors_) {}

    , decltype(_impl_.error_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqCompleteFtraceEvent)
}

inline void BlockRqCompleteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.errors_) { 0 }

    , decltype(_impl_.error_) { 0 }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqCompleteFtraceEvent::~BlockRqCompleteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqCompleteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqCompleteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqCompleteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqCompleteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.error_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRqCompleteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqCompleteFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqCompleteFtraceEvent.cmd");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_error(&has_bits);
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRqCompleteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional int32 errors = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_errors(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqCompleteFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string cmd = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqCompleteFtraceEvent.cmd");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional int32 error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqCompleteFtraceEvent)
  return target;
}

::size_t BlockRqCompleteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string cmd = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional int32 errors = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_errors());
    }

    // optional int32 error = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRqCompleteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRqCompleteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRqCompleteFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockRqCompleteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRqCompleteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockRqCompleteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRqCompleteFtraceEvent::CopyFrom(const BlockRqCompleteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqCompleteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqCompleteFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqCompleteFtraceEvent::InternalSwap(BlockRqCompleteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, lhs_arena,
                                       &other->_impl_.cmd_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqCompleteFtraceEvent, _impl_.error_)
      + sizeof(BlockRqCompleteFtraceEvent::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(BlockRqCompleteFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRqCompleteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[11]);
}
// ===================================================================

class BlockRqInsertFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqInsertFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockRqInsertFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqInsertFtraceEvent)
}
BlockRqInsertFtraceEvent::BlockRqInsertFtraceEvent(const BlockRqInsertFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRqInsertFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.bytes_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bytes_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqInsertFtraceEvent)
}

inline void BlockRqInsertFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.bytes_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqInsertFtraceEvent::~BlockRqInsertFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqInsertFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqInsertFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqInsertFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqInsertFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqInsertFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRqInsertFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqInsertFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqInsertFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqInsertFtraceEvent.cmd");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRqInsertFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqInsertFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional uint32 bytes = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_bytes(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqInsertFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string comm = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqInsertFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string cmd = 7;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqInsertFtraceEvent.cmd");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqInsertFtraceEvent)
  return target;
}

::size_t BlockRqInsertFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqInsertFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional string cmd = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional uint32 bytes = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRqInsertFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRqInsertFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRqInsertFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockRqInsertFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRqInsertFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockRqInsertFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqInsertFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRqInsertFtraceEvent::CopyFrom(const BlockRqInsertFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqInsertFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqInsertFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqInsertFtraceEvent::InternalSwap(BlockRqInsertFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, lhs_arena,
                                       &other->_impl_.cmd_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqInsertFtraceEvent, _impl_.bytes_)
      + sizeof(BlockRqInsertFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(BlockRqInsertFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRqInsertFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[12]);
}
// ===================================================================

class BlockRqRemapFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqRemapFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockRqRemapFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_nr_bios(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqRemapFtraceEvent)
}
BlockRqRemapFtraceEvent::BlockRqRemapFtraceEvent(const BlockRqRemapFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRqRemapFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.old_dev_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.nr_bios_) {}

    , decltype(_impl_.old_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.old_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.old_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqRemapFtraceEvent)
}

inline void BlockRqRemapFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.old_dev_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.nr_bios_) { 0u }

    , decltype(_impl_.old_sector_) { ::uint64_t{0u} }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqRemapFtraceEvent::~BlockRqRemapFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqRemapFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqRemapFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
}

void BlockRqRemapFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqRemapFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqRemapFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.rwbs_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.old_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.old_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRqRemapFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 old_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_old_dev(&has_bits);
          _impl_.old_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 old_sector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_old_sector(&has_bits);
          _impl_.old_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_bios = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_nr_bios(&has_bits);
          _impl_.nr_bios_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqRemapFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRqRemapFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqRemapFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional uint64 old_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_old_dev(), target);
  }

  // optional uint64 old_sector = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_old_sector(), target);
  }

  // optional uint32 nr_bios = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_nr_bios(), target);
  }

  // optional string rwbs = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqRemapFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqRemapFtraceEvent)
  return target;
}

::size_t BlockRqRemapFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqRemapFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string rwbs = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint64 old_dev = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_old_dev());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional uint32 nr_bios = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_bios());
    }

    // optional uint64 old_sector = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_old_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRqRemapFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRqRemapFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRqRemapFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockRqRemapFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRqRemapFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockRqRemapFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqRemapFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.old_dev_ = from._impl_.old_dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_bios_ = from._impl_.nr_bios_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.old_sector_ = from._impl_.old_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRqRemapFtraceEvent::CopyFrom(const BlockRqRemapFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqRemapFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqRemapFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqRemapFtraceEvent::InternalSwap(BlockRqRemapFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqRemapFtraceEvent, _impl_.old_sector_)
      + sizeof(BlockRqRemapFtraceEvent::_impl_.old_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockRqRemapFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRqRemapFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[13]);
}
// ===================================================================

class BlockRqRequeueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockRqRequeueFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockRqRequeueFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockRqRequeueFtraceEvent)
}
BlockRqRequeueFtraceEvent::BlockRqRequeueFtraceEvent(const BlockRqRequeueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRqRequeueFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}

    , decltype(_impl_.errors_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cmd_.Set(from._internal_cmd(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.errors_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockRqRequeueFtraceEvent)
}

inline void BlockRqRequeueFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.cmd_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

    , decltype(_impl_.errors_) { 0 }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockRqRequeueFtraceEvent::~BlockRqRequeueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockRqRequeueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRqRequeueFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.cmd_.Destroy();
}

void BlockRqRequeueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRqRequeueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cmd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.errors_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.errors_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRqRequeueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqRequeueFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockRqRequeueFtraceEvent.cmd");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRqRequeueFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional int32 errors = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_errors(), target);
  }

  // optional string rwbs = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqRequeueFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string cmd = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockRqRequeueFtraceEvent.cmd");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockRqRequeueFtraceEvent)
  return target;
}

::size_t BlockRqRequeueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rwbs = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string cmd = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmd());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

    // optional int32 errors = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_errors());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRqRequeueFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRqRequeueFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRqRequeueFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockRqRequeueFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRqRequeueFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockRqRequeueFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cmd(from._internal_cmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRqRequeueFtraceEvent::CopyFrom(const BlockRqRequeueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockRqRequeueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRqRequeueFtraceEvent::IsInitialized() const {
  return true;
}

void BlockRqRequeueFtraceEvent::InternalSwap(BlockRqRequeueFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmd_, lhs_arena,
                                       &other->_impl_.cmd_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRqRequeueFtraceEvent, _impl_.errors_)
      + sizeof(BlockRqRequeueFtraceEvent::_impl_.errors_)
      - PROTOBUF_FIELD_OFFSET(BlockRqRequeueFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRqRequeueFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[14]);
}
// ===================================================================

class BlockSleeprqFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockSleeprqFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockSleeprqFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nr_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockSleeprqFtraceEvent)
}
BlockSleeprqFtraceEvent::BlockSleeprqFtraceEvent(const BlockSleeprqFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockSleeprqFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.nr_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nr_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockSleeprqFtraceEvent)
}

inline void BlockSleeprqFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_sector_) { 0u }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockSleeprqFtraceEvent::~BlockSleeprqFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockSleeprqFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockSleeprqFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockSleeprqFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockSleeprqFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockSleeprqFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.nr_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockSleeprqFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_sector(&has_bits);
          _impl_.nr_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockSleeprqFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockSleeprqFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockSleeprqFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockSleeprqFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint32 nr_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nr_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockSleeprqFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockSleeprqFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockSleeprqFtraceEvent)
  return target;
}

::size_t BlockSleeprqFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockSleeprqFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint32 nr_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockSleeprqFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockSleeprqFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockSleeprqFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockSleeprqFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockSleeprqFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockSleeprqFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockSleeprqFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nr_sector_ = from._impl_.nr_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockSleeprqFtraceEvent::CopyFrom(const BlockSleeprqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockSleeprqFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSleeprqFtraceEvent::IsInitialized() const {
  return true;
}

void BlockSleeprqFtraceEvent::InternalSwap(BlockSleeprqFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockSleeprqFtraceEvent, _impl_.nr_sector_)
      + sizeof(BlockSleeprqFtraceEvent::_impl_.nr_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockSleeprqFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockSleeprqFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[15]);
}
// ===================================================================

class BlockSplitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockSplitFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockSplitFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rwbs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BlockSplitFtraceEvent::BlockSplitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockSplitFtraceEvent)
}
BlockSplitFtraceEvent::BlockSplitFtraceEvent(const BlockSplitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockSplitFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) {}

    , decltype(_impl_.sector_) {}

    , decltype(_impl_.new_sector_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rwbs_.Set(from._internal_rwbs(), _this->GetArenaForAllocation());
  }
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dev_, &from._impl_.dev_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.new_sector_) -
    reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.new_sector_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockSplitFtraceEvent)
}

inline void BlockSplitFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rwbs_) {}

    , decltype(_impl_.comm_) {}

    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.new_sector_) { ::uint64_t{0u} }

  };
  _impl_.rwbs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rwbs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockSplitFtraceEvent::~BlockSplitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockSplitFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockSplitFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rwbs_.Destroy();
  _impl_.comm_.Destroy();
}

void BlockSplitFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockSplitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockSplitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rwbs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.new_sector_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.new_sector_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockSplitFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 new_sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_new_sector(&has_bits);
          _impl_.new_sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rwbs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rwbs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockSplitFtraceEvent.rwbs");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockSplitFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockSplitFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockSplitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint64 new_sector = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_new_sector(), target);
  }

  // optional string rwbs = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rwbs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockSplitFtraceEvent.rwbs");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string comm = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockSplitFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockSplitFtraceEvent)
  return target;
}

::size_t BlockSplitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockSplitFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rwbs = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rwbs());
    }

    // optional string comm = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint64 new_sector = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_new_sector());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockSplitFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockSplitFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockSplitFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockSplitFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockSplitFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockSplitFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockSplitFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rwbs(from._internal_rwbs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.new_sector_ = from._impl_.new_sector_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockSplitFtraceEvent::CopyFrom(const BlockSplitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockSplitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSplitFtraceEvent::IsInitialized() const {
  return true;
}

void BlockSplitFtraceEvent::InternalSwap(BlockSplitFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rwbs_, lhs_arena,
                                       &other->_impl_.rwbs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockSplitFtraceEvent, _impl_.new_sector_)
      + sizeof(BlockSplitFtraceEvent::_impl_.new_sector_)
      - PROTOBUF_FIELD_OFFSET(BlockSplitFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockSplitFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[16]);
}
// ===================================================================

class BlockTouchBufferFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockTouchBufferFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockTouchBufferFtraceEvent, _impl_._has_bits_);
  static void set_has_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockTouchBufferFtraceEvent)
}
BlockTouchBufferFtraceEvent::BlockTouchBufferFtraceEvent(const BlockTouchBufferFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockTouchBufferFtraceEvent)
}

inline void BlockTouchBufferFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_) { ::uint64_t{0u} }

    , decltype(_impl_.sector_) { ::uint64_t{0u} }

    , decltype(_impl_.size_) { ::uint64_t{0u} }

  };
}

BlockTouchBufferFtraceEvent::~BlockTouchBufferFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockTouchBufferFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockTouchBufferFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockTouchBufferFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockTouchBufferFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.dev_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.dev_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockTouchBufferFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dev(&has_bits);
          _impl_.dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sector(&has_bits);
          _impl_.sector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockTouchBufferFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 dev = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_dev(), target);
  }

  // optional uint64 sector = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sector(), target);
  }

  // optional uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockTouchBufferFtraceEvent)
  return target;
}

::size_t BlockTouchBufferFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dev());
    }

    // optional uint64 sector = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sector());
    }

    // optional uint64 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockTouchBufferFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockTouchBufferFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockTouchBufferFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockTouchBufferFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockTouchBufferFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockTouchBufferFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dev_ = from._impl_.dev_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sector_ = from._impl_.sector_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockTouchBufferFtraceEvent::CopyFrom(const BlockTouchBufferFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockTouchBufferFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTouchBufferFtraceEvent::IsInitialized() const {
  return true;
}

void BlockTouchBufferFtraceEvent::InternalSwap(BlockTouchBufferFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockTouchBufferFtraceEvent, _impl_.size_)
      + sizeof(BlockTouchBufferFtraceEvent::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(BlockTouchBufferFtraceEvent, _impl_.dev_)>(
          reinterpret_cast<char*>(&_impl_.dev_),
          reinterpret_cast<char*>(&other->_impl_.dev_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockTouchBufferFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[17]);
}
// ===================================================================

class BlockUnplugFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockUnplugFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockUnplugFtraceEvent, _impl_._has_bits_);
  static void set_has_nr_rq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BlockUnplugFtraceEvent)
}
BlockUnplugFtraceEvent::BlockUnplugFtraceEvent(const BlockUnplugFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockUnplugFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

    , decltype(_impl_.nr_rq_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  _this->_impl_.nr_rq_ = from._impl_.nr_rq_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BlockUnplugFtraceEvent)
}

inline void BlockUnplugFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

    , decltype(_impl_.nr_rq_) { 0 }

  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockUnplugFtraceEvent::~BlockUnplugFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BlockUnplugFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockUnplugFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comm_.Destroy();
}

void BlockUnplugFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockUnplugFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BlockUnplugFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.comm_.ClearNonDefaultToEmpty();
  }
  _impl_.nr_rq_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUnplugFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nr_rq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nr_rq(&has_bits);
          _impl_.nr_rq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BlockUnplugFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockUnplugFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BlockUnplugFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nr_rq = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nr_rq(), target);
  }

  // optional string comm = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BlockUnplugFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BlockUnplugFtraceEvent)
  return target;
}

::size_t BlockUnplugFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BlockUnplugFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string comm = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional int32 nr_rq = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nr_rq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockUnplugFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockUnplugFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockUnplugFtraceEvent::GetClassData() const { return &_class_data_; }


void BlockUnplugFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockUnplugFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BlockUnplugFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BlockUnplugFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nr_rq_ = from._impl_.nr_rq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockUnplugFtraceEvent::CopyFrom(const BlockUnplugFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BlockUnplugFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUnplugFtraceEvent::IsInitialized() const {
  return true;
}

void BlockUnplugFtraceEvent::InternalSwap(BlockUnplugFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);

  swap(_impl_.nr_rq_, other->_impl_.nr_rq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUnplugFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto[18]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqIssueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqIssueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqIssueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioBackmergeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioBackmergeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioBackmergeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioBounceFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioBounceFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioBounceFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioCompleteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioCompleteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioCompleteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioFrontmergeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioFrontmergeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioFrontmergeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioQueueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioQueueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioQueueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockBioRemapFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockBioRemapFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockBioRemapFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockDirtyBufferFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockDirtyBufferFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockDirtyBufferFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockGetrqFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockGetrqFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockGetrqFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockPlugFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockPlugFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockPlugFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqAbortFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqAbortFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqAbortFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqCompleteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqCompleteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqCompleteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqInsertFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqInsertFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqInsertFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqRemapFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqRemapFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqRemapFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockRqRequeueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockRqRequeueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockRqRequeueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockSleeprqFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockSleeprqFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockSleeprqFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockSplitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockSplitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockSplitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockTouchBufferFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockTouchBufferFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockTouchBufferFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BlockUnplugFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BlockUnplugFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BlockUnplugFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
