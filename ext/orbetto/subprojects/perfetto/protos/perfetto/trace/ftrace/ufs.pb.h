// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ufs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto;
namespace perfetto {
namespace protos {
class UfshcdClkGatingFtraceEvent;
struct UfshcdClkGatingFtraceEventDefaultTypeInternal;
extern UfshcdClkGatingFtraceEventDefaultTypeInternal _UfshcdClkGatingFtraceEvent_default_instance_;
class UfshcdCommandFtraceEvent;
struct UfshcdCommandFtraceEventDefaultTypeInternal;
extern UfshcdCommandFtraceEventDefaultTypeInternal _UfshcdCommandFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::UfshcdClkGatingFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::UfshcdClkGatingFtraceEvent>(Arena*);
template <>
::perfetto::protos::UfshcdCommandFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::UfshcdCommandFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class UfshcdCommandFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.UfshcdCommandFtraceEvent) */ {
 public:
  inline UfshcdCommandFtraceEvent() : UfshcdCommandFtraceEvent(nullptr) {}
  ~UfshcdCommandFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UfshcdCommandFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UfshcdCommandFtraceEvent(const UfshcdCommandFtraceEvent& from);
  UfshcdCommandFtraceEvent(UfshcdCommandFtraceEvent&& from) noexcept
    : UfshcdCommandFtraceEvent() {
    *this = ::std::move(from);
  }

  inline UfshcdCommandFtraceEvent& operator=(const UfshcdCommandFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UfshcdCommandFtraceEvent& operator=(UfshcdCommandFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UfshcdCommandFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UfshcdCommandFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const UfshcdCommandFtraceEvent*>(
               &_UfshcdCommandFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UfshcdCommandFtraceEvent& a, UfshcdCommandFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UfshcdCommandFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UfshcdCommandFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UfshcdCommandFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UfshcdCommandFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UfshcdCommandFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UfshcdCommandFtraceEvent& from) {
    UfshcdCommandFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UfshcdCommandFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.UfshcdCommandFtraceEvent";
  }
  protected:
  explicit UfshcdCommandFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevNameFieldNumber = 1,
    kStrFieldNumber = 6,
    kDoorbellFieldNumber = 2,
    kIntrFieldNumber = 3,
    kLbaFieldNumber = 4,
    kOpcodeFieldNumber = 5,
    kTagFieldNumber = 7,
    kTransferLenFieldNumber = 8,
    kGroupIdFieldNumber = 9,
    kStrTFieldNumber = 10,
  };
  // optional string dev_name = 1;
  bool has_dev_name() const;
  void clear_dev_name() ;
  const std::string& dev_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dev_name(Arg_&& arg, Args_... args);
  std::string* mutable_dev_name();
  PROTOBUF_NODISCARD std::string* release_dev_name();
  void set_allocated_dev_name(std::string* ptr);

  private:
  const std::string& _internal_dev_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dev_name(
      const std::string& value);
  std::string* _internal_mutable_dev_name();

  public:
  // optional string str = 6;
  bool has_str() const;
  void clear_str() ;
  const std::string& str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* ptr);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  // optional uint32 doorbell = 2;
  bool has_doorbell() const;
  void clear_doorbell() ;
  ::uint32_t doorbell() const;
  void set_doorbell(::uint32_t value);

  private:
  ::uint32_t _internal_doorbell() const;
  void _internal_set_doorbell(::uint32_t value);

  public:
  // optional uint32 intr = 3;
  bool has_intr() const;
  void clear_intr() ;
  ::uint32_t intr() const;
  void set_intr(::uint32_t value);

  private:
  ::uint32_t _internal_intr() const;
  void _internal_set_intr(::uint32_t value);

  public:
  // optional uint64 lba = 4;
  bool has_lba() const;
  void clear_lba() ;
  ::uint64_t lba() const;
  void set_lba(::uint64_t value);

  private:
  ::uint64_t _internal_lba() const;
  void _internal_set_lba(::uint64_t value);

  public:
  // optional uint32 opcode = 5;
  bool has_opcode() const;
  void clear_opcode() ;
  ::uint32_t opcode() const;
  void set_opcode(::uint32_t value);

  private:
  ::uint32_t _internal_opcode() const;
  void _internal_set_opcode(::uint32_t value);

  public:
  // optional uint32 tag = 7;
  bool has_tag() const;
  void clear_tag() ;
  ::uint32_t tag() const;
  void set_tag(::uint32_t value);

  private:
  ::uint32_t _internal_tag() const;
  void _internal_set_tag(::uint32_t value);

  public:
  // optional int32 transfer_len = 8;
  bool has_transfer_len() const;
  void clear_transfer_len() ;
  ::int32_t transfer_len() const;
  void set_transfer_len(::int32_t value);

  private:
  ::int32_t _internal_transfer_len() const;
  void _internal_set_transfer_len(::int32_t value);

  public:
  // optional uint32 group_id = 9;
  bool has_group_id() const;
  void clear_group_id() ;
  ::uint32_t group_id() const;
  void set_group_id(::uint32_t value);

  private:
  ::uint32_t _internal_group_id() const;
  void _internal_set_group_id(::uint32_t value);

  public:
  // optional uint32 str_t = 10;
  bool has_str_t() const;
  void clear_str_t() ;
  ::uint32_t str_t() const;
  void set_str_t(::uint32_t value);

  private:
  ::uint32_t _internal_str_t() const;
  void _internal_set_str_t(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.UfshcdCommandFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    ::uint32_t doorbell_;
    ::uint32_t intr_;
    ::uint64_t lba_;
    ::uint32_t opcode_;
    ::uint32_t tag_;
    ::int32_t transfer_len_;
    ::uint32_t group_id_;
    ::uint32_t str_t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto;
};// -------------------------------------------------------------------

class UfshcdClkGatingFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.UfshcdClkGatingFtraceEvent) */ {
 public:
  inline UfshcdClkGatingFtraceEvent() : UfshcdClkGatingFtraceEvent(nullptr) {}
  ~UfshcdClkGatingFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UfshcdClkGatingFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UfshcdClkGatingFtraceEvent(const UfshcdClkGatingFtraceEvent& from);
  UfshcdClkGatingFtraceEvent(UfshcdClkGatingFtraceEvent&& from) noexcept
    : UfshcdClkGatingFtraceEvent() {
    *this = ::std::move(from);
  }

  inline UfshcdClkGatingFtraceEvent& operator=(const UfshcdClkGatingFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UfshcdClkGatingFtraceEvent& operator=(UfshcdClkGatingFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UfshcdClkGatingFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UfshcdClkGatingFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const UfshcdClkGatingFtraceEvent*>(
               &_UfshcdClkGatingFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UfshcdClkGatingFtraceEvent& a, UfshcdClkGatingFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UfshcdClkGatingFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UfshcdClkGatingFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UfshcdClkGatingFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UfshcdClkGatingFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UfshcdClkGatingFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UfshcdClkGatingFtraceEvent& from) {
    UfshcdClkGatingFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UfshcdClkGatingFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.UfshcdClkGatingFtraceEvent";
  }
  protected:
  explicit UfshcdClkGatingFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional string dev_name = 1;
  bool has_dev_name() const;
  void clear_dev_name() ;
  const std::string& dev_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dev_name(Arg_&& arg, Args_... args);
  std::string* mutable_dev_name();
  PROTOBUF_NODISCARD std::string* release_dev_name();
  void set_allocated_dev_name(std::string* ptr);

  private:
  const std::string& _internal_dev_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dev_name(
      const std::string& value);
  std::string* _internal_mutable_dev_name();

  public:
  // optional int32 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);

  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.UfshcdClkGatingFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_name_;
    ::int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UfshcdCommandFtraceEvent

// optional string dev_name = 1;
inline bool UfshcdCommandFtraceEvent::has_dev_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_dev_name() {
  _impl_.dev_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UfshcdCommandFtraceEvent::dev_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.dev_name)
  return _internal_dev_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UfshcdCommandFtraceEvent::set_dev_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.dev_name)
}
inline std::string* UfshcdCommandFtraceEvent::mutable_dev_name() {
  std::string* _s = _internal_mutable_dev_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.UfshcdCommandFtraceEvent.dev_name)
  return _s;
}
inline const std::string& UfshcdCommandFtraceEvent::_internal_dev_name() const {
  return _impl_.dev_name_.Get();
}
inline void UfshcdCommandFtraceEvent::_internal_set_dev_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.dev_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UfshcdCommandFtraceEvent::_internal_mutable_dev_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dev_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UfshcdCommandFtraceEvent::release_dev_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.UfshcdCommandFtraceEvent.dev_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dev_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dev_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UfshcdCommandFtraceEvent::set_allocated_dev_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dev_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dev_name_.IsDefault()) {
          _impl_.dev_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.UfshcdCommandFtraceEvent.dev_name)
}

// optional uint32 doorbell = 2;
inline bool UfshcdCommandFtraceEvent::has_doorbell() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_doorbell() {
  _impl_.doorbell_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t UfshcdCommandFtraceEvent::doorbell() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.doorbell)
  return _internal_doorbell();
}
inline void UfshcdCommandFtraceEvent::set_doorbell(::uint32_t value) {
  _internal_set_doorbell(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.doorbell)
}
inline ::uint32_t UfshcdCommandFtraceEvent::_internal_doorbell() const {
  return _impl_.doorbell_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_doorbell(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.doorbell_ = value;
}

// optional uint32 intr = 3;
inline bool UfshcdCommandFtraceEvent::has_intr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_intr() {
  _impl_.intr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t UfshcdCommandFtraceEvent::intr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.intr)
  return _internal_intr();
}
inline void UfshcdCommandFtraceEvent::set_intr(::uint32_t value) {
  _internal_set_intr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.intr)
}
inline ::uint32_t UfshcdCommandFtraceEvent::_internal_intr() const {
  return _impl_.intr_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_intr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.intr_ = value;
}

// optional uint64 lba = 4;
inline bool UfshcdCommandFtraceEvent::has_lba() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_lba() {
  _impl_.lba_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t UfshcdCommandFtraceEvent::lba() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.lba)
  return _internal_lba();
}
inline void UfshcdCommandFtraceEvent::set_lba(::uint64_t value) {
  _internal_set_lba(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.lba)
}
inline ::uint64_t UfshcdCommandFtraceEvent::_internal_lba() const {
  return _impl_.lba_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_lba(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lba_ = value;
}

// optional uint32 opcode = 5;
inline bool UfshcdCommandFtraceEvent::has_opcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_opcode() {
  _impl_.opcode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t UfshcdCommandFtraceEvent::opcode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.opcode)
  return _internal_opcode();
}
inline void UfshcdCommandFtraceEvent::set_opcode(::uint32_t value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.opcode)
}
inline ::uint32_t UfshcdCommandFtraceEvent::_internal_opcode() const {
  return _impl_.opcode_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_opcode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.opcode_ = value;
}

// optional string str = 6;
inline bool UfshcdCommandFtraceEvent::has_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_str() {
  _impl_.str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UfshcdCommandFtraceEvent::str() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UfshcdCommandFtraceEvent::set_str(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.str)
}
inline std::string* UfshcdCommandFtraceEvent::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.UfshcdCommandFtraceEvent.str)
  return _s;
}
inline const std::string& UfshcdCommandFtraceEvent::_internal_str() const {
  return _impl_.str_.Get();
}
inline void UfshcdCommandFtraceEvent::_internal_set_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* UfshcdCommandFtraceEvent::_internal_mutable_str() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.str_.Mutable( GetArenaForAllocation());
}
inline std::string* UfshcdCommandFtraceEvent::release_str() {
  // @@protoc_insertion_point(field_release:perfetto.protos.UfshcdCommandFtraceEvent.str)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.str_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UfshcdCommandFtraceEvent::set_allocated_str(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.str_.IsDefault()) {
          _impl_.str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.UfshcdCommandFtraceEvent.str)
}

// optional uint32 tag = 7;
inline bool UfshcdCommandFtraceEvent::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_tag() {
  _impl_.tag_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t UfshcdCommandFtraceEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.tag)
  return _internal_tag();
}
inline void UfshcdCommandFtraceEvent::set_tag(::uint32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.tag)
}
inline ::uint32_t UfshcdCommandFtraceEvent::_internal_tag() const {
  return _impl_.tag_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_tag(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.tag_ = value;
}

// optional int32 transfer_len = 8;
inline bool UfshcdCommandFtraceEvent::has_transfer_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_transfer_len() {
  _impl_.transfer_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t UfshcdCommandFtraceEvent::transfer_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.transfer_len)
  return _internal_transfer_len();
}
inline void UfshcdCommandFtraceEvent::set_transfer_len(::int32_t value) {
  _internal_set_transfer_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.transfer_len)
}
inline ::int32_t UfshcdCommandFtraceEvent::_internal_transfer_len() const {
  return _impl_.transfer_len_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_transfer_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.transfer_len_ = value;
}

// optional uint32 group_id = 9;
inline bool UfshcdCommandFtraceEvent::has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t UfshcdCommandFtraceEvent::group_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.group_id)
  return _internal_group_id();
}
inline void UfshcdCommandFtraceEvent::set_group_id(::uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.group_id)
}
inline ::uint32_t UfshcdCommandFtraceEvent::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_group_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.group_id_ = value;
}

// optional uint32 str_t = 10;
inline bool UfshcdCommandFtraceEvent::has_str_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void UfshcdCommandFtraceEvent::clear_str_t() {
  _impl_.str_t_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t UfshcdCommandFtraceEvent::str_t() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdCommandFtraceEvent.str_t)
  return _internal_str_t();
}
inline void UfshcdCommandFtraceEvent::set_str_t(::uint32_t value) {
  _internal_set_str_t(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdCommandFtraceEvent.str_t)
}
inline ::uint32_t UfshcdCommandFtraceEvent::_internal_str_t() const {
  return _impl_.str_t_;
}
inline void UfshcdCommandFtraceEvent::_internal_set_str_t(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.str_t_ = value;
}

// -------------------------------------------------------------------

// UfshcdClkGatingFtraceEvent

// optional string dev_name = 1;
inline bool UfshcdClkGatingFtraceEvent::has_dev_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UfshcdClkGatingFtraceEvent::clear_dev_name() {
  _impl_.dev_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UfshcdClkGatingFtraceEvent::dev_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name)
  return _internal_dev_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UfshcdClkGatingFtraceEvent::set_dev_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name)
}
inline std::string* UfshcdClkGatingFtraceEvent::mutable_dev_name() {
  std::string* _s = _internal_mutable_dev_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name)
  return _s;
}
inline const std::string& UfshcdClkGatingFtraceEvent::_internal_dev_name() const {
  return _impl_.dev_name_.Get();
}
inline void UfshcdClkGatingFtraceEvent::_internal_set_dev_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.dev_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UfshcdClkGatingFtraceEvent::_internal_mutable_dev_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dev_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UfshcdClkGatingFtraceEvent::release_dev_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dev_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dev_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UfshcdClkGatingFtraceEvent::set_allocated_dev_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dev_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dev_name_.IsDefault()) {
          _impl_.dev_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name)
}

// optional int32 state = 2;
inline bool UfshcdClkGatingFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UfshcdClkGatingFtraceEvent::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t UfshcdClkGatingFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.UfshcdClkGatingFtraceEvent.state)
  return _internal_state();
}
inline void UfshcdClkGatingFtraceEvent::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.UfshcdClkGatingFtraceEvent.state)
}
inline ::int32_t UfshcdClkGatingFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void UfshcdClkGatingFtraceEvent::_internal_set_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_2epb_2eh
