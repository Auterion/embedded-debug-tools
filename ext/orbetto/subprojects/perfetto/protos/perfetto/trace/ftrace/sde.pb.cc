// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sde.proto

#include "protos/perfetto/trace/ftrace/sde.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trace_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.trace_type_)*/ 0u

  , /*decltype(_impl_.value_)*/ 0

  , /*decltype(_impl_.trace_begin_)*/ 0u
} {}
struct SdeTracingMarkWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeTracingMarkWriteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeTracingMarkWriteFtraceEventDefaultTypeInternal() {}
  union {
    SdeTracingMarkWriteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeTracingMarkWriteFtraceEventDefaultTypeInternal _SdeTracingMarkWriteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.evtlog_tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.tag_id_)*/ 0u
} {}
struct SdeSdeEvtlogFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdeEvtlogFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdeEvtlogFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdeEvtlogFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdeEvtlogFtraceEventDefaultTypeInternal _SdeSdeEvtlogFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bw_ctl_ebi_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bw_ctl_llcc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bw_ctl_mnoc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.core_clk_rate_)*/ 0u

  , /*decltype(_impl_.crtc_)*/ 0u

  , /*decltype(_impl_.ib_ebi_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.ib_llcc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.ib_mnoc_)*/ ::uint64_t{0u}
} {}
struct SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfCalcCrtcFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal _SdeSdePerfCalcCrtcFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bw_ctl_ebi_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bw_ctl_llcc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bw_ctl_mnoc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.core_clk_rate_)*/ 0u

  , /*decltype(_impl_.crtc_)*/ 0u

  , /*decltype(_impl_.per_pipe_ib_ebi_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.per_pipe_ib_llcc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.params_)*/ 0

  , /*decltype(_impl_.stop_req_)*/ 0u

  , /*decltype(_impl_.per_pipe_ib_mnoc_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.update_bus_)*/ 0u

  , /*decltype(_impl_.update_clk_)*/ 0u
} {}
struct SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfCrtcUpdateFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal _SdeSdePerfCrtcUpdateFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fl_)*/ 0u

  , /*decltype(_impl_.fmt_)*/ 0u

  , /*decltype(_impl_.lut_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.lut_usage_)*/ 0u

  , /*decltype(_impl_.pnum_)*/ 0u

  , /*decltype(_impl_.rt_)*/ 0u
} {}
struct SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfSetQosLutsFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal _SdeSdePerfSetQosLutsFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ab_quota_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bus_id_)*/ 0u

  , /*decltype(_impl_.client_)*/ 0

  , /*decltype(_impl_.ib_quota_)*/ ::uint64_t{0u}
} {}
struct SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal() {}
  union {
    SdeSdePerfUpdateBusFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal _SdeSdePerfUpdateBusFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _impl_.trace_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _impl_.trace_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeTracingMarkWriteFtraceEvent, _impl_.trace_begin_),
    1,
    0,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdeEvtlogFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdeEvtlogFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdeEvtlogFtraceEvent, _impl_.evtlog_tag_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdeEvtlogFtraceEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdeEvtlogFtraceEvent, _impl_.tag_id_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.bw_ctl_ebi_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.bw_ctl_llcc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.bw_ctl_mnoc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.core_clk_rate_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.crtc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.ib_ebi_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.ib_llcc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent, _impl_.ib_mnoc_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.bw_ctl_ebi_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.bw_ctl_llcc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.bw_ctl_mnoc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.core_clk_rate_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.crtc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.per_pipe_ib_ebi_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.per_pipe_ib_llcc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.per_pipe_ib_mnoc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.stop_req_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.update_bus_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent, _impl_.update_clk_),
    0,
    1,
    2,
    3,
    4,
    7,
    5,
    6,
    9,
    8,
    10,
    11,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_.fl_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_.fmt_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_.lut_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_.lut_usage_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_.pnum_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent, _impl_.rt_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent, _impl_.ab_quota_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent, _impl_.bus_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent, _impl_.client_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent, _impl_.ib_quota_),
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::SdeTracingMarkWriteFtraceEvent)},
        { 18, 29, -1, sizeof(::perfetto::protos::SdeSdeEvtlogFtraceEvent)},
        { 32, 48, -1, sizeof(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent)},
        { 56, 76, -1, sizeof(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent)},
        { 88, 102, -1, sizeof(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent)},
        { 108, 120, -1, sizeof(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_SdeTracingMarkWriteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SdeSdeEvtlogFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SdeSdePerfCalcCrtcFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SdeSdePerfCrtcUpdateFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SdeSdePerfSetQosLutsFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SdeSdePerfUpdateBusFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/ftrace/sde.proto"
    "\022\017perfetto.protos\"y\n\036SdeTracingMarkWrite"
    "FtraceEvent\022\013\n\003pid\030\001 \001(\005\022\022\n\ntrace_name\030\002"
    " \001(\t\022\022\n\ntrace_type\030\003 \001(\r\022\r\n\005value\030\004 \001(\005\022"
    "\023\n\013trace_begin\030\005 \001(\r\"J\n\027SdeSdeEvtlogFtra"
    "ceEvent\022\022\n\nevtlog_tag\030\001 \001(\t\022\013\n\003pid\030\002 \001(\005"
    "\022\016\n\006tag_id\030\003 \001(\r\"\264\001\n\035SdeSdePerfCalcCrtcF"
    "traceEvent\022\022\n\nbw_ctl_ebi\030\001 \001(\004\022\023\n\013bw_ctl"
    "_llcc\030\002 \001(\004\022\023\n\013bw_ctl_mnoc\030\003 \001(\004\022\025\n\rcore"
    "_clk_rate\030\004 \001(\r\022\014\n\004crtc\030\005 \001(\r\022\016\n\006ib_ebi\030"
    "\006 \001(\004\022\017\n\007ib_llcc\030\007 \001(\004\022\017\n\007ib_mnoc\030\010 \001(\004\""
    "\233\002\n\037SdeSdePerfCrtcUpdateFtraceEvent\022\022\n\nb"
    "w_ctl_ebi\030\001 \001(\004\022\023\n\013bw_ctl_llcc\030\002 \001(\004\022\023\n\013"
    "bw_ctl_mnoc\030\003 \001(\004\022\025\n\rcore_clk_rate\030\004 \001(\r"
    "\022\014\n\004crtc\030\005 \001(\r\022\016\n\006params\030\006 \001(\005\022\027\n\017per_pi"
    "pe_ib_ebi\030\007 \001(\004\022\030\n\020per_pipe_ib_llcc\030\010 \001("
    "\004\022\030\n\020per_pipe_ib_mnoc\030\t \001(\004\022\020\n\010stop_req\030"
    "\n \001(\r\022\022\n\nupdate_bus\030\013 \001(\r\022\022\n\nupdate_clk\030"
    "\014 \001(\r\"t\n\037SdeSdePerfSetQosLutsFtraceEvent"
    "\022\n\n\002fl\030\001 \001(\r\022\013\n\003fmt\030\002 \001(\r\022\013\n\003lut\030\003 \001(\004\022\021"
    "\n\tlut_usage\030\004 \001(\r\022\014\n\004pnum\030\005 \001(\r\022\n\n\002rt\030\006 "
    "\001(\r\"d\n\036SdeSdePerfUpdateBusFtraceEvent\022\020\n"
    "\010ab_quota\030\001 \001(\004\022\016\n\006bus_id\030\002 \001(\r\022\016\n\006clien"
    "t\030\003 \001(\005\022\020\n\010ib_quota\030\004 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto = {
    false,
    false,
    945,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto,
    "protos/perfetto/trace/ftrace/sde.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class SdeTracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeTracingMarkWriteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdeTracingMarkWriteFtraceEvent, _impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trace_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trace_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trace_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SdeTracingMarkWriteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_name_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.trace_type_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.trace_begin_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trace_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trace_name_.Set(from._internal_trace_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.trace_begin_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.trace_begin_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}

inline void SdeTracingMarkWriteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_name_) {}

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.trace_type_) { 0u }

    , decltype(_impl_.value_) { 0 }

    , decltype(_impl_.trace_begin_) { 0u }

  };
  _impl_.trace_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trace_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SdeTracingMarkWriteFtraceEvent::~SdeTracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeTracingMarkWriteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trace_name_.Destroy();
}

void SdeTracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdeTracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.trace_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.trace_begin_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.trace_begin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdeTracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string trace_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trace_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 trace_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_trace_type(&has_bits);
          _impl_.trace_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 trace_begin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_trace_begin(&has_bits);
          _impl_.trace_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdeTracingMarkWriteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_pid(), target);
  }

  // optional string trace_name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_trace_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 trace_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_trace_type(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_value(), target);
  }

  // optional uint32 trace_begin = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_trace_begin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  return target;
}

::size_t SdeTracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trace_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_trace_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional uint32 trace_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_trace_type());
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_value());
    }

    // optional uint32 trace_begin = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_trace_begin());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdeTracingMarkWriteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdeTracingMarkWriteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdeTracingMarkWriteFtraceEvent::GetClassData() const { return &_class_data_; }


void SdeTracingMarkWriteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdeTracingMarkWriteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SdeTracingMarkWriteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_trace_name(from._internal_trace_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.trace_type_ = from._impl_.trace_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.trace_begin_ = from._impl_.trace_begin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdeTracingMarkWriteFtraceEvent::CopyFrom(const SdeTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeTracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void SdeTracingMarkWriteFtraceEvent::InternalSwap(SdeTracingMarkWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_name_, lhs_arena,
                                       &other->_impl_.trace_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeTracingMarkWriteFtraceEvent, _impl_.trace_begin_)
      + sizeof(SdeTracingMarkWriteFtraceEvent::_impl_.trace_begin_)
      - PROTOBUF_FIELD_OFFSET(SdeTracingMarkWriteFtraceEvent, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdeTracingMarkWriteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[0]);
}
// ===================================================================

class SdeSdeEvtlogFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdeEvtlogFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdeSdeEvtlogFtraceEvent, _impl_._has_bits_);
  static void set_has_evtlog_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}
SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SdeSdeEvtlogFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.evtlog_tag_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.tag_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.evtlog_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evtlog_tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.evtlog_tag_.Set(from._internal_evtlog_tag(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tag_id_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.tag_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}

inline void SdeSdeEvtlogFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.evtlog_tag_) {}

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.tag_id_) { 0u }

  };
  _impl_.evtlog_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evtlog_tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SdeSdeEvtlogFtraceEvent::~SdeSdeEvtlogFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdeEvtlogFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.evtlog_tag_.Destroy();
}

void SdeSdeEvtlogFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdeSdeEvtlogFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.evtlog_tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tag_id_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.tag_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdeSdeEvtlogFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string evtlog_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_evtlog_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tag_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_tag_id(&has_bits);
          _impl_.tag_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdeSdeEvtlogFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string evtlog_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_evtlog_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_pid(), target);
  }

  // optional uint32 tag_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_tag_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  return target;
}

::size_t SdeSdeEvtlogFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string evtlog_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_evtlog_tag());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional uint32 tag_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tag_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdeSdeEvtlogFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdeSdeEvtlogFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdeSdeEvtlogFtraceEvent::GetClassData() const { return &_class_data_; }


void SdeSdeEvtlogFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdeSdeEvtlogFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SdeSdeEvtlogFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_evtlog_tag(from._internal_evtlog_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tag_id_ = from._impl_.tag_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdeSdeEvtlogFtraceEvent::CopyFrom(const SdeSdeEvtlogFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdeEvtlogFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdeEvtlogFtraceEvent::InternalSwap(SdeSdeEvtlogFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evtlog_tag_, lhs_arena,
                                       &other->_impl_.evtlog_tag_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdeEvtlogFtraceEvent, _impl_.tag_id_)
      + sizeof(SdeSdeEvtlogFtraceEvent::_impl_.tag_id_)
      - PROTOBUF_FIELD_OFFSET(SdeSdeEvtlogFtraceEvent, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdeSdeEvtlogFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[1]);
}
// ===================================================================

class SdeSdePerfCalcCrtcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfCalcCrtcFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdeSdePerfCalcCrtcFtraceEvent, _impl_._has_bits_);
  static void set_has_bw_ctl_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bw_ctl_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bw_ctl_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_core_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ib_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ib_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ib_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}
SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}

inline void SdeSdePerfCalcCrtcFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bw_ctl_ebi_) { ::uint64_t{0u} }

    , decltype(_impl_.bw_ctl_llcc_) { ::uint64_t{0u} }

    , decltype(_impl_.bw_ctl_mnoc_) { ::uint64_t{0u} }

    , decltype(_impl_.core_clk_rate_) { 0u }

    , decltype(_impl_.crtc_) { 0u }

    , decltype(_impl_.ib_ebi_) { ::uint64_t{0u} }

    , decltype(_impl_.ib_llcc_) { ::uint64_t{0u} }

    , decltype(_impl_.ib_mnoc_) { ::uint64_t{0u} }

  };
}

SdeSdePerfCalcCrtcFtraceEvent::~SdeSdePerfCalcCrtcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfCalcCrtcFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfCalcCrtcFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdeSdePerfCalcCrtcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bw_ctl_ebi_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ib_mnoc_) -
        reinterpret_cast<char*>(&_impl_.bw_ctl_ebi_)) + sizeof(_impl_.ib_mnoc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdeSdePerfCalcCrtcFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bw_ctl_ebi(&has_bits);
          _impl_.bw_ctl_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bw_ctl_llcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bw_ctl_llcc(&has_bits);
          _impl_.bw_ctl_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bw_ctl_mnoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_bw_ctl_mnoc(&has_bits);
          _impl_.bw_ctl_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 core_clk_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_core_clk_rate(&has_bits);
          _impl_.core_clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 crtc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_crtc(&has_bits);
          _impl_.crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ib_ebi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_ib_ebi(&has_bits);
          _impl_.ib_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ib_llcc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_ib_llcc(&has_bits);
          _impl_.ib_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ib_mnoc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_ib_mnoc(&has_bits);
          _impl_.ib_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdeSdePerfCalcCrtcFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 bw_ctl_ebi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_bw_ctl_ebi(), target);
  }

  // optional uint64 bw_ctl_llcc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_bw_ctl_llcc(), target);
  }

  // optional uint64 bw_ctl_mnoc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_bw_ctl_mnoc(), target);
  }

  // optional uint32 core_clk_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_core_clk_rate(), target);
  }

  // optional uint32 crtc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_crtc(), target);
  }

  // optional uint64 ib_ebi = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_ib_ebi(), target);
  }

  // optional uint64 ib_llcc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_ib_llcc(), target);
  }

  // optional uint64 ib_mnoc = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_ib_mnoc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  return target;
}

::size_t SdeSdePerfCalcCrtcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bw_ctl_ebi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bw_ctl_ebi());
    }

    // optional uint64 bw_ctl_llcc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bw_ctl_llcc());
    }

    // optional uint64 bw_ctl_mnoc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bw_ctl_mnoc());
    }

    // optional uint32 core_clk_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_core_clk_rate());
    }

    // optional uint32 crtc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_crtc());
    }

    // optional uint64 ib_ebi = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ib_ebi());
    }

    // optional uint64 ib_llcc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ib_llcc());
    }

    // optional uint64 ib_mnoc = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ib_mnoc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdeSdePerfCalcCrtcFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdeSdePerfCalcCrtcFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdeSdePerfCalcCrtcFtraceEvent::GetClassData() const { return &_class_data_; }


void SdeSdePerfCalcCrtcFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdeSdePerfCalcCrtcFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SdeSdePerfCalcCrtcFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bw_ctl_ebi_ = from._impl_.bw_ctl_ebi_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bw_ctl_llcc_ = from._impl_.bw_ctl_llcc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bw_ctl_mnoc_ = from._impl_.bw_ctl_mnoc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.core_clk_rate_ = from._impl_.core_clk_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.crtc_ = from._impl_.crtc_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ib_ebi_ = from._impl_.ib_ebi_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ib_llcc_ = from._impl_.ib_llcc_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ib_mnoc_ = from._impl_.ib_mnoc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdeSdePerfCalcCrtcFtraceEvent::CopyFrom(const SdeSdePerfCalcCrtcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfCalcCrtcFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfCalcCrtcFtraceEvent::InternalSwap(SdeSdePerfCalcCrtcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfCalcCrtcFtraceEvent, _impl_.ib_mnoc_)
      + sizeof(SdeSdePerfCalcCrtcFtraceEvent::_impl_.ib_mnoc_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfCalcCrtcFtraceEvent, _impl_.bw_ctl_ebi_)>(
          reinterpret_cast<char*>(&_impl_.bw_ctl_ebi_),
          reinterpret_cast<char*>(&other->_impl_.bw_ctl_ebi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdeSdePerfCalcCrtcFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[2]);
}
// ===================================================================

class SdeSdePerfCrtcUpdateFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfCrtcUpdateFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdeSdePerfCrtcUpdateFtraceEvent, _impl_._has_bits_);
  static void set_has_bw_ctl_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bw_ctl_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bw_ctl_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_core_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_per_pipe_ib_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_per_pipe_ib_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_per_pipe_ib_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stop_req(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_update_bus(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_update_clk(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}
SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}

inline void SdeSdePerfCrtcUpdateFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bw_ctl_ebi_) { ::uint64_t{0u} }

    , decltype(_impl_.bw_ctl_llcc_) { ::uint64_t{0u} }

    , decltype(_impl_.bw_ctl_mnoc_) { ::uint64_t{0u} }

    , decltype(_impl_.core_clk_rate_) { 0u }

    , decltype(_impl_.crtc_) { 0u }

    , decltype(_impl_.per_pipe_ib_ebi_) { ::uint64_t{0u} }

    , decltype(_impl_.per_pipe_ib_llcc_) { ::uint64_t{0u} }

    , decltype(_impl_.params_) { 0 }

    , decltype(_impl_.stop_req_) { 0u }

    , decltype(_impl_.per_pipe_ib_mnoc_) { ::uint64_t{0u} }

    , decltype(_impl_.update_bus_) { 0u }

    , decltype(_impl_.update_clk_) { 0u }

  };
}

SdeSdePerfCrtcUpdateFtraceEvent::~SdeSdePerfCrtcUpdateFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfCrtcUpdateFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfCrtcUpdateFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdeSdePerfCrtcUpdateFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bw_ctl_ebi_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.params_) -
        reinterpret_cast<char*>(&_impl_.bw_ctl_ebi_)) + sizeof(_impl_.params_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.stop_req_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.update_clk_) -
        reinterpret_cast<char*>(&_impl_.stop_req_)) + sizeof(_impl_.update_clk_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdeSdePerfCrtcUpdateFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bw_ctl_ebi(&has_bits);
          _impl_.bw_ctl_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bw_ctl_llcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bw_ctl_llcc(&has_bits);
          _impl_.bw_ctl_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bw_ctl_mnoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_bw_ctl_mnoc(&has_bits);
          _impl_.bw_ctl_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 core_clk_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_core_clk_rate(&has_bits);
          _impl_.core_clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 crtc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_crtc(&has_bits);
          _impl_.crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_params(&has_bits);
          _impl_.params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 per_pipe_ib_ebi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_per_pipe_ib_ebi(&has_bits);
          _impl_.per_pipe_ib_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 per_pipe_ib_llcc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_per_pipe_ib_llcc(&has_bits);
          _impl_.per_pipe_ib_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 per_pipe_ib_mnoc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_per_pipe_ib_mnoc(&has_bits);
          _impl_.per_pipe_ib_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 stop_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_stop_req(&has_bits);
          _impl_.stop_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 update_bus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_update_bus(&has_bits);
          _impl_.update_bus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 update_clk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_update_clk(&has_bits);
          _impl_.update_clk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdeSdePerfCrtcUpdateFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 bw_ctl_ebi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_bw_ctl_ebi(), target);
  }

  // optional uint64 bw_ctl_llcc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_bw_ctl_llcc(), target);
  }

  // optional uint64 bw_ctl_mnoc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_bw_ctl_mnoc(), target);
  }

  // optional uint32 core_clk_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_core_clk_rate(), target);
  }

  // optional uint32 crtc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_crtc(), target);
  }

  // optional int32 params = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_params(), target);
  }

  // optional uint64 per_pipe_ib_ebi = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_per_pipe_ib_ebi(), target);
  }

  // optional uint64 per_pipe_ib_llcc = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_per_pipe_ib_llcc(), target);
  }

  // optional uint64 per_pipe_ib_mnoc = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_per_pipe_ib_mnoc(), target);
  }

  // optional uint32 stop_req = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_stop_req(), target);
  }

  // optional uint32 update_bus = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_update_bus(), target);
  }

  // optional uint32 update_clk = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_update_clk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  return target;
}

::size_t SdeSdePerfCrtcUpdateFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bw_ctl_ebi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bw_ctl_ebi());
    }

    // optional uint64 bw_ctl_llcc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bw_ctl_llcc());
    }

    // optional uint64 bw_ctl_mnoc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bw_ctl_mnoc());
    }

    // optional uint32 core_clk_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_core_clk_rate());
    }

    // optional uint32 crtc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_crtc());
    }

    // optional uint64 per_pipe_ib_ebi = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_per_pipe_ib_ebi());
    }

    // optional uint64 per_pipe_ib_llcc = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_per_pipe_ib_llcc());
    }

    // optional int32 params = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_params());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 stop_req = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_stop_req());
    }

    // optional uint64 per_pipe_ib_mnoc = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_per_pipe_ib_mnoc());
    }

    // optional uint32 update_bus = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_update_bus());
    }

    // optional uint32 update_clk = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_update_clk());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdeSdePerfCrtcUpdateFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdeSdePerfCrtcUpdateFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdeSdePerfCrtcUpdateFtraceEvent::GetClassData() const { return &_class_data_; }


void SdeSdePerfCrtcUpdateFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdeSdePerfCrtcUpdateFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SdeSdePerfCrtcUpdateFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bw_ctl_ebi_ = from._impl_.bw_ctl_ebi_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bw_ctl_llcc_ = from._impl_.bw_ctl_llcc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bw_ctl_mnoc_ = from._impl_.bw_ctl_mnoc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.core_clk_rate_ = from._impl_.core_clk_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.crtc_ = from._impl_.crtc_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.per_pipe_ib_ebi_ = from._impl_.per_pipe_ib_ebi_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.per_pipe_ib_llcc_ = from._impl_.per_pipe_ib_llcc_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.params_ = from._impl_.params_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stop_req_ = from._impl_.stop_req_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.per_pipe_ib_mnoc_ = from._impl_.per_pipe_ib_mnoc_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.update_bus_ = from._impl_.update_bus_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.update_clk_ = from._impl_.update_clk_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdeSdePerfCrtcUpdateFtraceEvent::CopyFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfCrtcUpdateFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfCrtcUpdateFtraceEvent::InternalSwap(SdeSdePerfCrtcUpdateFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfCrtcUpdateFtraceEvent, _impl_.update_clk_)
      + sizeof(SdeSdePerfCrtcUpdateFtraceEvent::_impl_.update_clk_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfCrtcUpdateFtraceEvent, _impl_.bw_ctl_ebi_)>(
          reinterpret_cast<char*>(&_impl_.bw_ctl_ebi_),
          reinterpret_cast<char*>(&other->_impl_.bw_ctl_ebi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdeSdePerfCrtcUpdateFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[3]);
}
// ===================================================================

class SdeSdePerfSetQosLutsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfSetQosLutsFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdeSdePerfSetQosLutsFtraceEvent, _impl_._has_bits_);
  static void set_has_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fmt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lut(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lut_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}
SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}

inline void SdeSdePerfSetQosLutsFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fl_) { 0u }

    , decltype(_impl_.fmt_) { 0u }

    , decltype(_impl_.lut_) { ::uint64_t{0u} }

    , decltype(_impl_.lut_usage_) { 0u }

    , decltype(_impl_.pnum_) { 0u }

    , decltype(_impl_.rt_) { 0u }

  };
}

SdeSdePerfSetQosLutsFtraceEvent::~SdeSdePerfSetQosLutsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfSetQosLutsFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfSetQosLutsFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdeSdePerfSetQosLutsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.fl_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rt_) -
        reinterpret_cast<char*>(&_impl_.fl_)) + sizeof(_impl_.rt_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdeSdePerfSetQosLutsFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_fl(&has_bits);
          _impl_.fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 fmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_fmt(&has_bits);
          _impl_.fmt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 lut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_lut(&has_bits);
          _impl_.lut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 lut_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_lut_usage(&has_bits);
          _impl_.lut_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 pnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_pnum(&has_bits);
          _impl_.pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 rt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_rt(&has_bits);
          _impl_.rt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdeSdePerfSetQosLutsFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_fl(), target);
  }

  // optional uint32 fmt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_fmt(), target);
  }

  // optional uint64 lut = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_lut(), target);
  }

  // optional uint32 lut_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_lut_usage(), target);
  }

  // optional uint32 pnum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_pnum(), target);
  }

  // optional uint32 rt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_rt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  return target;
}

::size_t SdeSdePerfSetQosLutsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 fl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fl());
    }

    // optional uint32 fmt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_fmt());
    }

    // optional uint64 lut = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_lut());
    }

    // optional uint32 lut_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_lut_usage());
    }

    // optional uint32 pnum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pnum());
    }

    // optional uint32 rt = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdeSdePerfSetQosLutsFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdeSdePerfSetQosLutsFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdeSdePerfSetQosLutsFtraceEvent::GetClassData() const { return &_class_data_; }


void SdeSdePerfSetQosLutsFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdeSdePerfSetQosLutsFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SdeSdePerfSetQosLutsFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fl_ = from._impl_.fl_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fmt_ = from._impl_.fmt_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lut_ = from._impl_.lut_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lut_usage_ = from._impl_.lut_usage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pnum_ = from._impl_.pnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rt_ = from._impl_.rt_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdeSdePerfSetQosLutsFtraceEvent::CopyFrom(const SdeSdePerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfSetQosLutsFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfSetQosLutsFtraceEvent::InternalSwap(SdeSdePerfSetQosLutsFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfSetQosLutsFtraceEvent, _impl_.rt_)
      + sizeof(SdeSdePerfSetQosLutsFtraceEvent::_impl_.rt_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfSetQosLutsFtraceEvent, _impl_.fl_)>(
          reinterpret_cast<char*>(&_impl_.fl_),
          reinterpret_cast<char*>(&other->_impl_.fl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdeSdePerfSetQosLutsFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[4]);
}
// ===================================================================

class SdeSdePerfUpdateBusFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfUpdateBusFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SdeSdePerfUpdateBusFtraceEvent, _impl_._has_bits_);
  static void set_has_ab_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bus_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ib_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}
SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}

inline void SdeSdePerfUpdateBusFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ab_quota_) { ::uint64_t{0u} }

    , decltype(_impl_.bus_id_) { 0u }

    , decltype(_impl_.client_) { 0 }

    , decltype(_impl_.ib_quota_) { ::uint64_t{0u} }

  };
}

SdeSdePerfUpdateBusFtraceEvent::~SdeSdePerfUpdateBusFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SdeSdePerfUpdateBusFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SdeSdePerfUpdateBusFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SdeSdePerfUpdateBusFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.ab_quota_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ib_quota_) -
        reinterpret_cast<char*>(&_impl_.ab_quota_)) + sizeof(_impl_.ib_quota_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdeSdePerfUpdateBusFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ab_quota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ab_quota(&has_bits);
          _impl_.ab_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 bus_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_bus_id(&has_bits);
          _impl_.bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_client(&has_bits);
          _impl_.client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ib_quota = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ib_quota(&has_bits);
          _impl_.ib_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SdeSdePerfUpdateBusFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ab_quota = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_ab_quota(), target);
  }

  // optional uint32 bus_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_bus_id(), target);
  }

  // optional int32 client = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_client(), target);
  }

  // optional uint64 ib_quota = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_ib_quota(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  return target;
}

::size_t SdeSdePerfUpdateBusFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 ab_quota = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ab_quota());
    }

    // optional uint32 bus_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bus_id());
    }

    // optional int32 client = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_client());
    }

    // optional uint64 ib_quota = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ib_quota());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SdeSdePerfUpdateBusFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SdeSdePerfUpdateBusFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SdeSdePerfUpdateBusFtraceEvent::GetClassData() const { return &_class_data_; }


void SdeSdePerfUpdateBusFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SdeSdePerfUpdateBusFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SdeSdePerfUpdateBusFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ab_quota_ = from._impl_.ab_quota_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bus_id_ = from._impl_.bus_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_ = from._impl_.client_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ib_quota_ = from._impl_.ib_quota_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SdeSdePerfUpdateBusFtraceEvent::CopyFrom(const SdeSdePerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfUpdateBusFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfUpdateBusFtraceEvent::InternalSwap(SdeSdePerfUpdateBusFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SdeSdePerfUpdateBusFtraceEvent, _impl_.ib_quota_)
      + sizeof(SdeSdePerfUpdateBusFtraceEvent::_impl_.ib_quota_)
      - PROTOBUF_FIELD_OFFSET(SdeSdePerfUpdateBusFtraceEvent, _impl_.ab_quota_)>(
          reinterpret_cast<char*>(&_impl_.ab_quota_),
          reinterpret_cast<char*>(&other->_impl_.ab_quota_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SdeSdePerfUpdateBusFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeTracingMarkWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdeEvtlogFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
