// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/v4l2.proto

#include "protos/perfetto/trace/ftrace/v4l2.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytesused_)*/ 0u

  , /*decltype(_impl_.field_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.minor_)*/ 0

  , /*decltype(_impl_.sequence_)*/ 0u

  , /*decltype(_impl_.timecode_flags_)*/ 0u

  , /*decltype(_impl_.timecode_frames_)*/ 0u

  , /*decltype(_impl_.timecode_hours_)*/ 0u

  , /*decltype(_impl_.timecode_minutes_)*/ 0u

  , /*decltype(_impl_.timecode_seconds_)*/ 0u

  , /*decltype(_impl_.timecode_type_)*/ 0u

  , /*decltype(_impl_.timecode_userbits0_)*/ 0u

  , /*decltype(_impl_.timecode_userbits1_)*/ 0u

  , /*decltype(_impl_.timecode_userbits2_)*/ 0u

  , /*decltype(_impl_.timecode_userbits3_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0u
} {}
struct V4l2QbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V4l2QbufFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~V4l2QbufFtraceEventDefaultTypeInternal() {}
  union {
    V4l2QbufFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V4l2QbufFtraceEventDefaultTypeInternal _V4l2QbufFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytesused_)*/ 0u

  , /*decltype(_impl_.field_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.minor_)*/ 0

  , /*decltype(_impl_.sequence_)*/ 0u

  , /*decltype(_impl_.timecode_flags_)*/ 0u

  , /*decltype(_impl_.timecode_frames_)*/ 0u

  , /*decltype(_impl_.timecode_hours_)*/ 0u

  , /*decltype(_impl_.timecode_minutes_)*/ 0u

  , /*decltype(_impl_.timecode_seconds_)*/ 0u

  , /*decltype(_impl_.timecode_type_)*/ 0u

  , /*decltype(_impl_.timecode_userbits0_)*/ 0u

  , /*decltype(_impl_.timecode_userbits1_)*/ 0u

  , /*decltype(_impl_.timecode_userbits2_)*/ 0u

  , /*decltype(_impl_.timecode_userbits3_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0u
} {}
struct V4l2DqbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V4l2DqbufFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~V4l2DqbufFtraceEventDefaultTypeInternal() {}
  union {
    V4l2DqbufFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V4l2DqbufFtraceEventDefaultTypeInternal _V4l2DqbufFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.minor_)*/ 0

  , /*decltype(_impl_.sequence_)*/ 0u

  , /*decltype(_impl_.timecode_flags_)*/ 0u

  , /*decltype(_impl_.timecode_frames_)*/ 0u

  , /*decltype(_impl_.timecode_hours_)*/ 0u

  , /*decltype(_impl_.timecode_minutes_)*/ 0u

  , /*decltype(_impl_.timecode_seconds_)*/ 0u

  , /*decltype(_impl_.timecode_type_)*/ 0u

  , /*decltype(_impl_.timecode_userbits0_)*/ 0u

  , /*decltype(_impl_.timecode_userbits1_)*/ 0u

  , /*decltype(_impl_.timecode_userbits2_)*/ 0u

  , /*decltype(_impl_.timecode_userbits3_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct Vb2V4l2BufQueueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2BufQueueFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2BufQueueFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2BufQueueFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2BufQueueFtraceEventDefaultTypeInternal _Vb2V4l2BufQueueFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.minor_)*/ 0

  , /*decltype(_impl_.sequence_)*/ 0u

  , /*decltype(_impl_.timecode_flags_)*/ 0u

  , /*decltype(_impl_.timecode_frames_)*/ 0u

  , /*decltype(_impl_.timecode_hours_)*/ 0u

  , /*decltype(_impl_.timecode_minutes_)*/ 0u

  , /*decltype(_impl_.timecode_seconds_)*/ 0u

  , /*decltype(_impl_.timecode_type_)*/ 0u

  , /*decltype(_impl_.timecode_userbits0_)*/ 0u

  , /*decltype(_impl_.timecode_userbits1_)*/ 0u

  , /*decltype(_impl_.timecode_userbits2_)*/ 0u

  , /*decltype(_impl_.timecode_userbits3_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct Vb2V4l2BufDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2BufDoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2BufDoneFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2BufDoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2BufDoneFtraceEventDefaultTypeInternal _Vb2V4l2BufDoneFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.minor_)*/ 0

  , /*decltype(_impl_.sequence_)*/ 0u

  , /*decltype(_impl_.timecode_flags_)*/ 0u

  , /*decltype(_impl_.timecode_frames_)*/ 0u

  , /*decltype(_impl_.timecode_hours_)*/ 0u

  , /*decltype(_impl_.timecode_minutes_)*/ 0u

  , /*decltype(_impl_.timecode_seconds_)*/ 0u

  , /*decltype(_impl_.timecode_type_)*/ 0u

  , /*decltype(_impl_.timecode_userbits0_)*/ 0u

  , /*decltype(_impl_.timecode_userbits1_)*/ 0u

  , /*decltype(_impl_.timecode_userbits2_)*/ 0u

  , /*decltype(_impl_.timecode_userbits3_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct Vb2V4l2QbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2QbufFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2QbufFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2QbufFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2QbufFtraceEventDefaultTypeInternal _Vb2V4l2QbufFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.minor_)*/ 0

  , /*decltype(_impl_.sequence_)*/ 0u

  , /*decltype(_impl_.timecode_flags_)*/ 0u

  , /*decltype(_impl_.timecode_frames_)*/ 0u

  , /*decltype(_impl_.timecode_hours_)*/ 0u

  , /*decltype(_impl_.timecode_minutes_)*/ 0u

  , /*decltype(_impl_.timecode_seconds_)*/ 0u

  , /*decltype(_impl_.timecode_type_)*/ 0u

  , /*decltype(_impl_.timecode_userbits0_)*/ 0u

  , /*decltype(_impl_.timecode_userbits1_)*/ 0u

  , /*decltype(_impl_.timecode_userbits2_)*/ 0u

  , /*decltype(_impl_.timecode_userbits3_)*/ 0u

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct Vb2V4l2DqbufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vb2V4l2DqbufFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vb2V4l2DqbufFtraceEventDefaultTypeInternal() {}
  union {
    Vb2V4l2DqbufFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vb2V4l2DqbufFtraceEventDefaultTypeInternal _Vb2V4l2DqbufFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.bytesused_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_hours_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_minutes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_seconds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_userbits0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_userbits1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_userbits2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timecode_userbits3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2QbufFtraceEvent, _impl_.type_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.bytesused_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_hours_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_minutes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_seconds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_userbits0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_userbits1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_userbits2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timecode_userbits3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::V4l2DqbufFtraceEvent, _impl_.type_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_hours_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_minutes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_seconds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_userbits0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_userbits1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_userbits2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timecode_userbits3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent, _impl_.timestamp_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_hours_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_minutes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_seconds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_userbits0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_userbits1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_userbits2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timecode_userbits3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent, _impl_.timestamp_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_hours_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_minutes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_seconds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_userbits0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_userbits1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_userbits2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timecode_userbits3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2QbufFtraceEvent, _impl_.timestamp_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_hours_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_minutes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_seconds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_userbits0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_userbits1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_userbits2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timecode_userbits3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Vb2V4l2DqbufFtraceEvent, _impl_.timestamp_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 26, -1, sizeof(::perfetto::protos::V4l2QbufFtraceEvent)},
        { 44, 70, -1, sizeof(::perfetto::protos::V4l2DqbufFtraceEvent)},
        { 88, 111, -1, sizeof(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent)},
        { 126, 149, -1, sizeof(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent)},
        { 164, 187, -1, sizeof(::perfetto::protos::Vb2V4l2QbufFtraceEvent)},
        { 202, 225, -1, sizeof(::perfetto::protos::Vb2V4l2DqbufFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_V4l2QbufFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_V4l2DqbufFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_Vb2V4l2BufQueueFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_Vb2V4l2BufDoneFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_Vb2V4l2QbufFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_Vb2V4l2DqbufFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'protos/perfetto/trace/ftrace/v4l2.prot"
    "o\022\017perfetto.protos\"\233\003\n\023V4l2QbufFtraceEve"
    "nt\022\021\n\tbytesused\030\001 \001(\r\022\r\n\005field\030\002 \001(\r\022\r\n\005"
    "flags\030\003 \001(\r\022\r\n\005index\030\004 \001(\r\022\r\n\005minor\030\005 \001("
    "\005\022\020\n\010sequence\030\006 \001(\r\022\026\n\016timecode_flags\030\007 "
    "\001(\r\022\027\n\017timecode_frames\030\010 \001(\r\022\026\n\016timecode"
    "_hours\030\t \001(\r\022\030\n\020timecode_minutes\030\n \001(\r\022\030"
    "\n\020timecode_seconds\030\013 \001(\r\022\025\n\rtimecode_typ"
    "e\030\014 \001(\r\022\032\n\022timecode_userbits0\030\r \001(\r\022\032\n\022t"
    "imecode_userbits1\030\016 \001(\r\022\032\n\022timecode_user"
    "bits2\030\017 \001(\r\022\032\n\022timecode_userbits3\030\020 \001(\r\022"
    "\021\n\ttimestamp\030\021 \001(\003\022\014\n\004type\030\022 \001(\r\"\234\003\n\024V4l"
    "2DqbufFtraceEvent\022\021\n\tbytesused\030\001 \001(\r\022\r\n\005"
    "field\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\r\n\005index\030\004 \001("
    "\r\022\r\n\005minor\030\005 \001(\005\022\020\n\010sequence\030\006 \001(\r\022\026\n\016ti"
    "mecode_flags\030\007 \001(\r\022\027\n\017timecode_frames\030\010 "
    "\001(\r\022\026\n\016timecode_hours\030\t \001(\r\022\030\n\020timecode_"
    "minutes\030\n \001(\r\022\030\n\020timecode_seconds\030\013 \001(\r\022"
    "\025\n\rtimecode_type\030\014 \001(\r\022\032\n\022timecode_userb"
    "its0\030\r \001(\r\022\032\n\022timecode_userbits1\030\016 \001(\r\022\032"
    "\n\022timecode_userbits2\030\017 \001(\r\022\032\n\022timecode_u"
    "serbits3\030\020 \001(\r\022\021\n\ttimestamp\030\021 \001(\003\022\014\n\004typ"
    "e\030\022 \001(\r\"\362\002\n\032Vb2V4l2BufQueueFtraceEvent\022\r"
    "\n\005field\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022\r\n\005minor\030\003 "
    "\001(\005\022\020\n\010sequence\030\004 \001(\r\022\026\n\016timecode_flags\030"
    "\005 \001(\r\022\027\n\017timecode_frames\030\006 \001(\r\022\026\n\016timeco"
    "de_hours\030\007 \001(\r\022\030\n\020timecode_minutes\030\010 \001(\r"
    "\022\030\n\020timecode_seconds\030\t \001(\r\022\025\n\rtimecode_t"
    "ype\030\n \001(\r\022\032\n\022timecode_userbits0\030\013 \001(\r\022\032\n"
    "\022timecode_userbits1\030\014 \001(\r\022\032\n\022timecode_us"
    "erbits2\030\r \001(\r\022\032\n\022timecode_userbits3\030\016 \001("
    "\r\022\021\n\ttimestamp\030\017 \001(\003\"\361\002\n\031Vb2V4l2BufDoneF"
    "traceEvent\022\r\n\005field\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r"
    "\022\r\n\005minor\030\003 \001(\005\022\020\n\010sequence\030\004 \001(\r\022\026\n\016tim"
    "ecode_flags\030\005 \001(\r\022\027\n\017timecode_frames\030\006 \001"
    "(\r\022\026\n\016timecode_hours\030\007 \001(\r\022\030\n\020timecode_m"
    "inutes\030\010 \001(\r\022\030\n\020timecode_seconds\030\t \001(\r\022\025"
    "\n\rtimecode_type\030\n \001(\r\022\032\n\022timecode_userbi"
    "ts0\030\013 \001(\r\022\032\n\022timecode_userbits1\030\014 \001(\r\022\032\n"
    "\022timecode_userbits2\030\r \001(\r\022\032\n\022timecode_us"
    "erbits3\030\016 \001(\r\022\021\n\ttimestamp\030\017 \001(\003\"\356\002\n\026Vb2"
    "V4l2QbufFtraceEvent\022\r\n\005field\030\001 \001(\r\022\r\n\005fl"
    "ags\030\002 \001(\r\022\r\n\005minor\030\003 \001(\005\022\020\n\010sequence\030\004 \001"
    "(\r\022\026\n\016timecode_flags\030\005 \001(\r\022\027\n\017timecode_f"
    "rames\030\006 \001(\r\022\026\n\016timecode_hours\030\007 \001(\r\022\030\n\020t"
    "imecode_minutes\030\010 \001(\r\022\030\n\020timecode_second"
    "s\030\t \001(\r\022\025\n\rtimecode_type\030\n \001(\r\022\032\n\022timeco"
    "de_userbits0\030\013 \001(\r\022\032\n\022timecode_userbits1"
    "\030\014 \001(\r\022\032\n\022timecode_userbits2\030\r \001(\r\022\032\n\022ti"
    "mecode_userbits3\030\016 \001(\r\022\021\n\ttimestamp\030\017 \001("
    "\003\"\357\002\n\027Vb2V4l2DqbufFtraceEvent\022\r\n\005field\030\001"
    " \001(\r\022\r\n\005flags\030\002 \001(\r\022\r\n\005minor\030\003 \001(\005\022\020\n\010se"
    "quence\030\004 \001(\r\022\026\n\016timecode_flags\030\005 \001(\r\022\027\n\017"
    "timecode_frames\030\006 \001(\r\022\026\n\016timecode_hours\030"
    "\007 \001(\r\022\030\n\020timecode_minutes\030\010 \001(\r\022\030\n\020timec"
    "ode_seconds\030\t \001(\r\022\025\n\rtimecode_type\030\n \001(\r"
    "\022\032\n\022timecode_userbits0\030\013 \001(\r\022\032\n\022timecode"
    "_userbits1\030\014 \001(\r\022\032\n\022timecode_userbits2\030\r"
    " \001(\r\022\032\n\022timecode_userbits3\030\016 \001(\r\022\021\n\ttime"
    "stamp\030\017 \001(\003"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto = {
    false,
    false,
    2371,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto,
    "protos/perfetto/trace/ftrace/v4l2.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class V4l2QbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<V4l2QbufFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(V4l2QbufFtraceEvent, _impl_._has_bits_);
  static void set_has_bytesused(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.V4l2QbufFtraceEvent)
}
V4l2QbufFtraceEvent::V4l2QbufFtraceEvent(const V4l2QbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.V4l2QbufFtraceEvent)
}

inline void V4l2QbufFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytesused_) { 0u }

    , decltype(_impl_.field_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.minor_) { 0 }

    , decltype(_impl_.sequence_) { 0u }

    , decltype(_impl_.timecode_flags_) { 0u }

    , decltype(_impl_.timecode_frames_) { 0u }

    , decltype(_impl_.timecode_hours_) { 0u }

    , decltype(_impl_.timecode_minutes_) { 0u }

    , decltype(_impl_.timecode_seconds_) { 0u }

    , decltype(_impl_.timecode_type_) { 0u }

    , decltype(_impl_.timecode_userbits0_) { 0u }

    , decltype(_impl_.timecode_userbits1_) { 0u }

    , decltype(_impl_.timecode_userbits2_) { 0u }

    , decltype(_impl_.timecode_userbits3_) { 0u }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0u }

  };
}

V4l2QbufFtraceEvent::~V4l2QbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.V4l2QbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V4l2QbufFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void V4l2QbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V4l2QbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.V4l2QbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bytesused_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_frames_) -
        reinterpret_cast<char*>(&_impl_.bytesused_)) + sizeof(_impl_.timecode_frames_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.timecode_hours_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_userbits3_) -
        reinterpret_cast<char*>(&_impl_.timecode_hours_)) + sizeof(_impl_.timecode_userbits3_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V4l2QbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bytesused = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytesused(&has_bits);
          _impl_.bytesused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_frames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_hours = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_minutes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_seconds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits3 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* V4l2QbufFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.V4l2QbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bytesused = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_bytesused(), target);
  }

  // optional uint32 field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_field(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_flags(), target);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_index(), target);
  }

  // optional int32 minor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        17, this->_internal_timestamp(), target);
  }

  // optional uint32 type = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.V4l2QbufFtraceEvent)
  return target;
}

::size_t V4l2QbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.V4l2QbufFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 bytesused = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bytesused());
    }

    // optional uint32 field = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_field());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
    }

    // optional int32 minor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor());
    }

    // optional uint32 sequence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_frames());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 timecode_hours = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_minutes());
    }

    // optional uint32 timecode_seconds = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_timecode_userbits3());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int64 timestamp = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_timestamp());
    }

    // optional uint32 type = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V4l2QbufFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    V4l2QbufFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V4l2QbufFtraceEvent::GetClassData() const { return &_class_data_; }


void V4l2QbufFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<V4l2QbufFtraceEvent*>(&to_msg);
  auto& from = static_cast<const V4l2QbufFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.V4l2QbufFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bytesused_ = from._impl_.bytesused_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V4l2QbufFtraceEvent::CopyFrom(const V4l2QbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.V4l2QbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4l2QbufFtraceEvent::IsInitialized() const {
  return true;
}

void V4l2QbufFtraceEvent::InternalSwap(V4l2QbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V4l2QbufFtraceEvent, _impl_.type_)
      + sizeof(V4l2QbufFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(V4l2QbufFtraceEvent, _impl_.bytesused_)>(
          reinterpret_cast<char*>(&_impl_.bytesused_),
          reinterpret_cast<char*>(&other->_impl_.bytesused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V4l2QbufFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[0]);
}
// ===================================================================

class V4l2DqbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<V4l2DqbufFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(V4l2DqbufFtraceEvent, _impl_._has_bits_);
  static void set_has_bytesused(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.V4l2DqbufFtraceEvent)
}
V4l2DqbufFtraceEvent::V4l2DqbufFtraceEvent(const V4l2DqbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.V4l2DqbufFtraceEvent)
}

inline void V4l2DqbufFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytesused_) { 0u }

    , decltype(_impl_.field_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.minor_) { 0 }

    , decltype(_impl_.sequence_) { 0u }

    , decltype(_impl_.timecode_flags_) { 0u }

    , decltype(_impl_.timecode_frames_) { 0u }

    , decltype(_impl_.timecode_hours_) { 0u }

    , decltype(_impl_.timecode_minutes_) { 0u }

    , decltype(_impl_.timecode_seconds_) { 0u }

    , decltype(_impl_.timecode_type_) { 0u }

    , decltype(_impl_.timecode_userbits0_) { 0u }

    , decltype(_impl_.timecode_userbits1_) { 0u }

    , decltype(_impl_.timecode_userbits2_) { 0u }

    , decltype(_impl_.timecode_userbits3_) { 0u }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0u }

  };
}

V4l2DqbufFtraceEvent::~V4l2DqbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.V4l2DqbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V4l2DqbufFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void V4l2DqbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void V4l2DqbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.V4l2DqbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bytesused_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_frames_) -
        reinterpret_cast<char*>(&_impl_.bytesused_)) + sizeof(_impl_.timecode_frames_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.timecode_hours_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_userbits3_) -
        reinterpret_cast<char*>(&_impl_.timecode_hours_)) + sizeof(_impl_.timecode_userbits3_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V4l2DqbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bytesused = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytesused(&has_bits);
          _impl_.bytesused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_frames = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_hours = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_minutes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_seconds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits3 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* V4l2DqbufFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.V4l2DqbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bytesused = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_bytesused(), target);
  }

  // optional uint32 field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_field(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_flags(), target);
  }

  // optional uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_index(), target);
  }

  // optional int32 minor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        17, this->_internal_timestamp(), target);
  }

  // optional uint32 type = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.V4l2DqbufFtraceEvent)
  return target;
}

::size_t V4l2DqbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.V4l2DqbufFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 bytesused = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bytesused());
    }

    // optional uint32 field = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_field());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
    }

    // optional int32 minor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor());
    }

    // optional uint32 sequence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_frames());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 timecode_hours = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_minutes());
    }

    // optional uint32 timecode_seconds = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_timecode_userbits3());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int64 timestamp = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_timestamp());
    }

    // optional uint32 type = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V4l2DqbufFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    V4l2DqbufFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V4l2DqbufFtraceEvent::GetClassData() const { return &_class_data_; }


void V4l2DqbufFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<V4l2DqbufFtraceEvent*>(&to_msg);
  auto& from = static_cast<const V4l2DqbufFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.V4l2DqbufFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bytesused_ = from._impl_.bytesused_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V4l2DqbufFtraceEvent::CopyFrom(const V4l2DqbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.V4l2DqbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4l2DqbufFtraceEvent::IsInitialized() const {
  return true;
}

void V4l2DqbufFtraceEvent::InternalSwap(V4l2DqbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V4l2DqbufFtraceEvent, _impl_.type_)
      + sizeof(V4l2DqbufFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(V4l2DqbufFtraceEvent, _impl_.bytesused_)>(
          reinterpret_cast<char*>(&_impl_.bytesused_),
          reinterpret_cast<char*>(&other->_impl_.bytesused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V4l2DqbufFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[1]);
}
// ===================================================================

class Vb2V4l2BufQueueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2BufQueueFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vb2V4l2BufQueueFtraceEvent, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
}
Vb2V4l2BufQueueFtraceEvent::Vb2V4l2BufQueueFtraceEvent(const Vb2V4l2BufQueueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
}

inline void Vb2V4l2BufQueueFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.minor_) { 0 }

    , decltype(_impl_.sequence_) { 0u }

    , decltype(_impl_.timecode_flags_) { 0u }

    , decltype(_impl_.timecode_frames_) { 0u }

    , decltype(_impl_.timecode_hours_) { 0u }

    , decltype(_impl_.timecode_minutes_) { 0u }

    , decltype(_impl_.timecode_seconds_) { 0u }

    , decltype(_impl_.timecode_type_) { 0u }

    , decltype(_impl_.timecode_userbits0_) { 0u }

    , decltype(_impl_.timecode_userbits1_) { 0u }

    , decltype(_impl_.timecode_userbits2_) { 0u }

    , decltype(_impl_.timecode_userbits3_) { 0u }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
}

Vb2V4l2BufQueueFtraceEvent::~Vb2V4l2BufQueueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2BufQueueFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2BufQueueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2BufQueueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vb2V4l2BufQueueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vb2V4l2BufQueueFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  return target;
}

::size_t Vb2V4l2BufQueueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vb2V4l2BufQueueFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vb2V4l2BufQueueFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vb2V4l2BufQueueFtraceEvent::GetClassData() const { return &_class_data_; }


void Vb2V4l2BufQueueFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vb2V4l2BufQueueFtraceEvent*>(&to_msg);
  auto& from = static_cast<const Vb2V4l2BufQueueFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vb2V4l2BufQueueFtraceEvent::CopyFrom(const Vb2V4l2BufQueueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2BufQueueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2BufQueueFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2BufQueueFtraceEvent::InternalSwap(Vb2V4l2BufQueueFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2BufQueueFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2BufQueueFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2BufQueueFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vb2V4l2BufQueueFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[2]);
}
// ===================================================================

class Vb2V4l2BufDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2BufDoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vb2V4l2BufDoneFtraceEvent, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
}
Vb2V4l2BufDoneFtraceEvent::Vb2V4l2BufDoneFtraceEvent(const Vb2V4l2BufDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
}

inline void Vb2V4l2BufDoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.minor_) { 0 }

    , decltype(_impl_.sequence_) { 0u }

    , decltype(_impl_.timecode_flags_) { 0u }

    , decltype(_impl_.timecode_frames_) { 0u }

    , decltype(_impl_.timecode_hours_) { 0u }

    , decltype(_impl_.timecode_minutes_) { 0u }

    , decltype(_impl_.timecode_seconds_) { 0u }

    , decltype(_impl_.timecode_type_) { 0u }

    , decltype(_impl_.timecode_userbits0_) { 0u }

    , decltype(_impl_.timecode_userbits1_) { 0u }

    , decltype(_impl_.timecode_userbits2_) { 0u }

    , decltype(_impl_.timecode_userbits3_) { 0u }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
}

Vb2V4l2BufDoneFtraceEvent::~Vb2V4l2BufDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2BufDoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2BufDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2BufDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vb2V4l2BufDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vb2V4l2BufDoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  return target;
}

::size_t Vb2V4l2BufDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vb2V4l2BufDoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vb2V4l2BufDoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vb2V4l2BufDoneFtraceEvent::GetClassData() const { return &_class_data_; }


void Vb2V4l2BufDoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vb2V4l2BufDoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const Vb2V4l2BufDoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vb2V4l2BufDoneFtraceEvent::CopyFrom(const Vb2V4l2BufDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2BufDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2BufDoneFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2BufDoneFtraceEvent::InternalSwap(Vb2V4l2BufDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2BufDoneFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2BufDoneFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2BufDoneFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vb2V4l2BufDoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[3]);
}
// ===================================================================

class Vb2V4l2QbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2QbufFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vb2V4l2QbufFtraceEvent, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2QbufFtraceEvent)
}
Vb2V4l2QbufFtraceEvent::Vb2V4l2QbufFtraceEvent(const Vb2V4l2QbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2QbufFtraceEvent)
}

inline void Vb2V4l2QbufFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.minor_) { 0 }

    , decltype(_impl_.sequence_) { 0u }

    , decltype(_impl_.timecode_flags_) { 0u }

    , decltype(_impl_.timecode_frames_) { 0u }

    , decltype(_impl_.timecode_hours_) { 0u }

    , decltype(_impl_.timecode_minutes_) { 0u }

    , decltype(_impl_.timecode_seconds_) { 0u }

    , decltype(_impl_.timecode_type_) { 0u }

    , decltype(_impl_.timecode_userbits0_) { 0u }

    , decltype(_impl_.timecode_userbits1_) { 0u }

    , decltype(_impl_.timecode_userbits2_) { 0u }

    , decltype(_impl_.timecode_userbits3_) { 0u }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
}

Vb2V4l2QbufFtraceEvent::~Vb2V4l2QbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2QbufFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2QbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2QbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vb2V4l2QbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vb2V4l2QbufFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  return target;
}

::size_t Vb2V4l2QbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vb2V4l2QbufFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vb2V4l2QbufFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vb2V4l2QbufFtraceEvent::GetClassData() const { return &_class_data_; }


void Vb2V4l2QbufFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vb2V4l2QbufFtraceEvent*>(&to_msg);
  auto& from = static_cast<const Vb2V4l2QbufFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vb2V4l2QbufFtraceEvent::CopyFrom(const Vb2V4l2QbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2QbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2QbufFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2QbufFtraceEvent::InternalSwap(Vb2V4l2QbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2QbufFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2QbufFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2QbufFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vb2V4l2QbufFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[4]);
}
// ===================================================================

class Vb2V4l2DqbufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Vb2V4l2DqbufFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vb2V4l2DqbufFtraceEvent, _impl_._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timecode_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timecode_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timecode_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timecode_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timecode_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timecode_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timecode_userbits0(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timecode_userbits1(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timecode_userbits2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_timecode_userbits3(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
}
Vb2V4l2DqbufFtraceEvent::Vb2V4l2DqbufFtraceEvent(const Vb2V4l2DqbufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
}

inline void Vb2V4l2DqbufFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.minor_) { 0 }

    , decltype(_impl_.sequence_) { 0u }

    , decltype(_impl_.timecode_flags_) { 0u }

    , decltype(_impl_.timecode_frames_) { 0u }

    , decltype(_impl_.timecode_hours_) { 0u }

    , decltype(_impl_.timecode_minutes_) { 0u }

    , decltype(_impl_.timecode_seconds_) { 0u }

    , decltype(_impl_.timecode_type_) { 0u }

    , decltype(_impl_.timecode_userbits0_) { 0u }

    , decltype(_impl_.timecode_userbits1_) { 0u }

    , decltype(_impl_.timecode_userbits2_) { 0u }

    , decltype(_impl_.timecode_userbits3_) { 0u }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
}

Vb2V4l2DqbufFtraceEvent::~Vb2V4l2DqbufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vb2V4l2DqbufFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vb2V4l2DqbufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vb2V4l2DqbufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timecode_minutes_) -
        reinterpret_cast<char*>(&_impl_.field_)) + sizeof(_impl_.timecode_minutes_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.timecode_seconds_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.timecode_seconds_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vb2V4l2DqbufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          _impl_.field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 minor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_minor(&has_bits);
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_timecode_flags(&has_bits);
          _impl_.timecode_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_timecode_frames(&has_bits);
          _impl_.timecode_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_timecode_hours(&has_bits);
          _impl_.timecode_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timecode_minutes(&has_bits);
          _impl_.timecode_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timecode_seconds(&has_bits);
          _impl_.timecode_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_timecode_type(&has_bits);
          _impl_.timecode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_timecode_userbits0(&has_bits);
          _impl_.timecode_userbits0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_timecode_userbits1(&has_bits);
          _impl_.timecode_userbits1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_timecode_userbits2(&has_bits);
          _impl_.timecode_userbits2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timecode_userbits3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_timecode_userbits3(&has_bits);
          _impl_.timecode_userbits3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vb2V4l2DqbufFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_field(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // optional int32 minor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_minor(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sequence(), target);
  }

  // optional uint32 timecode_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_timecode_flags(), target);
  }

  // optional uint32 timecode_frames = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_timecode_frames(), target);
  }

  // optional uint32 timecode_hours = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timecode_hours(), target);
  }

  // optional uint32 timecode_minutes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timecode_minutes(), target);
  }

  // optional uint32 timecode_seconds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_timecode_seconds(), target);
  }

  // optional uint32 timecode_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_timecode_type(), target);
  }

  // optional uint32 timecode_userbits0 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_timecode_userbits0(), target);
  }

  // optional uint32 timecode_userbits1 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_timecode_userbits1(), target);
  }

  // optional uint32 timecode_userbits2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_timecode_userbits2(), target);
  }

  // optional uint32 timecode_userbits3 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_timecode_userbits3(), target);
  }

  // optional int64 timestamp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        15, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  return target;
}

::size_t Vb2V4l2DqbufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_field());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional int32 minor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_minor());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence());
    }

    // optional uint32 timecode_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_flags());
    }

    // optional uint32 timecode_frames = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_frames());
    }

    // optional uint32 timecode_hours = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_hours());
    }

    // optional uint32 timecode_minutes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_minutes());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 timecode_seconds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_seconds());
    }

    // optional uint32 timecode_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_type());
    }

    // optional uint32 timecode_userbits0 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits0());
    }

    // optional uint32 timecode_userbits1 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits1());
    }

    // optional uint32 timecode_userbits2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits2());
    }

    // optional uint32 timecode_userbits3 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timecode_userbits3());
    }

    // optional int64 timestamp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vb2V4l2DqbufFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vb2V4l2DqbufFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vb2V4l2DqbufFtraceEvent::GetClassData() const { return &_class_data_; }


void Vb2V4l2DqbufFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vb2V4l2DqbufFtraceEvent*>(&to_msg);
  auto& from = static_cast<const Vb2V4l2DqbufFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_ = from._impl_.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minor_ = from._impl_.minor_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_ = from._impl_.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timecode_flags_ = from._impl_.timecode_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timecode_frames_ = from._impl_.timecode_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timecode_hours_ = from._impl_.timecode_hours_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timecode_minutes_ = from._impl_.timecode_minutes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timecode_seconds_ = from._impl_.timecode_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timecode_type_ = from._impl_.timecode_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.timecode_userbits0_ = from._impl_.timecode_userbits0_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.timecode_userbits1_ = from._impl_.timecode_userbits1_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.timecode_userbits2_ = from._impl_.timecode_userbits2_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.timecode_userbits3_ = from._impl_.timecode_userbits3_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vb2V4l2DqbufFtraceEvent::CopyFrom(const Vb2V4l2DqbufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Vb2V4l2DqbufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vb2V4l2DqbufFtraceEvent::IsInitialized() const {
  return true;
}

void Vb2V4l2DqbufFtraceEvent::InternalSwap(Vb2V4l2DqbufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vb2V4l2DqbufFtraceEvent, _impl_.timestamp_)
      + sizeof(Vb2V4l2DqbufFtraceEvent::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Vb2V4l2DqbufFtraceEvent, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vb2V4l2DqbufFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::V4l2QbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::V4l2QbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::V4l2QbufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::V4l2DqbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::V4l2DqbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::V4l2DqbufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2QbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2QbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2QbufFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Vb2V4l2DqbufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::Vb2V4l2DqbufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Vb2V4l2DqbufFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
