// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/compaction.proto

#include "protos/perfetto/trace/ftrace/compaction.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zone_start_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.migrate_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.free_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.zone_end_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sync_)*/ 0u
} {}
struct MmCompactionBeginFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionBeginFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionBeginFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionBeginFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionBeginFtraceEventDefaultTypeInternal _MmCompactionBeginFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.idx_)*/ 0u

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.considered_)*/ 0u

  , /*decltype(_impl_.defer_shift_)*/ 0u

  , /*decltype(_impl_.order_failed_)*/ 0
} {}
struct MmCompactionDeferCompactionFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionDeferCompactionFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionDeferCompactionFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionDeferCompactionFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionDeferCompactionFtraceEventDefaultTypeInternal _MmCompactionDeferCompactionFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.idx_)*/ 0u

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.considered_)*/ 0u

  , /*decltype(_impl_.defer_shift_)*/ 0u

  , /*decltype(_impl_.order_failed_)*/ 0
} {}
struct MmCompactionDeferredFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionDeferredFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionDeferredFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionDeferredFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionDeferredFtraceEventDefaultTypeInternal _MmCompactionDeferredFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.idx_)*/ 0u

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.considered_)*/ 0u

  , /*decltype(_impl_.defer_shift_)*/ 0u

  , /*decltype(_impl_.order_failed_)*/ 0
} {}
struct MmCompactionDeferResetFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionDeferResetFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionDeferResetFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionDeferResetFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionDeferResetFtraceEventDefaultTypeInternal _MmCompactionDeferResetFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zone_start_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.migrate_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.free_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.zone_end_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sync_)*/ 0u

  , /*decltype(_impl_.status_)*/ 0
} {}
struct MmCompactionEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionEndFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionEndFtraceEventDefaultTypeInternal _MmCompactionEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.idx_)*/ 0u

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.ret_)*/ 0
} {}
struct MmCompactionFinishedFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionFinishedFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionFinishedFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionFinishedFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionFinishedFtraceEventDefaultTypeInternal _MmCompactionFinishedFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_scanned_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_taken_)*/ ::uint64_t{0u}
} {}
struct MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionIsolateFreepagesFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionIsolateFreepagesFtraceEventDefaultTypeInternal _MmCompactionIsolateFreepagesFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_scanned_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_taken_)*/ ::uint64_t{0u}
} {}
struct MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionIsolateMigratepagesFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionIsolateMigratepagesFtraceEventDefaultTypeInternal _MmCompactionIsolateMigratepagesFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0
} {}
struct MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionKcompactdSleepFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionKcompactdSleepFtraceEventDefaultTypeInternal _MmCompactionKcompactdSleepFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.classzone_idx_)*/ 0u

  , /*decltype(_impl_.highest_zoneidx_)*/ 0u
} {}
struct MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionKcompactdWakeFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionKcompactdWakeFtraceEventDefaultTypeInternal _MmCompactionKcompactdWakeFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nr_migrated_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_failed_)*/ ::uint64_t{0u}
} {}
struct MmCompactionMigratepagesFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionMigratepagesFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionMigratepagesFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionMigratepagesFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionMigratepagesFtraceEventDefaultTypeInternal _MmCompactionMigratepagesFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.idx_)*/ 0u

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.ret_)*/ 0
} {}
struct MmCompactionSuitableFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionSuitableFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionSuitableFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionSuitableFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionSuitableFtraceEventDefaultTypeInternal _MmCompactionSuitableFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.gfp_mask_)*/ 0u

  , /*decltype(_impl_.mode_)*/ 0u

  , /*decltype(_impl_.prio_)*/ 0
} {}
struct MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionTryToCompactPagesFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionTryToCompactPagesFtraceEventDefaultTypeInternal _MmCompactionTryToCompactPagesFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.classzone_idx_)*/ 0u

  , /*decltype(_impl_.highest_zoneidx_)*/ 0u
} {}
struct MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal() {}
  union {
    MmCompactionWakeupKcompactdFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmCompactionWakeupKcompactdFtraceEventDefaultTypeInternal _MmCompactionWakeupKcompactdFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[14];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _impl_.zone_start_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _impl_.migrate_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _impl_.free_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _impl_.zone_end_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionBeginFtraceEvent, _impl_.sync_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_.considered_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_.defer_shift_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent, _impl_.order_failed_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_.considered_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_.defer_shift_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferredFtraceEvent, _impl_.order_failed_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_.considered_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_.defer_shift_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionDeferResetFtraceEvent, _impl_.order_failed_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_.zone_start_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_.migrate_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_.free_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_.zone_end_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_.sync_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionEndFtraceEvent, _impl_.status_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionFinishedFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionFinishedFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionFinishedFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionFinishedFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionFinishedFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionFinishedFtraceEvent, _impl_.ret_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent, _impl_.start_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent, _impl_.end_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent, _impl_.nr_scanned_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent, _impl_.nr_taken_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent, _impl_.start_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent, _impl_.end_pfn_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent, _impl_.nr_scanned_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent, _impl_.nr_taken_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent, _impl_.nid_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent, _impl_.classzone_idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent, _impl_.highest_zoneidx_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionMigratepagesFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionMigratepagesFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionMigratepagesFtraceEvent, _impl_.nr_migrated_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionMigratepagesFtraceEvent, _impl_.nr_failed_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionSuitableFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionSuitableFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionSuitableFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionSuitableFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionSuitableFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionSuitableFtraceEvent, _impl_.ret_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent, _impl_.gfp_mask_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent, _impl_.prio_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent, _impl_.classzone_idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent, _impl_.highest_zoneidx_),
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::MmCompactionBeginFtraceEvent)},
        { 18, 32, -1, sizeof(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent)},
        { 38, 52, -1, sizeof(::perfetto::protos::MmCompactionDeferredFtraceEvent)},
        { 58, 72, -1, sizeof(::perfetto::protos::MmCompactionDeferResetFtraceEvent)},
        { 78, 92, -1, sizeof(::perfetto::protos::MmCompactionEndFtraceEvent)},
        { 98, 110, -1, sizeof(::perfetto::protos::MmCompactionFinishedFtraceEvent)},
        { 114, 126, -1, sizeof(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent)},
        { 130, 142, -1, sizeof(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent)},
        { 146, 155, -1, sizeof(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent)},
        { 156, 168, -1, sizeof(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent)},
        { 172, 182, -1, sizeof(::perfetto::protos::MmCompactionMigratepagesFtraceEvent)},
        { 184, 196, -1, sizeof(::perfetto::protos::MmCompactionSuitableFtraceEvent)},
        { 200, 212, -1, sizeof(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent)},
        { 216, 228, -1, sizeof(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_MmCompactionBeginFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionDeferCompactionFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionDeferredFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionDeferResetFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionFinishedFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionIsolateFreepagesFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionIsolateMigratepagesFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionKcompactdSleepFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionKcompactdWakeFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionMigratepagesFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionSuitableFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionTryToCompactPagesFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmCompactionWakeupKcompactdFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n-protos/perfetto/trace/ftrace/compactio"
    "n.proto\022\017perfetto.protos\"y\n\034MmCompaction"
    "BeginFtraceEvent\022\022\n\nzone_start\030\001 \001(\004\022\023\n\013"
    "migrate_pfn\030\002 \001(\004\022\020\n\010free_pfn\030\003 \001(\004\022\020\n\010z"
    "one_end\030\004 \001(\004\022\014\n\004sync\030\005 \001(\r\"\220\001\n&MmCompac"
    "tionDeferCompactionFtraceEvent\022\013\n\003nid\030\001 "
    "\001(\005\022\013\n\003idx\030\002 \001(\r\022\r\n\005order\030\003 \001(\005\022\022\n\nconsi"
    "dered\030\004 \001(\r\022\023\n\013defer_shift\030\005 \001(\r\022\024\n\014orde"
    "r_failed\030\006 \001(\005\"\211\001\n\037MmCompactionDeferredF"
    "traceEvent\022\013\n\003nid\030\001 \001(\005\022\013\n\003idx\030\002 \001(\r\022\r\n\005"
    "order\030\003 \001(\005\022\022\n\nconsidered\030\004 \001(\r\022\023\n\013defer"
    "_shift\030\005 \001(\r\022\024\n\014order_failed\030\006 \001(\005\"\213\001\n!M"
    "mCompactionDeferResetFtraceEvent\022\013\n\003nid\030"
    "\001 \001(\005\022\013\n\003idx\030\002 \001(\r\022\r\n\005order\030\003 \001(\005\022\022\n\ncon"
    "sidered\030\004 \001(\r\022\023\n\013defer_shift\030\005 \001(\r\022\024\n\014or"
    "der_failed\030\006 \001(\005\"\207\001\n\032MmCompactionEndFtra"
    "ceEvent\022\022\n\nzone_start\030\001 \001(\004\022\023\n\013migrate_p"
    "fn\030\002 \001(\004\022\020\n\010free_pfn\030\003 \001(\004\022\020\n\010zone_end\030\004"
    " \001(\004\022\014\n\004sync\030\005 \001(\r\022\016\n\006status\030\006 \001(\005\"W\n\037Mm"
    "CompactionFinishedFtraceEvent\022\013\n\003nid\030\001 \001"
    "(\005\022\013\n\003idx\030\002 \001(\r\022\r\n\005order\030\003 \001(\005\022\013\n\003ret\030\004 "
    "\001(\005\"s\n\'MmCompactionIsolateFreepagesFtrac"
    "eEvent\022\021\n\tstart_pfn\030\001 \001(\004\022\017\n\007end_pfn\030\002 \001"
    "(\004\022\022\n\nnr_scanned\030\003 \001(\004\022\020\n\010nr_taken\030\004 \001(\004"
    "\"v\n*MmCompactionIsolateMigratepagesFtrac"
    "eEvent\022\021\n\tstart_pfn\030\001 \001(\004\022\017\n\007end_pfn\030\002 \001"
    "(\004\022\022\n\nnr_scanned\030\003 \001(\004\022\020\n\010nr_taken\030\004 \001(\004"
    "\"4\n%MmCompactionKcompactdSleepFtraceEven"
    "t\022\013\n\003nid\030\001 \001(\005\"r\n$MmCompactionKcompactdW"
    "akeFtraceEvent\022\013\n\003nid\030\001 \001(\005\022\r\n\005order\030\002 \001"
    "(\005\022\025\n\rclasszone_idx\030\003 \001(\r\022\027\n\017highest_zon"
    "eidx\030\004 \001(\r\"M\n#MmCompactionMigratepagesFt"
    "raceEvent\022\023\n\013nr_migrated\030\001 \001(\004\022\021\n\tnr_fai"
    "led\030\002 \001(\004\"W\n\037MmCompactionSuitableFtraceE"
    "vent\022\013\n\003nid\030\001 \001(\005\022\013\n\003idx\030\002 \001(\r\022\r\n\005order\030"
    "\003 \001(\005\022\013\n\003ret\030\004 \001(\005\"g\n(MmCompactionTryToC"
    "ompactPagesFtraceEvent\022\r\n\005order\030\001 \001(\005\022\020\n"
    "\010gfp_mask\030\002 \001(\r\022\014\n\004mode\030\003 \001(\r\022\014\n\004prio\030\004 "
    "\001(\005\"t\n&MmCompactionWakeupKcompactdFtrace"
    "Event\022\013\n\003nid\030\001 \001(\005\022\r\n\005order\030\002 \001(\005\022\025\n\rcla"
    "sszone_idx\030\003 \001(\r\022\027\n\017highest_zoneidx\030\004 \001("
    "\r"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto = {
    false,
    false,
    1641,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto,
    "protos/perfetto/trace/ftrace/compaction.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
    nullptr,
    0,
    14,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class MmCompactionBeginFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionBeginFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionBeginFtraceEvent, _impl_._has_bits_);
  static void set_has_zone_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_migrate_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zone_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionBeginFtraceEvent)
}
MmCompactionBeginFtraceEvent::MmCompactionBeginFtraceEvent(const MmCompactionBeginFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionBeginFtraceEvent)
}

inline void MmCompactionBeginFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zone_start_) { ::uint64_t{0u} }

    , decltype(_impl_.migrate_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.free_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.zone_end_) { ::uint64_t{0u} }

    , decltype(_impl_.sync_) { 0u }

  };
}

MmCompactionBeginFtraceEvent::~MmCompactionBeginFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionBeginFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionBeginFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionBeginFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionBeginFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.zone_start_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sync_) -
        reinterpret_cast<char*>(&_impl_.zone_start_)) + sizeof(_impl_.sync_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionBeginFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 zone_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zone_start(&has_bits);
          _impl_.zone_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 migrate_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_migrate_pfn(&has_bits);
          _impl_.migrate_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 free_pfn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_free_pfn(&has_bits);
          _impl_.free_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 zone_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_zone_end(&has_bits);
          _impl_.zone_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sync = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_sync(&has_bits);
          _impl_.sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionBeginFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 zone_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_zone_start(), target);
  }

  // optional uint64 migrate_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_migrate_pfn(), target);
  }

  // optional uint64 free_pfn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_free_pfn(), target);
  }

  // optional uint64 zone_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_zone_end(), target);
  }

  // optional uint32 sync = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_sync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionBeginFtraceEvent)
  return target;
}

::size_t MmCompactionBeginFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 zone_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_zone_start());
    }

    // optional uint64 migrate_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_migrate_pfn());
    }

    // optional uint64 free_pfn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_free_pfn());
    }

    // optional uint64 zone_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_zone_end());
    }

    // optional uint32 sync = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sync());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionBeginFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionBeginFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionBeginFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionBeginFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionBeginFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionBeginFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.zone_start_ = from._impl_.zone_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.migrate_pfn_ = from._impl_.migrate_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.free_pfn_ = from._impl_.free_pfn_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.zone_end_ = from._impl_.zone_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sync_ = from._impl_.sync_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionBeginFtraceEvent::CopyFrom(const MmCompactionBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionBeginFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionBeginFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionBeginFtraceEvent::InternalSwap(MmCompactionBeginFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionBeginFtraceEvent, _impl_.sync_)
      + sizeof(MmCompactionBeginFtraceEvent::_impl_.sync_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionBeginFtraceEvent, _impl_.zone_start_)>(
          reinterpret_cast<char*>(&_impl_.zone_start_),
          reinterpret_cast<char*>(&other->_impl_.zone_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionBeginFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[0]);
}
// ===================================================================

class MmCompactionDeferCompactionFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionDeferCompactionFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionDeferCompactionFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_considered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defer_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_order_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
}
MmCompactionDeferCompactionFtraceEvent::MmCompactionDeferCompactionFtraceEvent(const MmCompactionDeferCompactionFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
}

inline void MmCompactionDeferCompactionFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.idx_) { 0u }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.considered_) { 0u }

    , decltype(_impl_.defer_shift_) { 0u }

    , decltype(_impl_.order_failed_) { 0 }

  };
}

MmCompactionDeferCompactionFtraceEvent::~MmCompactionDeferCompactionFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionDeferCompactionFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionDeferCompactionFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionDeferCompactionFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.order_failed_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.order_failed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionDeferCompactionFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 considered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_considered(&has_bits);
          _impl_.considered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 defer_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_defer_shift(&has_bits);
          _impl_.defer_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_order_failed(&has_bits);
          _impl_.order_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionDeferCompactionFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_idx(), target);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_order(), target);
  }

  // optional uint32 considered = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_considered(), target);
  }

  // optional uint32 defer_shift = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_defer_shift(), target);
  }

  // optional int32 order_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_order_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  return target;
}

::size_t MmCompactionDeferCompactionFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional uint32 considered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_considered());
    }

    // optional uint32 defer_shift = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_defer_shift());
    }

    // optional int32 order_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order_failed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionDeferCompactionFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionDeferCompactionFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionDeferCompactionFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionDeferCompactionFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionDeferCompactionFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionDeferCompactionFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.considered_ = from._impl_.considered_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.defer_shift_ = from._impl_.defer_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.order_failed_ = from._impl_.order_failed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionDeferCompactionFtraceEvent::CopyFrom(const MmCompactionDeferCompactionFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionDeferCompactionFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionDeferCompactionFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionDeferCompactionFtraceEvent::InternalSwap(MmCompactionDeferCompactionFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionDeferCompactionFtraceEvent, _impl_.order_failed_)
      + sizeof(MmCompactionDeferCompactionFtraceEvent::_impl_.order_failed_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionDeferCompactionFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionDeferCompactionFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[1]);
}
// ===================================================================

class MmCompactionDeferredFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionDeferredFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionDeferredFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_considered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defer_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_order_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionDeferredFtraceEvent)
}
MmCompactionDeferredFtraceEvent::MmCompactionDeferredFtraceEvent(const MmCompactionDeferredFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionDeferredFtraceEvent)
}

inline void MmCompactionDeferredFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.idx_) { 0u }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.considered_) { 0u }

    , decltype(_impl_.defer_shift_) { 0u }

    , decltype(_impl_.order_failed_) { 0 }

  };
}

MmCompactionDeferredFtraceEvent::~MmCompactionDeferredFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionDeferredFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionDeferredFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionDeferredFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionDeferredFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.order_failed_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.order_failed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionDeferredFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 considered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_considered(&has_bits);
          _impl_.considered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 defer_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_defer_shift(&has_bits);
          _impl_.defer_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_order_failed(&has_bits);
          _impl_.order_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionDeferredFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_idx(), target);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_order(), target);
  }

  // optional uint32 considered = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_considered(), target);
  }

  // optional uint32 defer_shift = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_defer_shift(), target);
  }

  // optional int32 order_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_order_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionDeferredFtraceEvent)
  return target;
}

::size_t MmCompactionDeferredFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional uint32 considered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_considered());
    }

    // optional uint32 defer_shift = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_defer_shift());
    }

    // optional int32 order_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order_failed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionDeferredFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionDeferredFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionDeferredFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionDeferredFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionDeferredFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionDeferredFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.considered_ = from._impl_.considered_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.defer_shift_ = from._impl_.defer_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.order_failed_ = from._impl_.order_failed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionDeferredFtraceEvent::CopyFrom(const MmCompactionDeferredFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionDeferredFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionDeferredFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionDeferredFtraceEvent::InternalSwap(MmCompactionDeferredFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionDeferredFtraceEvent, _impl_.order_failed_)
      + sizeof(MmCompactionDeferredFtraceEvent::_impl_.order_failed_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionDeferredFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionDeferredFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[2]);
}
// ===================================================================

class MmCompactionDeferResetFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionDeferResetFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionDeferResetFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_considered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_defer_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_order_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionDeferResetFtraceEvent)
}
MmCompactionDeferResetFtraceEvent::MmCompactionDeferResetFtraceEvent(const MmCompactionDeferResetFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionDeferResetFtraceEvent)
}

inline void MmCompactionDeferResetFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.idx_) { 0u }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.considered_) { 0u }

    , decltype(_impl_.defer_shift_) { 0u }

    , decltype(_impl_.order_failed_) { 0 }

  };
}

MmCompactionDeferResetFtraceEvent::~MmCompactionDeferResetFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionDeferResetFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionDeferResetFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionDeferResetFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.order_failed_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.order_failed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionDeferResetFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 considered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_considered(&has_bits);
          _impl_.considered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 defer_shift = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_defer_shift(&has_bits);
          _impl_.defer_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_order_failed(&has_bits);
          _impl_.order_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionDeferResetFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_idx(), target);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_order(), target);
  }

  // optional uint32 considered = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_considered(), target);
  }

  // optional uint32 defer_shift = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_defer_shift(), target);
  }

  // optional int32 order_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_order_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  return target;
}

::size_t MmCompactionDeferResetFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional uint32 considered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_considered());
    }

    // optional uint32 defer_shift = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_defer_shift());
    }

    // optional int32 order_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order_failed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionDeferResetFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionDeferResetFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionDeferResetFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionDeferResetFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionDeferResetFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionDeferResetFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.considered_ = from._impl_.considered_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.defer_shift_ = from._impl_.defer_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.order_failed_ = from._impl_.order_failed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionDeferResetFtraceEvent::CopyFrom(const MmCompactionDeferResetFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionDeferResetFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionDeferResetFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionDeferResetFtraceEvent::InternalSwap(MmCompactionDeferResetFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionDeferResetFtraceEvent, _impl_.order_failed_)
      + sizeof(MmCompactionDeferResetFtraceEvent::_impl_.order_failed_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionDeferResetFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionDeferResetFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[3]);
}
// ===================================================================

class MmCompactionEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionEndFtraceEvent, _impl_._has_bits_);
  static void set_has_zone_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_migrate_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zone_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionEndFtraceEvent)
}
MmCompactionEndFtraceEvent::MmCompactionEndFtraceEvent(const MmCompactionEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionEndFtraceEvent)
}

inline void MmCompactionEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zone_start_) { ::uint64_t{0u} }

    , decltype(_impl_.migrate_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.free_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.zone_end_) { ::uint64_t{0u} }

    , decltype(_impl_.sync_) { 0u }

    , decltype(_impl_.status_) { 0 }

  };
}

MmCompactionEndFtraceEvent::~MmCompactionEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.zone_start_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.zone_start_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 zone_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zone_start(&has_bits);
          _impl_.zone_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 migrate_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_migrate_pfn(&has_bits);
          _impl_.migrate_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 free_pfn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_free_pfn(&has_bits);
          _impl_.free_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 zone_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_zone_end(&has_bits);
          _impl_.zone_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sync = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_sync(&has_bits);
          _impl_.sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 zone_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_zone_start(), target);
  }

  // optional uint64 migrate_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_migrate_pfn(), target);
  }

  // optional uint64 free_pfn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_free_pfn(), target);
  }

  // optional uint64 zone_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_zone_end(), target);
  }

  // optional uint32 sync = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_sync(), target);
  }

  // optional int32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionEndFtraceEvent)
  return target;
}

::size_t MmCompactionEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 zone_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_zone_start());
    }

    // optional uint64 migrate_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_migrate_pfn());
    }

    // optional uint64 free_pfn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_free_pfn());
    }

    // optional uint64 zone_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_zone_end());
    }

    // optional uint32 sync = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sync());
    }

    // optional int32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionEndFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.zone_start_ = from._impl_.zone_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.migrate_pfn_ = from._impl_.migrate_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.free_pfn_ = from._impl_.free_pfn_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.zone_end_ = from._impl_.zone_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sync_ = from._impl_.sync_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionEndFtraceEvent::CopyFrom(const MmCompactionEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionEndFtraceEvent::InternalSwap(MmCompactionEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionEndFtraceEvent, _impl_.status_)
      + sizeof(MmCompactionEndFtraceEvent::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionEndFtraceEvent, _impl_.zone_start_)>(
          reinterpret_cast<char*>(&_impl_.zone_start_),
          reinterpret_cast<char*>(&other->_impl_.zone_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[4]);
}
// ===================================================================

class MmCompactionFinishedFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionFinishedFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionFinishedFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionFinishedFtraceEvent)
}
MmCompactionFinishedFtraceEvent::MmCompactionFinishedFtraceEvent(const MmCompactionFinishedFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionFinishedFtraceEvent)
}

inline void MmCompactionFinishedFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.idx_) { 0u }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.ret_) { 0 }

  };
}

MmCompactionFinishedFtraceEvent::~MmCompactionFinishedFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionFinishedFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionFinishedFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionFinishedFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionFinishedFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ret_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.ret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionFinishedFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionFinishedFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_idx(), target);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_order(), target);
  }

  // optional int32 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionFinishedFtraceEvent)
  return target;
}

::size_t MmCompactionFinishedFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional int32 ret = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionFinishedFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionFinishedFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionFinishedFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionFinishedFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionFinishedFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionFinishedFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionFinishedFtraceEvent::CopyFrom(const MmCompactionFinishedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionFinishedFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionFinishedFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionFinishedFtraceEvent::InternalSwap(MmCompactionFinishedFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionFinishedFtraceEvent, _impl_.ret_)
      + sizeof(MmCompactionFinishedFtraceEvent::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionFinishedFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionFinishedFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[5]);
}
// ===================================================================

class MmCompactionIsolateFreepagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionIsolateFreepagesFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionIsolateFreepagesFtraceEvent, _impl_._has_bits_);
  static void set_has_start_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nr_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
}
MmCompactionIsolateFreepagesFtraceEvent::MmCompactionIsolateFreepagesFtraceEvent(const MmCompactionIsolateFreepagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
}

inline void MmCompactionIsolateFreepagesFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.end_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_scanned_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_taken_) { ::uint64_t{0u} }

  };
}

MmCompactionIsolateFreepagesFtraceEvent::~MmCompactionIsolateFreepagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionIsolateFreepagesFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionIsolateFreepagesFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionIsolateFreepagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.start_pfn_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_taken_) -
        reinterpret_cast<char*>(&_impl_.start_pfn_)) + sizeof(_impl_.nr_taken_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionIsolateFreepagesFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 start_pfn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_start_pfn(&has_bits);
          _impl_.start_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 end_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_end_pfn(&has_bits);
          _impl_.end_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_scanned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_scanned(&has_bits);
          _impl_.nr_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_nr_taken(&has_bits);
          _impl_.nr_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionIsolateFreepagesFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 start_pfn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_start_pfn(), target);
  }

  // optional uint64 end_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_end_pfn(), target);
  }

  // optional uint64 nr_scanned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_nr_scanned(), target);
  }

  // optional uint64 nr_taken = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_nr_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  return target;
}

::size_t MmCompactionIsolateFreepagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 start_pfn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_start_pfn());
    }

    // optional uint64 end_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_end_pfn());
    }

    // optional uint64 nr_scanned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_scanned());
    }

    // optional uint64 nr_taken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_taken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionIsolateFreepagesFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionIsolateFreepagesFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionIsolateFreepagesFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionIsolateFreepagesFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionIsolateFreepagesFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionIsolateFreepagesFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_pfn_ = from._impl_.start_pfn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_pfn_ = from._impl_.end_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.nr_scanned_ = from._impl_.nr_scanned_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nr_taken_ = from._impl_.nr_taken_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionIsolateFreepagesFtraceEvent::CopyFrom(const MmCompactionIsolateFreepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionIsolateFreepagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionIsolateFreepagesFtraceEvent::InternalSwap(MmCompactionIsolateFreepagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionIsolateFreepagesFtraceEvent, _impl_.nr_taken_)
      + sizeof(MmCompactionIsolateFreepagesFtraceEvent::_impl_.nr_taken_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionIsolateFreepagesFtraceEvent, _impl_.start_pfn_)>(
          reinterpret_cast<char*>(&_impl_.start_pfn_),
          reinterpret_cast<char*>(&other->_impl_.start_pfn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionIsolateFreepagesFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[6]);
}
// ===================================================================

class MmCompactionIsolateMigratepagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionIsolateMigratepagesFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionIsolateMigratepagesFtraceEvent, _impl_._has_bits_);
  static void set_has_start_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nr_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
}
MmCompactionIsolateMigratepagesFtraceEvent::MmCompactionIsolateMigratepagesFtraceEvent(const MmCompactionIsolateMigratepagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
}

inline void MmCompactionIsolateMigratepagesFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.end_pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_scanned_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_taken_) { ::uint64_t{0u} }

  };
}

MmCompactionIsolateMigratepagesFtraceEvent::~MmCompactionIsolateMigratepagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionIsolateMigratepagesFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionIsolateMigratepagesFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionIsolateMigratepagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.start_pfn_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_taken_) -
        reinterpret_cast<char*>(&_impl_.start_pfn_)) + sizeof(_impl_.nr_taken_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionIsolateMigratepagesFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 start_pfn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_start_pfn(&has_bits);
          _impl_.start_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 end_pfn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_end_pfn(&has_bits);
          _impl_.end_pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_scanned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nr_scanned(&has_bits);
          _impl_.nr_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_nr_taken(&has_bits);
          _impl_.nr_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionIsolateMigratepagesFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 start_pfn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_start_pfn(), target);
  }

  // optional uint64 end_pfn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_end_pfn(), target);
  }

  // optional uint64 nr_scanned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_nr_scanned(), target);
  }

  // optional uint64 nr_taken = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_nr_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  return target;
}

::size_t MmCompactionIsolateMigratepagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 start_pfn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_start_pfn());
    }

    // optional uint64 end_pfn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_end_pfn());
    }

    // optional uint64 nr_scanned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_scanned());
    }

    // optional uint64 nr_taken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_taken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionIsolateMigratepagesFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionIsolateMigratepagesFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionIsolateMigratepagesFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionIsolateMigratepagesFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionIsolateMigratepagesFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionIsolateMigratepagesFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_pfn_ = from._impl_.start_pfn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_pfn_ = from._impl_.end_pfn_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.nr_scanned_ = from._impl_.nr_scanned_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nr_taken_ = from._impl_.nr_taken_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionIsolateMigratepagesFtraceEvent::CopyFrom(const MmCompactionIsolateMigratepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionIsolateMigratepagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionIsolateMigratepagesFtraceEvent::InternalSwap(MmCompactionIsolateMigratepagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionIsolateMigratepagesFtraceEvent, _impl_.nr_taken_)
      + sizeof(MmCompactionIsolateMigratepagesFtraceEvent::_impl_.nr_taken_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionIsolateMigratepagesFtraceEvent, _impl_.start_pfn_)>(
          reinterpret_cast<char*>(&_impl_.start_pfn_),
          reinterpret_cast<char*>(&other->_impl_.start_pfn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionIsolateMigratepagesFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[7]);
}
// ===================================================================

class MmCompactionKcompactdSleepFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionKcompactdSleepFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionKcompactdSleepFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
}
MmCompactionKcompactdSleepFtraceEvent::MmCompactionKcompactdSleepFtraceEvent(const MmCompactionKcompactdSleepFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
}

inline void MmCompactionKcompactdSleepFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

  };
}

MmCompactionKcompactdSleepFtraceEvent::~MmCompactionKcompactdSleepFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionKcompactdSleepFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionKcompactdSleepFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionKcompactdSleepFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionKcompactdSleepFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionKcompactdSleepFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  return target;
}

::size_t MmCompactionKcompactdSleepFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionKcompactdSleepFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionKcompactdSleepFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionKcompactdSleepFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionKcompactdSleepFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionKcompactdSleepFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionKcompactdSleepFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_nid(from._internal_nid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionKcompactdSleepFtraceEvent::CopyFrom(const MmCompactionKcompactdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionKcompactdSleepFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionKcompactdSleepFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionKcompactdSleepFtraceEvent::InternalSwap(MmCompactionKcompactdSleepFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.nid_, other->_impl_.nid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionKcompactdSleepFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[8]);
}
// ===================================================================

class MmCompactionKcompactdWakeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionKcompactdWakeFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionKcompactdWakeFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_classzone_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_highest_zoneidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
}
MmCompactionKcompactdWakeFtraceEvent::MmCompactionKcompactdWakeFtraceEvent(const MmCompactionKcompactdWakeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
}

inline void MmCompactionKcompactdWakeFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.classzone_idx_) { 0u }

    , decltype(_impl_.highest_zoneidx_) { 0u }

  };
}

MmCompactionKcompactdWakeFtraceEvent::~MmCompactionKcompactdWakeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionKcompactdWakeFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionKcompactdWakeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionKcompactdWakeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.highest_zoneidx_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.highest_zoneidx_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionKcompactdWakeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 classzone_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_classzone_idx(&has_bits);
          _impl_.classzone_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 highest_zoneidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_highest_zoneidx(&has_bits);
          _impl_.highest_zoneidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionKcompactdWakeFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_order(), target);
  }

  // optional uint32 classzone_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_classzone_idx(), target);
  }

  // optional uint32 highest_zoneidx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_highest_zoneidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  return target;
}

::size_t MmCompactionKcompactdWakeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional uint32 classzone_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_classzone_idx());
    }

    // optional uint32 highest_zoneidx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_highest_zoneidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionKcompactdWakeFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionKcompactdWakeFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionKcompactdWakeFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionKcompactdWakeFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionKcompactdWakeFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionKcompactdWakeFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.classzone_idx_ = from._impl_.classzone_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.highest_zoneidx_ = from._impl_.highest_zoneidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionKcompactdWakeFtraceEvent::CopyFrom(const MmCompactionKcompactdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionKcompactdWakeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionKcompactdWakeFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionKcompactdWakeFtraceEvent::InternalSwap(MmCompactionKcompactdWakeFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionKcompactdWakeFtraceEvent, _impl_.highest_zoneidx_)
      + sizeof(MmCompactionKcompactdWakeFtraceEvent::_impl_.highest_zoneidx_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionKcompactdWakeFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionKcompactdWakeFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[9]);
}
// ===================================================================

class MmCompactionMigratepagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionMigratepagesFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionMigratepagesFtraceEvent, _impl_._has_bits_);
  static void set_has_nr_migrated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nr_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
}
MmCompactionMigratepagesFtraceEvent::MmCompactionMigratepagesFtraceEvent(const MmCompactionMigratepagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
}

inline void MmCompactionMigratepagesFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nr_migrated_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_failed_) { ::uint64_t{0u} }

  };
}

MmCompactionMigratepagesFtraceEvent::~MmCompactionMigratepagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionMigratepagesFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionMigratepagesFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionMigratepagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.nr_migrated_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_failed_) -
        reinterpret_cast<char*>(&_impl_.nr_migrated_)) + sizeof(_impl_.nr_failed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionMigratepagesFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 nr_migrated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nr_migrated(&has_bits);
          _impl_.nr_migrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_failed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_nr_failed(&has_bits);
          _impl_.nr_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionMigratepagesFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 nr_migrated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_nr_migrated(), target);
  }

  // optional uint64 nr_failed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_nr_failed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  return target;
}

::size_t MmCompactionMigratepagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 nr_migrated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_migrated());
    }

    // optional uint64 nr_failed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_failed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionMigratepagesFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionMigratepagesFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionMigratepagesFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionMigratepagesFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionMigratepagesFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionMigratepagesFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nr_migrated_ = from._impl_.nr_migrated_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nr_failed_ = from._impl_.nr_failed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionMigratepagesFtraceEvent::CopyFrom(const MmCompactionMigratepagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionMigratepagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionMigratepagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionMigratepagesFtraceEvent::InternalSwap(MmCompactionMigratepagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionMigratepagesFtraceEvent, _impl_.nr_failed_)
      + sizeof(MmCompactionMigratepagesFtraceEvent::_impl_.nr_failed_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionMigratepagesFtraceEvent, _impl_.nr_migrated_)>(
          reinterpret_cast<char*>(&_impl_.nr_migrated_),
          reinterpret_cast<char*>(&other->_impl_.nr_migrated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionMigratepagesFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[10]);
}
// ===================================================================

class MmCompactionSuitableFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionSuitableFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionSuitableFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionSuitableFtraceEvent)
}
MmCompactionSuitableFtraceEvent::MmCompactionSuitableFtraceEvent(const MmCompactionSuitableFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionSuitableFtraceEvent)
}

inline void MmCompactionSuitableFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.idx_) { 0u }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.ret_) { 0 }

  };
}

MmCompactionSuitableFtraceEvent::~MmCompactionSuitableFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionSuitableFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionSuitableFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionSuitableFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionSuitableFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ret_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.ret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionSuitableFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionSuitableFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional uint32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_idx(), target);
  }

  // optional int32 order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_order(), target);
  }

  // optional int32 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionSuitableFtraceEvent)
  return target;
}

::size_t MmCompactionSuitableFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional uint32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional int32 ret = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionSuitableFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionSuitableFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionSuitableFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionSuitableFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionSuitableFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionSuitableFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionSuitableFtraceEvent::CopyFrom(const MmCompactionSuitableFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionSuitableFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionSuitableFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionSuitableFtraceEvent::InternalSwap(MmCompactionSuitableFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionSuitableFtraceEvent, _impl_.ret_)
      + sizeof(MmCompactionSuitableFtraceEvent::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionSuitableFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionSuitableFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[11]);
}
// ===================================================================

class MmCompactionTryToCompactPagesFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionTryToCompactPagesFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionTryToCompactPagesFtraceEvent, _impl_._has_bits_);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gfp_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
}
MmCompactionTryToCompactPagesFtraceEvent::MmCompactionTryToCompactPagesFtraceEvent(const MmCompactionTryToCompactPagesFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
}

inline void MmCompactionTryToCompactPagesFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.gfp_mask_) { 0u }

    , decltype(_impl_.mode_) { 0u }

    , decltype(_impl_.prio_) { 0 }

  };
}

MmCompactionTryToCompactPagesFtraceEvent::~MmCompactionTryToCompactPagesFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionTryToCompactPagesFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionTryToCompactPagesFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionTryToCompactPagesFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.order_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.prio_) -
        reinterpret_cast<char*>(&_impl_.order_)) + sizeof(_impl_.prio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionTryToCompactPagesFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 gfp_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_gfp_mask(&has_bits);
          _impl_.gfp_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 prio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_prio(&has_bits);
          _impl_.prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionTryToCompactPagesFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_order(), target);
  }

  // optional uint32 gfp_mask = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_gfp_mask(), target);
  }

  // optional uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_mode(), target);
  }

  // optional int32 prio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  return target;
}

::size_t MmCompactionTryToCompactPagesFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional uint32 gfp_mask = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gfp_mask());
    }

    // optional uint32 mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_mode());
    }

    // optional int32 prio = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionTryToCompactPagesFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionTryToCompactPagesFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionTryToCompactPagesFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionTryToCompactPagesFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionTryToCompactPagesFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionTryToCompactPagesFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gfp_mask_ = from._impl_.gfp_mask_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.prio_ = from._impl_.prio_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionTryToCompactPagesFtraceEvent::CopyFrom(const MmCompactionTryToCompactPagesFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionTryToCompactPagesFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionTryToCompactPagesFtraceEvent::InternalSwap(MmCompactionTryToCompactPagesFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionTryToCompactPagesFtraceEvent, _impl_.prio_)
      + sizeof(MmCompactionTryToCompactPagesFtraceEvent::_impl_.prio_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionTryToCompactPagesFtraceEvent, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionTryToCompactPagesFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[12]);
}
// ===================================================================

class MmCompactionWakeupKcompactdFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmCompactionWakeupKcompactdFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmCompactionWakeupKcompactdFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_classzone_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_highest_zoneidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
}
MmCompactionWakeupKcompactdFtraceEvent::MmCompactionWakeupKcompactdFtraceEvent(const MmCompactionWakeupKcompactdFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
}

inline void MmCompactionWakeupKcompactdFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.classzone_idx_) { 0u }

    , decltype(_impl_.highest_zoneidx_) { 0u }

  };
}

MmCompactionWakeupKcompactdFtraceEvent::~MmCompactionWakeupKcompactdFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmCompactionWakeupKcompactdFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmCompactionWakeupKcompactdFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmCompactionWakeupKcompactdFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.highest_zoneidx_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.highest_zoneidx_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmCompactionWakeupKcompactdFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 classzone_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_classzone_idx(&has_bits);
          _impl_.classzone_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 highest_zoneidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_highest_zoneidx(&has_bits);
          _impl_.highest_zoneidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmCompactionWakeupKcompactdFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_order(), target);
  }

  // optional uint32 classzone_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_classzone_idx(), target);
  }

  // optional uint32 highest_zoneidx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_highest_zoneidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  return target;
}

::size_t MmCompactionWakeupKcompactdFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional uint32 classzone_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_classzone_idx());
    }

    // optional uint32 highest_zoneidx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_highest_zoneidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmCompactionWakeupKcompactdFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmCompactionWakeupKcompactdFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmCompactionWakeupKcompactdFtraceEvent::GetClassData() const { return &_class_data_; }


void MmCompactionWakeupKcompactdFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmCompactionWakeupKcompactdFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmCompactionWakeupKcompactdFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.classzone_idx_ = from._impl_.classzone_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.highest_zoneidx_ = from._impl_.highest_zoneidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmCompactionWakeupKcompactdFtraceEvent::CopyFrom(const MmCompactionWakeupKcompactdFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmCompactionWakeupKcompactdFtraceEvent::IsInitialized() const {
  return true;
}

void MmCompactionWakeupKcompactdFtraceEvent::InternalSwap(MmCompactionWakeupKcompactdFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmCompactionWakeupKcompactdFtraceEvent, _impl_.highest_zoneidx_)
      + sizeof(MmCompactionWakeupKcompactdFtraceEvent::_impl_.highest_zoneidx_)
      - PROTOBUF_FIELD_OFFSET(MmCompactionWakeupKcompactdFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmCompactionWakeupKcompactdFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto[13]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionBeginFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionBeginFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionBeginFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionDeferredFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferredFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionDeferredFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionDeferResetFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferResetFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionDeferResetFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionFinishedFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionFinishedFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionFinishedFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionMigratepagesFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionSuitableFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionSuitableFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionSuitableFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
