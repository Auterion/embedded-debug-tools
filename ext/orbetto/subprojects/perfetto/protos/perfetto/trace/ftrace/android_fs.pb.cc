// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/android_fs.proto

#include "protos/perfetto/trace/ftrace/android_fs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR AndroidFsDatareadEndFtraceEvent::AndroidFsDatareadEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ino_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.bytes_)*/ 0
} {}
struct AndroidFsDatareadEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidFsDatareadEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidFsDatareadEndFtraceEventDefaultTypeInternal() {}
  union {
    AndroidFsDatareadEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidFsDatareadEndFtraceEventDefaultTypeInternal _AndroidFsDatareadEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AndroidFsDatareadStartFtraceEvent::AndroidFsDatareadStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmdline_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pathbuf_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.i_size_)*/ ::int64_t{0}

  , /*decltype(_impl_.ino_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bytes_)*/ 0

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.offset_)*/ ::int64_t{0}
} {}
struct AndroidFsDatareadStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidFsDatareadStartFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidFsDatareadStartFtraceEventDefaultTypeInternal() {}
  union {
    AndroidFsDatareadStartFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidFsDatareadStartFtraceEventDefaultTypeInternal _AndroidFsDatareadStartFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AndroidFsDatawriteEndFtraceEvent::AndroidFsDatawriteEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ino_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.bytes_)*/ 0
} {}
struct AndroidFsDatawriteEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidFsDatawriteEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidFsDatawriteEndFtraceEventDefaultTypeInternal() {}
  union {
    AndroidFsDatawriteEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidFsDatawriteEndFtraceEventDefaultTypeInternal _AndroidFsDatawriteEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AndroidFsDatawriteStartFtraceEvent::AndroidFsDatawriteStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmdline_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pathbuf_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.i_size_)*/ ::int64_t{0}

  , /*decltype(_impl_.ino_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bytes_)*/ 0

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.offset_)*/ ::int64_t{0}
} {}
struct AndroidFsDatawriteStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidFsDatawriteStartFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidFsDatawriteStartFtraceEventDefaultTypeInternal() {}
  union {
    AndroidFsDatawriteStartFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidFsDatawriteStartFtraceEventDefaultTypeInternal _AndroidFsDatawriteStartFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AndroidFsFsyncEndFtraceEvent::AndroidFsFsyncEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ino_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.bytes_)*/ 0
} {}
struct AndroidFsFsyncEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidFsFsyncEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidFsFsyncEndFtraceEventDefaultTypeInternal() {}
  union {
    AndroidFsFsyncEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidFsFsyncEndFtraceEventDefaultTypeInternal _AndroidFsFsyncEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AndroidFsFsyncStartFtraceEvent::AndroidFsFsyncStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmdline_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pathbuf_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.i_size_)*/ ::int64_t{0}

  , /*decltype(_impl_.ino_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pid_)*/ 0
} {}
struct AndroidFsFsyncStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidFsFsyncStartFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidFsFsyncStartFtraceEventDefaultTypeInternal() {}
  union {
    AndroidFsFsyncStartFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidFsFsyncStartFtraceEventDefaultTypeInternal _AndroidFsFsyncStartFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadEndFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadEndFtraceEvent, _impl_.ino_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadEndFtraceEvent, _impl_.offset_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.cmdline_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.i_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.ino_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.pathbuf_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatareadStartFtraceEvent, _impl_.pid_),
    4,
    0,
    2,
    3,
    6,
    1,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent, _impl_.ino_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent, _impl_.offset_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.cmdline_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.i_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.ino_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.pathbuf_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent, _impl_.pid_),
    4,
    0,
    2,
    3,
    6,
    1,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncEndFtraceEvent, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncEndFtraceEvent, _impl_.ino_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncEndFtraceEvent, _impl_.offset_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _impl_.cmdline_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _impl_.i_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _impl_.ino_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _impl_.pathbuf_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidFsFsyncStartFtraceEvent, _impl_.pid_),
    0,
    2,
    3,
    1,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::perfetto::protos::AndroidFsDatareadEndFtraceEvent)},
        { 14, 29, -1, sizeof(::perfetto::protos::AndroidFsDatareadStartFtraceEvent)},
        { 36, 47, -1, sizeof(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent)},
        { 50, 65, -1, sizeof(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent)},
        { 72, 83, -1, sizeof(::perfetto::protos::AndroidFsFsyncEndFtraceEvent)},
        { 86, 99, -1, sizeof(::perfetto::protos::AndroidFsFsyncStartFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_AndroidFsDatareadEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_AndroidFsDatareadStartFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_AndroidFsDatawriteEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_AndroidFsDatawriteStartFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_AndroidFsFsyncEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_AndroidFsFsyncStartFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n-protos/perfetto/trace/ftrace/android_f"
    "s.proto\022\017perfetto.protos\"M\n\037AndroidFsDat"
    "areadEndFtraceEvent\022\r\n\005bytes\030\001 \001(\005\022\013\n\003in"
    "o\030\002 \001(\004\022\016\n\006offset\030\003 \001(\003\"\216\001\n!AndroidFsDat"
    "areadStartFtraceEvent\022\r\n\005bytes\030\001 \001(\005\022\017\n\007"
    "cmdline\030\002 \001(\t\022\016\n\006i_size\030\003 \001(\003\022\013\n\003ino\030\004 \001"
    "(\004\022\016\n\006offset\030\005 \001(\003\022\017\n\007pathbuf\030\006 \001(\t\022\013\n\003p"
    "id\030\007 \001(\005\"N\n AndroidFsDatawriteEndFtraceE"
    "vent\022\r\n\005bytes\030\001 \001(\005\022\013\n\003ino\030\002 \001(\004\022\016\n\006offs"
    "et\030\003 \001(\003\"\217\001\n\"AndroidFsDatawriteStartFtra"
    "ceEvent\022\r\n\005bytes\030\001 \001(\005\022\017\n\007cmdline\030\002 \001(\t\022"
    "\016\n\006i_size\030\003 \001(\003\022\013\n\003ino\030\004 \001(\004\022\016\n\006offset\030\005"
    " \001(\003\022\017\n\007pathbuf\030\006 \001(\t\022\013\n\003pid\030\007 \001(\005\"J\n\034An"
    "droidFsFsyncEndFtraceEvent\022\r\n\005bytes\030\001 \001("
    "\005\022\013\n\003ino\030\002 \001(\004\022\016\n\006offset\030\003 \001(\003\"l\n\036Androi"
    "dFsFsyncStartFtraceEvent\022\017\n\007cmdline\030\001 \001("
    "\t\022\016\n\006i_size\030\002 \001(\003\022\013\n\003ino\030\003 \001(\004\022\017\n\007pathbu"
    "f\030\004 \001(\t\022\013\n\003pid\030\005 \001(\005"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto = {
    false,
    false,
    700,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto,
    "protos/perfetto/trace/ftrace/android_fs.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class AndroidFsDatareadEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidFsDatareadEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidFsDatareadEndFtraceEvent, _impl_._has_bits_);
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ino(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidFsDatareadEndFtraceEvent::AndroidFsDatareadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
}
AndroidFsDatareadEndFtraceEvent::AndroidFsDatareadEndFtraceEvent(const AndroidFsDatareadEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
}

inline void AndroidFsDatareadEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ino_) { ::uint64_t{0u} }

    , decltype(_impl_.offset_) { ::int64_t{0} }

    , decltype(_impl_.bytes_) { 0 }

  };
}

AndroidFsDatareadEndFtraceEvent::~AndroidFsDatareadEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidFsDatareadEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AndroidFsDatareadEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidFsDatareadEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ino_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.ino_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidFsDatareadEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ino(&has_bits);
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidFsDatareadEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bytes = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_bytes(), target);
  }

  // optional uint64 ino = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_ino(), target);
  }

  // optional int64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  return target;
}

::size_t AndroidFsDatareadEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 ino = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ino());
    }

    // optional int64 offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

    // optional int32 bytes = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidFsDatareadEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidFsDatareadEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidFsDatareadEndFtraceEvent::GetClassData() const { return &_class_data_; }


void AndroidFsDatareadEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidFsDatareadEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const AndroidFsDatareadEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ino_ = from._impl_.ino_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidFsDatareadEndFtraceEvent::CopyFrom(const AndroidFsDatareadEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidFsDatareadEndFtraceEvent::IsInitialized() const {
  return true;
}

void AndroidFsDatareadEndFtraceEvent::InternalSwap(AndroidFsDatareadEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidFsDatareadEndFtraceEvent, _impl_.bytes_)
      + sizeof(AndroidFsDatareadEndFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(AndroidFsDatareadEndFtraceEvent, _impl_.ino_)>(
          reinterpret_cast<char*>(&_impl_.ino_),
          reinterpret_cast<char*>(&other->_impl_.ino_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidFsDatareadEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[0]);
}
// ===================================================================

class AndroidFsDatareadStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidFsDatareadStartFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidFsDatareadStartFtraceEvent, _impl_._has_bits_);
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cmdline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ino(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pathbuf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AndroidFsDatareadStartFtraceEvent::AndroidFsDatareadStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
}
AndroidFsDatareadStartFtraceEvent::AndroidFsDatareadStartFtraceEvent(const AndroidFsDatareadStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidFsDatareadStartFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_) {}

    , decltype(_impl_.pathbuf_) {}

    , decltype(_impl_.i_size_) {}

    , decltype(_impl_.ino_) {}

    , decltype(_impl_.bytes_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.offset_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cmdline_.Set(from._internal_cmdline(), _this->GetArenaForAllocation());
  }
  _impl_.pathbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.pathbuf_.Set(from._internal_pathbuf(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.i_size_, &from._impl_.i_size_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.i_size_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
}

inline void AndroidFsDatareadStartFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_) {}

    , decltype(_impl_.pathbuf_) {}

    , decltype(_impl_.i_size_) { ::int64_t{0} }

    , decltype(_impl_.ino_) { ::uint64_t{0u} }

    , decltype(_impl_.bytes_) { 0 }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.offset_) { ::int64_t{0} }

  };
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pathbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidFsDatareadStartFtraceEvent::~AndroidFsDatareadStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidFsDatareadStartFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmdline_.Destroy();
  _impl_.pathbuf_.Destroy();
}

void AndroidFsDatareadStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidFsDatareadStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cmdline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pathbuf_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.i_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.i_size_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidFsDatareadStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cmdline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 i_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_i_size(&has_bits);
          _impl_.i_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ino(&has_bits);
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pathbuf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pathbuf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidFsDatareadStartFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bytes = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_bytes(), target);
  }

  // optional string cmdline = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cmdline();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 i_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_i_size(), target);
  }

  // optional uint64 ino = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_ino(), target);
  }

  // optional int64 offset = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_offset(), target);
  }

  // optional string pathbuf = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_pathbuf();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional int32 pid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  return target;
}

::size_t AndroidFsDatareadStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string cmdline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmdline());
    }

    // optional string pathbuf = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pathbuf());
    }

    // optional int64 i_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_i_size());
    }

    // optional uint64 ino = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ino());
    }

    // optional int32 bytes = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bytes());
    }

    // optional int32 pid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional int64 offset = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidFsDatareadStartFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidFsDatareadStartFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidFsDatareadStartFtraceEvent::GetClassData() const { return &_class_data_; }


void AndroidFsDatareadStartFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidFsDatareadStartFtraceEvent*>(&to_msg);
  auto& from = static_cast<const AndroidFsDatareadStartFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cmdline(from._internal_cmdline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pathbuf(from._internal_pathbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.i_size_ = from._impl_.i_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ino_ = from._impl_.ino_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidFsDatareadStartFtraceEvent::CopyFrom(const AndroidFsDatareadStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidFsDatareadStartFtraceEvent::IsInitialized() const {
  return true;
}

void AndroidFsDatareadStartFtraceEvent::InternalSwap(AndroidFsDatareadStartFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmdline_, lhs_arena,
                                       &other->_impl_.cmdline_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pathbuf_, lhs_arena,
                                       &other->_impl_.pathbuf_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidFsDatareadStartFtraceEvent, _impl_.offset_)
      + sizeof(AndroidFsDatareadStartFtraceEvent::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(AndroidFsDatareadStartFtraceEvent, _impl_.i_size_)>(
          reinterpret_cast<char*>(&_impl_.i_size_),
          reinterpret_cast<char*>(&other->_impl_.i_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidFsDatareadStartFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[1]);
}
// ===================================================================

class AndroidFsDatawriteEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidFsDatawriteEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidFsDatawriteEndFtraceEvent, _impl_._has_bits_);
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ino(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidFsDatawriteEndFtraceEvent::AndroidFsDatawriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
}
AndroidFsDatawriteEndFtraceEvent::AndroidFsDatawriteEndFtraceEvent(const AndroidFsDatawriteEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
}

inline void AndroidFsDatawriteEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ino_) { ::uint64_t{0u} }

    , decltype(_impl_.offset_) { ::int64_t{0} }

    , decltype(_impl_.bytes_) { 0 }

  };
}

AndroidFsDatawriteEndFtraceEvent::~AndroidFsDatawriteEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidFsDatawriteEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AndroidFsDatawriteEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidFsDatawriteEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ino_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.ino_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidFsDatawriteEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ino(&has_bits);
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidFsDatawriteEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bytes = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_bytes(), target);
  }

  // optional uint64 ino = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_ino(), target);
  }

  // optional int64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  return target;
}

::size_t AndroidFsDatawriteEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 ino = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ino());
    }

    // optional int64 offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

    // optional int32 bytes = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidFsDatawriteEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidFsDatawriteEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidFsDatawriteEndFtraceEvent::GetClassData() const { return &_class_data_; }


void AndroidFsDatawriteEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidFsDatawriteEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const AndroidFsDatawriteEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ino_ = from._impl_.ino_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidFsDatawriteEndFtraceEvent::CopyFrom(const AndroidFsDatawriteEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidFsDatawriteEndFtraceEvent::IsInitialized() const {
  return true;
}

void AndroidFsDatawriteEndFtraceEvent::InternalSwap(AndroidFsDatawriteEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidFsDatawriteEndFtraceEvent, _impl_.bytes_)
      + sizeof(AndroidFsDatawriteEndFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(AndroidFsDatawriteEndFtraceEvent, _impl_.ino_)>(
          reinterpret_cast<char*>(&_impl_.ino_),
          reinterpret_cast<char*>(&other->_impl_.ino_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidFsDatawriteEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[2]);
}
// ===================================================================

class AndroidFsDatawriteStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidFsDatawriteStartFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidFsDatawriteStartFtraceEvent, _impl_._has_bits_);
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cmdline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ino(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pathbuf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AndroidFsDatawriteStartFtraceEvent::AndroidFsDatawriteStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
}
AndroidFsDatawriteStartFtraceEvent::AndroidFsDatawriteStartFtraceEvent(const AndroidFsDatawriteStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidFsDatawriteStartFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_) {}

    , decltype(_impl_.pathbuf_) {}

    , decltype(_impl_.i_size_) {}

    , decltype(_impl_.ino_) {}

    , decltype(_impl_.bytes_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.offset_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cmdline_.Set(from._internal_cmdline(), _this->GetArenaForAllocation());
  }
  _impl_.pathbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.pathbuf_.Set(from._internal_pathbuf(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.i_size_, &from._impl_.i_size_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.i_size_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
}

inline void AndroidFsDatawriteStartFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_) {}

    , decltype(_impl_.pathbuf_) {}

    , decltype(_impl_.i_size_) { ::int64_t{0} }

    , decltype(_impl_.ino_) { ::uint64_t{0u} }

    , decltype(_impl_.bytes_) { 0 }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.offset_) { ::int64_t{0} }

  };
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pathbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidFsDatawriteStartFtraceEvent::~AndroidFsDatawriteStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidFsDatawriteStartFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmdline_.Destroy();
  _impl_.pathbuf_.Destroy();
}

void AndroidFsDatawriteStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidFsDatawriteStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cmdline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pathbuf_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.i_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.i_size_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidFsDatawriteStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cmdline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 i_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_i_size(&has_bits);
          _impl_.i_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ino(&has_bits);
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pathbuf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pathbuf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidFsDatawriteStartFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bytes = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_bytes(), target);
  }

  // optional string cmdline = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cmdline();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 i_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_i_size(), target);
  }

  // optional uint64 ino = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_ino(), target);
  }

  // optional int64 offset = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_offset(), target);
  }

  // optional string pathbuf = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_pathbuf();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional int32 pid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  return target;
}

::size_t AndroidFsDatawriteStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string cmdline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmdline());
    }

    // optional string pathbuf = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pathbuf());
    }

    // optional int64 i_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_i_size());
    }

    // optional uint64 ino = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ino());
    }

    // optional int32 bytes = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bytes());
    }

    // optional int32 pid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional int64 offset = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidFsDatawriteStartFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidFsDatawriteStartFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidFsDatawriteStartFtraceEvent::GetClassData() const { return &_class_data_; }


void AndroidFsDatawriteStartFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidFsDatawriteStartFtraceEvent*>(&to_msg);
  auto& from = static_cast<const AndroidFsDatawriteStartFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cmdline(from._internal_cmdline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pathbuf(from._internal_pathbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.i_size_ = from._impl_.i_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ino_ = from._impl_.ino_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidFsDatawriteStartFtraceEvent::CopyFrom(const AndroidFsDatawriteStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidFsDatawriteStartFtraceEvent::IsInitialized() const {
  return true;
}

void AndroidFsDatawriteStartFtraceEvent::InternalSwap(AndroidFsDatawriteStartFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmdline_, lhs_arena,
                                       &other->_impl_.cmdline_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pathbuf_, lhs_arena,
                                       &other->_impl_.pathbuf_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidFsDatawriteStartFtraceEvent, _impl_.offset_)
      + sizeof(AndroidFsDatawriteStartFtraceEvent::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(AndroidFsDatawriteStartFtraceEvent, _impl_.i_size_)>(
          reinterpret_cast<char*>(&_impl_.i_size_),
          reinterpret_cast<char*>(&other->_impl_.i_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidFsDatawriteStartFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[3]);
}
// ===================================================================

class AndroidFsFsyncEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidFsFsyncEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidFsFsyncEndFtraceEvent, _impl_._has_bits_);
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ino(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AndroidFsFsyncEndFtraceEvent::AndroidFsFsyncEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
}
AndroidFsFsyncEndFtraceEvent::AndroidFsFsyncEndFtraceEvent(const AndroidFsFsyncEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
}

inline void AndroidFsFsyncEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ino_) { ::uint64_t{0u} }

    , decltype(_impl_.offset_) { ::int64_t{0} }

    , decltype(_impl_.bytes_) { 0 }

  };
}

AndroidFsFsyncEndFtraceEvent::~AndroidFsFsyncEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidFsFsyncEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AndroidFsFsyncEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidFsFsyncEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ino_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_) -
        reinterpret_cast<char*>(&_impl_.ino_)) + sizeof(_impl_.bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidFsFsyncEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytes(&has_bits);
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ino = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ino(&has_bits);
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidFsFsyncEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bytes = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_bytes(), target);
  }

  // optional uint64 ino = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_ino(), target);
  }

  // optional int64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  return target;
}

::size_t AndroidFsFsyncEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 ino = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ino());
    }

    // optional int64 offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_offset());
    }

    // optional int32 bytes = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidFsFsyncEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidFsFsyncEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidFsFsyncEndFtraceEvent::GetClassData() const { return &_class_data_; }


void AndroidFsFsyncEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidFsFsyncEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const AndroidFsFsyncEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ino_ = from._impl_.ino_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bytes_ = from._impl_.bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidFsFsyncEndFtraceEvent::CopyFrom(const AndroidFsFsyncEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidFsFsyncEndFtraceEvent::IsInitialized() const {
  return true;
}

void AndroidFsFsyncEndFtraceEvent::InternalSwap(AndroidFsFsyncEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidFsFsyncEndFtraceEvent, _impl_.bytes_)
      + sizeof(AndroidFsFsyncEndFtraceEvent::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(AndroidFsFsyncEndFtraceEvent, _impl_.ino_)>(
          reinterpret_cast<char*>(&_impl_.ino_),
          reinterpret_cast<char*>(&other->_impl_.ino_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidFsFsyncEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[4]);
}
// ===================================================================

class AndroidFsFsyncStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidFsFsyncStartFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidFsFsyncStartFtraceEvent, _impl_._has_bits_);
  static void set_has_cmdline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ino(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pathbuf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AndroidFsFsyncStartFtraceEvent::AndroidFsFsyncStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
}
AndroidFsFsyncStartFtraceEvent::AndroidFsFsyncStartFtraceEvent(const AndroidFsFsyncStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidFsFsyncStartFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_) {}

    , decltype(_impl_.pathbuf_) {}

    , decltype(_impl_.i_size_) {}

    , decltype(_impl_.ino_) {}

    , decltype(_impl_.pid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cmdline_.Set(from._internal_cmdline(), _this->GetArenaForAllocation());
  }
  _impl_.pathbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.pathbuf_.Set(from._internal_pathbuf(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.i_size_, &from._impl_.i_size_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.i_size_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
}

inline void AndroidFsFsyncStartFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_) {}

    , decltype(_impl_.pathbuf_) {}

    , decltype(_impl_.i_size_) { ::int64_t{0} }

    , decltype(_impl_.ino_) { ::uint64_t{0u} }

    , decltype(_impl_.pid_) { 0 }

  };
  _impl_.cmdline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pathbuf_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AndroidFsFsyncStartFtraceEvent::~AndroidFsFsyncStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidFsFsyncStartFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmdline_.Destroy();
  _impl_.pathbuf_.Destroy();
}

void AndroidFsFsyncStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidFsFsyncStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cmdline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pathbuf_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.i_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pid_) -
        reinterpret_cast<char*>(&_impl_.i_size_)) + sizeof(_impl_.pid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidFsFsyncStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string cmdline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cmdline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 i_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_i_size(&has_bits);
          _impl_.i_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ino = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_ino(&has_bits);
          _impl_.ino_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string pathbuf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pathbuf();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidFsFsyncStartFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string cmdline = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cmdline();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 i_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_i_size(), target);
  }

  // optional uint64 ino = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_ino(), target);
  }

  // optional string pathbuf = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_pathbuf();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int32 pid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  return target;
}

::size_t AndroidFsFsyncStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cmdline = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cmdline());
    }

    // optional string pathbuf = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_pathbuf());
    }

    // optional int64 i_size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_i_size());
    }

    // optional uint64 ino = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_ino());
    }

    // optional int32 pid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidFsFsyncStartFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidFsFsyncStartFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidFsFsyncStartFtraceEvent::GetClassData() const { return &_class_data_; }


void AndroidFsFsyncStartFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidFsFsyncStartFtraceEvent*>(&to_msg);
  auto& from = static_cast<const AndroidFsFsyncStartFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cmdline(from._internal_cmdline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pathbuf(from._internal_pathbuf());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.i_size_ = from._impl_.i_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ino_ = from._impl_.ino_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidFsFsyncStartFtraceEvent::CopyFrom(const AndroidFsFsyncStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidFsFsyncStartFtraceEvent::IsInitialized() const {
  return true;
}

void AndroidFsFsyncStartFtraceEvent::InternalSwap(AndroidFsFsyncStartFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cmdline_, lhs_arena,
                                       &other->_impl_.cmdline_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pathbuf_, lhs_arena,
                                       &other->_impl_.pathbuf_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidFsFsyncStartFtraceEvent, _impl_.pid_)
      + sizeof(AndroidFsFsyncStartFtraceEvent::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(AndroidFsFsyncStartFtraceEvent, _impl_.i_size_)>(
          reinterpret_cast<char*>(&_impl_.i_size_),
          reinterpret_cast<char*>(&other->_impl_.i_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidFsFsyncStartFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidFsDatareadEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidFsDatareadEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidFsDatareadEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidFsDatareadStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidFsDatareadStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidFsDatareadStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidFsFsyncEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidFsFsyncEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidFsFsyncEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidFsFsyncStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidFsFsyncStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidFsFsyncStartFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
