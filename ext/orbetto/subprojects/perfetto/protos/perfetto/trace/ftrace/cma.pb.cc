// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cma.proto

#include "protos/perfetto/trace/ftrace/cma.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR CmaAllocStartFtraceEvent::CmaAllocStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.align_)*/ 0u

  , /*decltype(_impl_.count_)*/ 0u
} {}
struct CmaAllocStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmaAllocStartFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmaAllocStartFtraceEventDefaultTypeInternal() {}
  union {
    CmaAllocStartFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmaAllocStartFtraceEventDefaultTypeInternal _CmaAllocStartFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CmaAllocInfoFtraceEvent::CmaAllocInfoFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.align_)*/ 0u

  , /*decltype(_impl_.count_)*/ 0u

  , /*decltype(_impl_.err_iso_)*/ 0u

  , /*decltype(_impl_.err_mig_)*/ 0u

  , /*decltype(_impl_.nr_mapped_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_migrated_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_reclaimed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pfn_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.err_test_)*/ 0u
} {}
struct CmaAllocInfoFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmaAllocInfoFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmaAllocInfoFtraceEventDefaultTypeInternal() {}
  union {
    CmaAllocInfoFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmaAllocInfoFtraceEventDefaultTypeInternal _CmaAllocInfoFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocStartFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocStartFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocStartFtraceEvent, _impl_.align_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocStartFtraceEvent, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocStartFtraceEvent, _impl_.name_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.align_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.err_iso_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.err_mig_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.err_test_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.nr_mapped_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.nr_migrated_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.nr_reclaimed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CmaAllocInfoFtraceEvent, _impl_.pfn_),
    1,
    2,
    3,
    4,
    9,
    0,
    5,
    6,
    7,
    8,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::perfetto::protos::CmaAllocStartFtraceEvent)},
        { 14, 32, -1, sizeof(::perfetto::protos::CmaAllocInfoFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_CmaAllocStartFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CmaAllocInfoFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/ftrace/cma.proto"
    "\022\017perfetto.protos\"F\n\030CmaAllocStartFtrace"
    "Event\022\r\n\005align\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\014\n\004n"
    "ame\030\003 \001(\t\"\304\001\n\027CmaAllocInfoFtraceEvent\022\r\n"
    "\005align\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\017\n\007err_iso\030\003"
    " \001(\r\022\017\n\007err_mig\030\004 \001(\r\022\020\n\010err_test\030\005 \001(\r\022"
    "\014\n\004name\030\006 \001(\t\022\021\n\tnr_mapped\030\007 \001(\004\022\023\n\013nr_m"
    "igrated\030\010 \001(\004\022\024\n\014nr_reclaimed\030\t \001(\004\022\013\n\003p"
    "fn\030\n \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto = {
    false,
    false,
    328,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto,
    "protos/perfetto/trace/ftrace/cma.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class CmaAllocStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CmaAllocStartFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CmaAllocStartFtraceEvent, _impl_._has_bits_);
  static void set_has_align(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CmaAllocStartFtraceEvent::CmaAllocStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CmaAllocStartFtraceEvent)
}
CmaAllocStartFtraceEvent::CmaAllocStartFtraceEvent(const CmaAllocStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CmaAllocStartFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.align_) {}

    , decltype(_impl_.count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.align_, &from._impl_.align_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.align_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CmaAllocStartFtraceEvent)
}

inline void CmaAllocStartFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.align_) { 0u }

    , decltype(_impl_.count_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CmaAllocStartFtraceEvent::~CmaAllocStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CmaAllocStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CmaAllocStartFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CmaAllocStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CmaAllocStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CmaAllocStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.align_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.align_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmaAllocStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 align = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_align(&has_bits);
          _impl_.align_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CmaAllocStartFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CmaAllocStartFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CmaAllocStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 align = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_align(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_count(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CmaAllocStartFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CmaAllocStartFtraceEvent)
  return target;
}

::size_t CmaAllocStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CmaAllocStartFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint32 align = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_align());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmaAllocStartFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CmaAllocStartFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmaAllocStartFtraceEvent::GetClassData() const { return &_class_data_; }


void CmaAllocStartFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CmaAllocStartFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CmaAllocStartFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CmaAllocStartFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.align_ = from._impl_.align_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CmaAllocStartFtraceEvent::CopyFrom(const CmaAllocStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CmaAllocStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmaAllocStartFtraceEvent::IsInitialized() const {
  return true;
}

void CmaAllocStartFtraceEvent::InternalSwap(CmaAllocStartFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmaAllocStartFtraceEvent, _impl_.count_)
      + sizeof(CmaAllocStartFtraceEvent::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CmaAllocStartFtraceEvent, _impl_.align_)>(
          reinterpret_cast<char*>(&_impl_.align_),
          reinterpret_cast<char*>(&other->_impl_.align_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmaAllocStartFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto[0]);
}
// ===================================================================

class CmaAllocInfoFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CmaAllocInfoFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CmaAllocInfoFtraceEvent, _impl_._has_bits_);
  static void set_has_align(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_err_iso(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_err_mig(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_err_test(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nr_mapped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_nr_migrated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_nr_reclaimed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pfn(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CmaAllocInfoFtraceEvent::CmaAllocInfoFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CmaAllocInfoFtraceEvent)
}
CmaAllocInfoFtraceEvent::CmaAllocInfoFtraceEvent(const CmaAllocInfoFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CmaAllocInfoFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.align_) {}

    , decltype(_impl_.count_) {}

    , decltype(_impl_.err_iso_) {}

    , decltype(_impl_.err_mig_) {}

    , decltype(_impl_.nr_mapped_) {}

    , decltype(_impl_.nr_migrated_) {}

    , decltype(_impl_.nr_reclaimed_) {}

    , decltype(_impl_.pfn_) {}

    , decltype(_impl_.err_test_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.align_, &from._impl_.align_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.err_test_) -
    reinterpret_cast<char*>(&_impl_.align_)) + sizeof(_impl_.err_test_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CmaAllocInfoFtraceEvent)
}

inline void CmaAllocInfoFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.align_) { 0u }

    , decltype(_impl_.count_) { 0u }

    , decltype(_impl_.err_iso_) { 0u }

    , decltype(_impl_.err_mig_) { 0u }

    , decltype(_impl_.nr_mapped_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_migrated_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_reclaimed_) { ::uint64_t{0u} }

    , decltype(_impl_.pfn_) { ::uint64_t{0u} }

    , decltype(_impl_.err_test_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CmaAllocInfoFtraceEvent::~CmaAllocInfoFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CmaAllocInfoFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CmaAllocInfoFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CmaAllocInfoFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CmaAllocInfoFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CmaAllocInfoFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.align_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nr_reclaimed_) -
        reinterpret_cast<char*>(&_impl_.align_)) + sizeof(_impl_.nr_reclaimed_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.pfn_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.err_test_) -
        reinterpret_cast<char*>(&_impl_.pfn_)) + sizeof(_impl_.err_test_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmaAllocInfoFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 align = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_align(&has_bits);
          _impl_.align_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 err_iso = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_err_iso(&has_bits);
          _impl_.err_iso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 err_mig = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_err_mig(&has_bits);
          _impl_.err_mig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 err_test = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_err_test(&has_bits);
          _impl_.err_test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CmaAllocInfoFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_mapped = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_nr_mapped(&has_bits);
          _impl_.nr_mapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_migrated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_nr_migrated(&has_bits);
          _impl_.nr_migrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 nr_reclaimed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_nr_reclaimed(&has_bits);
          _impl_.nr_reclaimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 pfn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_pfn(&has_bits);
          _impl_.pfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CmaAllocInfoFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CmaAllocInfoFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 align = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_align(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_count(), target);
  }

  // optional uint32 err_iso = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_err_iso(), target);
  }

  // optional uint32 err_mig = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_err_mig(), target);
  }

  // optional uint32 err_test = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_err_test(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CmaAllocInfoFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional uint64 nr_mapped = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_nr_mapped(), target);
  }

  // optional uint64 nr_migrated = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_nr_migrated(), target);
  }

  // optional uint64 nr_reclaimed = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_nr_reclaimed(), target);
  }

  // optional uint64 pfn = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_pfn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CmaAllocInfoFtraceEvent)
  return target;
}

::size_t CmaAllocInfoFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CmaAllocInfoFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint32 align = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_align());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_count());
    }

    // optional uint32 err_iso = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_err_iso());
    }

    // optional uint32 err_mig = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_err_mig());
    }

    // optional uint64 nr_mapped = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_mapped());
    }

    // optional uint64 nr_migrated = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_migrated());
    }

    // optional uint64 nr_reclaimed = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nr_reclaimed());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 pfn = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_pfn());
    }

    // optional uint32 err_test = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_err_test());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmaAllocInfoFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CmaAllocInfoFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmaAllocInfoFtraceEvent::GetClassData() const { return &_class_data_; }


void CmaAllocInfoFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CmaAllocInfoFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CmaAllocInfoFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CmaAllocInfoFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.align_ = from._impl_.align_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.err_iso_ = from._impl_.err_iso_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.err_mig_ = from._impl_.err_mig_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nr_mapped_ = from._impl_.nr_mapped_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.nr_migrated_ = from._impl_.nr_migrated_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.nr_reclaimed_ = from._impl_.nr_reclaimed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pfn_ = from._impl_.pfn_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.err_test_ = from._impl_.err_test_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CmaAllocInfoFtraceEvent::CopyFrom(const CmaAllocInfoFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CmaAllocInfoFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmaAllocInfoFtraceEvent::IsInitialized() const {
  return true;
}

void CmaAllocInfoFtraceEvent::InternalSwap(CmaAllocInfoFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmaAllocInfoFtraceEvent, _impl_.err_test_)
      + sizeof(CmaAllocInfoFtraceEvent::_impl_.err_test_)
      - PROTOBUF_FIELD_OFFSET(CmaAllocInfoFtraceEvent, _impl_.align_)>(
          reinterpret_cast<char*>(&_impl_.align_),
          reinterpret_cast<char*>(&other->_impl_.align_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmaAllocInfoFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CmaAllocStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CmaAllocStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CmaAllocStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CmaAllocInfoFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CmaAllocInfoFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CmaAllocInfoFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
