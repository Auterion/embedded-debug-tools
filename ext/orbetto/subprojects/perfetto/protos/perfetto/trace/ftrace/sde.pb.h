// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sde.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
namespace perfetto {
namespace protos {
class SdeSdeEvtlogFtraceEvent;
struct SdeSdeEvtlogFtraceEventDefaultTypeInternal;
extern SdeSdeEvtlogFtraceEventDefaultTypeInternal _SdeSdeEvtlogFtraceEvent_default_instance_;
class SdeSdePerfCalcCrtcFtraceEvent;
struct SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal;
extern SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal _SdeSdePerfCalcCrtcFtraceEvent_default_instance_;
class SdeSdePerfCrtcUpdateFtraceEvent;
struct SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal;
extern SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal _SdeSdePerfCrtcUpdateFtraceEvent_default_instance_;
class SdeSdePerfSetQosLutsFtraceEvent;
struct SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal;
extern SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal _SdeSdePerfSetQosLutsFtraceEvent_default_instance_;
class SdeSdePerfUpdateBusFtraceEvent;
struct SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal;
extern SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal _SdeSdePerfUpdateBusFtraceEvent_default_instance_;
class SdeTracingMarkWriteFtraceEvent;
struct SdeTracingMarkWriteFtraceEventDefaultTypeInternal;
extern SdeTracingMarkWriteFtraceEventDefaultTypeInternal _SdeTracingMarkWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::SdeSdeEvtlogFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdeEvtlogFtraceEvent>(Arena*);
template <>
::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent>(Arena*);
template <>
::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent>(Arena*);
template <>
::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent>(Arena*);
template <>
::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent>(Arena*);
template <>
::perfetto::protos::SdeTracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeTracingMarkWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class SdeTracingMarkWriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeTracingMarkWriteFtraceEvent) */ {
 public:
  inline SdeTracingMarkWriteFtraceEvent() : SdeTracingMarkWriteFtraceEvent(nullptr) {}
  ~SdeTracingMarkWriteFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SdeTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent& from);
  SdeTracingMarkWriteFtraceEvent(SdeTracingMarkWriteFtraceEvent&& from) noexcept
    : SdeTracingMarkWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeTracingMarkWriteFtraceEvent& operator=(const SdeTracingMarkWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeTracingMarkWriteFtraceEvent& operator=(SdeTracingMarkWriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SdeTracingMarkWriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdeTracingMarkWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeTracingMarkWriteFtraceEvent*>(
               &_SdeTracingMarkWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SdeTracingMarkWriteFtraceEvent& a, SdeTracingMarkWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeTracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdeTracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SdeTracingMarkWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SdeTracingMarkWriteFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SdeTracingMarkWriteFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SdeTracingMarkWriteFtraceEvent& from) {
    SdeTracingMarkWriteFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdeTracingMarkWriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SdeTracingMarkWriteFtraceEvent";
  }
  protected:
  explicit SdeTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kTraceTypeFieldNumber = 3,
    kValueFieldNumber = 4,
    kTraceBeginFieldNumber = 5,
  };
  // optional string trace_name = 2;
  bool has_trace_name() const;
  void clear_trace_name() ;
  const std::string& trace_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_name(Arg_&& arg, Args_... args);
  std::string* mutable_trace_name();
  PROTOBUF_NODISCARD std::string* release_trace_name();
  void set_allocated_trace_name(std::string* ptr);

  private:
  const std::string& _internal_trace_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_name(
      const std::string& value);
  std::string* _internal_mutable_trace_name();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional uint32 trace_type = 3;
  bool has_trace_type() const;
  void clear_trace_type() ;
  ::uint32_t trace_type() const;
  void set_trace_type(::uint32_t value);

  private:
  ::uint32_t _internal_trace_type() const;
  void _internal_set_trace_type(::uint32_t value);

  public:
  // optional int32 value = 4;
  bool has_value() const;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // optional uint32 trace_begin = 5;
  bool has_trace_begin() const;
  void clear_trace_begin() ;
  ::uint32_t trace_begin() const;
  void set_trace_begin(::uint32_t value);

  private:
  ::uint32_t _internal_trace_begin() const;
  void _internal_set_trace_begin(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_name_;
    ::int32_t pid_;
    ::uint32_t trace_type_;
    ::int32_t value_;
    ::uint32_t trace_begin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};// -------------------------------------------------------------------

class SdeSdeEvtlogFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdeEvtlogFtraceEvent) */ {
 public:
  inline SdeSdeEvtlogFtraceEvent() : SdeSdeEvtlogFtraceEvent(nullptr) {}
  ~SdeSdeEvtlogFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SdeSdeEvtlogFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent& from);
  SdeSdeEvtlogFtraceEvent(SdeSdeEvtlogFtraceEvent&& from) noexcept
    : SdeSdeEvtlogFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdeEvtlogFtraceEvent& operator=(const SdeSdeEvtlogFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdeEvtlogFtraceEvent& operator=(SdeSdeEvtlogFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SdeSdeEvtlogFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdeSdeEvtlogFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdeEvtlogFtraceEvent*>(
               &_SdeSdeEvtlogFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SdeSdeEvtlogFtraceEvent& a, SdeSdeEvtlogFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdeEvtlogFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdeSdeEvtlogFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SdeSdeEvtlogFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SdeSdeEvtlogFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SdeSdeEvtlogFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SdeSdeEvtlogFtraceEvent& from) {
    SdeSdeEvtlogFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdeSdeEvtlogFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SdeSdeEvtlogFtraceEvent";
  }
  protected:
  explicit SdeSdeEvtlogFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvtlogTagFieldNumber = 1,
    kPidFieldNumber = 2,
    kTagIdFieldNumber = 3,
  };
  // optional string evtlog_tag = 1;
  bool has_evtlog_tag() const;
  void clear_evtlog_tag() ;
  const std::string& evtlog_tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_evtlog_tag(Arg_&& arg, Args_... args);
  std::string* mutable_evtlog_tag();
  PROTOBUF_NODISCARD std::string* release_evtlog_tag();
  void set_allocated_evtlog_tag(std::string* ptr);

  private:
  const std::string& _internal_evtlog_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evtlog_tag(
      const std::string& value);
  std::string* _internal_mutable_evtlog_tag();

  public:
  // optional int32 pid = 2;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional uint32 tag_id = 3;
  bool has_tag_id() const;
  void clear_tag_id() ;
  ::uint32_t tag_id() const;
  void set_tag_id(::uint32_t value);

  private:
  ::uint32_t _internal_tag_id() const;
  void _internal_set_tag_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdeEvtlogFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evtlog_tag_;
    ::int32_t pid_;
    ::uint32_t tag_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};// -------------------------------------------------------------------

class SdeSdePerfCalcCrtcFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent) */ {
 public:
  inline SdeSdePerfCalcCrtcFtraceEvent() : SdeSdePerfCalcCrtcFtraceEvent(nullptr) {}
  ~SdeSdePerfCalcCrtcFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SdeSdePerfCalcCrtcFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent& from);
  SdeSdePerfCalcCrtcFtraceEvent(SdeSdePerfCalcCrtcFtraceEvent&& from) noexcept
    : SdeSdePerfCalcCrtcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfCalcCrtcFtraceEvent& operator=(const SdeSdePerfCalcCrtcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfCalcCrtcFtraceEvent& operator=(SdeSdePerfCalcCrtcFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SdeSdePerfCalcCrtcFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdeSdePerfCalcCrtcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfCalcCrtcFtraceEvent*>(
               &_SdeSdePerfCalcCrtcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SdeSdePerfCalcCrtcFtraceEvent& a, SdeSdePerfCalcCrtcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfCalcCrtcFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdeSdePerfCalcCrtcFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SdeSdePerfCalcCrtcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SdeSdePerfCalcCrtcFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SdeSdePerfCalcCrtcFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SdeSdePerfCalcCrtcFtraceEvent& from) {
    SdeSdePerfCalcCrtcFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdeSdePerfCalcCrtcFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent";
  }
  protected:
  explicit SdeSdePerfCalcCrtcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBwCtlEbiFieldNumber = 1,
    kBwCtlLlccFieldNumber = 2,
    kBwCtlMnocFieldNumber = 3,
    kCoreClkRateFieldNumber = 4,
    kCrtcFieldNumber = 5,
    kIbEbiFieldNumber = 6,
    kIbLlccFieldNumber = 7,
    kIbMnocFieldNumber = 8,
  };
  // optional uint64 bw_ctl_ebi = 1;
  bool has_bw_ctl_ebi() const;
  void clear_bw_ctl_ebi() ;
  ::uint64_t bw_ctl_ebi() const;
  void set_bw_ctl_ebi(::uint64_t value);

  private:
  ::uint64_t _internal_bw_ctl_ebi() const;
  void _internal_set_bw_ctl_ebi(::uint64_t value);

  public:
  // optional uint64 bw_ctl_llcc = 2;
  bool has_bw_ctl_llcc() const;
  void clear_bw_ctl_llcc() ;
  ::uint64_t bw_ctl_llcc() const;
  void set_bw_ctl_llcc(::uint64_t value);

  private:
  ::uint64_t _internal_bw_ctl_llcc() const;
  void _internal_set_bw_ctl_llcc(::uint64_t value);

  public:
  // optional uint64 bw_ctl_mnoc = 3;
  bool has_bw_ctl_mnoc() const;
  void clear_bw_ctl_mnoc() ;
  ::uint64_t bw_ctl_mnoc() const;
  void set_bw_ctl_mnoc(::uint64_t value);

  private:
  ::uint64_t _internal_bw_ctl_mnoc() const;
  void _internal_set_bw_ctl_mnoc(::uint64_t value);

  public:
  // optional uint32 core_clk_rate = 4;
  bool has_core_clk_rate() const;
  void clear_core_clk_rate() ;
  ::uint32_t core_clk_rate() const;
  void set_core_clk_rate(::uint32_t value);

  private:
  ::uint32_t _internal_core_clk_rate() const;
  void _internal_set_core_clk_rate(::uint32_t value);

  public:
  // optional uint32 crtc = 5;
  bool has_crtc() const;
  void clear_crtc() ;
  ::uint32_t crtc() const;
  void set_crtc(::uint32_t value);

  private:
  ::uint32_t _internal_crtc() const;
  void _internal_set_crtc(::uint32_t value);

  public:
  // optional uint64 ib_ebi = 6;
  bool has_ib_ebi() const;
  void clear_ib_ebi() ;
  ::uint64_t ib_ebi() const;
  void set_ib_ebi(::uint64_t value);

  private:
  ::uint64_t _internal_ib_ebi() const;
  void _internal_set_ib_ebi(::uint64_t value);

  public:
  // optional uint64 ib_llcc = 7;
  bool has_ib_llcc() const;
  void clear_ib_llcc() ;
  ::uint64_t ib_llcc() const;
  void set_ib_llcc(::uint64_t value);

  private:
  ::uint64_t _internal_ib_llcc() const;
  void _internal_set_ib_llcc(::uint64_t value);

  public:
  // optional uint64 ib_mnoc = 8;
  bool has_ib_mnoc() const;
  void clear_ib_mnoc() ;
  ::uint64_t ib_mnoc() const;
  void set_ib_mnoc(::uint64_t value);

  private:
  ::uint64_t _internal_ib_mnoc() const;
  void _internal_set_ib_mnoc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t bw_ctl_ebi_;
    ::uint64_t bw_ctl_llcc_;
    ::uint64_t bw_ctl_mnoc_;
    ::uint32_t core_clk_rate_;
    ::uint32_t crtc_;
    ::uint64_t ib_ebi_;
    ::uint64_t ib_llcc_;
    ::uint64_t ib_mnoc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};// -------------------------------------------------------------------

class SdeSdePerfCrtcUpdateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent) */ {
 public:
  inline SdeSdePerfCrtcUpdateFtraceEvent() : SdeSdePerfCrtcUpdateFtraceEvent(nullptr) {}
  ~SdeSdePerfCrtcUpdateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SdeSdePerfCrtcUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent& from);
  SdeSdePerfCrtcUpdateFtraceEvent(SdeSdePerfCrtcUpdateFtraceEvent&& from) noexcept
    : SdeSdePerfCrtcUpdateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfCrtcUpdateFtraceEvent& operator=(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfCrtcUpdateFtraceEvent& operator=(SdeSdePerfCrtcUpdateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SdeSdePerfCrtcUpdateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdeSdePerfCrtcUpdateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfCrtcUpdateFtraceEvent*>(
               &_SdeSdePerfCrtcUpdateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SdeSdePerfCrtcUpdateFtraceEvent& a, SdeSdePerfCrtcUpdateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfCrtcUpdateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdeSdePerfCrtcUpdateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SdeSdePerfCrtcUpdateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SdeSdePerfCrtcUpdateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SdeSdePerfCrtcUpdateFtraceEvent& from) {
    SdeSdePerfCrtcUpdateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdeSdePerfCrtcUpdateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent";
  }
  protected:
  explicit SdeSdePerfCrtcUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBwCtlEbiFieldNumber = 1,
    kBwCtlLlccFieldNumber = 2,
    kBwCtlMnocFieldNumber = 3,
    kCoreClkRateFieldNumber = 4,
    kCrtcFieldNumber = 5,
    kPerPipeIbEbiFieldNumber = 7,
    kPerPipeIbLlccFieldNumber = 8,
    kParamsFieldNumber = 6,
    kStopReqFieldNumber = 10,
    kPerPipeIbMnocFieldNumber = 9,
    kUpdateBusFieldNumber = 11,
    kUpdateClkFieldNumber = 12,
  };
  // optional uint64 bw_ctl_ebi = 1;
  bool has_bw_ctl_ebi() const;
  void clear_bw_ctl_ebi() ;
  ::uint64_t bw_ctl_ebi() const;
  void set_bw_ctl_ebi(::uint64_t value);

  private:
  ::uint64_t _internal_bw_ctl_ebi() const;
  void _internal_set_bw_ctl_ebi(::uint64_t value);

  public:
  // optional uint64 bw_ctl_llcc = 2;
  bool has_bw_ctl_llcc() const;
  void clear_bw_ctl_llcc() ;
  ::uint64_t bw_ctl_llcc() const;
  void set_bw_ctl_llcc(::uint64_t value);

  private:
  ::uint64_t _internal_bw_ctl_llcc() const;
  void _internal_set_bw_ctl_llcc(::uint64_t value);

  public:
  // optional uint64 bw_ctl_mnoc = 3;
  bool has_bw_ctl_mnoc() const;
  void clear_bw_ctl_mnoc() ;
  ::uint64_t bw_ctl_mnoc() const;
  void set_bw_ctl_mnoc(::uint64_t value);

  private:
  ::uint64_t _internal_bw_ctl_mnoc() const;
  void _internal_set_bw_ctl_mnoc(::uint64_t value);

  public:
  // optional uint32 core_clk_rate = 4;
  bool has_core_clk_rate() const;
  void clear_core_clk_rate() ;
  ::uint32_t core_clk_rate() const;
  void set_core_clk_rate(::uint32_t value);

  private:
  ::uint32_t _internal_core_clk_rate() const;
  void _internal_set_core_clk_rate(::uint32_t value);

  public:
  // optional uint32 crtc = 5;
  bool has_crtc() const;
  void clear_crtc() ;
  ::uint32_t crtc() const;
  void set_crtc(::uint32_t value);

  private:
  ::uint32_t _internal_crtc() const;
  void _internal_set_crtc(::uint32_t value);

  public:
  // optional uint64 per_pipe_ib_ebi = 7;
  bool has_per_pipe_ib_ebi() const;
  void clear_per_pipe_ib_ebi() ;
  ::uint64_t per_pipe_ib_ebi() const;
  void set_per_pipe_ib_ebi(::uint64_t value);

  private:
  ::uint64_t _internal_per_pipe_ib_ebi() const;
  void _internal_set_per_pipe_ib_ebi(::uint64_t value);

  public:
  // optional uint64 per_pipe_ib_llcc = 8;
  bool has_per_pipe_ib_llcc() const;
  void clear_per_pipe_ib_llcc() ;
  ::uint64_t per_pipe_ib_llcc() const;
  void set_per_pipe_ib_llcc(::uint64_t value);

  private:
  ::uint64_t _internal_per_pipe_ib_llcc() const;
  void _internal_set_per_pipe_ib_llcc(::uint64_t value);

  public:
  // optional int32 params = 6;
  bool has_params() const;
  void clear_params() ;
  ::int32_t params() const;
  void set_params(::int32_t value);

  private:
  ::int32_t _internal_params() const;
  void _internal_set_params(::int32_t value);

  public:
  // optional uint32 stop_req = 10;
  bool has_stop_req() const;
  void clear_stop_req() ;
  ::uint32_t stop_req() const;
  void set_stop_req(::uint32_t value);

  private:
  ::uint32_t _internal_stop_req() const;
  void _internal_set_stop_req(::uint32_t value);

  public:
  // optional uint64 per_pipe_ib_mnoc = 9;
  bool has_per_pipe_ib_mnoc() const;
  void clear_per_pipe_ib_mnoc() ;
  ::uint64_t per_pipe_ib_mnoc() const;
  void set_per_pipe_ib_mnoc(::uint64_t value);

  private:
  ::uint64_t _internal_per_pipe_ib_mnoc() const;
  void _internal_set_per_pipe_ib_mnoc(::uint64_t value);

  public:
  // optional uint32 update_bus = 11;
  bool has_update_bus() const;
  void clear_update_bus() ;
  ::uint32_t update_bus() const;
  void set_update_bus(::uint32_t value);

  private:
  ::uint32_t _internal_update_bus() const;
  void _internal_set_update_bus(::uint32_t value);

  public:
  // optional uint32 update_clk = 12;
  bool has_update_clk() const;
  void clear_update_clk() ;
  ::uint32_t update_clk() const;
  void set_update_clk(::uint32_t value);

  private:
  ::uint32_t _internal_update_clk() const;
  void _internal_set_update_clk(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t bw_ctl_ebi_;
    ::uint64_t bw_ctl_llcc_;
    ::uint64_t bw_ctl_mnoc_;
    ::uint32_t core_clk_rate_;
    ::uint32_t crtc_;
    ::uint64_t per_pipe_ib_ebi_;
    ::uint64_t per_pipe_ib_llcc_;
    ::int32_t params_;
    ::uint32_t stop_req_;
    ::uint64_t per_pipe_ib_mnoc_;
    ::uint32_t update_bus_;
    ::uint32_t update_clk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};// -------------------------------------------------------------------

class SdeSdePerfSetQosLutsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent) */ {
 public:
  inline SdeSdePerfSetQosLutsFtraceEvent() : SdeSdePerfSetQosLutsFtraceEvent(nullptr) {}
  ~SdeSdePerfSetQosLutsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SdeSdePerfSetQosLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent& from);
  SdeSdePerfSetQosLutsFtraceEvent(SdeSdePerfSetQosLutsFtraceEvent&& from) noexcept
    : SdeSdePerfSetQosLutsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfSetQosLutsFtraceEvent& operator=(const SdeSdePerfSetQosLutsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfSetQosLutsFtraceEvent& operator=(SdeSdePerfSetQosLutsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SdeSdePerfSetQosLutsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdeSdePerfSetQosLutsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfSetQosLutsFtraceEvent*>(
               &_SdeSdePerfSetQosLutsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SdeSdePerfSetQosLutsFtraceEvent& a, SdeSdePerfSetQosLutsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfSetQosLutsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdeSdePerfSetQosLutsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SdeSdePerfSetQosLutsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SdeSdePerfSetQosLutsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SdeSdePerfSetQosLutsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SdeSdePerfSetQosLutsFtraceEvent& from) {
    SdeSdePerfSetQosLutsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdeSdePerfSetQosLutsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent";
  }
  protected:
  explicit SdeSdePerfSetQosLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlFieldNumber = 1,
    kFmtFieldNumber = 2,
    kLutFieldNumber = 3,
    kLutUsageFieldNumber = 4,
    kPnumFieldNumber = 5,
    kRtFieldNumber = 6,
  };
  // optional uint32 fl = 1;
  bool has_fl() const;
  void clear_fl() ;
  ::uint32_t fl() const;
  void set_fl(::uint32_t value);

  private:
  ::uint32_t _internal_fl() const;
  void _internal_set_fl(::uint32_t value);

  public:
  // optional uint32 fmt = 2;
  bool has_fmt() const;
  void clear_fmt() ;
  ::uint32_t fmt() const;
  void set_fmt(::uint32_t value);

  private:
  ::uint32_t _internal_fmt() const;
  void _internal_set_fmt(::uint32_t value);

  public:
  // optional uint64 lut = 3;
  bool has_lut() const;
  void clear_lut() ;
  ::uint64_t lut() const;
  void set_lut(::uint64_t value);

  private:
  ::uint64_t _internal_lut() const;
  void _internal_set_lut(::uint64_t value);

  public:
  // optional uint32 lut_usage = 4;
  bool has_lut_usage() const;
  void clear_lut_usage() ;
  ::uint32_t lut_usage() const;
  void set_lut_usage(::uint32_t value);

  private:
  ::uint32_t _internal_lut_usage() const;
  void _internal_set_lut_usage(::uint32_t value);

  public:
  // optional uint32 pnum = 5;
  bool has_pnum() const;
  void clear_pnum() ;
  ::uint32_t pnum() const;
  void set_pnum(::uint32_t value);

  private:
  ::uint32_t _internal_pnum() const;
  void _internal_set_pnum(::uint32_t value);

  public:
  // optional uint32 rt = 6;
  bool has_rt() const;
  void clear_rt() ;
  ::uint32_t rt() const;
  void set_rt(::uint32_t value);

  private:
  ::uint32_t _internal_rt() const;
  void _internal_set_rt(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t fl_;
    ::uint32_t fmt_;
    ::uint64_t lut_;
    ::uint32_t lut_usage_;
    ::uint32_t pnum_;
    ::uint32_t rt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};// -------------------------------------------------------------------

class SdeSdePerfUpdateBusFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent) */ {
 public:
  inline SdeSdePerfUpdateBusFtraceEvent() : SdeSdePerfUpdateBusFtraceEvent(nullptr) {}
  ~SdeSdePerfUpdateBusFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SdeSdePerfUpdateBusFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent& from);
  SdeSdePerfUpdateBusFtraceEvent(SdeSdePerfUpdateBusFtraceEvent&& from) noexcept
    : SdeSdePerfUpdateBusFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfUpdateBusFtraceEvent& operator=(const SdeSdePerfUpdateBusFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfUpdateBusFtraceEvent& operator=(SdeSdePerfUpdateBusFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SdeSdePerfUpdateBusFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdeSdePerfUpdateBusFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfUpdateBusFtraceEvent*>(
               &_SdeSdePerfUpdateBusFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SdeSdePerfUpdateBusFtraceEvent& a, SdeSdePerfUpdateBusFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfUpdateBusFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdeSdePerfUpdateBusFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SdeSdePerfUpdateBusFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SdeSdePerfUpdateBusFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SdeSdePerfUpdateBusFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SdeSdePerfUpdateBusFtraceEvent& from) {
    SdeSdePerfUpdateBusFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdeSdePerfUpdateBusFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SdeSdePerfUpdateBusFtraceEvent";
  }
  protected:
  explicit SdeSdePerfUpdateBusFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbQuotaFieldNumber = 1,
    kBusIdFieldNumber = 2,
    kClientFieldNumber = 3,
    kIbQuotaFieldNumber = 4,
  };
  // optional uint64 ab_quota = 1;
  bool has_ab_quota() const;
  void clear_ab_quota() ;
  ::uint64_t ab_quota() const;
  void set_ab_quota(::uint64_t value);

  private:
  ::uint64_t _internal_ab_quota() const;
  void _internal_set_ab_quota(::uint64_t value);

  public:
  // optional uint32 bus_id = 2;
  bool has_bus_id() const;
  void clear_bus_id() ;
  ::uint32_t bus_id() const;
  void set_bus_id(::uint32_t value);

  private:
  ::uint32_t _internal_bus_id() const;
  void _internal_set_bus_id(::uint32_t value);

  public:
  // optional int32 client = 3;
  bool has_client() const;
  void clear_client() ;
  ::int32_t client() const;
  void set_client(::int32_t value);

  private:
  ::int32_t _internal_client() const;
  void _internal_set_client(::int32_t value);

  public:
  // optional uint64 ib_quota = 4;
  bool has_ib_quota() const;
  void clear_ib_quota() ;
  ::uint64_t ib_quota() const;
  void set_ib_quota(::uint64_t value);

  private:
  ::uint64_t _internal_ib_quota() const;
  void _internal_set_ib_quota(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ab_quota_;
    ::uint32_t bus_id_;
    ::int32_t client_;
    ::uint64_t ib_quota_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SdeTracingMarkWriteFtraceEvent

// optional int32 pid = 1;
inline bool SdeTracingMarkWriteFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SdeTracingMarkWriteFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.pid)
  return _internal_pid();
}
inline void SdeTracingMarkWriteFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.pid)
}
inline ::int32_t SdeTracingMarkWriteFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void SdeTracingMarkWriteFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional string trace_name = 2;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_name() {
  _impl_.trace_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdeTracingMarkWriteFtraceEvent::trace_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  return _internal_trace_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SdeTracingMarkWriteFtraceEvent::set_trace_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trace_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline std::string* SdeTracingMarkWriteFtraceEvent::mutable_trace_name() {
  std::string* _s = _internal_mutable_trace_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  return _s;
}
inline const std::string& SdeTracingMarkWriteFtraceEvent::_internal_trace_name() const {
  return _impl_.trace_name_.Get();
}
inline void SdeTracingMarkWriteFtraceEvent::_internal_set_trace_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.trace_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SdeTracingMarkWriteFtraceEvent::_internal_mutable_trace_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.trace_name_.Mutable( GetArenaForAllocation());
}
inline std::string* SdeTracingMarkWriteFtraceEvent::release_trace_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.trace_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SdeTracingMarkWriteFtraceEvent::set_allocated_trace_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trace_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_name_.IsDefault()) {
          _impl_.trace_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}

// optional uint32 trace_type = 3;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_type() {
  _impl_.trace_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SdeTracingMarkWriteFtraceEvent::trace_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_type)
  return _internal_trace_type();
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_type(::uint32_t value) {
  _internal_set_trace_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_type)
}
inline ::uint32_t SdeTracingMarkWriteFtraceEvent::_internal_trace_type() const {
  return _impl_.trace_type_;
}
inline void SdeTracingMarkWriteFtraceEvent::_internal_set_trace_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trace_type_ = value;
}

// optional int32 value = 4;
inline bool SdeTracingMarkWriteFtraceEvent::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SdeTracingMarkWriteFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.value)
  return _internal_value();
}
inline void SdeTracingMarkWriteFtraceEvent::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.value)
}
inline ::int32_t SdeTracingMarkWriteFtraceEvent::_internal_value() const {
  return _impl_.value_;
}
inline void SdeTracingMarkWriteFtraceEvent::_internal_set_value(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_ = value;
}

// optional uint32 trace_begin = 5;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_begin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_begin() {
  _impl_.trace_begin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SdeTracingMarkWriteFtraceEvent::trace_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_begin)
  return _internal_trace_begin();
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_begin(::uint32_t value) {
  _internal_set_trace_begin(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_begin)
}
inline ::uint32_t SdeTracingMarkWriteFtraceEvent::_internal_trace_begin() const {
  return _impl_.trace_begin_;
}
inline void SdeTracingMarkWriteFtraceEvent::_internal_set_trace_begin(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.trace_begin_ = value;
}

// -------------------------------------------------------------------

// SdeSdeEvtlogFtraceEvent

// optional string evtlog_tag = 1;
inline bool SdeSdeEvtlogFtraceEvent::has_evtlog_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SdeSdeEvtlogFtraceEvent::clear_evtlog_tag() {
  _impl_.evtlog_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdeSdeEvtlogFtraceEvent::evtlog_tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
  return _internal_evtlog_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SdeSdeEvtlogFtraceEvent::set_evtlog_tag(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.evtlog_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}
inline std::string* SdeSdeEvtlogFtraceEvent::mutable_evtlog_tag() {
  std::string* _s = _internal_mutable_evtlog_tag();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
  return _s;
}
inline const std::string& SdeSdeEvtlogFtraceEvent::_internal_evtlog_tag() const {
  return _impl_.evtlog_tag_.Get();
}
inline void SdeSdeEvtlogFtraceEvent::_internal_set_evtlog_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.evtlog_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* SdeSdeEvtlogFtraceEvent::_internal_mutable_evtlog_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.evtlog_tag_.Mutable( GetArenaForAllocation());
}
inline std::string* SdeSdeEvtlogFtraceEvent::release_evtlog_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.evtlog_tag_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.evtlog_tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SdeSdeEvtlogFtraceEvent::set_allocated_evtlog_tag(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.evtlog_tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.evtlog_tag_.IsDefault()) {
          _impl_.evtlog_tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}

// optional int32 pid = 2;
inline bool SdeSdeEvtlogFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SdeSdeEvtlogFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SdeSdeEvtlogFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdeEvtlogFtraceEvent.pid)
  return _internal_pid();
}
inline void SdeSdeEvtlogFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdeEvtlogFtraceEvent.pid)
}
inline ::int32_t SdeSdeEvtlogFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void SdeSdeEvtlogFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional uint32 tag_id = 3;
inline bool SdeSdeEvtlogFtraceEvent::has_tag_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SdeSdeEvtlogFtraceEvent::clear_tag_id() {
  _impl_.tag_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SdeSdeEvtlogFtraceEvent::tag_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdeEvtlogFtraceEvent.tag_id)
  return _internal_tag_id();
}
inline void SdeSdeEvtlogFtraceEvent::set_tag_id(::uint32_t value) {
  _internal_set_tag_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdeEvtlogFtraceEvent.tag_id)
}
inline ::uint32_t SdeSdeEvtlogFtraceEvent::_internal_tag_id() const {
  return _impl_.tag_id_;
}
inline void SdeSdeEvtlogFtraceEvent::_internal_set_tag_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tag_id_ = value;
}

// -------------------------------------------------------------------

// SdeSdePerfCalcCrtcFtraceEvent

// optional uint64 bw_ctl_ebi = 1;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_bw_ctl_ebi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_bw_ctl_ebi() {
  _impl_.bw_ctl_ebi_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::bw_ctl_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_ebi)
  return _internal_bw_ctl_ebi();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_bw_ctl_ebi(::uint64_t value) {
  _internal_set_bw_ctl_ebi(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_ebi)
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::_internal_bw_ctl_ebi() const {
  return _impl_.bw_ctl_ebi_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_bw_ctl_ebi(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bw_ctl_ebi_ = value;
}

// optional uint64 bw_ctl_llcc = 2;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_bw_ctl_llcc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_bw_ctl_llcc() {
  _impl_.bw_ctl_llcc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::bw_ctl_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_llcc)
  return _internal_bw_ctl_llcc();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_bw_ctl_llcc(::uint64_t value) {
  _internal_set_bw_ctl_llcc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_llcc)
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::_internal_bw_ctl_llcc() const {
  return _impl_.bw_ctl_llcc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_bw_ctl_llcc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bw_ctl_llcc_ = value;
}

// optional uint64 bw_ctl_mnoc = 3;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_bw_ctl_mnoc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_bw_ctl_mnoc() {
  _impl_.bw_ctl_mnoc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::bw_ctl_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_mnoc)
  return _internal_bw_ctl_mnoc();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_bw_ctl_mnoc(::uint64_t value) {
  _internal_set_bw_ctl_mnoc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_mnoc)
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::_internal_bw_ctl_mnoc() const {
  return _impl_.bw_ctl_mnoc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_bw_ctl_mnoc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bw_ctl_mnoc_ = value;
}

// optional uint32 core_clk_rate = 4;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_core_clk_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_core_clk_rate() {
  _impl_.core_clk_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SdeSdePerfCalcCrtcFtraceEvent::core_clk_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.core_clk_rate)
  return _internal_core_clk_rate();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_core_clk_rate(::uint32_t value) {
  _internal_set_core_clk_rate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.core_clk_rate)
}
inline ::uint32_t SdeSdePerfCalcCrtcFtraceEvent::_internal_core_clk_rate() const {
  return _impl_.core_clk_rate_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_core_clk_rate(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.core_clk_rate_ = value;
}

// optional uint32 crtc = 5;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_crtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_crtc() {
  _impl_.crtc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SdeSdePerfCalcCrtcFtraceEvent::crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.crtc)
  return _internal_crtc();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_crtc(::uint32_t value) {
  _internal_set_crtc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.crtc)
}
inline ::uint32_t SdeSdePerfCalcCrtcFtraceEvent::_internal_crtc() const {
  return _impl_.crtc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_crtc(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.crtc_ = value;
}

// optional uint64 ib_ebi = 6;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_ib_ebi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_ib_ebi() {
  _impl_.ib_ebi_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::ib_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_ebi)
  return _internal_ib_ebi();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_ib_ebi(::uint64_t value) {
  _internal_set_ib_ebi(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_ebi)
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::_internal_ib_ebi() const {
  return _impl_.ib_ebi_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_ib_ebi(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ib_ebi_ = value;
}

// optional uint64 ib_llcc = 7;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_ib_llcc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_ib_llcc() {
  _impl_.ib_llcc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::ib_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_llcc)
  return _internal_ib_llcc();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_ib_llcc(::uint64_t value) {
  _internal_set_ib_llcc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_llcc)
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::_internal_ib_llcc() const {
  return _impl_.ib_llcc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_ib_llcc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ib_llcc_ = value;
}

// optional uint64 ib_mnoc = 8;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_ib_mnoc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_ib_mnoc() {
  _impl_.ib_mnoc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::ib_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_mnoc)
  return _internal_ib_mnoc();
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_ib_mnoc(::uint64_t value) {
  _internal_set_ib_mnoc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_mnoc)
}
inline ::uint64_t SdeSdePerfCalcCrtcFtraceEvent::_internal_ib_mnoc() const {
  return _impl_.ib_mnoc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::_internal_set_ib_mnoc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ib_mnoc_ = value;
}

// -------------------------------------------------------------------

// SdeSdePerfCrtcUpdateFtraceEvent

// optional uint64 bw_ctl_ebi = 1;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_bw_ctl_ebi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_bw_ctl_ebi() {
  _impl_.bw_ctl_ebi_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::bw_ctl_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_ebi)
  return _internal_bw_ctl_ebi();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_bw_ctl_ebi(::uint64_t value) {
  _internal_set_bw_ctl_ebi(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_ebi)
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_bw_ctl_ebi() const {
  return _impl_.bw_ctl_ebi_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_bw_ctl_ebi(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bw_ctl_ebi_ = value;
}

// optional uint64 bw_ctl_llcc = 2;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_bw_ctl_llcc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_bw_ctl_llcc() {
  _impl_.bw_ctl_llcc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::bw_ctl_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_llcc)
  return _internal_bw_ctl_llcc();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_bw_ctl_llcc(::uint64_t value) {
  _internal_set_bw_ctl_llcc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_llcc)
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_bw_ctl_llcc() const {
  return _impl_.bw_ctl_llcc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_bw_ctl_llcc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bw_ctl_llcc_ = value;
}

// optional uint64 bw_ctl_mnoc = 3;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_bw_ctl_mnoc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_bw_ctl_mnoc() {
  _impl_.bw_ctl_mnoc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::bw_ctl_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_mnoc)
  return _internal_bw_ctl_mnoc();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_bw_ctl_mnoc(::uint64_t value) {
  _internal_set_bw_ctl_mnoc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_mnoc)
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_bw_ctl_mnoc() const {
  return _impl_.bw_ctl_mnoc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_bw_ctl_mnoc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bw_ctl_mnoc_ = value;
}

// optional uint32 core_clk_rate = 4;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_core_clk_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_core_clk_rate() {
  _impl_.core_clk_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::core_clk_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.core_clk_rate)
  return _internal_core_clk_rate();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_core_clk_rate(::uint32_t value) {
  _internal_set_core_clk_rate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.core_clk_rate)
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_core_clk_rate() const {
  return _impl_.core_clk_rate_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_core_clk_rate(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.core_clk_rate_ = value;
}

// optional uint32 crtc = 5;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_crtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_crtc() {
  _impl_.crtc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.crtc)
  return _internal_crtc();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_crtc(::uint32_t value) {
  _internal_set_crtc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.crtc)
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_crtc() const {
  return _impl_.crtc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_crtc(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.crtc_ = value;
}

// optional int32 params = 6;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_params() {
  _impl_.params_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t SdeSdePerfCrtcUpdateFtraceEvent::params() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.params)
  return _internal_params();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_params(::int32_t value) {
  _internal_set_params(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.params)
}
inline ::int32_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_params() const {
  return _impl_.params_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_params(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.params_ = value;
}

// optional uint64 per_pipe_ib_ebi = 7;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_per_pipe_ib_ebi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_per_pipe_ib_ebi() {
  _impl_.per_pipe_ib_ebi_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::per_pipe_ib_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_ebi)
  return _internal_per_pipe_ib_ebi();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_per_pipe_ib_ebi(::uint64_t value) {
  _internal_set_per_pipe_ib_ebi(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_ebi)
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_per_pipe_ib_ebi() const {
  return _impl_.per_pipe_ib_ebi_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_per_pipe_ib_ebi(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.per_pipe_ib_ebi_ = value;
}

// optional uint64 per_pipe_ib_llcc = 8;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_per_pipe_ib_llcc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_per_pipe_ib_llcc() {
  _impl_.per_pipe_ib_llcc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::per_pipe_ib_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_llcc)
  return _internal_per_pipe_ib_llcc();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_per_pipe_ib_llcc(::uint64_t value) {
  _internal_set_per_pipe_ib_llcc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_llcc)
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_per_pipe_ib_llcc() const {
  return _impl_.per_pipe_ib_llcc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_per_pipe_ib_llcc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.per_pipe_ib_llcc_ = value;
}

// optional uint64 per_pipe_ib_mnoc = 9;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_per_pipe_ib_mnoc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_per_pipe_ib_mnoc() {
  _impl_.per_pipe_ib_mnoc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::per_pipe_ib_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_mnoc)
  return _internal_per_pipe_ib_mnoc();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_per_pipe_ib_mnoc(::uint64_t value) {
  _internal_set_per_pipe_ib_mnoc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_mnoc)
}
inline ::uint64_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_per_pipe_ib_mnoc() const {
  return _impl_.per_pipe_ib_mnoc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_per_pipe_ib_mnoc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.per_pipe_ib_mnoc_ = value;
}

// optional uint32 stop_req = 10;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_stop_req() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_stop_req() {
  _impl_.stop_req_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::stop_req() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.stop_req)
  return _internal_stop_req();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_stop_req(::uint32_t value) {
  _internal_set_stop_req(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.stop_req)
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_stop_req() const {
  return _impl_.stop_req_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_stop_req(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.stop_req_ = value;
}

// optional uint32 update_bus = 11;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_update_bus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_update_bus() {
  _impl_.update_bus_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::update_bus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_bus)
  return _internal_update_bus();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_update_bus(::uint32_t value) {
  _internal_set_update_bus(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_bus)
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_update_bus() const {
  return _impl_.update_bus_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_update_bus(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.update_bus_ = value;
}

// optional uint32 update_clk = 12;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_update_clk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_update_clk() {
  _impl_.update_clk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::update_clk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_clk)
  return _internal_update_clk();
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_update_clk(::uint32_t value) {
  _internal_set_update_clk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_clk)
}
inline ::uint32_t SdeSdePerfCrtcUpdateFtraceEvent::_internal_update_clk() const {
  return _impl_.update_clk_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::_internal_set_update_clk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.update_clk_ = value;
}

// -------------------------------------------------------------------

// SdeSdePerfSetQosLutsFtraceEvent

// optional uint32 fl = 1;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_fl() {
  _impl_.fl_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::fl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fl)
  return _internal_fl();
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_fl(::uint32_t value) {
  _internal_set_fl(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fl)
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::_internal_fl() const {
  return _impl_.fl_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::_internal_set_fl(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fl_ = value;
}

// optional uint32 fmt = 2;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_fmt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_fmt() {
  _impl_.fmt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::fmt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fmt)
  return _internal_fmt();
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_fmt(::uint32_t value) {
  _internal_set_fmt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fmt)
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::_internal_fmt() const {
  return _impl_.fmt_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::_internal_set_fmt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fmt_ = value;
}

// optional uint64 lut = 3;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_lut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_lut() {
  _impl_.lut_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t SdeSdePerfSetQosLutsFtraceEvent::lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut)
  return _internal_lut();
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_lut(::uint64_t value) {
  _internal_set_lut(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut)
}
inline ::uint64_t SdeSdePerfSetQosLutsFtraceEvent::_internal_lut() const {
  return _impl_.lut_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::_internal_set_lut(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lut_ = value;
}

// optional uint32 lut_usage = 4;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_lut_usage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_lut_usage() {
  _impl_.lut_usage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::lut_usage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut_usage)
  return _internal_lut_usage();
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_lut_usage(::uint32_t value) {
  _internal_set_lut_usage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut_usage)
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::_internal_lut_usage() const {
  return _impl_.lut_usage_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::_internal_set_lut_usage(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lut_usage_ = value;
}

// optional uint32 pnum = 5;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_pnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_pnum() {
  _impl_.pnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.pnum)
  return _internal_pnum();
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_pnum(::uint32_t value) {
  _internal_set_pnum(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.pnum)
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::_internal_pnum() const {
  return _impl_.pnum_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::_internal_set_pnum(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pnum_ = value;
}

// optional uint32 rt = 6;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_rt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_rt() {
  _impl_.rt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::rt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.rt)
  return _internal_rt();
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_rt(::uint32_t value) {
  _internal_set_rt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.rt)
}
inline ::uint32_t SdeSdePerfSetQosLutsFtraceEvent::_internal_rt() const {
  return _impl_.rt_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::_internal_set_rt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rt_ = value;
}

// -------------------------------------------------------------------

// SdeSdePerfUpdateBusFtraceEvent

// optional uint64 ab_quota = 1;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_ab_quota() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_ab_quota() {
  _impl_.ab_quota_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t SdeSdePerfUpdateBusFtraceEvent::ab_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ab_quota)
  return _internal_ab_quota();
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_ab_quota(::uint64_t value) {
  _internal_set_ab_quota(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ab_quota)
}
inline ::uint64_t SdeSdePerfUpdateBusFtraceEvent::_internal_ab_quota() const {
  return _impl_.ab_quota_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::_internal_set_ab_quota(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ab_quota_ = value;
}

// optional uint32 bus_id = 2;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_bus_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_bus_id() {
  _impl_.bus_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SdeSdePerfUpdateBusFtraceEvent::bus_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.bus_id)
  return _internal_bus_id();
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_bus_id(::uint32_t value) {
  _internal_set_bus_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.bus_id)
}
inline ::uint32_t SdeSdePerfUpdateBusFtraceEvent::_internal_bus_id() const {
  return _impl_.bus_id_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::_internal_set_bus_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bus_id_ = value;
}

// optional int32 client = 3;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_client() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_client() {
  _impl_.client_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t SdeSdePerfUpdateBusFtraceEvent::client() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.client)
  return _internal_client();
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_client(::int32_t value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.client)
}
inline ::int32_t SdeSdePerfUpdateBusFtraceEvent::_internal_client() const {
  return _impl_.client_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::_internal_set_client(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.client_ = value;
}

// optional uint64 ib_quota = 4;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_ib_quota() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_ib_quota() {
  _impl_.ib_quota_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t SdeSdePerfUpdateBusFtraceEvent::ib_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ib_quota)
  return _internal_ib_quota();
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_ib_quota(::uint64_t value) {
  _internal_set_ib_quota(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ib_quota)
}
inline ::uint64_t SdeSdePerfUpdateBusFtraceEvent::_internal_ib_quota() const {
  return _impl_.ib_quota_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::_internal_set_ib_quota(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ib_quota_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto_2epb_2eh
