// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event.proto

#include "protos/perfetto/trace/ftrace/ftrace_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR FtraceEvent::FtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pid_)*/ 0u

  , /*decltype(_impl_.common_flags_)*/ 0u

  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceEventDefaultTypeInternal() {}
  union {
    FtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceEventDefaultTypeInternal _FtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_.common_flags_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_.event_),
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 474, -1, sizeof(::perfetto::protos::FtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_FtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/protos/perfetto/trace/ftrace/ftrace_ev"
    "ent.proto\022\017perfetto.protos\032-protos/perfe"
    "tto/trace/ftrace/android_fs.proto\032)proto"
    "s/perfetto/trace/ftrace/binder.proto\032(pr"
    "otos/perfetto/trace/ftrace/block.proto\032)"
    "protos/perfetto/trace/ftrace/cgroup.prot"
    "o\032&protos/perfetto/trace/ftrace/clk.prot"
    "o\032&protos/perfetto/trace/ftrace/cma.prot"
    "o\032-protos/perfetto/trace/ftrace/compacti"
    "on.proto\032(protos/perfetto/trace/ftrace/c"
    "puhp.proto\032*protos/perfetto/trace/ftrace"
    "/cros_ec.proto\032,protos/perfetto/trace/ft"
    "race/dma_fence.proto\032.protos/perfetto/tr"
    "ace/ftrace/dmabuf_heap.proto\032&protos/per"
    "fetto/trace/ftrace/dpu.proto\032&protos/per"
    "fetto/trace/ftrace/drm.proto\032\'protos/per"
    "fetto/trace/ftrace/ext4.proto\032\'protos/pe"
    "rfetto/trace/ftrace/f2fs.proto\032*protos/p"
    "erfetto/trace/ftrace/fastrpc.proto\032(prot"
    "os/perfetto/trace/ftrace/fence.proto\032*pr"
    "otos/perfetto/trace/ftrace/filemap.proto"
    "\032)protos/perfetto/trace/ftrace/ftrace.pr"
    "oto\032&protos/perfetto/trace/ftrace/g2d.pr"
    "oto\032*protos/perfetto/trace/ftrace/gpu_me"
    "m.proto\0320protos/perfetto/trace/ftrace/gp"
    "u_scheduler.proto\032&protos/perfetto/trace"
    "/ftrace/hyp.proto\032&protos/perfetto/trace"
    "/ftrace/i2c.proto\032&protos/perfetto/trace"
    "/ftrace/ion.proto\032&protos/perfetto/trace"
    "/ftrace/ipi.proto\032&protos/perfetto/trace"
    "/ftrace/irq.proto\032\'protos/perfetto/trace"
    "/ftrace/kmem.proto\032&protos/perfetto/trac"
    "e/ftrace/kvm.proto\0322protos/perfetto/trac"
    "e/ftrace/lowmemorykiller.proto\032\'protos/p"
    "erfetto/trace/ftrace/lwis.proto\032\'protos/"
    "perfetto/trace/ftrace/mali.proto\032\'protos"
    "/perfetto/trace/ftrace/mdss.proto\032+proto"
    "s/perfetto/trace/ftrace/mm_event.proto\032&"
    "protos/perfetto/trace/ftrace/net.proto\032&"
    "protos/perfetto/trace/ftrace/oom.proto\032("
    "protos/perfetto/trace/ftrace/panel.proto"
    "\032(protos/perfetto/trace/ftrace/power.pro"
    "to\032)protos/perfetto/trace/ftrace/printk."
    "proto\032/protos/perfetto/trace/ftrace/raw_"
    "syscalls.proto\032,protos/perfetto/trace/ft"
    "race/regulator.proto\032(protos/perfetto/tr"
    "ace/ftrace/sched.proto\032&protos/perfetto/"
    "trace/ftrace/scm.proto\032&protos/perfetto/"
    "trace/ftrace/sde.proto\032)protos/perfetto/"
    "trace/ftrace/signal.proto\032&protos/perfet"
    "to/trace/ftrace/skb.proto\032\'protos/perfet"
    "to/trace/ftrace/sock.proto\032\'protos/perfe"
    "tto/trace/ftrace/sync.proto\032,protos/perf"
    "etto/trace/ftrace/synthetic.proto\032+proto"
    "s/perfetto/trace/ftrace/systrace.proto\032\'"
    "protos/perfetto/trace/ftrace/task.proto\032"
    "&protos/perfetto/trace/ftrace/tcp.proto\032"
    "*protos/perfetto/trace/ftrace/thermal.pr"
    "oto\032)protos/perfetto/trace/ftrace/trusty"
    ".proto\032&protos/perfetto/trace/ftrace/ufs"
    ".proto\032\'protos/perfetto/trace/ftrace/v4l"
    "2.proto\032-protos/perfetto/trace/ftrace/vi"
    "rtio_gpu.proto\032/protos/perfetto/trace/ft"
    "race/virtio_video.proto\032)protos/perfetto"
    "/trace/ftrace/vmscan.proto\032,protos/perfe"
    "tto/trace/ftrace/workqueue.proto\032*protos"
    "/perfetto/trace/ftrace/generic.proto\"\345\226\002"
    "\n\013FtraceEvent\022\021\n\ttimestamp\030\001 \001(\004\022\013\n\003pid\030"
    "\002 \001(\r\022\024\n\014common_flags\030\005 \001(\r\0222\n\005print\030\003 \001"
    "(\0132!.perfetto.protos.PrintFtraceEventH\000\022"
    "\?\n\014sched_switch\030\004 \001(\0132\'.perfetto.protos."
    "SchedSwitchFtraceEventH\000\022A\n\rcpu_frequenc"
    "y\030\013 \001(\0132(.perfetto.protos.CpuFrequencyFt"
    "raceEventH\000\022N\n\024cpu_frequency_limits\030\014 \001("
    "\0132..perfetto.protos.CpuFrequencyLimitsFt"
    "raceEventH\000\0227\n\010cpu_idle\030\r \001(\0132#.perfetto"
    ".protos.CpuIdleFtraceEventH\000\022\?\n\014clock_en"
    "able\030\016 \001(\0132\'.perfetto.protos.ClockEnable"
    "FtraceEventH\000\022A\n\rclock_disable\030\017 \001(\0132(.p"
    "erfetto.protos.ClockDisableFtraceEventH\000"
    "\022B\n\016clock_set_rate\030\020 \001(\0132(.perfetto.prot"
    "os.ClockSetRateFtraceEventH\000\022\?\n\014sched_wa"
    "keup\030\021 \001(\0132\'.perfetto.protos.SchedWakeup"
    "FtraceEventH\000\022N\n\024sched_blocked_reason\030\022 "
    "\001(\0132..perfetto.protos.SchedBlockedReason"
    "FtraceEventH\000\022H\n\021sched_cpu_hotplug\030\023 \001(\013"
    "2+.perfetto.protos.SchedCpuHotplugFtrace"
    "EventH\000\022\?\n\014sched_waking\030\024 \001(\0132\'.perfetto"
    ".protos.SchedWakingFtraceEventH\000\0229\n\tipi_"
    "entry\030\025 \001(\0132$.perfetto.protos.IpiEntryFt"
    "raceEventH\000\0227\n\010ipi_exit\030\026 \001(\0132#.perfetto"
    ".protos.IpiExitFtraceEventH\000\0229\n\tipi_rais"
    "e\030\027 \001(\0132$.perfetto.protos.IpiRaiseFtrace"
    "EventH\000\022A\n\rsoftirq_entry\030\030 \001(\0132(.perfett"
    "o.protos.SoftirqEntryFtraceEventH\000\022\?\n\014so"
    "ftirq_exit\030\031 \001(\0132\'.perfetto.protos.Softi"
    "rqExitFtraceEventH\000\022A\n\rsoftirq_raise\030\032 \001"
    "(\0132(.perfetto.protos.SoftirqRaiseFtraceE"
    "ventH\000\0227\n\010i2c_read\030\033 \001(\0132#.perfetto.prot"
    "os.I2cReadFtraceEventH\000\0229\n\ti2c_write\030\034 \001"
    "(\0132$.perfetto.protos.I2cWriteFtraceEvent"
    "H\000\022;\n\ni2c_result\030\035 \001(\0132%.perfetto.protos"
    ".I2cResultFtraceEventH\000\0229\n\ti2c_reply\030\036 \001"
    "(\0132$.perfetto.protos.I2cReplyFtraceEvent"
    "H\000\022;\n\nsmbus_read\030\037 \001(\0132%.perfetto.protos"
    ".SmbusReadFtraceEventH\000\022=\n\013smbus_write\030 "
    " \001(\0132&.perfetto.protos.SmbusWriteFtraceE"
    "ventH\000\022\?\n\014smbus_result\030! \001(\0132\'.perfetto."
    "protos.SmbusResultFtraceEventH\000\022=\n\013smbus"
    "_reply\030\" \001(\0132&.perfetto.protos.SmbusRepl"
    "yFtraceEventH\000\022C\n\016lowmemory_kill\030# \001(\0132)"
    ".perfetto.protos.LowmemoryKillFtraceEven"
    "tH\000\022H\n\021irq_handler_entry\030$ \001(\0132+.perfett"
    "o.protos.IrqHandlerEntryFtraceEventH\000\022F\n"
    "\020irq_handler_exit\030% \001(\0132*.perfetto.proto"
    "s.IrqHandlerExitFtraceEventH\000\0225\n\007sync_pt"
    "\030& \001(\0132\".perfetto.protos.SyncPtFtraceEve"
    "ntH\000\022A\n\rsync_timeline\030\' \001(\0132(.perfetto.p"
    "rotos.SyncTimelineFtraceEventH\000\0229\n\tsync_"
    "wait\030( \001(\0132$.perfetto.protos.SyncWaitFtr"
    "aceEventH\000\022K\n\023ext4_da_write_begin\030) \001(\0132"
    ",.perfetto.protos.Ext4DaWriteBeginFtrace"
    "EventH\000\022G\n\021ext4_da_write_end\030* \001(\0132*.per"
    "fetto.protos.Ext4DaWriteEndFtraceEventH\000"
    "\022M\n\024ext4_sync_file_enter\030+ \001(\0132-.perfett"
    "o.protos.Ext4SyncFileEnterFtraceEventH\000\022"
    "K\n\023ext4_sync_file_exit\030, \001(\0132,.perfetto."
    "protos.Ext4SyncFileExitFtraceEventH\000\022B\n\016"
    "block_rq_issue\030- \001(\0132(.perfetto.protos.B"
    "lockRqIssueFtraceEventH\000\022`\n\036mm_vmscan_di"
    "rect_reclaim_begin\030. \001(\01326.perfetto.prot"
    "os.MmVmscanDirectReclaimBeginFtraceEvent"
    "H\000\022\\\n\034mm_vmscan_direct_reclaim_end\030/ \001(\013"
    "24.perfetto.protos.MmVmscanDirectReclaim"
    "EndFtraceEventH\000\022O\n\025mm_vmscan_kswapd_wak"
    "e\0300 \001(\0132..perfetto.protos.MmVmscanKswapd"
    "WakeFtraceEventH\000\022Q\n\026mm_vmscan_kswapd_sl"
    "eep\0301 \001(\0132/.perfetto.protos.MmVmscanKswa"
    "pdSleepFtraceEventH\000\022K\n\022binder_transacti"
    "on\0302 \001(\0132-.perfetto.protos.BinderTransac"
    "tionFtraceEventH\000\022\\\n\033binder_transaction_"
    "received\0303 \001(\01325.perfetto.protos.BinderT"
    "ransactionReceivedFtraceEventH\000\022L\n\023binde"
    "r_set_priority\0304 \001(\0132-.perfetto.protos.B"
    "inderSetPriorityFtraceEventH\000\022=\n\013binder_"
    "lock\0305 \001(\0132&.perfetto.protos.BinderLockF"
    "traceEventH\000\022A\n\rbinder_locked\0306 \001(\0132(.pe"
    "rfetto.protos.BinderLockedFtraceEventH\000\022"
    "A\n\rbinder_unlock\0307 \001(\0132(.perfetto.protos"
    ".BinderUnlockFtraceEventH\000\022T\n\027workqueue_"
    "activate_work\0308 \001(\01321.perfetto.protos.Wo"
    "rkqueueActivateWorkFtraceEventH\000\022P\n\025work"
    "queue_execute_end\0309 \001(\0132/.perfetto.proto"
    "s.WorkqueueExecuteEndFtraceEventH\000\022T\n\027wo"
    "rkqueue_execute_start\030: \001(\01321.perfetto.p"
    "rotos.WorkqueueExecuteStartFtraceEventH\000"
    "\022N\n\024workqueue_queue_work\030; \001(\0132..perfett"
    "o.protos.WorkqueueQueueWorkFtraceEventH\000"
    "\022I\n\021regulator_disable\030< \001(\0132,.perfetto.p"
    "rotos.RegulatorDisableFtraceEventH\000\022Z\n\032r"
    "egulator_disable_complete\030= \001(\01324.perfet"
    "to.protos.RegulatorDisableCompleteFtrace"
    "EventH\000\022G\n\020regulator_enable\030> \001(\0132+.perf"
    "etto.protos.RegulatorEnableFtraceEventH\000"
    "\022X\n\031regulator_enable_complete\030\? \001(\01323.pe"
    "rfetto.protos.RegulatorEnableCompleteFtr"
    "aceEventH\000\022R\n\026regulator_enable_delay\030@ \001"
    "(\01320.perfetto.protos.RegulatorEnableDela"
    "yFtraceEventH\000\022P\n\025regulator_set_voltage\030"
    "A \001(\0132/.perfetto.protos.RegulatorSetVolt"
    "ageFtraceEventH\000\022a\n\036regulator_set_voltag"
    "e_complete\030B \001(\01327.perfetto.protos.Regul"
    "atorSetVoltageCompleteFtraceEventH\000\022J\n\022c"
    "group_attach_task\030C \001(\0132,.perfetto.proto"
    "s.CgroupAttachTaskFtraceEventH\000\022\?\n\014cgrou"
    "p_mkdir\030D \001(\0132\'.perfetto.protos.CgroupMk"
    "dirFtraceEventH\000\022C\n\016cgroup_remount\030E \001(\013"
    "2).perfetto.protos.CgroupRemountFtraceEv"
    "entH\000\022\?\n\014cgroup_rmdir\030F \001(\0132\'.perfetto.p"
    "rotos.CgroupRmdirFtraceEventH\000\022P\n\025cgroup"
    "_transfer_tasks\030G \001(\0132/.perfetto.protos."
    "CgroupTransferTasksFtraceEventH\000\022L\n\023cgro"
    "up_destroy_root\030H \001(\0132-.perfetto.protos."
    "CgroupDestroyRootFtraceEventH\000\022C\n\016cgroup"
    "_release\030I \001(\0132).perfetto.protos.CgroupR"
    "eleaseFtraceEventH\000\022A\n\rcgroup_rename\030J \001"
    "(\0132(.perfetto.protos.CgroupRenameFtraceE"
    "ventH\000\022H\n\021cgroup_setup_root\030K \001(\0132+.perf"
    "etto.protos.CgroupSetupRootFtraceEventH\000"
    "\022D\n\017mdp_cmd_kickoff\030L \001(\0132).perfetto.pro"
    "tos.MdpCmdKickoffFtraceEventH\000\022;\n\nmdp_co"
    "mmit\030M \001(\0132%.perfetto.protos.MdpCommitFt"
    "raceEventH\000\022C\n\017mdp_perf_set_ot\030N \001(\0132(.p"
    "erfetto.protos.MdpPerfSetOtFtraceEventH\000"
    "\022D\n\017mdp_sspp_change\030O \001(\0132).perfetto.pro"
    "tos.MdpSsppChangeFtraceEventH\000\022J\n\022tracin"
    "g_mark_write\030P \001(\0132,.perfetto.protos.Tra"
    "cingMarkWriteFtraceEventH\000\022O\n\025mdp_cmd_pi"
    "ngpong_done\030Q \001(\0132..perfetto.protos.MdpC"
    "mdPingpongDoneFtraceEventH\000\022B\n\016mdp_compa"
    "re_bw\030R \001(\0132(.perfetto.protos.MdpCompare"
    "BwFtraceEventH\000\022R\n\027mdp_perf_set_panic_lu"
    "ts\030S \001(\0132/.perfetto.protos.MdpPerfSetPan"
    "icLutsFtraceEventH\000\022>\n\014mdp_sspp_set\030T \001("
    "\0132&.perfetto.protos.MdpSsppSetFtraceEven"
    "tH\000\022M\n\024mdp_cmd_readptr_done\030U \001(\0132-.perf"
    "etto.protos.MdpCmdReadptrDoneFtraceEvent"
    "H\000\022>\n\014mdp_misr_crc\030V \001(\0132&.perfetto.prot"
    "os.MdpMisrCrcFtraceEventH\000\022N\n\025mdp_perf_s"
    "et_qos_luts\030W \001(\0132-.perfetto.protos.MdpP"
    "erfSetQosLutsFtraceEventH\000\022H\n\021mdp_trace_"
    "counter\030X \001(\0132+.perfetto.protos.MdpTrace"
    "CounterFtraceEventH\000\022I\n\022mdp_cmd_release_"
    "bw\030Y \001(\0132+.perfetto.protos.MdpCmdRelease"
    "BwFtraceEventH\000\022F\n\020mdp_mixer_update\030Z \001("
    "\0132*.perfetto.protos.MdpMixerUpdateFtrace"
    "EventH\000\022P\n\026mdp_perf_set_wm_levels\030[ \001(\0132"
    "..perfetto.protos.MdpPerfSetWmLevelsFtra"
    "ceEventH\000\022S\n\027mdp_video_underrun_done\030\\ \001"
    "(\01320.perfetto.protos.MdpVideoUnderrunDon"
    "eFtraceEventH\000\022O\n\025mdp_cmd_wait_pingpong\030"
    "] \001(\0132..perfetto.protos.MdpCmdWaitPingpo"
    "ngFtraceEventH\000\022O\n\025mdp_perf_prefill_calc"
    "\030^ \001(\0132..perfetto.protos.MdpPerfPrefillC"
    "alcFtraceEventH\000\022K\n\023mdp_perf_update_bus\030"
    "_ \001(\0132,.perfetto.protos.MdpPerfUpdateBus"
    "FtraceEventH\000\022T\n\030rotator_bw_ao_as_contex"
    "t\030` \001(\01320.perfetto.protos.RotatorBwAoAsC"
    "ontextFtraceEventH\000\022[\n\034mm_filemap_add_to"
    "_page_cache\030a \001(\01323.perfetto.protos.MmFi"
    "lemapAddToPageCacheFtraceEventH\000\022e\n!mm_f"
    "ilemap_delete_from_page_cache\030b \001(\01328.pe"
    "rfetto.protos.MmFilemapDeleteFromPageCac"
    "heFtraceEventH\000\022L\n\023mm_compaction_begin\030c"
    " \001(\0132-.perfetto.protos.MmCompactionBegin"
    "FtraceEventH\000\022a\n\036mm_compaction_defer_com"
    "paction\030d \001(\01327.perfetto.protos.MmCompac"
    "tionDeferCompactionFtraceEventH\000\022R\n\026mm_c"
    "ompaction_deferred\030e \001(\01320.perfetto.prot"
    "os.MmCompactionDeferredFtraceEventH\000\022W\n\031"
    "mm_compaction_defer_reset\030f \001(\01322.perfet"
    "to.protos.MmCompactionDeferResetFtraceEv"
    "entH\000\022H\n\021mm_compaction_end\030g \001(\0132+.perfe"
    "tto.protos.MmCompactionEndFtraceEventH\000\022"
    "R\n\026mm_compaction_finished\030h \001(\01320.perfet"
    "to.protos.MmCompactionFinishedFtraceEven"
    "tH\000\022c\n\037mm_compaction_isolate_freepages\030i"
    " \001(\01328.perfetto.protos.MmCompactionIsola"
    "teFreepagesFtraceEventH\000\022i\n\"mm_compactio"
    "n_isolate_migratepages\030j \001(\0132;.perfetto."
    "protos.MmCompactionIsolateMigratepagesFt"
    "raceEventH\000\022_\n\035mm_compaction_kcompactd_s"
    "leep\030k \001(\01326.perfetto.protos.MmCompactio"
    "nKcompactdSleepFtraceEventH\000\022]\n\034mm_compa"
    "ction_kcompactd_wake\030l \001(\01325.perfetto.pr"
    "otos.MmCompactionKcompactdWakeFtraceEven"
    "tH\000\022Z\n\032mm_compaction_migratepages\030m \001(\0132"
    "4.perfetto.protos.MmCompactionMigratepag"
    "esFtraceEventH\000\022R\n\026mm_compaction_suitabl"
    "e\030n \001(\01320.perfetto.protos.MmCompactionSu"
    "itableFtraceEventH\000\022g\n\"mm_compaction_try"
    "_to_compact_pages\030o \001(\01329.perfetto.proto"
    "s.MmCompactionTryToCompactPagesFtraceEve"
    "ntH\000\022a\n\036mm_compaction_wakeup_kcompactd\030p"
    " \001(\01327.perfetto.protos.MmCompactionWakeu"
    "pKcompactdFtraceEventH\000\022C\n\016suspend_resum"
    "e\030q \001(\0132).perfetto.protos.SuspendResumeF"
    "traceEventH\000\022F\n\020sched_wakeup_new\030r \001(\0132*"
    ".perfetto.protos.SchedWakeupNewFtraceEve"
    "ntH\000\022L\n\023block_bio_backmerge\030s \001(\0132-.perf"
    "etto.protos.BlockBioBackmergeFtraceEvent"
    "H\000\022F\n\020block_bio_bounce\030t \001(\0132*.perfetto."
    "protos.BlockBioBounceFtraceEventH\000\022J\n\022bl"
    "ock_bio_complete\030u \001(\0132,.perfetto.protos"
    ".BlockBioCompleteFtraceEventH\000\022N\n\024block_"
    "bio_frontmerge\030v \001(\0132..perfetto.protos.B"
    "lockBioFrontmergeFtraceEventH\000\022D\n\017block_"
    "bio_queue\030w \001(\0132).perfetto.protos.BlockB"
    "ioQueueFtraceEventH\000\022D\n\017block_bio_remap\030"
    "x \001(\0132).perfetto.protos.BlockBioRemapFtr"
    "aceEventH\000\022J\n\022block_dirty_buffer\030y \001(\0132,"
    ".perfetto.protos.BlockDirtyBufferFtraceE"
    "ventH\000\022=\n\013block_getrq\030z \001(\0132&.perfetto.p"
    "rotos.BlockGetrqFtraceEventH\000\022;\n\nblock_p"
    "lug\030{ \001(\0132%.perfetto.protos.BlockPlugFtr"
    "aceEventH\000\022B\n\016block_rq_abort\030| \001(\0132(.per"
    "fetto.protos.BlockRqAbortFtraceEventH\000\022H"
    "\n\021block_rq_complete\030} \001(\0132+.perfetto.pro"
    "tos.BlockRqCompleteFtraceEventH\000\022D\n\017bloc"
    "k_rq_insert\030~ \001(\0132).perfetto.protos.Bloc"
    "kRqInsertFtraceEventH\000\022C\n\016block_rq_remap"
    "\030\200\001 \001(\0132(.perfetto.protos.BlockRqRemapFt"
    "raceEventH\000\022G\n\020block_rq_requeue\030\201\001 \001(\0132*"
    ".perfetto.protos.BlockRqRequeueFtraceEve"
    "ntH\000\022B\n\rblock_sleeprq\030\202\001 \001(\0132(.perfetto."
    "protos.BlockSleeprqFtraceEventH\000\022>\n\013bloc"
    "k_split\030\203\001 \001(\0132&.perfetto.protos.BlockSp"
    "litFtraceEventH\000\022K\n\022block_touch_buffer\030\204"
    "\001 \001(\0132,.perfetto.protos.BlockTouchBuffer"
    "FtraceEventH\000\022@\n\014block_unplug\030\205\001 \001(\0132\'.p"
    "erfetto.protos.BlockUnplugFtraceEventH\000\022"
    "N\n\024ext4_alloc_da_blocks\030\206\001 \001(\0132-.perfett"
    "o.protos.Ext4AllocDaBlocksFtraceEventH\000\022"
    "O\n\024ext4_allocate_blocks\030\207\001 \001(\0132..perfett"
    "o.protos.Ext4AllocateBlocksFtraceEventH\000"
    "\022M\n\023ext4_allocate_inode\030\210\001 \001(\0132-.perfett"
    "o.protos.Ext4AllocateInodeFtraceEventH\000\022"
    "\\\n\033ext4_begin_ordered_truncate\030\211\001 \001(\01324."
    "perfetto.protos.Ext4BeginOrderedTruncate"
    "FtraceEventH\000\022M\n\023ext4_collapse_range\030\212\001 "
    "\001(\0132-.perfetto.protos.Ext4CollapseRangeF"
    "traceEventH\000\022P\n\025ext4_da_release_space\030\213\001"
    " \001(\0132..perfetto.protos.Ext4DaReleaseSpac"
    "eFtraceEventH\000\022P\n\025ext4_da_reserve_space\030"
    "\214\001 \001(\0132..perfetto.protos.Ext4DaReserveSp"
    "aceFtraceEventH\000\022]\n\034ext4_da_update_reser"
    "ve_space\030\215\001 \001(\01324.perfetto.protos.Ext4Da"
    "UpdateReserveSpaceFtraceEventH\000\022L\n\023ext4_"
    "da_write_pages\030\216\001 \001(\0132,.perfetto.protos."
    "Ext4DaWritePagesFtraceEventH\000\022Y\n\032ext4_da"
    "_write_pages_extent\030\217\001 \001(\01322.perfetto.pr"
    "otos.Ext4DaWritePagesExtentFtraceEventH\000"
    "\022N\n\024ext4_direct_IO_enter\030\220\001 \001(\0132-.perfet"
    "to.protos.Ext4DirectIOEnterFtraceEventH\000"
    "\022L\n\023ext4_direct_IO_exit\030\221\001 \001(\0132,.perfett"
    "o.protos.Ext4DirectIOExitFtraceEventH\000\022M"
    "\n\023ext4_discard_blocks\030\222\001 \001(\0132-.perfetto."
    "protos.Ext4DiscardBlocksFtraceEventH\000\022]\n"
    "\033ext4_discard_preallocations\030\223\001 \001(\01325.pe"
    "rfetto.protos.Ext4DiscardPreallocationsF"
    "traceEventH\000\022E\n\017ext4_drop_inode\030\224\001 \001(\0132)"
    ".perfetto.protos.Ext4DropInodeFtraceEven"
    "tH\000\022N\n\024ext4_es_cache_extent\030\225\001 \001(\0132-.per"
    "fetto.protos.Ext4EsCacheExtentFtraceEven"
    "tH\000\022q\n\'ext4_es_find_delayed_extent_range"
    "_enter\030\226\001 \001(\0132=.perfetto.protos.Ext4EsFi"
    "ndDelayedExtentRangeEnterFtraceEventH\000\022o"
    "\n&ext4_es_find_delayed_extent_range_exit"
    "\030\227\001 \001(\0132<.perfetto.protos.Ext4EsFindDela"
    "yedExtentRangeExitFtraceEventH\000\022P\n\025ext4_"
    "es_insert_extent\030\230\001 \001(\0132..perfetto.proto"
    "s.Ext4EsInsertExtentFtraceEventH\000\022[\n\033ext"
    "4_es_lookup_extent_enter\030\231\001 \001(\01323.perfet"
    "to.protos.Ext4EsLookupExtentEnterFtraceE"
    "ventH\000\022Y\n\032ext4_es_lookup_extent_exit\030\232\001 "
    "\001(\01322.perfetto.protos.Ext4EsLookupExtent"
    "ExitFtraceEventH\000\022P\n\025ext4_es_remove_exte"
    "nt\030\233\001 \001(\0132..perfetto.protos.Ext4EsRemove"
    "ExtentFtraceEventH\000\022C\n\016ext4_es_shrink\030\234\001"
    " \001(\0132(.perfetto.protos.Ext4EsShrinkFtrac"
    "eEventH\000\022N\n\024ext4_es_shrink_count\030\235\001 \001(\0132"
    "-.perfetto.protos.Ext4EsShrinkCountFtrac"
    "eEventH\000\022W\n\031ext4_es_shrink_scan_enter\030\236\001"
    " \001(\01321.perfetto.protos.Ext4EsShrinkScanE"
    "nterFtraceEventH\000\022U\n\030ext4_es_shrink_scan"
    "_exit\030\237\001 \001(\01320.perfetto.protos.Ext4EsShr"
    "inkScanExitFtraceEventH\000\022G\n\020ext4_evict_i"
    "node\030\240\001 \001(\0132*.perfetto.protos.Ext4EvictI"
    "nodeFtraceEventH\000\022n\n%ext4_ext_convert_to"
    "_initialized_enter\030\241\001 \001(\0132<.perfetto.pro"
    "tos.Ext4ExtConvertToInitializedEnterFtra"
    "ceEventH\000\022t\n(ext4_ext_convert_to_initial"
    "ized_fastpath\030\242\001 \001(\0132\?.perfetto.protos.E"
    "xt4ExtConvertToInitializedFastpathFtrace"
    "EventH\000\022g\n!ext4_ext_handle_unwritten_ext"
    "ents\030\243\001 \001(\01329.perfetto.protos.Ext4ExtHan"
    "dleUnwrittenExtentsFtraceEventH\000\022H\n\021ext4"
    "_ext_in_cache\030\244\001 \001(\0132*.perfetto.protos.E"
    "xt4ExtInCacheFtraceEventH\000\022N\n\024ext4_ext_l"
    "oad_extent\030\245\001 \001(\0132-.perfetto.protos.Ext4"
    "ExtLoadExtentFtraceEventH\000\022W\n\031ext4_ext_m"
    "ap_blocks_enter\030\246\001 \001(\01321.perfetto.protos"
    ".Ext4ExtMapBlocksEnterFtraceEventH\000\022U\n\030e"
    "xt4_ext_map_blocks_exit\030\247\001 \001(\01320.perfett"
    "o.protos.Ext4ExtMapBlocksExitFtraceEvent"
    "H\000\022O\n\025ext4_ext_put_in_cache\030\250\001 \001(\0132-.per"
    "fetto.protos.Ext4ExtPutInCacheFtraceEven"
    "tH\000\022P\n\025ext4_ext_remove_space\030\251\001 \001(\0132..pe"
    "rfetto.protos.Ext4ExtRemoveSpaceFtraceEv"
    "entH\000\022Y\n\032ext4_ext_remove_space_done\030\252\001 \001"
    "(\01322.perfetto.protos.Ext4ExtRemoveSpaceD"
    "oneFtraceEventH\000\022D\n\017ext4_ext_rm_idx\030\253\001 \001"
    "(\0132(.perfetto.protos.Ext4ExtRmIdxFtraceE"
    "ventH\000\022F\n\020ext4_ext_rm_leaf\030\254\001 \001(\0132).perf"
    "etto.protos.Ext4ExtRmLeafFtraceEventH\000\022N"
    "\n\024ext4_ext_show_extent\030\255\001 \001(\0132-.perfetto"
    ".protos.Ext4ExtShowExtentFtraceEventH\000\022O"
    "\n\024ext4_fallocate_enter\030\256\001 \001(\0132..perfetto"
    ".protos.Ext4FallocateEnterFtraceEventH\000\022"
    "M\n\023ext4_fallocate_exit\030\257\001 \001(\0132-.perfetto"
    ".protos.Ext4FallocateExitFtraceEventH\000\022V"
    "\n\030ext4_find_delalloc_range\030\260\001 \001(\01321.perf"
    "etto.protos.Ext4FindDelallocRangeFtraceE"
    "ventH\000\022>\n\013ext4_forget\030\261\001 \001(\0132&.perfetto."
    "protos.Ext4ForgetFtraceEventH\000\022G\n\020ext4_f"
    "ree_blocks\030\262\001 \001(\0132*.perfetto.protos.Ext4"
    "FreeBlocksFtraceEventH\000\022E\n\017ext4_free_ino"
    "de\030\263\001 \001(\0132).perfetto.protos.Ext4FreeInod"
    "eFtraceEventH\000\022j\n#ext4_get_implied_clust"
    "er_alloc_exit\030\264\001 \001(\0132:.perfetto.protos.E"
    "xt4GetImpliedClusterAllocExitFtraceEvent"
    "H\000\022c\n\037ext4_get_reserved_cluster_alloc\030\265\001"
    " \001(\01327.perfetto.protos.Ext4GetReservedCl"
    "usterAllocFtraceEventH\000\022W\n\031ext4_ind_map_"
    "blocks_enter\030\266\001 \001(\01321.perfetto.protos.Ex"
    "t4IndMapBlocksEnterFtraceEventH\000\022U\n\030ext4"
    "_ind_map_blocks_exit\030\267\001 \001(\01320.perfetto.p"
    "rotos.Ext4IndMapBlocksExitFtraceEventH\000\022"
    "I\n\021ext4_insert_range\030\270\001 \001(\0132+.perfetto.p"
    "rotos.Ext4InsertRangeFtraceEventH\000\022N\n\023ex"
    "t4_invalidatepage\030\271\001 \001(\0132..perfetto.prot"
    "os.Ext4InvalidatepageFtraceEventH\000\022K\n\022ex"
    "t4_journal_start\030\272\001 \001(\0132,.perfetto.proto"
    "s.Ext4JournalStartFtraceEventH\000\022\\\n\033ext4_"
    "journal_start_reserved\030\273\001 \001(\01324.perfetto"
    ".protos.Ext4JournalStartReservedFtraceEv"
    "entH\000\022c\n\036ext4_journalled_invalidatepage\030"
    "\274\001 \001(\01328.perfetto.protos.Ext4JournalledI"
    "nvalidatepageFtraceEventH\000\022X\n\031ext4_journ"
    "alled_write_end\030\275\001 \001(\01322.perfetto.protos"
    ".Ext4JournalledWriteEndFtraceEventH\000\022E\n\017"
    "ext4_load_inode\030\276\001 \001(\0132).perfetto.protos"
    ".Ext4LoadInodeFtraceEventH\000\022R\n\026ext4_load"
    "_inode_bitmap\030\277\001 \001(\0132/.perfetto.protos.E"
    "xt4LoadInodeBitmapFtraceEventH\000\022P\n\025ext4_"
    "mark_inode_dirty\030\300\001 \001(\0132..perfetto.proto"
    "s.Ext4MarkInodeDirtyFtraceEventH\000\022L\n\023ext"
    "4_mb_bitmap_load\030\301\001 \001(\0132,.perfetto.proto"
    "s.Ext4MbBitmapLoadFtraceEventH\000\022W\n\031ext4_"
    "mb_buddy_bitmap_load\030\302\001 \001(\01321.perfetto.p"
    "rotos.Ext4MbBuddyBitmapLoadFtraceEventH\000"
    "\022b\n\036ext4_mb_discard_preallocations\030\303\001 \001("
    "\01327.perfetto.protos.Ext4MbDiscardPreallo"
    "cationsFtraceEventH\000\022M\n\024ext4_mb_new_grou"
    "p_pa\030\304\001 \001(\0132,.perfetto.protos.Ext4MbNewG"
    "roupPaFtraceEventH\000\022M\n\024ext4_mb_new_inode"
    "_pa\030\305\001 \001(\0132,.perfetto.protos.Ext4MbNewIn"
    "odePaFtraceEventH\000\022U\n\030ext4_mb_release_gr"
    "oup_pa\030\306\001 \001(\01320.perfetto.protos.Ext4MbRe"
    "leaseGroupPaFtraceEventH\000\022U\n\030ext4_mb_rel"
    "ease_inode_pa\030\307\001 \001(\01320.perfetto.protos.E"
    "xt4MbReleaseInodePaFtraceEventH\000\022K\n\022ext4"
    "_mballoc_alloc\030\310\001 \001(\0132,.perfetto.protos."
    "Ext4MballocAllocFtraceEventH\000\022O\n\024ext4_mb"
    "alloc_discard\030\311\001 \001(\0132..perfetto.protos.E"
    "xt4MballocDiscardFtraceEventH\000\022I\n\021ext4_m"
    "balloc_free\030\312\001 \001(\0132+.perfetto.protos.Ext"
    "4MballocFreeFtraceEventH\000\022Q\n\025ext4_mballo"
    "c_prealloc\030\313\001 \001(\0132/.perfetto.protos.Ext4"
    "MballocPreallocFtraceEventH\000\022]\n\034ext4_oth"
    "er_inode_update_time\030\314\001 \001(\01324.perfetto.p"
    "rotos.Ext4OtherInodeUpdateTimeFtraceEven"
    "tH\000\022E\n\017ext4_punch_hole\030\315\001 \001(\0132).perfetto"
    ".protos.Ext4PunchHoleFtraceEventH\000\022[\n\033ex"
    "t4_read_block_bitmap_load\030\316\001 \001(\01323.perfe"
    "tto.protos.Ext4ReadBlockBitmapLoadFtrace"
    "EventH\000\022B\n\rext4_readpage\030\317\001 \001(\0132(.perfet"
    "to.protos.Ext4ReadpageFtraceEventH\000\022H\n\020e"
    "xt4_releasepage\030\320\001 \001(\0132+.perfetto.protos"
    ".Ext4ReleasepageFtraceEventH\000\022K\n\022ext4_re"
    "move_blocks\030\321\001 \001(\0132,.perfetto.protos.Ext"
    "4RemoveBlocksFtraceEventH\000\022M\n\023ext4_reque"
    "st_blocks\030\322\001 \001(\0132-.perfetto.protos.Ext4R"
    "equestBlocksFtraceEventH\000\022K\n\022ext4_reques"
    "t_inode\030\323\001 \001(\0132,.perfetto.protos.Ext4Req"
    "uestInodeFtraceEventH\000\022\?\n\014ext4_sync_fs\030\324"
    "\001 \001(\0132&.perfetto.protos.Ext4SyncFsFtrace"
    "EventH\000\022J\n\022ext4_trim_all_free\030\325\001 \001(\0132+.p"
    "erfetto.protos.Ext4TrimAllFreeFtraceEven"
    "tH\000\022G\n\020ext4_trim_extent\030\326\001 \001(\0132*.perfett"
    "o.protos.Ext4TrimExtentFtraceEventH\000\022M\n\023"
    "ext4_truncate_enter\030\327\001 \001(\0132-.perfetto.pr"
    "otos.Ext4TruncateEnterFtraceEventH\000\022K\n\022e"
    "xt4_truncate_exit\030\330\001 \001(\0132,.perfetto.prot"
    "os.Ext4TruncateExitFtraceEventH\000\022I\n\021ext4"
    "_unlink_enter\030\331\001 \001(\0132+.perfetto.protos.E"
    "xt4UnlinkEnterFtraceEventH\000\022G\n\020ext4_unli"
    "nk_exit\030\332\001 \001(\0132*.perfetto.protos.Ext4Unl"
    "inkExitFtraceEventH\000\022G\n\020ext4_write_begin"
    "\030\333\001 \001(\0132*.perfetto.protos.Ext4WriteBegin"
    "FtraceEventH\000\022C\n\016ext4_write_end\030\346\001 \001(\0132("
    ".perfetto.protos.Ext4WriteEndFtraceEvent"
    "H\000\022D\n\016ext4_writepage\030\347\001 \001(\0132).perfetto.p"
    "rotos.Ext4WritepageFtraceEventH\000\022F\n\017ext4"
    "_writepages\030\350\001 \001(\0132*.perfetto.protos.Ext"
    "4WritepagesFtraceEventH\000\022S\n\026ext4_writepa"
    "ges_result\030\351\001 \001(\01320.perfetto.protos.Ext4"
    "WritepagesResultFtraceEventH\000\022E\n\017ext4_ze"
    "ro_range\030\352\001 \001(\0132).perfetto.protos.Ext4Ze"
    "roRangeFtraceEventH\000\022@\n\014task_newtask\030\353\001 "
    "\001(\0132\'.perfetto.protos.TaskNewtaskFtraceE"
    "ventH\000\022>\n\013task_rename\030\354\001 \001(\0132&.perfetto."
    "protos.TaskRenameFtraceEventH\000\022K\n\022sched_"
    "process_exec\030\355\001 \001(\0132,.perfetto.protos.Sc"
    "hedProcessExecFtraceEventH\000\022K\n\022sched_pro"
    "cess_exit\030\356\001 \001(\0132,.perfetto.protos.Sched"
    "ProcessExitFtraceEventH\000\022K\n\022sched_proces"
    "s_fork\030\357\001 \001(\0132,.perfetto.protos.SchedPro"
    "cessForkFtraceEventH\000\022K\n\022sched_process_f"
    "ree\030\360\001 \001(\0132,.perfetto.protos.SchedProces"
    "sFreeFtraceEventH\000\022K\n\022sched_process_hang"
    "\030\361\001 \001(\0132,.perfetto.protos.SchedProcessHa"
    "ngFtraceEventH\000\022K\n\022sched_process_wait\030\362\001"
    " \001(\0132,.perfetto.protos.SchedProcessWaitF"
    "traceEventH\000\022J\n\022f2fs_do_submit_bio\030\363\001 \001("
    "\0132+.perfetto.protos.F2fsDoSubmitBioFtrac"
    "eEventH\000\022G\n\020f2fs_evict_inode\030\364\001 \001(\0132*.pe"
    "rfetto.protos.F2fsEvictInodeFtraceEventH"
    "\000\022D\n\016f2fs_fallocate\030\365\001 \001(\0132).perfetto.pr"
    "otos.F2fsFallocateFtraceEventH\000\022L\n\023f2fs_"
    "get_data_block\030\366\001 \001(\0132,.perfetto.protos."
    "F2fsGetDataBlockFtraceEventH\000\022E\n\017f2fs_ge"
    "t_victim\030\367\001 \001(\0132).perfetto.protos.F2fsGe"
    "tVictimFtraceEventH\000\022:\n\tf2fs_iget\030\370\001 \001(\013"
    "2$.perfetto.protos.F2fsIgetFtraceEventH\000"
    "\022C\n\016f2fs_iget_exit\030\371\001 \001(\0132(.perfetto.pro"
    "tos.F2fsIgetExitFtraceEventH\000\022C\n\016f2fs_ne"
    "w_inode\030\372\001 \001(\0132(.perfetto.protos.F2fsNew"
    "InodeFtraceEventH\000\022B\n\rf2fs_readpage\030\373\001 \001"
    "(\0132(.perfetto.protos.F2fsReadpageFtraceE"
    "ventH\000\022R\n\026f2fs_reserve_new_block\030\374\001 \001(\0132"
    "/.perfetto.protos.F2fsReserveNewBlockFtr"
    "aceEventH\000\022L\n\023f2fs_set_page_dirty\030\375\001 \001(\013"
    "2,.perfetto.protos.F2fsSetPageDirtyFtrac"
    "eEventH\000\022R\n\026f2fs_submit_write_page\030\376\001 \001("
    "\0132/.perfetto.protos.F2fsSubmitWritePageF"
    "traceEventH\000\022N\n\024f2fs_sync_file_enter\030\377\001 "
    "\001(\0132-.perfetto.protos.F2fsSyncFileEnterF"
    "traceEventH\000\022L\n\023f2fs_sync_file_exit\030\200\002 \001"
    "(\0132,.perfetto.protos.F2fsSyncFileExitFtr"
    "aceEventH\000\022\?\n\014f2fs_sync_fs\030\201\002 \001(\0132&.perf"
    "etto.protos.F2fsSyncFsFtraceEventH\000\022B\n\rf"
    "2fs_truncate\030\202\002 \001(\0132(.perfetto.protos.F2"
    "fsTruncateFtraceEventH\000\022Z\n\032f2fs_truncate"
    "_blocks_enter\030\203\002 \001(\01323.perfetto.protos.F"
    "2fsTruncateBlocksEnterFtraceEventH\000\022X\n\031f"
    "2fs_truncate_blocks_exit\030\204\002 \001(\01322.perfet"
    "to.protos.F2fsTruncateBlocksExitFtraceEv"
    "entH\000\022c\n\037f2fs_truncate_data_blocks_range"
    "\030\205\002 \001(\01327.perfetto.protos.F2fsTruncateDa"
    "taBlocksRangeFtraceEventH\000\022e\n f2fs_trunc"
    "ate_inode_blocks_enter\030\206\002 \001(\01328.perfetto"
    ".protos.F2fsTruncateInodeBlocksEnterFtra"
    "ceEventH\000\022c\n\037f2fs_truncate_inode_blocks_"
    "exit\030\207\002 \001(\01327.perfetto.protos.F2fsTrunca"
    "teInodeBlocksExitFtraceEventH\000\022K\n\022f2fs_t"
    "runcate_node\030\210\002 \001(\0132,.perfetto.protos.F2"
    "fsTruncateNodeFtraceEventH\000\022X\n\031f2fs_trun"
    "cate_nodes_enter\030\211\002 \001(\01322.perfetto.proto"
    "s.F2fsTruncateNodesEnterFtraceEventH\000\022V\n"
    "\030f2fs_truncate_nodes_exit\030\212\002 \001(\01321.perfe"
    "tto.protos.F2fsTruncateNodesExitFtraceEv"
    "entH\000\022\\\n\033f2fs_truncate_partial_nodes\030\213\002 "
    "\001(\01324.perfetto.protos.F2fsTruncatePartia"
    "lNodesFtraceEventH\000\022I\n\021f2fs_unlink_enter"
    "\030\214\002 \001(\0132+.perfetto.protos.F2fsUnlinkEnte"
    "rFtraceEventH\000\022G\n\020f2fs_unlink_exit\030\215\002 \001("
    "\0132*.perfetto.protos.F2fsUnlinkExitFtrace"
    "EventH\000\022N\n\024f2fs_vm_page_mkwrite\030\216\002 \001(\0132-"
    ".perfetto.protos.F2fsVmPageMkwriteFtrace"
    "EventH\000\022G\n\020f2fs_write_begin\030\217\002 \001(\0132*.per"
    "fetto.protos.F2fsWriteBeginFtraceEventH\000"
    "\022Q\n\025f2fs_write_checkpoint\030\220\002 \001(\0132/.perfe"
    "tto.protos.F2fsWriteCheckpointFtraceEven"
    "tH\000\022C\n\016f2fs_write_end\030\221\002 \001(\0132(.perfetto."
    "protos.F2fsWriteEndFtraceEventH\000\022P\n\025allo"
    "c_pages_iommu_end\030\222\002 \001(\0132..perfetto.prot"
    "os.AllocPagesIommuEndFtraceEventH\000\022R\n\026al"
    "loc_pages_iommu_fail\030\223\002 \001(\0132/.perfetto.p"
    "rotos.AllocPagesIommuFailFtraceEventH\000\022T"
    "\n\027alloc_pages_iommu_start\030\224\002 \001(\01320.perfe"
    "tto.protos.AllocPagesIommuStartFtraceEve"
    "ntH\000\022L\n\023alloc_pages_sys_end\030\225\002 \001(\0132,.per"
    "fetto.protos.AllocPagesSysEndFtraceEvent"
    "H\000\022N\n\024alloc_pages_sys_fail\030\226\002 \001(\0132-.perf"
    "etto.protos.AllocPagesSysFailFtraceEvent"
    "H\000\022P\n\025alloc_pages_sys_start\030\227\002 \001(\0132..per"
    "fetto.protos.AllocPagesSysStartFtraceEve"
    "ntH\000\022Z\n\032dma_alloc_contiguous_retry\030\230\002 \001("
    "\01323.perfetto.protos.DmaAllocContiguousRe"
    "tryFtraceEventH\000\022E\n\017iommu_map_range\030\231\002 \001"
    "(\0132).perfetto.protos.IommuMapRangeFtrace"
    "EventH\000\022\\\n\034iommu_sec_ptbl_map_range_end\030"
    "\232\002 \001(\01323.perfetto.protos.IommuSecPtblMap"
    "RangeEndFtraceEventH\000\022`\n\036iommu_sec_ptbl_"
    "map_range_start\030\233\002 \001(\01325.perfetto.protos"
    ".IommuSecPtblMapRangeStartFtraceEventH\000\022"
    "N\n\024ion_alloc_buffer_end\030\234\002 \001(\0132-.perfett"
    "o.protos.IonAllocBufferEndFtraceEventH\000\022"
    "P\n\025ion_alloc_buffer_fail\030\235\002 \001(\0132..perfet"
    "to.protos.IonAllocBufferFailFtraceEventH"
    "\000\022X\n\031ion_alloc_buffer_fallback\030\236\002 \001(\01322."
    "perfetto.protos.IonAllocBufferFallbackFt"
    "raceEventH\000\022R\n\026ion_alloc_buffer_start\030\237\002"
    " \001(\0132/.perfetto.protos.IonAllocBufferSta"
    "rtFtraceEventH\000\022J\n\022ion_cp_alloc_retry\030\240\002"
    " \001(\0132+.perfetto.protos.IonCpAllocRetryFt"
    "raceEventH\000\022U\n\030ion_cp_secure_buffer_end\030"
    "\241\002 \001(\01320.perfetto.protos.IonCpSecureBuff"
    "erEndFtraceEventH\000\022Y\n\032ion_cp_secure_buff"
    "er_start\030\242\002 \001(\01322.perfetto.protos.IonCpS"
    "ecureBufferStartFtraceEventH\000\022F\n\017ion_pre"
    "fetching\030\243\002 \001(\0132*.perfetto.protos.IonPre"
    "fetchingFtraceEventH\000\022_\n\036ion_secure_cma_"
    "add_to_pool_end\030\244\002 \001(\01324.perfetto.protos"
    ".IonSecureCmaAddToPoolEndFtraceEventH\000\022c"
    "\n ion_secure_cma_add_to_pool_start\030\245\002 \001("
    "\01326.perfetto.protos.IonSecureCmaAddToPoo"
    "lStartFtraceEventH\000\022[\n\033ion_secure_cma_al"
    "locate_end\030\246\002 \001(\01323.perfetto.protos.IonS"
    "ecureCmaAllocateEndFtraceEventH\000\022_\n\035ion_"
    "secure_cma_allocate_start\030\247\002 \001(\01325.perfe"
    "tto.protos.IonSecureCmaAllocateStartFtra"
    "ceEventH\000\022`\n\036ion_secure_cma_shrink_pool_"
    "end\030\250\002 \001(\01325.perfetto.protos.IonSecureCm"
    "aShrinkPoolEndFtraceEventH\000\022d\n ion_secur"
    "e_cma_shrink_pool_start\030\251\002 \001(\01327.perfett"
    "o.protos.IonSecureCmaShrinkPoolStartFtra"
    "ceEventH\000\0223\n\005kfree\030\252\002 \001(\0132!.perfetto.pro"
    "tos.KfreeFtraceEventH\000\0227\n\007kmalloc\030\253\002 \001(\013"
    "2#.perfetto.protos.KmallocFtraceEventH\000\022"
    "@\n\014kmalloc_node\030\254\002 \001(\0132\'.perfetto.protos"
    ".KmallocNodeFtraceEventH\000\022G\n\020kmem_cache_"
    "alloc\030\255\002 \001(\0132*.perfetto.protos.KmemCache"
    "AllocFtraceEventH\000\022P\n\025kmem_cache_alloc_n"
    "ode\030\256\002 \001(\0132..perfetto.protos.KmemCacheAl"
    "locNodeFtraceEventH\000\022E\n\017kmem_cache_free\030"
    "\257\002 \001(\0132).perfetto.protos.KmemCacheFreeFt"
    "raceEventH\000\022I\n\021migrate_pages_end\030\260\002 \001(\0132"
    "+.perfetto.protos.MigratePagesEndFtraceE"
    "ventH\000\022M\n\023migrate_pages_start\030\261\002 \001(\0132-.p"
    "erfetto.protos.MigratePagesStartFtraceEv"
    "entH\000\022B\n\rmigrate_retry\030\262\002 \001(\0132(.perfetto"
    ".protos.MigrateRetryFtraceEventH\000\022A\n\rmm_"
    "page_alloc\030\263\002 \001(\0132\'.perfetto.protos.MmPa"
    "geAllocFtraceEventH\000\022P\n\025mm_page_alloc_ex"
    "tfrag\030\264\002 \001(\0132..perfetto.protos.MmPageAll"
    "ocExtfragFtraceEventH\000\022W\n\031mm_page_alloc_"
    "zone_locked\030\265\002 \001(\01321.perfetto.protos.MmP"
    "ageAllocZoneLockedFtraceEventH\000\022\?\n\014mm_pa"
    "ge_free\030\266\002 \001(\0132&.perfetto.protos.MmPageF"
    "reeFtraceEventH\000\022N\n\024mm_page_free_batched"
    "\030\267\002 \001(\0132-.perfetto.protos.MmPageFreeBatc"
    "hedFtraceEventH\000\022J\n\022mm_page_pcpu_drain\030\270"
    "\002 \001(\0132+.perfetto.protos.MmPagePcpuDrainF"
    "traceEventH\000\0228\n\010rss_stat\030\271\002 \001(\0132#.perfet"
    "to.protos.RssStatFtraceEventH\000\022E\n\017ion_he"
    "ap_shrink\030\272\002 \001(\0132).perfetto.protos.IonHe"
    "apShrinkFtraceEventH\000\022A\n\rion_heap_grow\030\273"
    "\002 \001(\0132\'.perfetto.protos.IonHeapGrowFtrac"
    "eEventH\000\022<\n\nfence_init\030\274\002 \001(\0132%.perfetto"
    ".protos.FenceInitFtraceEventH\000\022B\n\rfence_"
    "destroy\030\275\002 \001(\0132(.perfetto.protos.FenceDe"
    "stroyFtraceEventH\000\022M\n\023fence_enable_signa"
    "l\030\276\002 \001(\0132-.perfetto.protos.FenceEnableSi"
    "gnalFtraceEventH\000\022D\n\016fence_signaled\030\277\002 \001"
    "(\0132).perfetto.protos.FenceSignaledFtrace"
    "EventH\000\022<\n\nclk_enable\030\300\002 \001(\0132%.perfetto."
    "protos.ClkEnableFtraceEventH\000\022>\n\013clk_dis"
    "able\030\301\002 \001(\0132&.perfetto.protos.ClkDisable"
    "FtraceEventH\000\022\?\n\014clk_set_rate\030\302\002 \001(\0132&.p"
    "erfetto.protos.ClkSetRateFtraceEventH\000\022^"
    "\n\034binder_transaction_alloc_buf\030\303\002 \001(\01325."
    "perfetto.protos.BinderTransactionAllocBu"
    "fFtraceEventH\000\022D\n\016signal_deliver\030\304\002 \001(\0132"
    ").perfetto.protos.SignalDeliverFtraceEve"
    "ntH\000\022F\n\017signal_generate\030\305\002 \001(\0132*.perfett"
    "o.protos.SignalGenerateFtraceEventH\000\022N\n\024"
    "oom_score_adj_update\030\306\002 \001(\0132-.perfetto.p"
    "rotos.OomScoreAdjUpdateFtraceEventH\000\0227\n\007"
    "generic\030\307\002 \001(\0132#.perfetto.protos.Generic"
    "FtraceEventH\000\022E\n\017mm_event_record\030\310\002 \001(\0132"
    ").perfetto.protos.MmEventRecordFtraceEve"
    "ntH\000\022:\n\tsys_enter\030\311\002 \001(\0132$.perfetto.prot"
    "os.SysEnterFtraceEventH\000\0228\n\010sys_exit\030\312\002 "
    "\001(\0132#.perfetto.protos.SysExitFtraceEvent"
    "H\000\0221\n\004zero\030\313\002 \001(\0132 .perfetto.protos.Zero"
    "FtraceEventH\000\022B\n\rgpu_frequency\030\314\002 \001(\0132(."
    "perfetto.protos.GpuFrequencyFtraceEventH"
    "\000\022R\n\026sde_tracing_mark_write\030\315\002 \001(\0132/.per"
    "fetto.protos.SdeTracingMarkWriteFtraceEv"
    "entH\000\022>\n\013mark_victim\030\316\002 \001(\0132&.perfetto.p"
    "rotos.MarkVictimFtraceEventH\000\0228\n\010ion_sta"
    "t\030\317\002 \001(\0132#.perfetto.protos.IonStatFtrace"
    "EventH\000\022I\n\021ion_buffer_create\030\320\002 \001(\0132+.pe"
    "rfetto.protos.IonBufferCreateFtraceEvent"
    "H\000\022K\n\022ion_buffer_destroy\030\321\002 \001(\0132,.perfet"
    "to.protos.IonBufferDestroyFtraceEventH\000\022"
    "C\n\016scm_call_start\030\322\002 \001(\0132(.perfetto.prot"
    "os.ScmCallStartFtraceEventH\000\022\?\n\014scm_call"
    "_end\030\323\002 \001(\0132&.perfetto.protos.ScmCallEnd"
    "FtraceEventH\000\022A\n\rgpu_mem_total\030\324\002 \001(\0132\'."
    "perfetto.protos.GpuMemTotalFtraceEventH\000"
    "\022N\n\023thermal_temperature\030\325\002 \001(\0132..perfett"
    "o.protos.ThermalTemperatureFtraceEventH\000"
    "\022>\n\013cdev_update\030\326\002 \001(\0132&.perfetto.protos"
    ".CdevUpdateFtraceEventH\000\022<\n\ncpuhp_exit\030\327"
    "\002 \001(\0132%.perfetto.protos.CpuhpExitFtraceE"
    "ventH\000\022I\n\021cpuhp_multi_enter\030\330\002 \001(\0132+.per"
    "fetto.protos.CpuhpMultiEnterFtraceEventH"
    "\000\022>\n\013cpuhp_enter\030\331\002 \001(\0132&.perfetto.proto"
    "s.CpuhpEnterFtraceEventH\000\022B\n\rcpuhp_laten"
    "cy\030\332\002 \001(\0132(.perfetto.protos.CpuhpLatency"
    "FtraceEventH\000\022G\n\020fastrpc_dma_stat\030\333\002 \001(\013"
    "2*.perfetto.protos.FastrpcDmaStatFtraceE"
    "ventH\000\022R\n\026dpu_tracing_mark_write\030\334\002 \001(\0132"
    "/.perfetto.protos.DpuTracingMarkWriteFtr"
    "aceEventH\000\022R\n\026g2d_tracing_mark_write\030\335\002 "
    "\001(\0132/.perfetto.protos.G2dTracingMarkWrit"
    "eFtraceEventH\000\022T\n\027mali_tracing_mark_writ"
    "e\030\336\002 \001(\01320.perfetto.protos.MaliTracingMa"
    "rkWriteFtraceEventH\000\022A\n\rdma_heap_stat\030\337\002"
    " \001(\0132\'.perfetto.protos.DmaHeapStatFtrace"
    "EventH\000\022>\n\013cpuhp_pause\030\340\002 \001(\0132&.perfetto"
    ".protos.CpuhpPauseFtraceEventH\000\022G\n\020sched"
    "_pi_setprio\030\341\002 \001(\0132*.perfetto.protos.Sch"
    "edPiSetprioFtraceEventH\000\022C\n\016sde_sde_evtl"
    "og\030\342\002 \001(\0132(.perfetto.protos.SdeSdeEvtlog"
    "FtraceEventH\000\022Q\n\026sde_sde_perf_calc_crtc\030"
    "\343\002 \001(\0132..perfetto.protos.SdeSdePerfCalcC"
    "rtcFtraceEventH\000\022U\n\030sde_sde_perf_crtc_up"
    "date\030\344\002 \001(\01320.perfetto.protos.SdeSdePerf"
    "CrtcUpdateFtraceEventH\000\022V\n\031sde_sde_perf_"
    "set_qos_luts\030\345\002 \001(\01320.perfetto.protos.Sd"
    "eSdePerfSetQosLutsFtraceEventH\000\022S\n\027sde_s"
    "de_perf_update_bus\030\346\002 \001(\0132/.perfetto.pro"
    "tos.SdeSdePerfUpdateBusFtraceEventH\000\022K\n\022"
    "rss_stat_throttled\030\347\002 \001(\0132,.perfetto.pro"
    "tos.RssStatThrottledFtraceEventH\000\022I\n\021net"
    "if_receive_skb\030\350\002 \001(\0132+.perfetto.protos."
    "NetifReceiveSkbFtraceEventH\000\022\?\n\014net_dev_"
    "xmit\030\351\002 \001(\0132&.perfetto.protos.NetDevXmit"
    "FtraceEventH\000\022L\n\023inet_sock_set_state\030\352\002 "
    "\001(\0132,.perfetto.protos.InetSockSetStateFt"
    "raceEventH\000\022K\n\022tcp_retransmit_skb\030\353\002 \001(\013"
    "2,.perfetto.protos.TcpRetransmitSkbFtrac"
    "eEventH\000\022R\n\026cros_ec_sensorhub_data\030\354\002 \001("
    "\0132/.perfetto.protos.CrosEcSensorhubDataF"
    "traceEventH\000\022R\n\026napi_gro_receive_entry\030\355"
    "\002 \001(\0132/.perfetto.protos.NapiGroReceiveEn"
    "tryFtraceEventH\000\022P\n\025napi_gro_receive_exi"
    "t\030\356\002 \001(\0132..perfetto.protos.NapiGroReceiv"
    "eExitFtraceEventH\000\022:\n\tkfree_skb\030\357\002 \001(\0132$"
    ".perfetto.protos.KfreeSkbFtraceEventH\000\022G"
    "\n\020kvm_access_fault\030\360\002 \001(\0132*.perfetto.pro"
    "tos.KvmAccessFaultFtraceEventH\000\022=\n\013kvm_a"
    "ck_irq\030\361\002 \001(\0132%.perfetto.protos.KvmAckIr"
    "qFtraceEventH\000\022=\n\013kvm_age_hva\030\362\002 \001(\0132%.p"
    "erfetto.protos.KvmAgeHvaFtraceEventH\000\022\?\n"
    "\014kvm_age_page\030\363\002 \001(\0132&.perfetto.protos.K"
    "vmAgePageFtraceEventH\000\022L\n\023kvm_arm_clear_"
    "debug\030\364\002 \001(\0132,.perfetto.protos.KvmArmCle"
    "arDebugFtraceEventH\000\022J\n\022kvm_arm_set_dreg"
    "32\030\365\002 \001(\0132+.perfetto.protos.KvmArmSetDre"
    "g32FtraceEventH\000\022J\n\022kvm_arm_set_regset\030\366"
    "\002 \001(\0132+.perfetto.protos.KvmArmSetRegsetF"
    "traceEventH\000\022L\n\023kvm_arm_setup_debug\030\367\002 \001"
    "(\0132,.perfetto.protos.KvmArmSetupDebugFtr"
    "aceEventH\000\022:\n\tkvm_entry\030\370\002 \001(\0132$.perfett"
    "o.protos.KvmEntryFtraceEventH\000\0228\n\010kvm_ex"
    "it\030\371\002 \001(\0132#.perfetto.protos.KvmExitFtrac"
    "eEventH\000\0226\n\007kvm_fpu\030\372\002 \001(\0132\".perfetto.pr"
    "otos.KvmFpuFtraceEventH\000\022H\n\021kvm_get_time"
    "r_map\030\373\002 \001(\0132*.perfetto.protos.KvmGetTim"
    "erMapFtraceEventH\000\022E\n\017kvm_guest_fault\030\374\002"
    " \001(\0132).perfetto.protos.KvmGuestFaultFtra"
    "ceEventH\000\022J\n\022kvm_handle_sys_reg\030\375\002 \001(\0132+"
    ".perfetto.protos.KvmHandleSysRegFtraceEv"
    "entH\000\022A\n\rkvm_hvc_arm64\030\376\002 \001(\0132\'.perfetto"
    ".protos.KvmHvcArm64FtraceEventH\000\022\?\n\014kvm_"
    "irq_line\030\377\002 \001(\0132&.perfetto.protos.KvmIrq"
    "LineFtraceEventH\000\0228\n\010kvm_mmio\030\200\003 \001(\0132#.p"
    "erfetto.protos.KvmMmioFtraceEventH\000\022G\n\020k"
    "vm_mmio_emulate\030\201\003 \001(\0132*.perfetto.protos"
    ".KvmMmioEmulateFtraceEventH\000\022L\n\023kvm_set_"
    "guest_debug\030\202\003 \001(\0132,.perfetto.protos.Kvm"
    "SetGuestDebugFtraceEventH\000\022=\n\013kvm_set_ir"
    "q\030\203\003 \001(\0132%.perfetto.protos.KvmSetIrqFtra"
    "ceEventH\000\022F\n\020kvm_set_spte_hva\030\204\003 \001(\0132).p"
    "erfetto.protos.KvmSetSpteHvaFtraceEventH"
    "\000\022H\n\021kvm_set_way_flush\030\205\003 \001(\0132*.perfetto"
    ".protos.KvmSetWayFlushFtraceEventH\000\022C\n\016k"
    "vm_sys_access\030\206\003 \001(\0132(.perfetto.protos.K"
    "vmSysAccessFtraceEventH\000\022F\n\020kvm_test_age"
    "_hva\030\207\003 \001(\0132).perfetto.protos.KvmTestAge"
    "HvaFtraceEventH\000\022I\n\021kvm_timer_emulate\030\210\003"
    " \001(\0132+.perfetto.protos.KvmTimerEmulateFt"
    "raceEventH\000\022V\n\030kvm_timer_hrtimer_expire\030"
    "\211\003 \001(\01321.perfetto.protos.KvmTimerHrtimer"
    "ExpireFtraceEventH\000\022T\n\027kvm_timer_restore"
    "_state\030\212\003 \001(\01320.perfetto.protos.KvmTimer"
    "RestoreStateFtraceEventH\000\022N\n\024kvm_timer_s"
    "ave_state\030\213\003 \001(\0132-.perfetto.protos.KvmTi"
    "merSaveStateFtraceEventH\000\022N\n\024kvm_timer_u"
    "pdate_irq\030\214\003 \001(\0132-.perfetto.protos.KvmTi"
    "merUpdateIrqFtraceEventH\000\022G\n\020kvm_toggle_"
    "cache\030\215\003 \001(\0132*.perfetto.protos.KvmToggle"
    "CacheFtraceEventH\000\022L\n\023kvm_unmap_hva_rang"
    "e\030\216\003 \001(\0132,.perfetto.protos.KvmUnmapHvaRa"
    "ngeFtraceEventH\000\022K\n\022kvm_userspace_exit\030\217"
    "\003 \001(\0132,.perfetto.protos.KvmUserspaceExit"
    "FtraceEventH\000\022E\n\017kvm_vcpu_wakeup\030\220\003 \001(\0132"
    ").perfetto.protos.KvmVcpuWakeupFtraceEve"
    "ntH\000\022A\n\rkvm_wfx_arm64\030\221\003 \001(\0132\'.perfetto."
    "protos.KvmWfxArm64FtraceEventH\000\0228\n\010trap_"
    "reg\030\222\003 \001(\0132#.perfetto.protos.TrapRegFtra"
    "ceEventH\000\022T\n\027vgic_update_irq_pending\030\223\003 "
    "\001(\01320.perfetto.protos.VgicUpdateIrqPendi"
    "ngFtraceEventH\000\022S\n\026wakeup_source_activat"
    "e\030\224\003 \001(\01320.perfetto.protos.WakeupSourceA"
    "ctivateFtraceEventH\000\022W\n\030wakeup_source_de"
    "activate\030\225\003 \001(\01322.perfetto.protos.Wakeup"
    "SourceDeactivateFtraceEventH\000\022D\n\016ufshcd_"
    "command\030\226\003 \001(\0132).perfetto.protos.UfshcdC"
    "ommandFtraceEventH\000\022I\n\021ufshcd_clk_gating"
    "\030\227\003 \001(\0132+.perfetto.protos.UfshcdClkGatin"
    "gFtraceEventH\000\0227\n\007console\030\230\003 \001(\0132#.perfe"
    "tto.protos.ConsoleFtraceEventH\000\022G\n\020drm_v"
    "blank_event\030\231\003 \001(\0132*.perfetto.protos.Drm"
    "VblankEventFtraceEventH\000\022Z\n\032drm_vblank_e"
    "vent_delivered\030\232\003 \001(\01323.perfetto.protos."
    "DrmVblankEventDeliveredFtraceEventH\000\022A\n\r"
    "drm_sched_job\030\233\003 \001(\0132\'.perfetto.protos.D"
    "rmSchedJobFtraceEventH\000\022=\n\013drm_run_job\030\234"
    "\003 \001(\0132%.perfetto.protos.DrmRunJobFtraceE"
    "ventH\000\022P\n\025drm_sched_process_job\030\235\003 \001(\0132."
    ".perfetto.protos.DrmSchedProcessJobFtrac"
    "eEventH\000\022C\n\016dma_fence_init\030\236\003 \001(\0132(.perf"
    "etto.protos.DmaFenceInitFtraceEventH\000\022C\n"
    "\016dma_fence_emit\030\237\003 \001(\0132(.perfetto.protos"
    ".DmaFenceEmitFtraceEventH\000\022K\n\022dma_fence_"
    "signaled\030\240\003 \001(\0132,.perfetto.protos.DmaFen"
    "ceSignaledFtraceEventH\000\022N\n\024dma_fence_wai"
    "t_start\030\241\003 \001(\0132-.perfetto.protos.DmaFenc"
    "eWaitStartFtraceEventH\000\022J\n\022dma_fence_wai"
    "t_end\030\242\003 \001(\0132+.perfetto.protos.DmaFenceW"
    "aitEndFtraceEventH\000\022>\n\013f2fs_iostat\030\243\003 \001("
    "\0132&.perfetto.protos.F2fsIostatFtraceEven"
    "tH\000\022M\n\023f2fs_iostat_latency\030\244\003 \001(\0132-.perf"
    "etto.protos.F2fsIostatLatencyFtraceEvent"
    "H\000\022J\n\022sched_cpu_util_cfs\030\245\003 \001(\0132+.perfet"
    "to.protos.SchedCpuUtilCfsFtraceEventH\000\022:"
    "\n\tv4l2_qbuf\030\246\003 \001(\0132$.perfetto.protos.V4l"
    "2QbufFtraceEventH\000\022<\n\nv4l2_dqbuf\030\247\003 \001(\0132"
    "%.perfetto.protos.V4l2DqbufFtraceEventH\000"
    "\022J\n\022vb2_v4l2_buf_queue\030\250\003 \001(\0132+.perfetto"
    ".protos.Vb2V4l2BufQueueFtraceEventH\000\022H\n\021"
    "vb2_v4l2_buf_done\030\251\003 \001(\0132*.perfetto.prot"
    "os.Vb2V4l2BufDoneFtraceEventH\000\022A\n\rvb2_v4"
    "l2_qbuf\030\252\003 \001(\0132\'.perfetto.protos.Vb2V4l2"
    "QbufFtraceEventH\000\022C\n\016vb2_v4l2_dqbuf\030\253\003 \001"
    "(\0132(.perfetto.protos.Vb2V4l2DqbufFtraceE"
    "ventH\000\022L\n\023dsi_cmd_fifo_status\030\254\003 \001(\0132,.p"
    "erfetto.protos.DsiCmdFifoStatusFtraceEve"
    "ntH\000\0224\n\006dsi_rx\030\255\003 \001(\0132!.perfetto.protos."
    "DsiRxFtraceEventH\000\0224\n\006dsi_tx\030\256\003 \001(\0132!.pe"
    "rfetto.protos.DsiTxFtraceEventH\000\022T\n\027andr"
    "oid_fs_dataread_end\030\257\003 \001(\01320.perfetto.pr"
    "otos.AndroidFsDatareadEndFtraceEventH\000\022X"
    "\n\031android_fs_dataread_start\030\260\003 \001(\01322.per"
    "fetto.protos.AndroidFsDatareadStartFtrac"
    "eEventH\000\022V\n\030android_fs_datawrite_end\030\261\003 "
    "\001(\01321.perfetto.protos.AndroidFsDatawrite"
    "EndFtraceEventH\000\022Z\n\032android_fs_datawrite"
    "_start\030\262\003 \001(\01323.perfetto.protos.AndroidF"
    "sDatawriteStartFtraceEventH\000\022N\n\024android_"
    "fs_fsync_end\030\263\003 \001(\0132-.perfetto.protos.An"
    "droidFsFsyncEndFtraceEventH\000\022R\n\026android_"
    "fs_fsync_start\030\264\003 \001(\0132/.perfetto.protos."
    "AndroidFsFsyncStartFtraceEventH\000\022F\n\017func"
    "graph_entry\030\265\003 \001(\0132*.perfetto.protos.Fun"
    "cgraphEntryFtraceEventH\000\022D\n\016funcgraph_ex"
    "it\030\266\003 \001(\0132).perfetto.protos.FuncgraphExi"
    "tFtraceEventH\000\022G\n\020virtio_video_cmd\030\267\003 \001("
    "\0132*.perfetto.protos.VirtioVideoCmdFtrace"
    "EventH\000\022P\n\025virtio_video_cmd_done\030\270\003 \001(\0132"
    "..perfetto.protos.VirtioVideoCmdDoneFtra"
    "ceEventH\000\022\\\n\033virtio_video_resource_queue"
    "\030\271\003 \001(\01324.perfetto.protos.VirtioVideoRes"
    "ourceQueueFtraceEventH\000\022e\n virtio_video_"
    "resource_queue_done\030\272\003 \001(\01328.perfetto.pr"
    "otos.VirtioVideoResourceQueueDoneFtraceE"
    "ventH\000\022N\n\024mm_shrink_slab_start\030\273\003 \001(\0132-."
    "perfetto.protos.MmShrinkSlabStartFtraceE"
    "ventH\000\022J\n\022mm_shrink_slab_end\030\274\003 \001(\0132+.pe"
    "rfetto.protos.MmShrinkSlabEndFtraceEvent"
    "H\000\022<\n\ntrusty_smc\030\275\003 \001(\0132%.perfetto.proto"
    "s.TrustySmcFtraceEventH\000\022E\n\017trusty_smc_d"
    "one\030\276\003 \001(\0132).perfetto.protos.TrustySmcDo"
    "neFtraceEventH\000\022I\n\021trusty_std_call32\030\277\003 "
    "\001(\0132+.perfetto.protos.TrustyStdCall32Ftr"
    "aceEventH\000\022R\n\026trusty_std_call32_done\030\300\003 "
    "\001(\0132/.perfetto.protos.TrustyStdCall32Don"
    "eFtraceEventH\000\022M\n\023trusty_share_memory\030\301\003"
    " \001(\0132-.perfetto.protos.TrustyShareMemory"
    "FtraceEventH\000\022V\n\030trusty_share_memory_don"
    "e\030\302\003 \001(\01321.perfetto.protos.TrustyShareMe"
    "moryDoneFtraceEventH\000\022Q\n\025trusty_reclaim_"
    "memory\030\303\003 \001(\0132/.perfetto.protos.TrustyRe"
    "claimMemoryFtraceEventH\000\022Z\n\032trusty_recla"
    "im_memory_done\030\304\003 \001(\01323.perfetto.protos."
    "TrustyReclaimMemoryDoneFtraceEventH\000\022<\n\n"
    "trusty_irq\030\305\003 \001(\0132%.perfetto.protos.Trus"
    "tyIrqFtraceEventH\000\022T\n\027trusty_ipc_handle_"
    "event\030\306\003 \001(\01320.perfetto.protos.TrustyIpc"
    "HandleEventFtraceEventH\000\022K\n\022trusty_ipc_c"
    "onnect\030\307\003 \001(\0132,.perfetto.protos.TrustyIp"
    "cConnectFtraceEventH\000\022R\n\026trusty_ipc_conn"
    "ect_end\030\310\003 \001(\0132/.perfetto.protos.TrustyI"
    "pcConnectEndFtraceEventH\000\022G\n\020trusty_ipc_"
    "write\030\311\003 \001(\0132*.perfetto.protos.TrustyIpc"
    "WriteFtraceEventH\000\022E\n\017trusty_ipc_poll\030\312\003"
    " \001(\0132).perfetto.protos.TrustyIpcPollFtra"
    "ceEventH\000\022E\n\017trusty_ipc_read\030\314\003 \001(\0132).pe"
    "rfetto.protos.TrustyIpcReadFtraceEventH\000"
    "\022L\n\023trusty_ipc_read_end\030\315\003 \001(\0132,.perfett"
    "o.protos.TrustyIpcReadEndFtraceEventH\000\022A"
    "\n\rtrusty_ipc_rx\030\316\003 \001(\0132\'.perfetto.protos"
    ".TrustyIpcRxFtraceEventH\000\022K\n\022trusty_enqu"
    "eue_nop\030\320\003 \001(\0132,.perfetto.protos.TrustyE"
    "nqueueNopFtraceEventH\000\022E\n\017cma_alloc_star"
    "t\030\321\003 \001(\0132).perfetto.protos.CmaAllocStart"
    "FtraceEventH\000\022C\n\016cma_alloc_info\030\322\003 \001(\0132("
    ".perfetto.protos.CmaAllocInfoFtraceEvent"
    "H\000\022T\n\027lwis_tracing_mark_write\030\323\003 \001(\01320.p"
    "erfetto.protos.LwisTracingMarkWriteFtrac"
    "eEventH\000\022N\n\024virtio_gpu_cmd_queue\030\324\003 \001(\0132"
    "-.perfetto.protos.VirtioGpuCmdQueueFtrac"
    "eEventH\000\022T\n\027virtio_gpu_cmd_response\030\325\003 \001"
    "(\01320.perfetto.protos.VirtioGpuCmdRespons"
    "eFtraceEventH\000\022Q\n\026mali_mali_KCPU_CQS_SET"
    "\030\326\003 \001(\0132..perfetto.protos.MaliMaliKCPUCQ"
    "SSETFtraceEventH\000\022^\n\035mali_mali_KCPU_CQS_"
    "WAIT_START\030\327\003 \001(\01324.perfetto.protos.Mali"
    "MaliKCPUCQSWAITSTARTFtraceEventH\000\022Z\n\033mal"
    "i_mali_KCPU_CQS_WAIT_END\030\330\003 \001(\01322.perfet"
    "to.protos.MaliMaliKCPUCQSWAITENDFtraceEv"
    "entH\000\022[\n\033mali_mali_KCPU_FENCE_SIGNAL\030\331\003 "
    "\001(\01323.perfetto.protos.MaliMaliKCPUFENCES"
    "IGNALFtraceEventH\000\022b\n\037mali_mali_KCPU_FEN"
    "CE_WAIT_START\030\332\003 \001(\01326.perfetto.protos.M"
    "aliMaliKCPUFENCEWAITSTARTFtraceEventH\000\022^"
    "\n\035mali_mali_KCPU_FENCE_WAIT_END\030\333\003 \001(\01324"
    ".perfetto.protos.MaliMaliKCPUFENCEWAITEN"
    "DFtraceEventH\000\022:\n\thyp_enter\030\334\003 \001(\0132$.per"
    "fetto.protos.HypEnterFtraceEventH\000\0228\n\010hy"
    "p_exit\030\335\003 \001(\0132#.perfetto.protos.HypExitF"
    "traceEventH\000\022<\n\nhost_hcall\030\336\003 \001(\0132%.perf"
    "etto.protos.HostHcallFtraceEventH\000\0228\n\010ho"
    "st_smc\030\337\003 \001(\0132#.perfetto.protos.HostSmcF"
    "traceEventH\000\022C\n\016host_mem_abort\030\340\003 \001(\0132(."
    "perfetto.protos.HostMemAbortFtraceEventH"
    "\000\022S\n\026suspend_resume_minimal\030\341\003 \001(\01320.per"
    "fetto.protos.SuspendResumeMinimalFtraceE"
    "ventH\000\022_\n\035mali_mali_CSF_INTERRUPT_START\030"
    "\342\003 \001(\01325.perfetto.protos.MaliMaliCSFINTE"
    "RRUPTSTARTFtraceEventH\000\022[\n\033mali_mali_CSF"
    "_INTERRUPT_END\030\343\003 \001(\01323.perfetto.protos."
    "MaliMaliCSFINTERRUPTENDFtraceEventH\000B\007\n\005"
    "event"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_deps[61] =
    {
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fblock_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fclk_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcma_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcompaction_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcros_5fec_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fdmabuf_5fheap_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fdpu_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ffastrpc_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ffilemap_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fg2d_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fgeneric_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fmem_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fgpu_5fscheduler_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fion_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fipi_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fkmem_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2flowmemorykiller_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2flwis_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmm_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fprintk_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fraw_5fsyscalls_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fregulator_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsched_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fscm_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsignal_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsock_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsync_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsynthetic_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fsystrace_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftcp_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fthermal_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fv4l2_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fworkqueue_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto = {
    false,
    false,
    38365,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto,
    "protos/perfetto/trace/ftrace/ftrace_event.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_deps,
    61,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class FtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceEvent, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEvent, _impl_._oneof_case_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_common_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::PrintFtraceEvent& print(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedSwitchFtraceEvent& sched_switch(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuFrequencyFtraceEvent& cpu_frequency(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& cpu_frequency_limits(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuIdleFtraceEvent& cpu_idle(const FtraceEvent* msg);
  static const ::perfetto::protos::ClockEnableFtraceEvent& clock_enable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClockDisableFtraceEvent& clock_disable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClockSetRateFtraceEvent& clock_set_rate(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedWakeupFtraceEvent& sched_wakeup(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedBlockedReasonFtraceEvent& sched_blocked_reason(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedCpuHotplugFtraceEvent& sched_cpu_hotplug(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedWakingFtraceEvent& sched_waking(const FtraceEvent* msg);
  static const ::perfetto::protos::IpiEntryFtraceEvent& ipi_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::IpiExitFtraceEvent& ipi_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::IpiRaiseFtraceEvent& ipi_raise(const FtraceEvent* msg);
  static const ::perfetto::protos::SoftirqEntryFtraceEvent& softirq_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::SoftirqExitFtraceEvent& softirq_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::SoftirqRaiseFtraceEvent& softirq_raise(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cReadFtraceEvent& i2c_read(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cWriteFtraceEvent& i2c_write(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cResultFtraceEvent& i2c_result(const FtraceEvent* msg);
  static const ::perfetto::protos::I2cReplyFtraceEvent& i2c_reply(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusReadFtraceEvent& smbus_read(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusWriteFtraceEvent& smbus_write(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusResultFtraceEvent& smbus_result(const FtraceEvent* msg);
  static const ::perfetto::protos::SmbusReplyFtraceEvent& smbus_reply(const FtraceEvent* msg);
  static const ::perfetto::protos::LowmemoryKillFtraceEvent& lowmemory_kill(const FtraceEvent* msg);
  static const ::perfetto::protos::IrqHandlerEntryFtraceEvent& irq_handler_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::IrqHandlerExitFtraceEvent& irq_handler_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::SyncPtFtraceEvent& sync_pt(const FtraceEvent* msg);
  static const ::perfetto::protos::SyncTimelineFtraceEvent& sync_timeline(const FtraceEvent* msg);
  static const ::perfetto::protos::SyncWaitFtraceEvent& sync_wait(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& ext4_da_write_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& ext4_da_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& ext4_sync_file_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& ext4_sync_file_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqIssueFtraceEvent& block_rq_issue(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& mm_vmscan_direct_reclaim_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& mm_vmscan_direct_reclaim_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& mm_vmscan_kswapd_wake(const FtraceEvent* msg);
  static const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& mm_vmscan_kswapd_sleep(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderTransactionFtraceEvent& binder_transaction(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& binder_transaction_received(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderSetPriorityFtraceEvent& binder_set_priority(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderLockFtraceEvent& binder_lock(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderLockedFtraceEvent& binder_locked(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderUnlockFtraceEvent& binder_unlock(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& workqueue_activate_work(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& workqueue_execute_end(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& workqueue_execute_start(const FtraceEvent* msg);
  static const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& workqueue_queue_work(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorDisableFtraceEvent& regulator_disable(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& regulator_disable_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorEnableFtraceEvent& regulator_enable(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& regulator_enable_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& regulator_enable_delay(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& regulator_set_voltage(const FtraceEvent* msg);
  static const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& regulator_set_voltage_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupAttachTaskFtraceEvent& cgroup_attach_task(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupMkdirFtraceEvent& cgroup_mkdir(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupRemountFtraceEvent& cgroup_remount(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupRmdirFtraceEvent& cgroup_rmdir(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupTransferTasksFtraceEvent& cgroup_transfer_tasks(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupDestroyRootFtraceEvent& cgroup_destroy_root(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupReleaseFtraceEvent& cgroup_release(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupRenameFtraceEvent& cgroup_rename(const FtraceEvent* msg);
  static const ::perfetto::protos::CgroupSetupRootFtraceEvent& cgroup_setup_root(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdKickoffFtraceEvent& mdp_cmd_kickoff(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCommitFtraceEvent& mdp_commit(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetOtFtraceEvent& mdp_perf_set_ot(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpSsppChangeFtraceEvent& mdp_sspp_change(const FtraceEvent* msg);
  static const ::perfetto::protos::TracingMarkWriteFtraceEvent& tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& mdp_cmd_pingpong_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCompareBwFtraceEvent& mdp_compare_bw(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& mdp_perf_set_panic_luts(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpSsppSetFtraceEvent& mdp_sspp_set(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& mdp_cmd_readptr_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpMisrCrcFtraceEvent& mdp_misr_crc(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& mdp_perf_set_qos_luts(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpTraceCounterFtraceEvent& mdp_trace_counter(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& mdp_cmd_release_bw(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpMixerUpdateFtraceEvent& mdp_mixer_update(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& mdp_perf_set_wm_levels(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& mdp_video_underrun_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& mdp_cmd_wait_pingpong(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& mdp_perf_prefill_calc(const FtraceEvent* msg);
  static const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& mdp_perf_update_bus(const FtraceEvent* msg);
  static const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& rotator_bw_ao_as_context(const FtraceEvent* msg);
  static const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& mm_filemap_add_to_page_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& mm_filemap_delete_from_page_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionBeginFtraceEvent& mm_compaction_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& mm_compaction_defer_compaction(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionDeferredFtraceEvent& mm_compaction_deferred(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& mm_compaction_defer_reset(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionEndFtraceEvent& mm_compaction_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionFinishedFtraceEvent& mm_compaction_finished(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& mm_compaction_isolate_freepages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& mm_compaction_isolate_migratepages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& mm_compaction_kcompactd_sleep(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& mm_compaction_kcompactd_wake(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& mm_compaction_migratepages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionSuitableFtraceEvent& mm_compaction_suitable(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& mm_compaction_try_to_compact_pages(const FtraceEvent* msg);
  static const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& mm_compaction_wakeup_kcompactd(const FtraceEvent* msg);
  static const ::perfetto::protos::SuspendResumeFtraceEvent& suspend_resume(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedWakeupNewFtraceEvent& sched_wakeup_new(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioBackmergeFtraceEvent& block_bio_backmerge(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioBounceFtraceEvent& block_bio_bounce(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioCompleteFtraceEvent& block_bio_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& block_bio_frontmerge(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioQueueFtraceEvent& block_bio_queue(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockBioRemapFtraceEvent& block_bio_remap(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockDirtyBufferFtraceEvent& block_dirty_buffer(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockGetrqFtraceEvent& block_getrq(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockPlugFtraceEvent& block_plug(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqAbortFtraceEvent& block_rq_abort(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqCompleteFtraceEvent& block_rq_complete(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqInsertFtraceEvent& block_rq_insert(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqRemapFtraceEvent& block_rq_remap(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockRqRequeueFtraceEvent& block_rq_requeue(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockSleeprqFtraceEvent& block_sleeprq(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockSplitFtraceEvent& block_split(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockTouchBufferFtraceEvent& block_touch_buffer(const FtraceEvent* msg);
  static const ::perfetto::protos::BlockUnplugFtraceEvent& block_unplug(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& ext4_alloc_da_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& ext4_allocate_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& ext4_allocate_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& ext4_begin_ordered_truncate(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& ext4_collapse_range(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& ext4_da_release_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& ext4_da_reserve_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& ext4_da_update_reserve_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& ext4_da_write_pages(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& ext4_da_write_pages_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& ext4_direct_io_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& ext4_direct_io_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& ext4_discard_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& ext4_discard_preallocations(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4DropInodeFtraceEvent& ext4_drop_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& ext4_es_cache_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& ext4_es_find_delayed_extent_range_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& ext4_es_find_delayed_extent_range_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& ext4_es_insert_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& ext4_es_lookup_extent_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& ext4_es_lookup_extent_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& ext4_es_remove_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkFtraceEvent& ext4_es_shrink(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& ext4_es_shrink_count(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& ext4_es_shrink_scan_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& ext4_es_shrink_scan_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4EvictInodeFtraceEvent& ext4_evict_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& ext4_ext_convert_to_initialized_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& ext4_ext_convert_to_initialized_fastpath(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& ext4_ext_handle_unwritten_extents(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& ext4_ext_in_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& ext4_ext_load_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& ext4_ext_map_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& ext4_ext_map_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& ext4_ext_put_in_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& ext4_ext_remove_space(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& ext4_ext_remove_space_done(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& ext4_ext_rm_idx(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& ext4_ext_rm_leaf(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& ext4_ext_show_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& ext4_fallocate_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FallocateExitFtraceEvent& ext4_fallocate_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& ext4_find_delalloc_range(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ForgetFtraceEvent& ext4_forget(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& ext4_free_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4FreeInodeFtraceEvent& ext4_free_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& ext4_get_implied_cluster_alloc_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& ext4_get_reserved_cluster_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& ext4_ind_map_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& ext4_ind_map_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4InsertRangeFtraceEvent& ext4_insert_range(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& ext4_invalidatepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalStartFtraceEvent& ext4_journal_start(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& ext4_journal_start_reserved(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& ext4_journalled_invalidatepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& ext4_journalled_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4LoadInodeFtraceEvent& ext4_load_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& ext4_load_inode_bitmap(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& ext4_mark_inode_dirty(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& ext4_mb_bitmap_load(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& ext4_mb_buddy_bitmap_load(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& ext4_mb_discard_preallocations(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& ext4_mb_new_group_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& ext4_mb_new_inode_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& ext4_mb_release_group_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& ext4_mb_release_inode_pa(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocAllocFtraceEvent& ext4_mballoc_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& ext4_mballoc_discard(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocFreeFtraceEvent& ext4_mballoc_free(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& ext4_mballoc_prealloc(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& ext4_other_inode_update_time(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4PunchHoleFtraceEvent& ext4_punch_hole(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& ext4_read_block_bitmap_load(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ReadpageFtraceEvent& ext4_readpage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ReleasepageFtraceEvent& ext4_releasepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& ext4_remove_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& ext4_request_blocks(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4RequestInodeFtraceEvent& ext4_request_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4SyncFsFtraceEvent& ext4_sync_fs(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& ext4_trim_all_free(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TrimExtentFtraceEvent& ext4_trim_extent(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& ext4_truncate_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4TruncateExitFtraceEvent& ext4_truncate_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& ext4_unlink_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& ext4_unlink_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WriteBeginFtraceEvent& ext4_write_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WriteEndFtraceEvent& ext4_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WritepageFtraceEvent& ext4_writepage(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WritepagesFtraceEvent& ext4_writepages(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& ext4_writepages_result(const FtraceEvent* msg);
  static const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& ext4_zero_range(const FtraceEvent* msg);
  static const ::perfetto::protos::TaskNewtaskFtraceEvent& task_newtask(const FtraceEvent* msg);
  static const ::perfetto::protos::TaskRenameFtraceEvent& task_rename(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessExecFtraceEvent& sched_process_exec(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessExitFtraceEvent& sched_process_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessForkFtraceEvent& sched_process_fork(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessFreeFtraceEvent& sched_process_free(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessHangFtraceEvent& sched_process_hang(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedProcessWaitFtraceEvent& sched_process_wait(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& f2fs_do_submit_bio(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsEvictInodeFtraceEvent& f2fs_evict_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsFallocateFtraceEvent& f2fs_fallocate(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& f2fs_get_data_block(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsGetVictimFtraceEvent& f2fs_get_victim(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsIgetFtraceEvent& f2fs_iget(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsIgetExitFtraceEvent& f2fs_iget_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsNewInodeFtraceEvent& f2fs_new_inode(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsReadpageFtraceEvent& f2fs_readpage(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& f2fs_reserve_new_block(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& f2fs_set_page_dirty(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& f2fs_submit_write_page(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& f2fs_sync_file_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& f2fs_sync_file_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsSyncFsFtraceEvent& f2fs_sync_fs(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateFtraceEvent& f2fs_truncate(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& f2fs_truncate_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& f2fs_truncate_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& f2fs_truncate_data_blocks_range(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& f2fs_truncate_inode_blocks_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& f2fs_truncate_inode_blocks_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& f2fs_truncate_node(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& f2fs_truncate_nodes_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& f2fs_truncate_nodes_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& f2fs_truncate_partial_nodes(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& f2fs_unlink_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& f2fs_unlink_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& f2fs_vm_page_mkwrite(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsWriteBeginFtraceEvent& f2fs_write_begin(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& f2fs_write_checkpoint(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsWriteEndFtraceEvent& f2fs_write_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& alloc_pages_iommu_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& alloc_pages_iommu_fail(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& alloc_pages_iommu_start(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesSysEndFtraceEvent& alloc_pages_sys_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesSysFailFtraceEvent& alloc_pages_sys_fail(const FtraceEvent* msg);
  static const ::perfetto::protos::AllocPagesSysStartFtraceEvent& alloc_pages_sys_start(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& dma_alloc_contiguous_retry(const FtraceEvent* msg);
  static const ::perfetto::protos::IommuMapRangeFtraceEvent& iommu_map_range(const FtraceEvent* msg);
  static const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& iommu_sec_ptbl_map_range_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& iommu_sec_ptbl_map_range_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferEndFtraceEvent& ion_alloc_buffer_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferFailFtraceEvent& ion_alloc_buffer_fail(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& ion_alloc_buffer_fallback(const FtraceEvent* msg);
  static const ::perfetto::protos::IonAllocBufferStartFtraceEvent& ion_alloc_buffer_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonCpAllocRetryFtraceEvent& ion_cp_alloc_retry(const FtraceEvent* msg);
  static const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& ion_cp_secure_buffer_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& ion_cp_secure_buffer_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonPrefetchingFtraceEvent& ion_prefetching(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& ion_secure_cma_add_to_pool_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& ion_secure_cma_add_to_pool_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& ion_secure_cma_allocate_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& ion_secure_cma_allocate_start(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& ion_secure_cma_shrink_pool_end(const FtraceEvent* msg);
  static const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& ion_secure_cma_shrink_pool_start(const FtraceEvent* msg);
  static const ::perfetto::protos::KfreeFtraceEvent& kfree(const FtraceEvent* msg);
  static const ::perfetto::protos::KmallocFtraceEvent& kmalloc(const FtraceEvent* msg);
  static const ::perfetto::protos::KmallocNodeFtraceEvent& kmalloc_node(const FtraceEvent* msg);
  static const ::perfetto::protos::KmemCacheAllocFtraceEvent& kmem_cache_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& kmem_cache_alloc_node(const FtraceEvent* msg);
  static const ::perfetto::protos::KmemCacheFreeFtraceEvent& kmem_cache_free(const FtraceEvent* msg);
  static const ::perfetto::protos::MigratePagesEndFtraceEvent& migrate_pages_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MigratePagesStartFtraceEvent& migrate_pages_start(const FtraceEvent* msg);
  static const ::perfetto::protos::MigrateRetryFtraceEvent& migrate_retry(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageAllocFtraceEvent& mm_page_alloc(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& mm_page_alloc_extfrag(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& mm_page_alloc_zone_locked(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageFreeFtraceEvent& mm_page_free(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& mm_page_free_batched(const FtraceEvent* msg);
  static const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& mm_page_pcpu_drain(const FtraceEvent* msg);
  static const ::perfetto::protos::RssStatFtraceEvent& rss_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::IonHeapShrinkFtraceEvent& ion_heap_shrink(const FtraceEvent* msg);
  static const ::perfetto::protos::IonHeapGrowFtraceEvent& ion_heap_grow(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceInitFtraceEvent& fence_init(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceDestroyFtraceEvent& fence_destroy(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceEnableSignalFtraceEvent& fence_enable_signal(const FtraceEvent* msg);
  static const ::perfetto::protos::FenceSignaledFtraceEvent& fence_signaled(const FtraceEvent* msg);
  static const ::perfetto::protos::ClkEnableFtraceEvent& clk_enable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClkDisableFtraceEvent& clk_disable(const FtraceEvent* msg);
  static const ::perfetto::protos::ClkSetRateFtraceEvent& clk_set_rate(const FtraceEvent* msg);
  static const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& binder_transaction_alloc_buf(const FtraceEvent* msg);
  static const ::perfetto::protos::SignalDeliverFtraceEvent& signal_deliver(const FtraceEvent* msg);
  static const ::perfetto::protos::SignalGenerateFtraceEvent& signal_generate(const FtraceEvent* msg);
  static const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& oom_score_adj_update(const FtraceEvent* msg);
  static const ::perfetto::protos::GenericFtraceEvent& generic(const FtraceEvent* msg);
  static const ::perfetto::protos::MmEventRecordFtraceEvent& mm_event_record(const FtraceEvent* msg);
  static const ::perfetto::protos::SysEnterFtraceEvent& sys_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::SysExitFtraceEvent& sys_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::ZeroFtraceEvent& zero(const FtraceEvent* msg);
  static const ::perfetto::protos::GpuFrequencyFtraceEvent& gpu_frequency(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& sde_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::MarkVictimFtraceEvent& mark_victim(const FtraceEvent* msg);
  static const ::perfetto::protos::IonStatFtraceEvent& ion_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::IonBufferCreateFtraceEvent& ion_buffer_create(const FtraceEvent* msg);
  static const ::perfetto::protos::IonBufferDestroyFtraceEvent& ion_buffer_destroy(const FtraceEvent* msg);
  static const ::perfetto::protos::ScmCallStartFtraceEvent& scm_call_start(const FtraceEvent* msg);
  static const ::perfetto::protos::ScmCallEndFtraceEvent& scm_call_end(const FtraceEvent* msg);
  static const ::perfetto::protos::GpuMemTotalFtraceEvent& gpu_mem_total(const FtraceEvent* msg);
  static const ::perfetto::protos::ThermalTemperatureFtraceEvent& thermal_temperature(const FtraceEvent* msg);
  static const ::perfetto::protos::CdevUpdateFtraceEvent& cdev_update(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpExitFtraceEvent& cpuhp_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& cpuhp_multi_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpEnterFtraceEvent& cpuhp_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpLatencyFtraceEvent& cpuhp_latency(const FtraceEvent* msg);
  static const ::perfetto::protos::FastrpcDmaStatFtraceEvent& fastrpc_dma_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& dpu_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& g2d_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& mali_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaHeapStatFtraceEvent& dma_heap_stat(const FtraceEvent* msg);
  static const ::perfetto::protos::CpuhpPauseFtraceEvent& cpuhp_pause(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedPiSetprioFtraceEvent& sched_pi_setprio(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeSdeEvtlogFtraceEvent& sde_sde_evtlog(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent& sde_sde_perf_calc_crtc(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent& sde_sde_perf_crtc_update(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent& sde_sde_perf_set_qos_luts(const FtraceEvent* msg);
  static const ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent& sde_sde_perf_update_bus(const FtraceEvent* msg);
  static const ::perfetto::protos::RssStatThrottledFtraceEvent& rss_stat_throttled(const FtraceEvent* msg);
  static const ::perfetto::protos::NetifReceiveSkbFtraceEvent& netif_receive_skb(const FtraceEvent* msg);
  static const ::perfetto::protos::NetDevXmitFtraceEvent& net_dev_xmit(const FtraceEvent* msg);
  static const ::perfetto::protos::InetSockSetStateFtraceEvent& inet_sock_set_state(const FtraceEvent* msg);
  static const ::perfetto::protos::TcpRetransmitSkbFtraceEvent& tcp_retransmit_skb(const FtraceEvent* msg);
  static const ::perfetto::protos::CrosEcSensorhubDataFtraceEvent& cros_ec_sensorhub_data(const FtraceEvent* msg);
  static const ::perfetto::protos::NapiGroReceiveEntryFtraceEvent& napi_gro_receive_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::NapiGroReceiveExitFtraceEvent& napi_gro_receive_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::KfreeSkbFtraceEvent& kfree_skb(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmAccessFaultFtraceEvent& kvm_access_fault(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmAckIrqFtraceEvent& kvm_ack_irq(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmAgeHvaFtraceEvent& kvm_age_hva(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmAgePageFtraceEvent& kvm_age_page(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmArmClearDebugFtraceEvent& kvm_arm_clear_debug(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmArmSetDreg32FtraceEvent& kvm_arm_set_dreg32(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmArmSetRegsetFtraceEvent& kvm_arm_set_regset(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmArmSetupDebugFtraceEvent& kvm_arm_setup_debug(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmEntryFtraceEvent& kvm_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmExitFtraceEvent& kvm_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmFpuFtraceEvent& kvm_fpu(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmGetTimerMapFtraceEvent& kvm_get_timer_map(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmGuestFaultFtraceEvent& kvm_guest_fault(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmHandleSysRegFtraceEvent& kvm_handle_sys_reg(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmHvcArm64FtraceEvent& kvm_hvc_arm64(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmIrqLineFtraceEvent& kvm_irq_line(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmMmioFtraceEvent& kvm_mmio(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmMmioEmulateFtraceEvent& kvm_mmio_emulate(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmSetGuestDebugFtraceEvent& kvm_set_guest_debug(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmSetIrqFtraceEvent& kvm_set_irq(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmSetSpteHvaFtraceEvent& kvm_set_spte_hva(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmSetWayFlushFtraceEvent& kvm_set_way_flush(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmSysAccessFtraceEvent& kvm_sys_access(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmTestAgeHvaFtraceEvent& kvm_test_age_hva(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmTimerEmulateFtraceEvent& kvm_timer_emulate(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent& kvm_timer_hrtimer_expire(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmTimerRestoreStateFtraceEvent& kvm_timer_restore_state(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmTimerSaveStateFtraceEvent& kvm_timer_save_state(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent& kvm_timer_update_irq(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmToggleCacheFtraceEvent& kvm_toggle_cache(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent& kvm_unmap_hva_range(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmUserspaceExitFtraceEvent& kvm_userspace_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmVcpuWakeupFtraceEvent& kvm_vcpu_wakeup(const FtraceEvent* msg);
  static const ::perfetto::protos::KvmWfxArm64FtraceEvent& kvm_wfx_arm64(const FtraceEvent* msg);
  static const ::perfetto::protos::TrapRegFtraceEvent& trap_reg(const FtraceEvent* msg);
  static const ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent& vgic_update_irq_pending(const FtraceEvent* msg);
  static const ::perfetto::protos::WakeupSourceActivateFtraceEvent& wakeup_source_activate(const FtraceEvent* msg);
  static const ::perfetto::protos::WakeupSourceDeactivateFtraceEvent& wakeup_source_deactivate(const FtraceEvent* msg);
  static const ::perfetto::protos::UfshcdCommandFtraceEvent& ufshcd_command(const FtraceEvent* msg);
  static const ::perfetto::protos::UfshcdClkGatingFtraceEvent& ufshcd_clk_gating(const FtraceEvent* msg);
  static const ::perfetto::protos::ConsoleFtraceEvent& console(const FtraceEvent* msg);
  static const ::perfetto::protos::DrmVblankEventFtraceEvent& drm_vblank_event(const FtraceEvent* msg);
  static const ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent& drm_vblank_event_delivered(const FtraceEvent* msg);
  static const ::perfetto::protos::DrmSchedJobFtraceEvent& drm_sched_job(const FtraceEvent* msg);
  static const ::perfetto::protos::DrmRunJobFtraceEvent& drm_run_job(const FtraceEvent* msg);
  static const ::perfetto::protos::DrmSchedProcessJobFtraceEvent& drm_sched_process_job(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaFenceInitFtraceEvent& dma_fence_init(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaFenceEmitFtraceEvent& dma_fence_emit(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaFenceSignaledFtraceEvent& dma_fence_signaled(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaFenceWaitStartFtraceEvent& dma_fence_wait_start(const FtraceEvent* msg);
  static const ::perfetto::protos::DmaFenceWaitEndFtraceEvent& dma_fence_wait_end(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsIostatFtraceEvent& f2fs_iostat(const FtraceEvent* msg);
  static const ::perfetto::protos::F2fsIostatLatencyFtraceEvent& f2fs_iostat_latency(const FtraceEvent* msg);
  static const ::perfetto::protos::SchedCpuUtilCfsFtraceEvent& sched_cpu_util_cfs(const FtraceEvent* msg);
  static const ::perfetto::protos::V4l2QbufFtraceEvent& v4l2_qbuf(const FtraceEvent* msg);
  static const ::perfetto::protos::V4l2DqbufFtraceEvent& v4l2_dqbuf(const FtraceEvent* msg);
  static const ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent& vb2_v4l2_buf_queue(const FtraceEvent* msg);
  static const ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent& vb2_v4l2_buf_done(const FtraceEvent* msg);
  static const ::perfetto::protos::Vb2V4l2QbufFtraceEvent& vb2_v4l2_qbuf(const FtraceEvent* msg);
  static const ::perfetto::protos::Vb2V4l2DqbufFtraceEvent& vb2_v4l2_dqbuf(const FtraceEvent* msg);
  static const ::perfetto::protos::DsiCmdFifoStatusFtraceEvent& dsi_cmd_fifo_status(const FtraceEvent* msg);
  static const ::perfetto::protos::DsiRxFtraceEvent& dsi_rx(const FtraceEvent* msg);
  static const ::perfetto::protos::DsiTxFtraceEvent& dsi_tx(const FtraceEvent* msg);
  static const ::perfetto::protos::AndroidFsDatareadEndFtraceEvent& android_fs_dataread_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AndroidFsDatareadStartFtraceEvent& android_fs_dataread_start(const FtraceEvent* msg);
  static const ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent& android_fs_datawrite_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent& android_fs_datawrite_start(const FtraceEvent* msg);
  static const ::perfetto::protos::AndroidFsFsyncEndFtraceEvent& android_fs_fsync_end(const FtraceEvent* msg);
  static const ::perfetto::protos::AndroidFsFsyncStartFtraceEvent& android_fs_fsync_start(const FtraceEvent* msg);
  static const ::perfetto::protos::FuncgraphEntryFtraceEvent& funcgraph_entry(const FtraceEvent* msg);
  static const ::perfetto::protos::FuncgraphExitFtraceEvent& funcgraph_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::VirtioVideoCmdFtraceEvent& virtio_video_cmd(const FtraceEvent* msg);
  static const ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent& virtio_video_cmd_done(const FtraceEvent* msg);
  static const ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent& virtio_video_resource_queue(const FtraceEvent* msg);
  static const ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent& virtio_video_resource_queue_done(const FtraceEvent* msg);
  static const ::perfetto::protos::MmShrinkSlabStartFtraceEvent& mm_shrink_slab_start(const FtraceEvent* msg);
  static const ::perfetto::protos::MmShrinkSlabEndFtraceEvent& mm_shrink_slab_end(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustySmcFtraceEvent& trusty_smc(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustySmcDoneFtraceEvent& trusty_smc_done(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyStdCall32FtraceEvent& trusty_std_call32(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyStdCall32DoneFtraceEvent& trusty_std_call32_done(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyShareMemoryFtraceEvent& trusty_share_memory(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent& trusty_share_memory_done(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyReclaimMemoryFtraceEvent& trusty_reclaim_memory(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent& trusty_reclaim_memory_done(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIrqFtraceEvent& trusty_irq(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcHandleEventFtraceEvent& trusty_ipc_handle_event(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcConnectFtraceEvent& trusty_ipc_connect(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcConnectEndFtraceEvent& trusty_ipc_connect_end(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcWriteFtraceEvent& trusty_ipc_write(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcPollFtraceEvent& trusty_ipc_poll(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcReadFtraceEvent& trusty_ipc_read(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcReadEndFtraceEvent& trusty_ipc_read_end(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyIpcRxFtraceEvent& trusty_ipc_rx(const FtraceEvent* msg);
  static const ::perfetto::protos::TrustyEnqueueNopFtraceEvent& trusty_enqueue_nop(const FtraceEvent* msg);
  static const ::perfetto::protos::CmaAllocStartFtraceEvent& cma_alloc_start(const FtraceEvent* msg);
  static const ::perfetto::protos::CmaAllocInfoFtraceEvent& cma_alloc_info(const FtraceEvent* msg);
  static const ::perfetto::protos::LwisTracingMarkWriteFtraceEvent& lwis_tracing_mark_write(const FtraceEvent* msg);
  static const ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent& virtio_gpu_cmd_queue(const FtraceEvent* msg);
  static const ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent& virtio_gpu_cmd_response(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent& mali_mali_kcpu_cqs_set(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent& mali_mali_kcpu_cqs_wait_start(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent& mali_mali_kcpu_cqs_wait_end(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent& mali_mali_kcpu_fence_signal(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent& mali_mali_kcpu_fence_wait_start(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent& mali_mali_kcpu_fence_wait_end(const FtraceEvent* msg);
  static const ::perfetto::protos::HypEnterFtraceEvent& hyp_enter(const FtraceEvent* msg);
  static const ::perfetto::protos::HypExitFtraceEvent& hyp_exit(const FtraceEvent* msg);
  static const ::perfetto::protos::HostHcallFtraceEvent& host_hcall(const FtraceEvent* msg);
  static const ::perfetto::protos::HostSmcFtraceEvent& host_smc(const FtraceEvent* msg);
  static const ::perfetto::protos::HostMemAbortFtraceEvent& host_mem_abort(const FtraceEvent* msg);
  static const ::perfetto::protos::SuspendResumeMinimalFtraceEvent& suspend_resume_minimal(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent& mali_mali_csf_interrupt_start(const FtraceEvent* msg);
  static const ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent& mali_mali_csf_interrupt_end(const FtraceEvent* msg);
};

const ::perfetto::protos::PrintFtraceEvent&
FtraceEvent::_Internal::print(const FtraceEvent* msg) {
  return *msg->_impl_.event_.print_;
}
const ::perfetto::protos::SchedSwitchFtraceEvent&
FtraceEvent::_Internal::sched_switch(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_switch_;
}
const ::perfetto::protos::CpuFrequencyFtraceEvent&
FtraceEvent::_Internal::cpu_frequency(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpu_frequency_;
}
const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent&
FtraceEvent::_Internal::cpu_frequency_limits(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpu_frequency_limits_;
}
const ::perfetto::protos::CpuIdleFtraceEvent&
FtraceEvent::_Internal::cpu_idle(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpu_idle_;
}
const ::perfetto::protos::ClockEnableFtraceEvent&
FtraceEvent::_Internal::clock_enable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.clock_enable_;
}
const ::perfetto::protos::ClockDisableFtraceEvent&
FtraceEvent::_Internal::clock_disable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.clock_disable_;
}
const ::perfetto::protos::ClockSetRateFtraceEvent&
FtraceEvent::_Internal::clock_set_rate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.clock_set_rate_;
}
const ::perfetto::protos::SchedWakeupFtraceEvent&
FtraceEvent::_Internal::sched_wakeup(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_wakeup_;
}
const ::perfetto::protos::SchedBlockedReasonFtraceEvent&
FtraceEvent::_Internal::sched_blocked_reason(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_blocked_reason_;
}
const ::perfetto::protos::SchedCpuHotplugFtraceEvent&
FtraceEvent::_Internal::sched_cpu_hotplug(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_cpu_hotplug_;
}
const ::perfetto::protos::SchedWakingFtraceEvent&
FtraceEvent::_Internal::sched_waking(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_waking_;
}
const ::perfetto::protos::IpiEntryFtraceEvent&
FtraceEvent::_Internal::ipi_entry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ipi_entry_;
}
const ::perfetto::protos::IpiExitFtraceEvent&
FtraceEvent::_Internal::ipi_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ipi_exit_;
}
const ::perfetto::protos::IpiRaiseFtraceEvent&
FtraceEvent::_Internal::ipi_raise(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ipi_raise_;
}
const ::perfetto::protos::SoftirqEntryFtraceEvent&
FtraceEvent::_Internal::softirq_entry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.softirq_entry_;
}
const ::perfetto::protos::SoftirqExitFtraceEvent&
FtraceEvent::_Internal::softirq_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.softirq_exit_;
}
const ::perfetto::protos::SoftirqRaiseFtraceEvent&
FtraceEvent::_Internal::softirq_raise(const FtraceEvent* msg) {
  return *msg->_impl_.event_.softirq_raise_;
}
const ::perfetto::protos::I2cReadFtraceEvent&
FtraceEvent::_Internal::i2c_read(const FtraceEvent* msg) {
  return *msg->_impl_.event_.i2c_read_;
}
const ::perfetto::protos::I2cWriteFtraceEvent&
FtraceEvent::_Internal::i2c_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.i2c_write_;
}
const ::perfetto::protos::I2cResultFtraceEvent&
FtraceEvent::_Internal::i2c_result(const FtraceEvent* msg) {
  return *msg->_impl_.event_.i2c_result_;
}
const ::perfetto::protos::I2cReplyFtraceEvent&
FtraceEvent::_Internal::i2c_reply(const FtraceEvent* msg) {
  return *msg->_impl_.event_.i2c_reply_;
}
const ::perfetto::protos::SmbusReadFtraceEvent&
FtraceEvent::_Internal::smbus_read(const FtraceEvent* msg) {
  return *msg->_impl_.event_.smbus_read_;
}
const ::perfetto::protos::SmbusWriteFtraceEvent&
FtraceEvent::_Internal::smbus_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.smbus_write_;
}
const ::perfetto::protos::SmbusResultFtraceEvent&
FtraceEvent::_Internal::smbus_result(const FtraceEvent* msg) {
  return *msg->_impl_.event_.smbus_result_;
}
const ::perfetto::protos::SmbusReplyFtraceEvent&
FtraceEvent::_Internal::smbus_reply(const FtraceEvent* msg) {
  return *msg->_impl_.event_.smbus_reply_;
}
const ::perfetto::protos::LowmemoryKillFtraceEvent&
FtraceEvent::_Internal::lowmemory_kill(const FtraceEvent* msg) {
  return *msg->_impl_.event_.lowmemory_kill_;
}
const ::perfetto::protos::IrqHandlerEntryFtraceEvent&
FtraceEvent::_Internal::irq_handler_entry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.irq_handler_entry_;
}
const ::perfetto::protos::IrqHandlerExitFtraceEvent&
FtraceEvent::_Internal::irq_handler_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.irq_handler_exit_;
}
const ::perfetto::protos::SyncPtFtraceEvent&
FtraceEvent::_Internal::sync_pt(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sync_pt_;
}
const ::perfetto::protos::SyncTimelineFtraceEvent&
FtraceEvent::_Internal::sync_timeline(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sync_timeline_;
}
const ::perfetto::protos::SyncWaitFtraceEvent&
FtraceEvent::_Internal::sync_wait(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sync_wait_;
}
const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_begin(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_write_begin_;
}
const ::perfetto::protos::Ext4DaWriteEndFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_write_end_;
}
const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent&
FtraceEvent::_Internal::ext4_sync_file_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_sync_file_enter_;
}
const ::perfetto::protos::Ext4SyncFileExitFtraceEvent&
FtraceEvent::_Internal::ext4_sync_file_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_sync_file_exit_;
}
const ::perfetto::protos::BlockRqIssueFtraceEvent&
FtraceEvent::_Internal::block_rq_issue(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_rq_issue_;
}
const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_direct_reclaim_begin(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_vmscan_direct_reclaim_begin_;
}
const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_direct_reclaim_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_vmscan_direct_reclaim_end_;
}
const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_kswapd_wake(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_vmscan_kswapd_wake_;
}
const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent&
FtraceEvent::_Internal::mm_vmscan_kswapd_sleep(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_vmscan_kswapd_sleep_;
}
const ::perfetto::protos::BinderTransactionFtraceEvent&
FtraceEvent::_Internal::binder_transaction(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_transaction_;
}
const ::perfetto::protos::BinderTransactionReceivedFtraceEvent&
FtraceEvent::_Internal::binder_transaction_received(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_transaction_received_;
}
const ::perfetto::protos::BinderSetPriorityFtraceEvent&
FtraceEvent::_Internal::binder_set_priority(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_set_priority_;
}
const ::perfetto::protos::BinderLockFtraceEvent&
FtraceEvent::_Internal::binder_lock(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_lock_;
}
const ::perfetto::protos::BinderLockedFtraceEvent&
FtraceEvent::_Internal::binder_locked(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_locked_;
}
const ::perfetto::protos::BinderUnlockFtraceEvent&
FtraceEvent::_Internal::binder_unlock(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_unlock_;
}
const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent&
FtraceEvent::_Internal::workqueue_activate_work(const FtraceEvent* msg) {
  return *msg->_impl_.event_.workqueue_activate_work_;
}
const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent&
FtraceEvent::_Internal::workqueue_execute_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.workqueue_execute_end_;
}
const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent&
FtraceEvent::_Internal::workqueue_execute_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.workqueue_execute_start_;
}
const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent&
FtraceEvent::_Internal::workqueue_queue_work(const FtraceEvent* msg) {
  return *msg->_impl_.event_.workqueue_queue_work_;
}
const ::perfetto::protos::RegulatorDisableFtraceEvent&
FtraceEvent::_Internal::regulator_disable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_disable_;
}
const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent&
FtraceEvent::_Internal::regulator_disable_complete(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_disable_complete_;
}
const ::perfetto::protos::RegulatorEnableFtraceEvent&
FtraceEvent::_Internal::regulator_enable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_enable_;
}
const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent&
FtraceEvent::_Internal::regulator_enable_complete(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_enable_complete_;
}
const ::perfetto::protos::RegulatorEnableDelayFtraceEvent&
FtraceEvent::_Internal::regulator_enable_delay(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_enable_delay_;
}
const ::perfetto::protos::RegulatorSetVoltageFtraceEvent&
FtraceEvent::_Internal::regulator_set_voltage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_set_voltage_;
}
const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent&
FtraceEvent::_Internal::regulator_set_voltage_complete(const FtraceEvent* msg) {
  return *msg->_impl_.event_.regulator_set_voltage_complete_;
}
const ::perfetto::protos::CgroupAttachTaskFtraceEvent&
FtraceEvent::_Internal::cgroup_attach_task(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_attach_task_;
}
const ::perfetto::protos::CgroupMkdirFtraceEvent&
FtraceEvent::_Internal::cgroup_mkdir(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_mkdir_;
}
const ::perfetto::protos::CgroupRemountFtraceEvent&
FtraceEvent::_Internal::cgroup_remount(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_remount_;
}
const ::perfetto::protos::CgroupRmdirFtraceEvent&
FtraceEvent::_Internal::cgroup_rmdir(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_rmdir_;
}
const ::perfetto::protos::CgroupTransferTasksFtraceEvent&
FtraceEvent::_Internal::cgroup_transfer_tasks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_transfer_tasks_;
}
const ::perfetto::protos::CgroupDestroyRootFtraceEvent&
FtraceEvent::_Internal::cgroup_destroy_root(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_destroy_root_;
}
const ::perfetto::protos::CgroupReleaseFtraceEvent&
FtraceEvent::_Internal::cgroup_release(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_release_;
}
const ::perfetto::protos::CgroupRenameFtraceEvent&
FtraceEvent::_Internal::cgroup_rename(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_rename_;
}
const ::perfetto::protos::CgroupSetupRootFtraceEvent&
FtraceEvent::_Internal::cgroup_setup_root(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cgroup_setup_root_;
}
const ::perfetto::protos::MdpCmdKickoffFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_kickoff(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_cmd_kickoff_;
}
const ::perfetto::protos::MdpCommitFtraceEvent&
FtraceEvent::_Internal::mdp_commit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_commit_;
}
const ::perfetto::protos::MdpPerfSetOtFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_ot(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_perf_set_ot_;
}
const ::perfetto::protos::MdpSsppChangeFtraceEvent&
FtraceEvent::_Internal::mdp_sspp_change(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_sspp_change_;
}
const ::perfetto::protos::TracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::tracing_mark_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.tracing_mark_write_;
}
const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_pingpong_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_cmd_pingpong_done_;
}
const ::perfetto::protos::MdpCompareBwFtraceEvent&
FtraceEvent::_Internal::mdp_compare_bw(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_compare_bw_;
}
const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_panic_luts(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_perf_set_panic_luts_;
}
const ::perfetto::protos::MdpSsppSetFtraceEvent&
FtraceEvent::_Internal::mdp_sspp_set(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_sspp_set_;
}
const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_readptr_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_cmd_readptr_done_;
}
const ::perfetto::protos::MdpMisrCrcFtraceEvent&
FtraceEvent::_Internal::mdp_misr_crc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_misr_crc_;
}
const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_qos_luts(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_perf_set_qos_luts_;
}
const ::perfetto::protos::MdpTraceCounterFtraceEvent&
FtraceEvent::_Internal::mdp_trace_counter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_trace_counter_;
}
const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_release_bw(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_cmd_release_bw_;
}
const ::perfetto::protos::MdpMixerUpdateFtraceEvent&
FtraceEvent::_Internal::mdp_mixer_update(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_mixer_update_;
}
const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent&
FtraceEvent::_Internal::mdp_perf_set_wm_levels(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_perf_set_wm_levels_;
}
const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent&
FtraceEvent::_Internal::mdp_video_underrun_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_video_underrun_done_;
}
const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent&
FtraceEvent::_Internal::mdp_cmd_wait_pingpong(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_cmd_wait_pingpong_;
}
const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent&
FtraceEvent::_Internal::mdp_perf_prefill_calc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_perf_prefill_calc_;
}
const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent&
FtraceEvent::_Internal::mdp_perf_update_bus(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mdp_perf_update_bus_;
}
const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent&
FtraceEvent::_Internal::rotator_bw_ao_as_context(const FtraceEvent* msg) {
  return *msg->_impl_.event_.rotator_bw_ao_as_context_;
}
const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent&
FtraceEvent::_Internal::mm_filemap_add_to_page_cache(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_filemap_add_to_page_cache_;
}
const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent&
FtraceEvent::_Internal::mm_filemap_delete_from_page_cache(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_filemap_delete_from_page_cache_;
}
const ::perfetto::protos::MmCompactionBeginFtraceEvent&
FtraceEvent::_Internal::mm_compaction_begin(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_begin_;
}
const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent&
FtraceEvent::_Internal::mm_compaction_defer_compaction(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_defer_compaction_;
}
const ::perfetto::protos::MmCompactionDeferredFtraceEvent&
FtraceEvent::_Internal::mm_compaction_deferred(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_deferred_;
}
const ::perfetto::protos::MmCompactionDeferResetFtraceEvent&
FtraceEvent::_Internal::mm_compaction_defer_reset(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_defer_reset_;
}
const ::perfetto::protos::MmCompactionEndFtraceEvent&
FtraceEvent::_Internal::mm_compaction_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_end_;
}
const ::perfetto::protos::MmCompactionFinishedFtraceEvent&
FtraceEvent::_Internal::mm_compaction_finished(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_finished_;
}
const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_isolate_freepages(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_isolate_freepages_;
}
const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_isolate_migratepages(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_isolate_migratepages_;
}
const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent&
FtraceEvent::_Internal::mm_compaction_kcompactd_sleep(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_kcompactd_sleep_;
}
const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent&
FtraceEvent::_Internal::mm_compaction_kcompactd_wake(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_kcompactd_wake_;
}
const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_migratepages(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_migratepages_;
}
const ::perfetto::protos::MmCompactionSuitableFtraceEvent&
FtraceEvent::_Internal::mm_compaction_suitable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_suitable_;
}
const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent&
FtraceEvent::_Internal::mm_compaction_try_to_compact_pages(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_try_to_compact_pages_;
}
const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent&
FtraceEvent::_Internal::mm_compaction_wakeup_kcompactd(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_compaction_wakeup_kcompactd_;
}
const ::perfetto::protos::SuspendResumeFtraceEvent&
FtraceEvent::_Internal::suspend_resume(const FtraceEvent* msg) {
  return *msg->_impl_.event_.suspend_resume_;
}
const ::perfetto::protos::SchedWakeupNewFtraceEvent&
FtraceEvent::_Internal::sched_wakeup_new(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_wakeup_new_;
}
const ::perfetto::protos::BlockBioBackmergeFtraceEvent&
FtraceEvent::_Internal::block_bio_backmerge(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_bio_backmerge_;
}
const ::perfetto::protos::BlockBioBounceFtraceEvent&
FtraceEvent::_Internal::block_bio_bounce(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_bio_bounce_;
}
const ::perfetto::protos::BlockBioCompleteFtraceEvent&
FtraceEvent::_Internal::block_bio_complete(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_bio_complete_;
}
const ::perfetto::protos::BlockBioFrontmergeFtraceEvent&
FtraceEvent::_Internal::block_bio_frontmerge(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_bio_frontmerge_;
}
const ::perfetto::protos::BlockBioQueueFtraceEvent&
FtraceEvent::_Internal::block_bio_queue(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_bio_queue_;
}
const ::perfetto::protos::BlockBioRemapFtraceEvent&
FtraceEvent::_Internal::block_bio_remap(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_bio_remap_;
}
const ::perfetto::protos::BlockDirtyBufferFtraceEvent&
FtraceEvent::_Internal::block_dirty_buffer(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_dirty_buffer_;
}
const ::perfetto::protos::BlockGetrqFtraceEvent&
FtraceEvent::_Internal::block_getrq(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_getrq_;
}
const ::perfetto::protos::BlockPlugFtraceEvent&
FtraceEvent::_Internal::block_plug(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_plug_;
}
const ::perfetto::protos::BlockRqAbortFtraceEvent&
FtraceEvent::_Internal::block_rq_abort(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_rq_abort_;
}
const ::perfetto::protos::BlockRqCompleteFtraceEvent&
FtraceEvent::_Internal::block_rq_complete(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_rq_complete_;
}
const ::perfetto::protos::BlockRqInsertFtraceEvent&
FtraceEvent::_Internal::block_rq_insert(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_rq_insert_;
}
const ::perfetto::protos::BlockRqRemapFtraceEvent&
FtraceEvent::_Internal::block_rq_remap(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_rq_remap_;
}
const ::perfetto::protos::BlockRqRequeueFtraceEvent&
FtraceEvent::_Internal::block_rq_requeue(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_rq_requeue_;
}
const ::perfetto::protos::BlockSleeprqFtraceEvent&
FtraceEvent::_Internal::block_sleeprq(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_sleeprq_;
}
const ::perfetto::protos::BlockSplitFtraceEvent&
FtraceEvent::_Internal::block_split(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_split_;
}
const ::perfetto::protos::BlockTouchBufferFtraceEvent&
FtraceEvent::_Internal::block_touch_buffer(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_touch_buffer_;
}
const ::perfetto::protos::BlockUnplugFtraceEvent&
FtraceEvent::_Internal::block_unplug(const FtraceEvent* msg) {
  return *msg->_impl_.event_.block_unplug_;
}
const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_alloc_da_blocks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_alloc_da_blocks_;
}
const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_allocate_blocks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_allocate_blocks_;
}
const ::perfetto::protos::Ext4AllocateInodeFtraceEvent&
FtraceEvent::_Internal::ext4_allocate_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_allocate_inode_;
}
const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent&
FtraceEvent::_Internal::ext4_begin_ordered_truncate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_begin_ordered_truncate_;
}
const ::perfetto::protos::Ext4CollapseRangeFtraceEvent&
FtraceEvent::_Internal::ext4_collapse_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_collapse_range_;
}
const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_da_release_space(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_release_space_;
}
const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_da_reserve_space(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_reserve_space_;
}
const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_da_update_reserve_space(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_update_reserve_space_;
}
const ::perfetto::protos::Ext4DaWritePagesFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_pages(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_write_pages_;
}
const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent&
FtraceEvent::_Internal::ext4_da_write_pages_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_da_write_pages_extent_;
}
const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent&
FtraceEvent::_Internal::ext4_direct_io_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_direct_io_enter_;
}
const ::perfetto::protos::Ext4DirectIOExitFtraceEvent&
FtraceEvent::_Internal::ext4_direct_io_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_direct_io_exit_;
}
const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_discard_blocks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_discard_blocks_;
}
const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent&
FtraceEvent::_Internal::ext4_discard_preallocations(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_discard_preallocations_;
}
const ::perfetto::protos::Ext4DropInodeFtraceEvent&
FtraceEvent::_Internal::ext4_drop_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_drop_inode_;
}
const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent&
FtraceEvent::_Internal::ext4_es_cache_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_cache_extent_;
}
const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent&
FtraceEvent::_Internal::ext4_es_find_delayed_extent_range_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_find_delayed_extent_range_enter_;
}
const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent&
FtraceEvent::_Internal::ext4_es_find_delayed_extent_range_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_find_delayed_extent_range_exit_;
}
const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent&
FtraceEvent::_Internal::ext4_es_insert_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_insert_extent_;
}
const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent&
FtraceEvent::_Internal::ext4_es_lookup_extent_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_lookup_extent_enter_;
}
const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent&
FtraceEvent::_Internal::ext4_es_lookup_extent_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_lookup_extent_exit_;
}
const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent&
FtraceEvent::_Internal::ext4_es_remove_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_remove_extent_;
}
const ::perfetto::protos::Ext4EsShrinkFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_shrink_;
}
const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink_count(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_shrink_count_;
}
const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink_scan_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_shrink_scan_enter_;
}
const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent&
FtraceEvent::_Internal::ext4_es_shrink_scan_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_es_shrink_scan_exit_;
}
const ::perfetto::protos::Ext4EvictInodeFtraceEvent&
FtraceEvent::_Internal::ext4_evict_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_evict_inode_;
}
const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent&
FtraceEvent::_Internal::ext4_ext_convert_to_initialized_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_convert_to_initialized_enter_;
}
const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent&
FtraceEvent::_Internal::ext4_ext_convert_to_initialized_fastpath(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_convert_to_initialized_fastpath_;
}
const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent&
FtraceEvent::_Internal::ext4_ext_handle_unwritten_extents(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_handle_unwritten_extents_;
}
const ::perfetto::protos::Ext4ExtInCacheFtraceEvent&
FtraceEvent::_Internal::ext4_ext_in_cache(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_in_cache_;
}
const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent&
FtraceEvent::_Internal::ext4_ext_load_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_load_extent_;
}
const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent&
FtraceEvent::_Internal::ext4_ext_map_blocks_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_map_blocks_enter_;
}
const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent&
FtraceEvent::_Internal::ext4_ext_map_blocks_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_map_blocks_exit_;
}
const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent&
FtraceEvent::_Internal::ext4_ext_put_in_cache(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_put_in_cache_;
}
const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent&
FtraceEvent::_Internal::ext4_ext_remove_space(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_remove_space_;
}
const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent&
FtraceEvent::_Internal::ext4_ext_remove_space_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_remove_space_done_;
}
const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent&
FtraceEvent::_Internal::ext4_ext_rm_idx(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_rm_idx_;
}
const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent&
FtraceEvent::_Internal::ext4_ext_rm_leaf(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_rm_leaf_;
}
const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent&
FtraceEvent::_Internal::ext4_ext_show_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ext_show_extent_;
}
const ::perfetto::protos::Ext4FallocateEnterFtraceEvent&
FtraceEvent::_Internal::ext4_fallocate_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_fallocate_enter_;
}
const ::perfetto::protos::Ext4FallocateExitFtraceEvent&
FtraceEvent::_Internal::ext4_fallocate_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_fallocate_exit_;
}
const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent&
FtraceEvent::_Internal::ext4_find_delalloc_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_find_delalloc_range_;
}
const ::perfetto::protos::Ext4ForgetFtraceEvent&
FtraceEvent::_Internal::ext4_forget(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_forget_;
}
const ::perfetto::protos::Ext4FreeBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_free_blocks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_free_blocks_;
}
const ::perfetto::protos::Ext4FreeInodeFtraceEvent&
FtraceEvent::_Internal::ext4_free_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_free_inode_;
}
const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent&
FtraceEvent::_Internal::ext4_get_implied_cluster_alloc_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_get_implied_cluster_alloc_exit_;
}
const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent&
FtraceEvent::_Internal::ext4_get_reserved_cluster_alloc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_get_reserved_cluster_alloc_;
}
const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent&
FtraceEvent::_Internal::ext4_ind_map_blocks_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ind_map_blocks_enter_;
}
const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent&
FtraceEvent::_Internal::ext4_ind_map_blocks_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_ind_map_blocks_exit_;
}
const ::perfetto::protos::Ext4InsertRangeFtraceEvent&
FtraceEvent::_Internal::ext4_insert_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_insert_range_;
}
const ::perfetto::protos::Ext4InvalidatepageFtraceEvent&
FtraceEvent::_Internal::ext4_invalidatepage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_invalidatepage_;
}
const ::perfetto::protos::Ext4JournalStartFtraceEvent&
FtraceEvent::_Internal::ext4_journal_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_journal_start_;
}
const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent&
FtraceEvent::_Internal::ext4_journal_start_reserved(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_journal_start_reserved_;
}
const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent&
FtraceEvent::_Internal::ext4_journalled_invalidatepage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_journalled_invalidatepage_;
}
const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent&
FtraceEvent::_Internal::ext4_journalled_write_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_journalled_write_end_;
}
const ::perfetto::protos::Ext4LoadInodeFtraceEvent&
FtraceEvent::_Internal::ext4_load_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_load_inode_;
}
const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent&
FtraceEvent::_Internal::ext4_load_inode_bitmap(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_load_inode_bitmap_;
}
const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent&
FtraceEvent::_Internal::ext4_mark_inode_dirty(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mark_inode_dirty_;
}
const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent&
FtraceEvent::_Internal::ext4_mb_bitmap_load(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_bitmap_load_;
}
const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent&
FtraceEvent::_Internal::ext4_mb_buddy_bitmap_load(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_buddy_bitmap_load_;
}
const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent&
FtraceEvent::_Internal::ext4_mb_discard_preallocations(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_discard_preallocations_;
}
const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_new_group_pa(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_new_group_pa_;
}
const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_new_inode_pa(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_new_inode_pa_;
}
const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_release_group_pa(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_release_group_pa_;
}
const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent&
FtraceEvent::_Internal::ext4_mb_release_inode_pa(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mb_release_inode_pa_;
}
const ::perfetto::protos::Ext4MballocAllocFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_alloc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mballoc_alloc_;
}
const ::perfetto::protos::Ext4MballocDiscardFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_discard(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mballoc_discard_;
}
const ::perfetto::protos::Ext4MballocFreeFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_free(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mballoc_free_;
}
const ::perfetto::protos::Ext4MballocPreallocFtraceEvent&
FtraceEvent::_Internal::ext4_mballoc_prealloc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_mballoc_prealloc_;
}
const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent&
FtraceEvent::_Internal::ext4_other_inode_update_time(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_other_inode_update_time_;
}
const ::perfetto::protos::Ext4PunchHoleFtraceEvent&
FtraceEvent::_Internal::ext4_punch_hole(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_punch_hole_;
}
const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent&
FtraceEvent::_Internal::ext4_read_block_bitmap_load(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_read_block_bitmap_load_;
}
const ::perfetto::protos::Ext4ReadpageFtraceEvent&
FtraceEvent::_Internal::ext4_readpage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_readpage_;
}
const ::perfetto::protos::Ext4ReleasepageFtraceEvent&
FtraceEvent::_Internal::ext4_releasepage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_releasepage_;
}
const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_remove_blocks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_remove_blocks_;
}
const ::perfetto::protos::Ext4RequestBlocksFtraceEvent&
FtraceEvent::_Internal::ext4_request_blocks(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_request_blocks_;
}
const ::perfetto::protos::Ext4RequestInodeFtraceEvent&
FtraceEvent::_Internal::ext4_request_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_request_inode_;
}
const ::perfetto::protos::Ext4SyncFsFtraceEvent&
FtraceEvent::_Internal::ext4_sync_fs(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_sync_fs_;
}
const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent&
FtraceEvent::_Internal::ext4_trim_all_free(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_trim_all_free_;
}
const ::perfetto::protos::Ext4TrimExtentFtraceEvent&
FtraceEvent::_Internal::ext4_trim_extent(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_trim_extent_;
}
const ::perfetto::protos::Ext4TruncateEnterFtraceEvent&
FtraceEvent::_Internal::ext4_truncate_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_truncate_enter_;
}
const ::perfetto::protos::Ext4TruncateExitFtraceEvent&
FtraceEvent::_Internal::ext4_truncate_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_truncate_exit_;
}
const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent&
FtraceEvent::_Internal::ext4_unlink_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_unlink_enter_;
}
const ::perfetto::protos::Ext4UnlinkExitFtraceEvent&
FtraceEvent::_Internal::ext4_unlink_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_unlink_exit_;
}
const ::perfetto::protos::Ext4WriteBeginFtraceEvent&
FtraceEvent::_Internal::ext4_write_begin(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_write_begin_;
}
const ::perfetto::protos::Ext4WriteEndFtraceEvent&
FtraceEvent::_Internal::ext4_write_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_write_end_;
}
const ::perfetto::protos::Ext4WritepageFtraceEvent&
FtraceEvent::_Internal::ext4_writepage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_writepage_;
}
const ::perfetto::protos::Ext4WritepagesFtraceEvent&
FtraceEvent::_Internal::ext4_writepages(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_writepages_;
}
const ::perfetto::protos::Ext4WritepagesResultFtraceEvent&
FtraceEvent::_Internal::ext4_writepages_result(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_writepages_result_;
}
const ::perfetto::protos::Ext4ZeroRangeFtraceEvent&
FtraceEvent::_Internal::ext4_zero_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ext4_zero_range_;
}
const ::perfetto::protos::TaskNewtaskFtraceEvent&
FtraceEvent::_Internal::task_newtask(const FtraceEvent* msg) {
  return *msg->_impl_.event_.task_newtask_;
}
const ::perfetto::protos::TaskRenameFtraceEvent&
FtraceEvent::_Internal::task_rename(const FtraceEvent* msg) {
  return *msg->_impl_.event_.task_rename_;
}
const ::perfetto::protos::SchedProcessExecFtraceEvent&
FtraceEvent::_Internal::sched_process_exec(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_process_exec_;
}
const ::perfetto::protos::SchedProcessExitFtraceEvent&
FtraceEvent::_Internal::sched_process_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_process_exit_;
}
const ::perfetto::protos::SchedProcessForkFtraceEvent&
FtraceEvent::_Internal::sched_process_fork(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_process_fork_;
}
const ::perfetto::protos::SchedProcessFreeFtraceEvent&
FtraceEvent::_Internal::sched_process_free(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_process_free_;
}
const ::perfetto::protos::SchedProcessHangFtraceEvent&
FtraceEvent::_Internal::sched_process_hang(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_process_hang_;
}
const ::perfetto::protos::SchedProcessWaitFtraceEvent&
FtraceEvent::_Internal::sched_process_wait(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_process_wait_;
}
const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent&
FtraceEvent::_Internal::f2fs_do_submit_bio(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_do_submit_bio_;
}
const ::perfetto::protos::F2fsEvictInodeFtraceEvent&
FtraceEvent::_Internal::f2fs_evict_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_evict_inode_;
}
const ::perfetto::protos::F2fsFallocateFtraceEvent&
FtraceEvent::_Internal::f2fs_fallocate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_fallocate_;
}
const ::perfetto::protos::F2fsGetDataBlockFtraceEvent&
FtraceEvent::_Internal::f2fs_get_data_block(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_get_data_block_;
}
const ::perfetto::protos::F2fsGetVictimFtraceEvent&
FtraceEvent::_Internal::f2fs_get_victim(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_get_victim_;
}
const ::perfetto::protos::F2fsIgetFtraceEvent&
FtraceEvent::_Internal::f2fs_iget(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_iget_;
}
const ::perfetto::protos::F2fsIgetExitFtraceEvent&
FtraceEvent::_Internal::f2fs_iget_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_iget_exit_;
}
const ::perfetto::protos::F2fsNewInodeFtraceEvent&
FtraceEvent::_Internal::f2fs_new_inode(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_new_inode_;
}
const ::perfetto::protos::F2fsReadpageFtraceEvent&
FtraceEvent::_Internal::f2fs_readpage(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_readpage_;
}
const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent&
FtraceEvent::_Internal::f2fs_reserve_new_block(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_reserve_new_block_;
}
const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent&
FtraceEvent::_Internal::f2fs_set_page_dirty(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_set_page_dirty_;
}
const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent&
FtraceEvent::_Internal::f2fs_submit_write_page(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_submit_write_page_;
}
const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_sync_file_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_sync_file_enter_;
}
const ::perfetto::protos::F2fsSyncFileExitFtraceEvent&
FtraceEvent::_Internal::f2fs_sync_file_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_sync_file_exit_;
}
const ::perfetto::protos::F2fsSyncFsFtraceEvent&
FtraceEvent::_Internal::f2fs_sync_fs(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_sync_fs_;
}
const ::perfetto::protos::F2fsTruncateFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_;
}
const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_blocks_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_blocks_enter_;
}
const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_blocks_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_blocks_exit_;
}
const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_data_blocks_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_data_blocks_range_;
}
const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_inode_blocks_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_inode_blocks_enter_;
}
const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_inode_blocks_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_inode_blocks_exit_;
}
const ::perfetto::protos::F2fsTruncateNodeFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_node(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_node_;
}
const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_nodes_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_nodes_enter_;
}
const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_nodes_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_nodes_exit_;
}
const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent&
FtraceEvent::_Internal::f2fs_truncate_partial_nodes(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_truncate_partial_nodes_;
}
const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent&
FtraceEvent::_Internal::f2fs_unlink_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_unlink_enter_;
}
const ::perfetto::protos::F2fsUnlinkExitFtraceEvent&
FtraceEvent::_Internal::f2fs_unlink_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_unlink_exit_;
}
const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent&
FtraceEvent::_Internal::f2fs_vm_page_mkwrite(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_vm_page_mkwrite_;
}
const ::perfetto::protos::F2fsWriteBeginFtraceEvent&
FtraceEvent::_Internal::f2fs_write_begin(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_write_begin_;
}
const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent&
FtraceEvent::_Internal::f2fs_write_checkpoint(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_write_checkpoint_;
}
const ::perfetto::protos::F2fsWriteEndFtraceEvent&
FtraceEvent::_Internal::f2fs_write_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_write_end_;
}
const ::perfetto::protos::AllocPagesIommuEndFtraceEvent&
FtraceEvent::_Internal::alloc_pages_iommu_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.alloc_pages_iommu_end_;
}
const ::perfetto::protos::AllocPagesIommuFailFtraceEvent&
FtraceEvent::_Internal::alloc_pages_iommu_fail(const FtraceEvent* msg) {
  return *msg->_impl_.event_.alloc_pages_iommu_fail_;
}
const ::perfetto::protos::AllocPagesIommuStartFtraceEvent&
FtraceEvent::_Internal::alloc_pages_iommu_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.alloc_pages_iommu_start_;
}
const ::perfetto::protos::AllocPagesSysEndFtraceEvent&
FtraceEvent::_Internal::alloc_pages_sys_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.alloc_pages_sys_end_;
}
const ::perfetto::protos::AllocPagesSysFailFtraceEvent&
FtraceEvent::_Internal::alloc_pages_sys_fail(const FtraceEvent* msg) {
  return *msg->_impl_.event_.alloc_pages_sys_fail_;
}
const ::perfetto::protos::AllocPagesSysStartFtraceEvent&
FtraceEvent::_Internal::alloc_pages_sys_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.alloc_pages_sys_start_;
}
const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent&
FtraceEvent::_Internal::dma_alloc_contiguous_retry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_alloc_contiguous_retry_;
}
const ::perfetto::protos::IommuMapRangeFtraceEvent&
FtraceEvent::_Internal::iommu_map_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.iommu_map_range_;
}
const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent&
FtraceEvent::_Internal::iommu_sec_ptbl_map_range_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.iommu_sec_ptbl_map_range_end_;
}
const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent&
FtraceEvent::_Internal::iommu_sec_ptbl_map_range_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.iommu_sec_ptbl_map_range_start_;
}
const ::perfetto::protos::IonAllocBufferEndFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_alloc_buffer_end_;
}
const ::perfetto::protos::IonAllocBufferFailFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_fail(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_alloc_buffer_fail_;
}
const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_fallback(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_alloc_buffer_fallback_;
}
const ::perfetto::protos::IonAllocBufferStartFtraceEvent&
FtraceEvent::_Internal::ion_alloc_buffer_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_alloc_buffer_start_;
}
const ::perfetto::protos::IonCpAllocRetryFtraceEvent&
FtraceEvent::_Internal::ion_cp_alloc_retry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_cp_alloc_retry_;
}
const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent&
FtraceEvent::_Internal::ion_cp_secure_buffer_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_cp_secure_buffer_end_;
}
const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent&
FtraceEvent::_Internal::ion_cp_secure_buffer_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_cp_secure_buffer_start_;
}
const ::perfetto::protos::IonPrefetchingFtraceEvent&
FtraceEvent::_Internal::ion_prefetching(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_prefetching_;
}
const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_add_to_pool_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_secure_cma_add_to_pool_end_;
}
const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_add_to_pool_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_secure_cma_add_to_pool_start_;
}
const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_allocate_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_secure_cma_allocate_end_;
}
const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_allocate_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_secure_cma_allocate_start_;
}
const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_shrink_pool_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_secure_cma_shrink_pool_end_;
}
const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent&
FtraceEvent::_Internal::ion_secure_cma_shrink_pool_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_secure_cma_shrink_pool_start_;
}
const ::perfetto::protos::KfreeFtraceEvent&
FtraceEvent::_Internal::kfree(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kfree_;
}
const ::perfetto::protos::KmallocFtraceEvent&
FtraceEvent::_Internal::kmalloc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kmalloc_;
}
const ::perfetto::protos::KmallocNodeFtraceEvent&
FtraceEvent::_Internal::kmalloc_node(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kmalloc_node_;
}
const ::perfetto::protos::KmemCacheAllocFtraceEvent&
FtraceEvent::_Internal::kmem_cache_alloc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kmem_cache_alloc_;
}
const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent&
FtraceEvent::_Internal::kmem_cache_alloc_node(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kmem_cache_alloc_node_;
}
const ::perfetto::protos::KmemCacheFreeFtraceEvent&
FtraceEvent::_Internal::kmem_cache_free(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kmem_cache_free_;
}
const ::perfetto::protos::MigratePagesEndFtraceEvent&
FtraceEvent::_Internal::migrate_pages_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.migrate_pages_end_;
}
const ::perfetto::protos::MigratePagesStartFtraceEvent&
FtraceEvent::_Internal::migrate_pages_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.migrate_pages_start_;
}
const ::perfetto::protos::MigrateRetryFtraceEvent&
FtraceEvent::_Internal::migrate_retry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.migrate_retry_;
}
const ::perfetto::protos::MmPageAllocFtraceEvent&
FtraceEvent::_Internal::mm_page_alloc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_page_alloc_;
}
const ::perfetto::protos::MmPageAllocExtfragFtraceEvent&
FtraceEvent::_Internal::mm_page_alloc_extfrag(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_page_alloc_extfrag_;
}
const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent&
FtraceEvent::_Internal::mm_page_alloc_zone_locked(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_page_alloc_zone_locked_;
}
const ::perfetto::protos::MmPageFreeFtraceEvent&
FtraceEvent::_Internal::mm_page_free(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_page_free_;
}
const ::perfetto::protos::MmPageFreeBatchedFtraceEvent&
FtraceEvent::_Internal::mm_page_free_batched(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_page_free_batched_;
}
const ::perfetto::protos::MmPagePcpuDrainFtraceEvent&
FtraceEvent::_Internal::mm_page_pcpu_drain(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_page_pcpu_drain_;
}
const ::perfetto::protos::RssStatFtraceEvent&
FtraceEvent::_Internal::rss_stat(const FtraceEvent* msg) {
  return *msg->_impl_.event_.rss_stat_;
}
const ::perfetto::protos::IonHeapShrinkFtraceEvent&
FtraceEvent::_Internal::ion_heap_shrink(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_heap_shrink_;
}
const ::perfetto::protos::IonHeapGrowFtraceEvent&
FtraceEvent::_Internal::ion_heap_grow(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_heap_grow_;
}
const ::perfetto::protos::FenceInitFtraceEvent&
FtraceEvent::_Internal::fence_init(const FtraceEvent* msg) {
  return *msg->_impl_.event_.fence_init_;
}
const ::perfetto::protos::FenceDestroyFtraceEvent&
FtraceEvent::_Internal::fence_destroy(const FtraceEvent* msg) {
  return *msg->_impl_.event_.fence_destroy_;
}
const ::perfetto::protos::FenceEnableSignalFtraceEvent&
FtraceEvent::_Internal::fence_enable_signal(const FtraceEvent* msg) {
  return *msg->_impl_.event_.fence_enable_signal_;
}
const ::perfetto::protos::FenceSignaledFtraceEvent&
FtraceEvent::_Internal::fence_signaled(const FtraceEvent* msg) {
  return *msg->_impl_.event_.fence_signaled_;
}
const ::perfetto::protos::ClkEnableFtraceEvent&
FtraceEvent::_Internal::clk_enable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.clk_enable_;
}
const ::perfetto::protos::ClkDisableFtraceEvent&
FtraceEvent::_Internal::clk_disable(const FtraceEvent* msg) {
  return *msg->_impl_.event_.clk_disable_;
}
const ::perfetto::protos::ClkSetRateFtraceEvent&
FtraceEvent::_Internal::clk_set_rate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.clk_set_rate_;
}
const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent&
FtraceEvent::_Internal::binder_transaction_alloc_buf(const FtraceEvent* msg) {
  return *msg->_impl_.event_.binder_transaction_alloc_buf_;
}
const ::perfetto::protos::SignalDeliverFtraceEvent&
FtraceEvent::_Internal::signal_deliver(const FtraceEvent* msg) {
  return *msg->_impl_.event_.signal_deliver_;
}
const ::perfetto::protos::SignalGenerateFtraceEvent&
FtraceEvent::_Internal::signal_generate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.signal_generate_;
}
const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent&
FtraceEvent::_Internal::oom_score_adj_update(const FtraceEvent* msg) {
  return *msg->_impl_.event_.oom_score_adj_update_;
}
const ::perfetto::protos::GenericFtraceEvent&
FtraceEvent::_Internal::generic(const FtraceEvent* msg) {
  return *msg->_impl_.event_.generic_;
}
const ::perfetto::protos::MmEventRecordFtraceEvent&
FtraceEvent::_Internal::mm_event_record(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_event_record_;
}
const ::perfetto::protos::SysEnterFtraceEvent&
FtraceEvent::_Internal::sys_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sys_enter_;
}
const ::perfetto::protos::SysExitFtraceEvent&
FtraceEvent::_Internal::sys_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sys_exit_;
}
const ::perfetto::protos::ZeroFtraceEvent&
FtraceEvent::_Internal::zero(const FtraceEvent* msg) {
  return *msg->_impl_.event_.zero_;
}
const ::perfetto::protos::GpuFrequencyFtraceEvent&
FtraceEvent::_Internal::gpu_frequency(const FtraceEvent* msg) {
  return *msg->_impl_.event_.gpu_frequency_;
}
const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::sde_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sde_tracing_mark_write_;
}
const ::perfetto::protos::MarkVictimFtraceEvent&
FtraceEvent::_Internal::mark_victim(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mark_victim_;
}
const ::perfetto::protos::IonStatFtraceEvent&
FtraceEvent::_Internal::ion_stat(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_stat_;
}
const ::perfetto::protos::IonBufferCreateFtraceEvent&
FtraceEvent::_Internal::ion_buffer_create(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_buffer_create_;
}
const ::perfetto::protos::IonBufferDestroyFtraceEvent&
FtraceEvent::_Internal::ion_buffer_destroy(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ion_buffer_destroy_;
}
const ::perfetto::protos::ScmCallStartFtraceEvent&
FtraceEvent::_Internal::scm_call_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.scm_call_start_;
}
const ::perfetto::protos::ScmCallEndFtraceEvent&
FtraceEvent::_Internal::scm_call_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.scm_call_end_;
}
const ::perfetto::protos::GpuMemTotalFtraceEvent&
FtraceEvent::_Internal::gpu_mem_total(const FtraceEvent* msg) {
  return *msg->_impl_.event_.gpu_mem_total_;
}
const ::perfetto::protos::ThermalTemperatureFtraceEvent&
FtraceEvent::_Internal::thermal_temperature(const FtraceEvent* msg) {
  return *msg->_impl_.event_.thermal_temperature_;
}
const ::perfetto::protos::CdevUpdateFtraceEvent&
FtraceEvent::_Internal::cdev_update(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cdev_update_;
}
const ::perfetto::protos::CpuhpExitFtraceEvent&
FtraceEvent::_Internal::cpuhp_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpuhp_exit_;
}
const ::perfetto::protos::CpuhpMultiEnterFtraceEvent&
FtraceEvent::_Internal::cpuhp_multi_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpuhp_multi_enter_;
}
const ::perfetto::protos::CpuhpEnterFtraceEvent&
FtraceEvent::_Internal::cpuhp_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpuhp_enter_;
}
const ::perfetto::protos::CpuhpLatencyFtraceEvent&
FtraceEvent::_Internal::cpuhp_latency(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpuhp_latency_;
}
const ::perfetto::protos::FastrpcDmaStatFtraceEvent&
FtraceEvent::_Internal::fastrpc_dma_stat(const FtraceEvent* msg) {
  return *msg->_impl_.event_.fastrpc_dma_stat_;
}
const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::dpu_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dpu_tracing_mark_write_;
}
const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::g2d_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.g2d_tracing_mark_write_;
}
const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::mali_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_tracing_mark_write_;
}
const ::perfetto::protos::DmaHeapStatFtraceEvent&
FtraceEvent::_Internal::dma_heap_stat(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_heap_stat_;
}
const ::perfetto::protos::CpuhpPauseFtraceEvent&
FtraceEvent::_Internal::cpuhp_pause(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cpuhp_pause_;
}
const ::perfetto::protos::SchedPiSetprioFtraceEvent&
FtraceEvent::_Internal::sched_pi_setprio(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_pi_setprio_;
}
const ::perfetto::protos::SdeSdeEvtlogFtraceEvent&
FtraceEvent::_Internal::sde_sde_evtlog(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sde_sde_evtlog_;
}
const ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent&
FtraceEvent::_Internal::sde_sde_perf_calc_crtc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sde_sde_perf_calc_crtc_;
}
const ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent&
FtraceEvent::_Internal::sde_sde_perf_crtc_update(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sde_sde_perf_crtc_update_;
}
const ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent&
FtraceEvent::_Internal::sde_sde_perf_set_qos_luts(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sde_sde_perf_set_qos_luts_;
}
const ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent&
FtraceEvent::_Internal::sde_sde_perf_update_bus(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sde_sde_perf_update_bus_;
}
const ::perfetto::protos::RssStatThrottledFtraceEvent&
FtraceEvent::_Internal::rss_stat_throttled(const FtraceEvent* msg) {
  return *msg->_impl_.event_.rss_stat_throttled_;
}
const ::perfetto::protos::NetifReceiveSkbFtraceEvent&
FtraceEvent::_Internal::netif_receive_skb(const FtraceEvent* msg) {
  return *msg->_impl_.event_.netif_receive_skb_;
}
const ::perfetto::protos::NetDevXmitFtraceEvent&
FtraceEvent::_Internal::net_dev_xmit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.net_dev_xmit_;
}
const ::perfetto::protos::InetSockSetStateFtraceEvent&
FtraceEvent::_Internal::inet_sock_set_state(const FtraceEvent* msg) {
  return *msg->_impl_.event_.inet_sock_set_state_;
}
const ::perfetto::protos::TcpRetransmitSkbFtraceEvent&
FtraceEvent::_Internal::tcp_retransmit_skb(const FtraceEvent* msg) {
  return *msg->_impl_.event_.tcp_retransmit_skb_;
}
const ::perfetto::protos::CrosEcSensorhubDataFtraceEvent&
FtraceEvent::_Internal::cros_ec_sensorhub_data(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cros_ec_sensorhub_data_;
}
const ::perfetto::protos::NapiGroReceiveEntryFtraceEvent&
FtraceEvent::_Internal::napi_gro_receive_entry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.napi_gro_receive_entry_;
}
const ::perfetto::protos::NapiGroReceiveExitFtraceEvent&
FtraceEvent::_Internal::napi_gro_receive_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.napi_gro_receive_exit_;
}
const ::perfetto::protos::KfreeSkbFtraceEvent&
FtraceEvent::_Internal::kfree_skb(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kfree_skb_;
}
const ::perfetto::protos::KvmAccessFaultFtraceEvent&
FtraceEvent::_Internal::kvm_access_fault(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_access_fault_;
}
const ::perfetto::protos::KvmAckIrqFtraceEvent&
FtraceEvent::_Internal::kvm_ack_irq(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_ack_irq_;
}
const ::perfetto::protos::KvmAgeHvaFtraceEvent&
FtraceEvent::_Internal::kvm_age_hva(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_age_hva_;
}
const ::perfetto::protos::KvmAgePageFtraceEvent&
FtraceEvent::_Internal::kvm_age_page(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_age_page_;
}
const ::perfetto::protos::KvmArmClearDebugFtraceEvent&
FtraceEvent::_Internal::kvm_arm_clear_debug(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_arm_clear_debug_;
}
const ::perfetto::protos::KvmArmSetDreg32FtraceEvent&
FtraceEvent::_Internal::kvm_arm_set_dreg32(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_arm_set_dreg32_;
}
const ::perfetto::protos::KvmArmSetRegsetFtraceEvent&
FtraceEvent::_Internal::kvm_arm_set_regset(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_arm_set_regset_;
}
const ::perfetto::protos::KvmArmSetupDebugFtraceEvent&
FtraceEvent::_Internal::kvm_arm_setup_debug(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_arm_setup_debug_;
}
const ::perfetto::protos::KvmEntryFtraceEvent&
FtraceEvent::_Internal::kvm_entry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_entry_;
}
const ::perfetto::protos::KvmExitFtraceEvent&
FtraceEvent::_Internal::kvm_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_exit_;
}
const ::perfetto::protos::KvmFpuFtraceEvent&
FtraceEvent::_Internal::kvm_fpu(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_fpu_;
}
const ::perfetto::protos::KvmGetTimerMapFtraceEvent&
FtraceEvent::_Internal::kvm_get_timer_map(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_get_timer_map_;
}
const ::perfetto::protos::KvmGuestFaultFtraceEvent&
FtraceEvent::_Internal::kvm_guest_fault(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_guest_fault_;
}
const ::perfetto::protos::KvmHandleSysRegFtraceEvent&
FtraceEvent::_Internal::kvm_handle_sys_reg(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_handle_sys_reg_;
}
const ::perfetto::protos::KvmHvcArm64FtraceEvent&
FtraceEvent::_Internal::kvm_hvc_arm64(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_hvc_arm64_;
}
const ::perfetto::protos::KvmIrqLineFtraceEvent&
FtraceEvent::_Internal::kvm_irq_line(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_irq_line_;
}
const ::perfetto::protos::KvmMmioFtraceEvent&
FtraceEvent::_Internal::kvm_mmio(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_mmio_;
}
const ::perfetto::protos::KvmMmioEmulateFtraceEvent&
FtraceEvent::_Internal::kvm_mmio_emulate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_mmio_emulate_;
}
const ::perfetto::protos::KvmSetGuestDebugFtraceEvent&
FtraceEvent::_Internal::kvm_set_guest_debug(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_set_guest_debug_;
}
const ::perfetto::protos::KvmSetIrqFtraceEvent&
FtraceEvent::_Internal::kvm_set_irq(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_set_irq_;
}
const ::perfetto::protos::KvmSetSpteHvaFtraceEvent&
FtraceEvent::_Internal::kvm_set_spte_hva(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_set_spte_hva_;
}
const ::perfetto::protos::KvmSetWayFlushFtraceEvent&
FtraceEvent::_Internal::kvm_set_way_flush(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_set_way_flush_;
}
const ::perfetto::protos::KvmSysAccessFtraceEvent&
FtraceEvent::_Internal::kvm_sys_access(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_sys_access_;
}
const ::perfetto::protos::KvmTestAgeHvaFtraceEvent&
FtraceEvent::_Internal::kvm_test_age_hva(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_test_age_hva_;
}
const ::perfetto::protos::KvmTimerEmulateFtraceEvent&
FtraceEvent::_Internal::kvm_timer_emulate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_timer_emulate_;
}
const ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent&
FtraceEvent::_Internal::kvm_timer_hrtimer_expire(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_timer_hrtimer_expire_;
}
const ::perfetto::protos::KvmTimerRestoreStateFtraceEvent&
FtraceEvent::_Internal::kvm_timer_restore_state(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_timer_restore_state_;
}
const ::perfetto::protos::KvmTimerSaveStateFtraceEvent&
FtraceEvent::_Internal::kvm_timer_save_state(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_timer_save_state_;
}
const ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent&
FtraceEvent::_Internal::kvm_timer_update_irq(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_timer_update_irq_;
}
const ::perfetto::protos::KvmToggleCacheFtraceEvent&
FtraceEvent::_Internal::kvm_toggle_cache(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_toggle_cache_;
}
const ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent&
FtraceEvent::_Internal::kvm_unmap_hva_range(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_unmap_hva_range_;
}
const ::perfetto::protos::KvmUserspaceExitFtraceEvent&
FtraceEvent::_Internal::kvm_userspace_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_userspace_exit_;
}
const ::perfetto::protos::KvmVcpuWakeupFtraceEvent&
FtraceEvent::_Internal::kvm_vcpu_wakeup(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_vcpu_wakeup_;
}
const ::perfetto::protos::KvmWfxArm64FtraceEvent&
FtraceEvent::_Internal::kvm_wfx_arm64(const FtraceEvent* msg) {
  return *msg->_impl_.event_.kvm_wfx_arm64_;
}
const ::perfetto::protos::TrapRegFtraceEvent&
FtraceEvent::_Internal::trap_reg(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trap_reg_;
}
const ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent&
FtraceEvent::_Internal::vgic_update_irq_pending(const FtraceEvent* msg) {
  return *msg->_impl_.event_.vgic_update_irq_pending_;
}
const ::perfetto::protos::WakeupSourceActivateFtraceEvent&
FtraceEvent::_Internal::wakeup_source_activate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.wakeup_source_activate_;
}
const ::perfetto::protos::WakeupSourceDeactivateFtraceEvent&
FtraceEvent::_Internal::wakeup_source_deactivate(const FtraceEvent* msg) {
  return *msg->_impl_.event_.wakeup_source_deactivate_;
}
const ::perfetto::protos::UfshcdCommandFtraceEvent&
FtraceEvent::_Internal::ufshcd_command(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ufshcd_command_;
}
const ::perfetto::protos::UfshcdClkGatingFtraceEvent&
FtraceEvent::_Internal::ufshcd_clk_gating(const FtraceEvent* msg) {
  return *msg->_impl_.event_.ufshcd_clk_gating_;
}
const ::perfetto::protos::ConsoleFtraceEvent&
FtraceEvent::_Internal::console(const FtraceEvent* msg) {
  return *msg->_impl_.event_.console_;
}
const ::perfetto::protos::DrmVblankEventFtraceEvent&
FtraceEvent::_Internal::drm_vblank_event(const FtraceEvent* msg) {
  return *msg->_impl_.event_.drm_vblank_event_;
}
const ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent&
FtraceEvent::_Internal::drm_vblank_event_delivered(const FtraceEvent* msg) {
  return *msg->_impl_.event_.drm_vblank_event_delivered_;
}
const ::perfetto::protos::DrmSchedJobFtraceEvent&
FtraceEvent::_Internal::drm_sched_job(const FtraceEvent* msg) {
  return *msg->_impl_.event_.drm_sched_job_;
}
const ::perfetto::protos::DrmRunJobFtraceEvent&
FtraceEvent::_Internal::drm_run_job(const FtraceEvent* msg) {
  return *msg->_impl_.event_.drm_run_job_;
}
const ::perfetto::protos::DrmSchedProcessJobFtraceEvent&
FtraceEvent::_Internal::drm_sched_process_job(const FtraceEvent* msg) {
  return *msg->_impl_.event_.drm_sched_process_job_;
}
const ::perfetto::protos::DmaFenceInitFtraceEvent&
FtraceEvent::_Internal::dma_fence_init(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_fence_init_;
}
const ::perfetto::protos::DmaFenceEmitFtraceEvent&
FtraceEvent::_Internal::dma_fence_emit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_fence_emit_;
}
const ::perfetto::protos::DmaFenceSignaledFtraceEvent&
FtraceEvent::_Internal::dma_fence_signaled(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_fence_signaled_;
}
const ::perfetto::protos::DmaFenceWaitStartFtraceEvent&
FtraceEvent::_Internal::dma_fence_wait_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_fence_wait_start_;
}
const ::perfetto::protos::DmaFenceWaitEndFtraceEvent&
FtraceEvent::_Internal::dma_fence_wait_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dma_fence_wait_end_;
}
const ::perfetto::protos::F2fsIostatFtraceEvent&
FtraceEvent::_Internal::f2fs_iostat(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_iostat_;
}
const ::perfetto::protos::F2fsIostatLatencyFtraceEvent&
FtraceEvent::_Internal::f2fs_iostat_latency(const FtraceEvent* msg) {
  return *msg->_impl_.event_.f2fs_iostat_latency_;
}
const ::perfetto::protos::SchedCpuUtilCfsFtraceEvent&
FtraceEvent::_Internal::sched_cpu_util_cfs(const FtraceEvent* msg) {
  return *msg->_impl_.event_.sched_cpu_util_cfs_;
}
const ::perfetto::protos::V4l2QbufFtraceEvent&
FtraceEvent::_Internal::v4l2_qbuf(const FtraceEvent* msg) {
  return *msg->_impl_.event_.v4l2_qbuf_;
}
const ::perfetto::protos::V4l2DqbufFtraceEvent&
FtraceEvent::_Internal::v4l2_dqbuf(const FtraceEvent* msg) {
  return *msg->_impl_.event_.v4l2_dqbuf_;
}
const ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent&
FtraceEvent::_Internal::vb2_v4l2_buf_queue(const FtraceEvent* msg) {
  return *msg->_impl_.event_.vb2_v4l2_buf_queue_;
}
const ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent&
FtraceEvent::_Internal::vb2_v4l2_buf_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.vb2_v4l2_buf_done_;
}
const ::perfetto::protos::Vb2V4l2QbufFtraceEvent&
FtraceEvent::_Internal::vb2_v4l2_qbuf(const FtraceEvent* msg) {
  return *msg->_impl_.event_.vb2_v4l2_qbuf_;
}
const ::perfetto::protos::Vb2V4l2DqbufFtraceEvent&
FtraceEvent::_Internal::vb2_v4l2_dqbuf(const FtraceEvent* msg) {
  return *msg->_impl_.event_.vb2_v4l2_dqbuf_;
}
const ::perfetto::protos::DsiCmdFifoStatusFtraceEvent&
FtraceEvent::_Internal::dsi_cmd_fifo_status(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dsi_cmd_fifo_status_;
}
const ::perfetto::protos::DsiRxFtraceEvent&
FtraceEvent::_Internal::dsi_rx(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dsi_rx_;
}
const ::perfetto::protos::DsiTxFtraceEvent&
FtraceEvent::_Internal::dsi_tx(const FtraceEvent* msg) {
  return *msg->_impl_.event_.dsi_tx_;
}
const ::perfetto::protos::AndroidFsDatareadEndFtraceEvent&
FtraceEvent::_Internal::android_fs_dataread_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.android_fs_dataread_end_;
}
const ::perfetto::protos::AndroidFsDatareadStartFtraceEvent&
FtraceEvent::_Internal::android_fs_dataread_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.android_fs_dataread_start_;
}
const ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent&
FtraceEvent::_Internal::android_fs_datawrite_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.android_fs_datawrite_end_;
}
const ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent&
FtraceEvent::_Internal::android_fs_datawrite_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.android_fs_datawrite_start_;
}
const ::perfetto::protos::AndroidFsFsyncEndFtraceEvent&
FtraceEvent::_Internal::android_fs_fsync_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.android_fs_fsync_end_;
}
const ::perfetto::protos::AndroidFsFsyncStartFtraceEvent&
FtraceEvent::_Internal::android_fs_fsync_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.android_fs_fsync_start_;
}
const ::perfetto::protos::FuncgraphEntryFtraceEvent&
FtraceEvent::_Internal::funcgraph_entry(const FtraceEvent* msg) {
  return *msg->_impl_.event_.funcgraph_entry_;
}
const ::perfetto::protos::FuncgraphExitFtraceEvent&
FtraceEvent::_Internal::funcgraph_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.funcgraph_exit_;
}
const ::perfetto::protos::VirtioVideoCmdFtraceEvent&
FtraceEvent::_Internal::virtio_video_cmd(const FtraceEvent* msg) {
  return *msg->_impl_.event_.virtio_video_cmd_;
}
const ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent&
FtraceEvent::_Internal::virtio_video_cmd_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.virtio_video_cmd_done_;
}
const ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent&
FtraceEvent::_Internal::virtio_video_resource_queue(const FtraceEvent* msg) {
  return *msg->_impl_.event_.virtio_video_resource_queue_;
}
const ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent&
FtraceEvent::_Internal::virtio_video_resource_queue_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.virtio_video_resource_queue_done_;
}
const ::perfetto::protos::MmShrinkSlabStartFtraceEvent&
FtraceEvent::_Internal::mm_shrink_slab_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_shrink_slab_start_;
}
const ::perfetto::protos::MmShrinkSlabEndFtraceEvent&
FtraceEvent::_Internal::mm_shrink_slab_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mm_shrink_slab_end_;
}
const ::perfetto::protos::TrustySmcFtraceEvent&
FtraceEvent::_Internal::trusty_smc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_smc_;
}
const ::perfetto::protos::TrustySmcDoneFtraceEvent&
FtraceEvent::_Internal::trusty_smc_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_smc_done_;
}
const ::perfetto::protos::TrustyStdCall32FtraceEvent&
FtraceEvent::_Internal::trusty_std_call32(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_std_call32_;
}
const ::perfetto::protos::TrustyStdCall32DoneFtraceEvent&
FtraceEvent::_Internal::trusty_std_call32_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_std_call32_done_;
}
const ::perfetto::protos::TrustyShareMemoryFtraceEvent&
FtraceEvent::_Internal::trusty_share_memory(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_share_memory_;
}
const ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent&
FtraceEvent::_Internal::trusty_share_memory_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_share_memory_done_;
}
const ::perfetto::protos::TrustyReclaimMemoryFtraceEvent&
FtraceEvent::_Internal::trusty_reclaim_memory(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_reclaim_memory_;
}
const ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent&
FtraceEvent::_Internal::trusty_reclaim_memory_done(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_reclaim_memory_done_;
}
const ::perfetto::protos::TrustyIrqFtraceEvent&
FtraceEvent::_Internal::trusty_irq(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_irq_;
}
const ::perfetto::protos::TrustyIpcHandleEventFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_handle_event(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_handle_event_;
}
const ::perfetto::protos::TrustyIpcConnectFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_connect(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_connect_;
}
const ::perfetto::protos::TrustyIpcConnectEndFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_connect_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_connect_end_;
}
const ::perfetto::protos::TrustyIpcWriteFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_write_;
}
const ::perfetto::protos::TrustyIpcPollFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_poll(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_poll_;
}
const ::perfetto::protos::TrustyIpcReadFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_read(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_read_;
}
const ::perfetto::protos::TrustyIpcReadEndFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_read_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_read_end_;
}
const ::perfetto::protos::TrustyIpcRxFtraceEvent&
FtraceEvent::_Internal::trusty_ipc_rx(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_ipc_rx_;
}
const ::perfetto::protos::TrustyEnqueueNopFtraceEvent&
FtraceEvent::_Internal::trusty_enqueue_nop(const FtraceEvent* msg) {
  return *msg->_impl_.event_.trusty_enqueue_nop_;
}
const ::perfetto::protos::CmaAllocStartFtraceEvent&
FtraceEvent::_Internal::cma_alloc_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cma_alloc_start_;
}
const ::perfetto::protos::CmaAllocInfoFtraceEvent&
FtraceEvent::_Internal::cma_alloc_info(const FtraceEvent* msg) {
  return *msg->_impl_.event_.cma_alloc_info_;
}
const ::perfetto::protos::LwisTracingMarkWriteFtraceEvent&
FtraceEvent::_Internal::lwis_tracing_mark_write(const FtraceEvent* msg) {
  return *msg->_impl_.event_.lwis_tracing_mark_write_;
}
const ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent&
FtraceEvent::_Internal::virtio_gpu_cmd_queue(const FtraceEvent* msg) {
  return *msg->_impl_.event_.virtio_gpu_cmd_queue_;
}
const ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent&
FtraceEvent::_Internal::virtio_gpu_cmd_response(const FtraceEvent* msg) {
  return *msg->_impl_.event_.virtio_gpu_cmd_response_;
}
const ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent&
FtraceEvent::_Internal::mali_mali_kcpu_cqs_set(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_kcpu_cqs_set_;
}
const ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent&
FtraceEvent::_Internal::mali_mali_kcpu_cqs_wait_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_kcpu_cqs_wait_start_;
}
const ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent&
FtraceEvent::_Internal::mali_mali_kcpu_cqs_wait_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_kcpu_cqs_wait_end_;
}
const ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent&
FtraceEvent::_Internal::mali_mali_kcpu_fence_signal(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_kcpu_fence_signal_;
}
const ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent&
FtraceEvent::_Internal::mali_mali_kcpu_fence_wait_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_kcpu_fence_wait_start_;
}
const ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent&
FtraceEvent::_Internal::mali_mali_kcpu_fence_wait_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_kcpu_fence_wait_end_;
}
const ::perfetto::protos::HypEnterFtraceEvent&
FtraceEvent::_Internal::hyp_enter(const FtraceEvent* msg) {
  return *msg->_impl_.event_.hyp_enter_;
}
const ::perfetto::protos::HypExitFtraceEvent&
FtraceEvent::_Internal::hyp_exit(const FtraceEvent* msg) {
  return *msg->_impl_.event_.hyp_exit_;
}
const ::perfetto::protos::HostHcallFtraceEvent&
FtraceEvent::_Internal::host_hcall(const FtraceEvent* msg) {
  return *msg->_impl_.event_.host_hcall_;
}
const ::perfetto::protos::HostSmcFtraceEvent&
FtraceEvent::_Internal::host_smc(const FtraceEvent* msg) {
  return *msg->_impl_.event_.host_smc_;
}
const ::perfetto::protos::HostMemAbortFtraceEvent&
FtraceEvent::_Internal::host_mem_abort(const FtraceEvent* msg) {
  return *msg->_impl_.event_.host_mem_abort_;
}
const ::perfetto::protos::SuspendResumeMinimalFtraceEvent&
FtraceEvent::_Internal::suspend_resume_minimal(const FtraceEvent* msg) {
  return *msg->_impl_.event_.suspend_resume_minimal_;
}
const ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent&
FtraceEvent::_Internal::mali_mali_csf_interrupt_start(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_csf_interrupt_start_;
}
const ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent&
FtraceEvent::_Internal::mali_mali_csf_interrupt_end(const FtraceEvent* msg) {
  return *msg->_impl_.event_.mali_mali_csf_interrupt_end_;
}
void FtraceEvent::set_allocated_print(::perfetto::protos::PrintFtraceEvent* print) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (print) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(print));
    if (message_arena != submessage_arena) {
      print = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print, submessage_arena);
    }
    set_has_print();
    _impl_.event_.print_ = print;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.print)
}
void FtraceEvent::clear_print() {
  if (event_case() == kPrint) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.print_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_switch(::perfetto::protos::SchedSwitchFtraceEvent* sched_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_switch));
    if (message_arena != submessage_arena) {
      sched_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_switch, submessage_arena);
    }
    set_has_sched_switch();
    _impl_.event_.sched_switch_ = sched_switch;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_switch)
}
void FtraceEvent::clear_sched_switch() {
  if (event_case() == kSchedSwitch) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_switch_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpu_frequency(::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpu_frequency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_frequency));
    if (message_arena != submessage_arena) {
      cpu_frequency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_frequency, submessage_arena);
    }
    set_has_cpu_frequency();
    _impl_.event_.cpu_frequency_ = cpu_frequency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpu_frequency)
}
void FtraceEvent::clear_cpu_frequency() {
  if (event_case() == kCpuFrequency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpu_frequency_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpu_frequency_limits(::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpu_frequency_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_frequency_limits));
    if (message_arena != submessage_arena) {
      cpu_frequency_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_frequency_limits, submessage_arena);
    }
    set_has_cpu_frequency_limits();
    _impl_.event_.cpu_frequency_limits_ = cpu_frequency_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpu_frequency_limits)
}
void FtraceEvent::clear_cpu_frequency_limits() {
  if (event_case() == kCpuFrequencyLimits) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpu_frequency_limits_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpu_idle(::perfetto::protos::CpuIdleFtraceEvent* cpu_idle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpu_idle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_idle));
    if (message_arena != submessage_arena) {
      cpu_idle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_idle, submessage_arena);
    }
    set_has_cpu_idle();
    _impl_.event_.cpu_idle_ = cpu_idle;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpu_idle)
}
void FtraceEvent::clear_cpu_idle() {
  if (event_case() == kCpuIdle) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpu_idle_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clock_enable(::perfetto::protos::ClockEnableFtraceEvent* clock_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (clock_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_enable));
    if (message_arena != submessage_arena) {
      clock_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_enable, submessage_arena);
    }
    set_has_clock_enable();
    _impl_.event_.clock_enable_ = clock_enable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clock_enable)
}
void FtraceEvent::clear_clock_enable() {
  if (event_case() == kClockEnable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.clock_enable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clock_disable(::perfetto::protos::ClockDisableFtraceEvent* clock_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (clock_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_disable));
    if (message_arena != submessage_arena) {
      clock_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_disable, submessage_arena);
    }
    set_has_clock_disable();
    _impl_.event_.clock_disable_ = clock_disable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clock_disable)
}
void FtraceEvent::clear_clock_disable() {
  if (event_case() == kClockDisable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.clock_disable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clock_set_rate(::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (clock_set_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_set_rate));
    if (message_arena != submessage_arena) {
      clock_set_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_set_rate, submessage_arena);
    }
    set_has_clock_set_rate();
    _impl_.event_.clock_set_rate_ = clock_set_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clock_set_rate)
}
void FtraceEvent::clear_clock_set_rate() {
  if (event_case() == kClockSetRate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.clock_set_rate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_wakeup(::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_wakeup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_wakeup));
    if (message_arena != submessage_arena) {
      sched_wakeup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_wakeup, submessage_arena);
    }
    set_has_sched_wakeup();
    _impl_.event_.sched_wakeup_ = sched_wakeup;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_wakeup)
}
void FtraceEvent::clear_sched_wakeup() {
  if (event_case() == kSchedWakeup) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_wakeup_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_blocked_reason(::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_blocked_reason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_blocked_reason));
    if (message_arena != submessage_arena) {
      sched_blocked_reason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_blocked_reason, submessage_arena);
    }
    set_has_sched_blocked_reason();
    _impl_.event_.sched_blocked_reason_ = sched_blocked_reason;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_blocked_reason)
}
void FtraceEvent::clear_sched_blocked_reason() {
  if (event_case() == kSchedBlockedReason) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_blocked_reason_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_cpu_hotplug(::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_cpu_hotplug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_cpu_hotplug));
    if (message_arena != submessage_arena) {
      sched_cpu_hotplug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_cpu_hotplug, submessage_arena);
    }
    set_has_sched_cpu_hotplug();
    _impl_.event_.sched_cpu_hotplug_ = sched_cpu_hotplug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
}
void FtraceEvent::clear_sched_cpu_hotplug() {
  if (event_case() == kSchedCpuHotplug) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_cpu_hotplug_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_waking(::perfetto::protos::SchedWakingFtraceEvent* sched_waking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_waking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_waking));
    if (message_arena != submessage_arena) {
      sched_waking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_waking, submessage_arena);
    }
    set_has_sched_waking();
    _impl_.event_.sched_waking_ = sched_waking;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_waking)
}
void FtraceEvent::clear_sched_waking() {
  if (event_case() == kSchedWaking) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_waking_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ipi_entry(::perfetto::protos::IpiEntryFtraceEvent* ipi_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ipi_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipi_entry));
    if (message_arena != submessage_arena) {
      ipi_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipi_entry, submessage_arena);
    }
    set_has_ipi_entry();
    _impl_.event_.ipi_entry_ = ipi_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ipi_entry)
}
void FtraceEvent::clear_ipi_entry() {
  if (event_case() == kIpiEntry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ipi_entry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ipi_exit(::perfetto::protos::IpiExitFtraceEvent* ipi_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ipi_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipi_exit));
    if (message_arena != submessage_arena) {
      ipi_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipi_exit, submessage_arena);
    }
    set_has_ipi_exit();
    _impl_.event_.ipi_exit_ = ipi_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ipi_exit)
}
void FtraceEvent::clear_ipi_exit() {
  if (event_case() == kIpiExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ipi_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ipi_raise(::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ipi_raise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipi_raise));
    if (message_arena != submessage_arena) {
      ipi_raise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipi_raise, submessage_arena);
    }
    set_has_ipi_raise();
    _impl_.event_.ipi_raise_ = ipi_raise;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ipi_raise)
}
void FtraceEvent::clear_ipi_raise() {
  if (event_case() == kIpiRaise) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ipi_raise_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_softirq_entry(::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (softirq_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softirq_entry));
    if (message_arena != submessage_arena) {
      softirq_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softirq_entry, submessage_arena);
    }
    set_has_softirq_entry();
    _impl_.event_.softirq_entry_ = softirq_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.softirq_entry)
}
void FtraceEvent::clear_softirq_entry() {
  if (event_case() == kSoftirqEntry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.softirq_entry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_softirq_exit(::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (softirq_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softirq_exit));
    if (message_arena != submessage_arena) {
      softirq_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softirq_exit, submessage_arena);
    }
    set_has_softirq_exit();
    _impl_.event_.softirq_exit_ = softirq_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.softirq_exit)
}
void FtraceEvent::clear_softirq_exit() {
  if (event_case() == kSoftirqExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.softirq_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_softirq_raise(::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (softirq_raise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softirq_raise));
    if (message_arena != submessage_arena) {
      softirq_raise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softirq_raise, submessage_arena);
    }
    set_has_softirq_raise();
    _impl_.event_.softirq_raise_ = softirq_raise;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.softirq_raise)
}
void FtraceEvent::clear_softirq_raise() {
  if (event_case() == kSoftirqRaise) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.softirq_raise_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_read(::perfetto::protos::I2cReadFtraceEvent* i2c_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (i2c_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2c_read));
    if (message_arena != submessage_arena) {
      i2c_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_read, submessage_arena);
    }
    set_has_i2c_read();
    _impl_.event_.i2c_read_ = i2c_read;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_read)
}
void FtraceEvent::clear_i2c_read() {
  if (event_case() == kI2CRead) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.i2c_read_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_write(::perfetto::protos::I2cWriteFtraceEvent* i2c_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (i2c_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2c_write));
    if (message_arena != submessage_arena) {
      i2c_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_write, submessage_arena);
    }
    set_has_i2c_write();
    _impl_.event_.i2c_write_ = i2c_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_write)
}
void FtraceEvent::clear_i2c_write() {
  if (event_case() == kI2CWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.i2c_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_result(::perfetto::protos::I2cResultFtraceEvent* i2c_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (i2c_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2c_result));
    if (message_arena != submessage_arena) {
      i2c_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_result, submessage_arena);
    }
    set_has_i2c_result();
    _impl_.event_.i2c_result_ = i2c_result;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_result)
}
void FtraceEvent::clear_i2c_result() {
  if (event_case() == kI2CResult) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.i2c_result_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_i2c_reply(::perfetto::protos::I2cReplyFtraceEvent* i2c_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (i2c_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2c_reply));
    if (message_arena != submessage_arena) {
      i2c_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2c_reply, submessage_arena);
    }
    set_has_i2c_reply();
    _impl_.event_.i2c_reply_ = i2c_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.i2c_reply)
}
void FtraceEvent::clear_i2c_reply() {
  if (event_case() == kI2CReply) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.i2c_reply_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_read(::perfetto::protos::SmbusReadFtraceEvent* smbus_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (smbus_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smbus_read));
    if (message_arena != submessage_arena) {
      smbus_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_read, submessage_arena);
    }
    set_has_smbus_read();
    _impl_.event_.smbus_read_ = smbus_read;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_read)
}
void FtraceEvent::clear_smbus_read() {
  if (event_case() == kSmbusRead) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.smbus_read_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_write(::perfetto::protos::SmbusWriteFtraceEvent* smbus_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (smbus_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smbus_write));
    if (message_arena != submessage_arena) {
      smbus_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_write, submessage_arena);
    }
    set_has_smbus_write();
    _impl_.event_.smbus_write_ = smbus_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_write)
}
void FtraceEvent::clear_smbus_write() {
  if (event_case() == kSmbusWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.smbus_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_result(::perfetto::protos::SmbusResultFtraceEvent* smbus_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (smbus_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smbus_result));
    if (message_arena != submessage_arena) {
      smbus_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_result, submessage_arena);
    }
    set_has_smbus_result();
    _impl_.event_.smbus_result_ = smbus_result;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_result)
}
void FtraceEvent::clear_smbus_result() {
  if (event_case() == kSmbusResult) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.smbus_result_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_smbus_reply(::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (smbus_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smbus_reply));
    if (message_arena != submessage_arena) {
      smbus_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smbus_reply, submessage_arena);
    }
    set_has_smbus_reply();
    _impl_.event_.smbus_reply_ = smbus_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.smbus_reply)
}
void FtraceEvent::clear_smbus_reply() {
  if (event_case() == kSmbusReply) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.smbus_reply_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_lowmemory_kill(::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (lowmemory_kill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowmemory_kill));
    if (message_arena != submessage_arena) {
      lowmemory_kill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowmemory_kill, submessage_arena);
    }
    set_has_lowmemory_kill();
    _impl_.event_.lowmemory_kill_ = lowmemory_kill;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.lowmemory_kill)
}
void FtraceEvent::clear_lowmemory_kill() {
  if (event_case() == kLowmemoryKill) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.lowmemory_kill_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_irq_handler_entry(::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (irq_handler_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(irq_handler_entry));
    if (message_arena != submessage_arena) {
      irq_handler_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, irq_handler_entry, submessage_arena);
    }
    set_has_irq_handler_entry();
    _impl_.event_.irq_handler_entry_ = irq_handler_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.irq_handler_entry)
}
void FtraceEvent::clear_irq_handler_entry() {
  if (event_case() == kIrqHandlerEntry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.irq_handler_entry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_irq_handler_exit(::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (irq_handler_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(irq_handler_exit));
    if (message_arena != submessage_arena) {
      irq_handler_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, irq_handler_exit, submessage_arena);
    }
    set_has_irq_handler_exit();
    _impl_.event_.irq_handler_exit_ = irq_handler_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.irq_handler_exit)
}
void FtraceEvent::clear_irq_handler_exit() {
  if (event_case() == kIrqHandlerExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.irq_handler_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sync_pt(::perfetto::protos::SyncPtFtraceEvent* sync_pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sync_pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_pt));
    if (message_arena != submessage_arena) {
      sync_pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_pt, submessage_arena);
    }
    set_has_sync_pt();
    _impl_.event_.sync_pt_ = sync_pt;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sync_pt)
}
void FtraceEvent::clear_sync_pt() {
  if (event_case() == kSyncPt) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sync_pt_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sync_timeline(::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sync_timeline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_timeline));
    if (message_arena != submessage_arena) {
      sync_timeline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_timeline, submessage_arena);
    }
    set_has_sync_timeline();
    _impl_.event_.sync_timeline_ = sync_timeline;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sync_timeline)
}
void FtraceEvent::clear_sync_timeline() {
  if (event_case() == kSyncTimeline) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sync_timeline_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sync_wait(::perfetto::protos::SyncWaitFtraceEvent* sync_wait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sync_wait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_wait));
    if (message_arena != submessage_arena) {
      sync_wait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_wait, submessage_arena);
    }
    set_has_sync_wait();
    _impl_.event_.sync_wait_ = sync_wait;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sync_wait)
}
void FtraceEvent::clear_sync_wait() {
  if (event_case() == kSyncWait) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sync_wait_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_begin(::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_write_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_write_begin));
    if (message_arena != submessage_arena) {
      ext4_da_write_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_begin, submessage_arena);
    }
    set_has_ext4_da_write_begin();
    _impl_.event_.ext4_da_write_begin_ = ext4_da_write_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_begin)
}
void FtraceEvent::clear_ext4_da_write_begin() {
  if (event_case() == kExt4DaWriteBegin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_write_begin_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_end(::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_write_end));
    if (message_arena != submessage_arena) {
      ext4_da_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_end, submessage_arena);
    }
    set_has_ext4_da_write_end();
    _impl_.event_.ext4_da_write_end_ = ext4_da_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_end)
}
void FtraceEvent::clear_ext4_da_write_end() {
  if (event_case() == kExt4DaWriteEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_write_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_sync_file_enter(::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_sync_file_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_sync_file_enter));
    if (message_arena != submessage_arena) {
      ext4_sync_file_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_sync_file_enter, submessage_arena);
    }
    set_has_ext4_sync_file_enter();
    _impl_.event_.ext4_sync_file_enter_ = ext4_sync_file_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
}
void FtraceEvent::clear_ext4_sync_file_enter() {
  if (event_case() == kExt4SyncFileEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_sync_file_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_sync_file_exit(::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_sync_file_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_sync_file_exit));
    if (message_arena != submessage_arena) {
      ext4_sync_file_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_sync_file_exit, submessage_arena);
    }
    set_has_ext4_sync_file_exit();
    _impl_.event_.ext4_sync_file_exit_ = ext4_sync_file_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
}
void FtraceEvent::clear_ext4_sync_file_exit() {
  if (event_case() == kExt4SyncFileExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_sync_file_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_issue(::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_rq_issue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rq_issue));
    if (message_arena != submessage_arena) {
      block_rq_issue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_issue, submessage_arena);
    }
    set_has_block_rq_issue();
    _impl_.event_.block_rq_issue_ = block_rq_issue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_issue)
}
void FtraceEvent::clear_block_rq_issue() {
  if (event_case() == kBlockRqIssue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_rq_issue_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_direct_reclaim_begin(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_vmscan_direct_reclaim_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_vmscan_direct_reclaim_begin));
    if (message_arena != submessage_arena) {
      mm_vmscan_direct_reclaim_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_direct_reclaim_begin, submessage_arena);
    }
    set_has_mm_vmscan_direct_reclaim_begin();
    _impl_.event_.mm_vmscan_direct_reclaim_begin_ = mm_vmscan_direct_reclaim_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
}
void FtraceEvent::clear_mm_vmscan_direct_reclaim_begin() {
  if (event_case() == kMmVmscanDirectReclaimBegin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_vmscan_direct_reclaim_begin_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_direct_reclaim_end(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_vmscan_direct_reclaim_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_vmscan_direct_reclaim_end));
    if (message_arena != submessage_arena) {
      mm_vmscan_direct_reclaim_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_direct_reclaim_end, submessage_arena);
    }
    set_has_mm_vmscan_direct_reclaim_end();
    _impl_.event_.mm_vmscan_direct_reclaim_end_ = mm_vmscan_direct_reclaim_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
}
void FtraceEvent::clear_mm_vmscan_direct_reclaim_end() {
  if (event_case() == kMmVmscanDirectReclaimEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_vmscan_direct_reclaim_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_kswapd_wake(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_vmscan_kswapd_wake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_vmscan_kswapd_wake));
    if (message_arena != submessage_arena) {
      mm_vmscan_kswapd_wake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_kswapd_wake, submessage_arena);
    }
    set_has_mm_vmscan_kswapd_wake();
    _impl_.event_.mm_vmscan_kswapd_wake_ = mm_vmscan_kswapd_wake;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
}
void FtraceEvent::clear_mm_vmscan_kswapd_wake() {
  if (event_case() == kMmVmscanKswapdWake) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_vmscan_kswapd_wake_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_vmscan_kswapd_sleep(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_vmscan_kswapd_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_vmscan_kswapd_sleep));
    if (message_arena != submessage_arena) {
      mm_vmscan_kswapd_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_vmscan_kswapd_sleep, submessage_arena);
    }
    set_has_mm_vmscan_kswapd_sleep();
    _impl_.event_.mm_vmscan_kswapd_sleep_ = mm_vmscan_kswapd_sleep;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
}
void FtraceEvent::clear_mm_vmscan_kswapd_sleep() {
  if (event_case() == kMmVmscanKswapdSleep) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_vmscan_kswapd_sleep_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_transaction(::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_transaction));
    if (message_arena != submessage_arena) {
      binder_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_transaction, submessage_arena);
    }
    set_has_binder_transaction();
    _impl_.event_.binder_transaction_ = binder_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_transaction)
}
void FtraceEvent::clear_binder_transaction() {
  if (event_case() == kBinderTransaction) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_transaction_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_transaction_received(::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_transaction_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_transaction_received));
    if (message_arena != submessage_arena) {
      binder_transaction_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_transaction_received, submessage_arena);
    }
    set_has_binder_transaction_received();
    _impl_.event_.binder_transaction_received_ = binder_transaction_received;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_transaction_received)
}
void FtraceEvent::clear_binder_transaction_received() {
  if (event_case() == kBinderTransactionReceived) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_transaction_received_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_set_priority(::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_set_priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_set_priority));
    if (message_arena != submessage_arena) {
      binder_set_priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_set_priority, submessage_arena);
    }
    set_has_binder_set_priority();
    _impl_.event_.binder_set_priority_ = binder_set_priority;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_set_priority)
}
void FtraceEvent::clear_binder_set_priority() {
  if (event_case() == kBinderSetPriority) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_set_priority_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_lock(::perfetto::protos::BinderLockFtraceEvent* binder_lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_lock));
    if (message_arena != submessage_arena) {
      binder_lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_lock, submessage_arena);
    }
    set_has_binder_lock();
    _impl_.event_.binder_lock_ = binder_lock;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_lock)
}
void FtraceEvent::clear_binder_lock() {
  if (event_case() == kBinderLock) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_lock_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_locked(::perfetto::protos::BinderLockedFtraceEvent* binder_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_locked));
    if (message_arena != submessage_arena) {
      binder_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_locked, submessage_arena);
    }
    set_has_binder_locked();
    _impl_.event_.binder_locked_ = binder_locked;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_locked)
}
void FtraceEvent::clear_binder_locked() {
  if (event_case() == kBinderLocked) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_locked_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_unlock(::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_unlock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_unlock));
    if (message_arena != submessage_arena) {
      binder_unlock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_unlock, submessage_arena);
    }
    set_has_binder_unlock();
    _impl_.event_.binder_unlock_ = binder_unlock;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_unlock)
}
void FtraceEvent::clear_binder_unlock() {
  if (event_case() == kBinderUnlock) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_unlock_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_activate_work(::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (workqueue_activate_work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workqueue_activate_work));
    if (message_arena != submessage_arena) {
      workqueue_activate_work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_activate_work, submessage_arena);
    }
    set_has_workqueue_activate_work();
    _impl_.event_.workqueue_activate_work_ = workqueue_activate_work;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_activate_work)
}
void FtraceEvent::clear_workqueue_activate_work() {
  if (event_case() == kWorkqueueActivateWork) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.workqueue_activate_work_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_execute_end(::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (workqueue_execute_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workqueue_execute_end));
    if (message_arena != submessage_arena) {
      workqueue_execute_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_execute_end, submessage_arena);
    }
    set_has_workqueue_execute_end();
    _impl_.event_.workqueue_execute_end_ = workqueue_execute_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_execute_end)
}
void FtraceEvent::clear_workqueue_execute_end() {
  if (event_case() == kWorkqueueExecuteEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.workqueue_execute_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_execute_start(::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (workqueue_execute_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workqueue_execute_start));
    if (message_arena != submessage_arena) {
      workqueue_execute_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_execute_start, submessage_arena);
    }
    set_has_workqueue_execute_start();
    _impl_.event_.workqueue_execute_start_ = workqueue_execute_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_execute_start)
}
void FtraceEvent::clear_workqueue_execute_start() {
  if (event_case() == kWorkqueueExecuteStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.workqueue_execute_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_workqueue_queue_work(::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (workqueue_queue_work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workqueue_queue_work));
    if (message_arena != submessage_arena) {
      workqueue_queue_work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workqueue_queue_work, submessage_arena);
    }
    set_has_workqueue_queue_work();
    _impl_.event_.workqueue_queue_work_ = workqueue_queue_work;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.workqueue_queue_work)
}
void FtraceEvent::clear_workqueue_queue_work() {
  if (event_case() == kWorkqueueQueueWork) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.workqueue_queue_work_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_disable(::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_disable));
    if (message_arena != submessage_arena) {
      regulator_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_disable, submessage_arena);
    }
    set_has_regulator_disable();
    _impl_.event_.regulator_disable_ = regulator_disable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_disable)
}
void FtraceEvent::clear_regulator_disable() {
  if (event_case() == kRegulatorDisable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_disable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_disable_complete(::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_disable_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_disable_complete));
    if (message_arena != submessage_arena) {
      regulator_disable_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_disable_complete, submessage_arena);
    }
    set_has_regulator_disable_complete();
    _impl_.event_.regulator_disable_complete_ = regulator_disable_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_disable_complete)
}
void FtraceEvent::clear_regulator_disable_complete() {
  if (event_case() == kRegulatorDisableComplete) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_disable_complete_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_enable(::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_enable));
    if (message_arena != submessage_arena) {
      regulator_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_enable, submessage_arena);
    }
    set_has_regulator_enable();
    _impl_.event_.regulator_enable_ = regulator_enable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_enable)
}
void FtraceEvent::clear_regulator_enable() {
  if (event_case() == kRegulatorEnable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_enable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_enable_complete(::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_enable_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_enable_complete));
    if (message_arena != submessage_arena) {
      regulator_enable_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_enable_complete, submessage_arena);
    }
    set_has_regulator_enable_complete();
    _impl_.event_.regulator_enable_complete_ = regulator_enable_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_enable_complete)
}
void FtraceEvent::clear_regulator_enable_complete() {
  if (event_case() == kRegulatorEnableComplete) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_enable_complete_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_enable_delay(::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_enable_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_enable_delay));
    if (message_arena != submessage_arena) {
      regulator_enable_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_enable_delay, submessage_arena);
    }
    set_has_regulator_enable_delay();
    _impl_.event_.regulator_enable_delay_ = regulator_enable_delay;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_enable_delay)
}
void FtraceEvent::clear_regulator_enable_delay() {
  if (event_case() == kRegulatorEnableDelay) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_enable_delay_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_set_voltage(::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_set_voltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_set_voltage));
    if (message_arena != submessage_arena) {
      regulator_set_voltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_set_voltage, submessage_arena);
    }
    set_has_regulator_set_voltage();
    _impl_.event_.regulator_set_voltage_ = regulator_set_voltage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_set_voltage)
}
void FtraceEvent::clear_regulator_set_voltage() {
  if (event_case() == kRegulatorSetVoltage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_set_voltage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_regulator_set_voltage_complete(::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (regulator_set_voltage_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulator_set_voltage_complete));
    if (message_arena != submessage_arena) {
      regulator_set_voltage_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulator_set_voltage_complete, submessage_arena);
    }
    set_has_regulator_set_voltage_complete();
    _impl_.event_.regulator_set_voltage_complete_ = regulator_set_voltage_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
}
void FtraceEvent::clear_regulator_set_voltage_complete() {
  if (event_case() == kRegulatorSetVoltageComplete) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.regulator_set_voltage_complete_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_attach_task(::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_attach_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_attach_task));
    if (message_arena != submessage_arena) {
      cgroup_attach_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_attach_task, submessage_arena);
    }
    set_has_cgroup_attach_task();
    _impl_.event_.cgroup_attach_task_ = cgroup_attach_task;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_attach_task)
}
void FtraceEvent::clear_cgroup_attach_task() {
  if (event_case() == kCgroupAttachTask) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_attach_task_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_mkdir(::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_mkdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_mkdir));
    if (message_arena != submessage_arena) {
      cgroup_mkdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_mkdir, submessage_arena);
    }
    set_has_cgroup_mkdir();
    _impl_.event_.cgroup_mkdir_ = cgroup_mkdir;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_mkdir)
}
void FtraceEvent::clear_cgroup_mkdir() {
  if (event_case() == kCgroupMkdir) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_mkdir_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_remount(::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_remount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_remount));
    if (message_arena != submessage_arena) {
      cgroup_remount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_remount, submessage_arena);
    }
    set_has_cgroup_remount();
    _impl_.event_.cgroup_remount_ = cgroup_remount;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_remount)
}
void FtraceEvent::clear_cgroup_remount() {
  if (event_case() == kCgroupRemount) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_remount_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_rmdir(::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_rmdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_rmdir));
    if (message_arena != submessage_arena) {
      cgroup_rmdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_rmdir, submessage_arena);
    }
    set_has_cgroup_rmdir();
    _impl_.event_.cgroup_rmdir_ = cgroup_rmdir;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_rmdir)
}
void FtraceEvent::clear_cgroup_rmdir() {
  if (event_case() == kCgroupRmdir) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_rmdir_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_transfer_tasks(::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_transfer_tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_transfer_tasks));
    if (message_arena != submessage_arena) {
      cgroup_transfer_tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_transfer_tasks, submessage_arena);
    }
    set_has_cgroup_transfer_tasks();
    _impl_.event_.cgroup_transfer_tasks_ = cgroup_transfer_tasks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
}
void FtraceEvent::clear_cgroup_transfer_tasks() {
  if (event_case() == kCgroupTransferTasks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_transfer_tasks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_destroy_root(::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_destroy_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_destroy_root));
    if (message_arena != submessage_arena) {
      cgroup_destroy_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_destroy_root, submessage_arena);
    }
    set_has_cgroup_destroy_root();
    _impl_.event_.cgroup_destroy_root_ = cgroup_destroy_root;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_destroy_root)
}
void FtraceEvent::clear_cgroup_destroy_root() {
  if (event_case() == kCgroupDestroyRoot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_destroy_root_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_release(::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_release));
    if (message_arena != submessage_arena) {
      cgroup_release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_release, submessage_arena);
    }
    set_has_cgroup_release();
    _impl_.event_.cgroup_release_ = cgroup_release;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_release)
}
void FtraceEvent::clear_cgroup_release() {
  if (event_case() == kCgroupRelease) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_release_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_rename(::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_rename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_rename));
    if (message_arena != submessage_arena) {
      cgroup_rename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_rename, submessage_arena);
    }
    set_has_cgroup_rename();
    _impl_.event_.cgroup_rename_ = cgroup_rename;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_rename)
}
void FtraceEvent::clear_cgroup_rename() {
  if (event_case() == kCgroupRename) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_rename_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cgroup_setup_root(::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cgroup_setup_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cgroup_setup_root));
    if (message_arena != submessage_arena) {
      cgroup_setup_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cgroup_setup_root, submessage_arena);
    }
    set_has_cgroup_setup_root();
    _impl_.event_.cgroup_setup_root_ = cgroup_setup_root;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cgroup_setup_root)
}
void FtraceEvent::clear_cgroup_setup_root() {
  if (event_case() == kCgroupSetupRoot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cgroup_setup_root_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_kickoff(::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_cmd_kickoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_cmd_kickoff));
    if (message_arena != submessage_arena) {
      mdp_cmd_kickoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_kickoff, submessage_arena);
    }
    set_has_mdp_cmd_kickoff();
    _impl_.event_.mdp_cmd_kickoff_ = mdp_cmd_kickoff;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
}
void FtraceEvent::clear_mdp_cmd_kickoff() {
  if (event_case() == kMdpCmdKickoff) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_cmd_kickoff_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_commit(::perfetto::protos::MdpCommitFtraceEvent* mdp_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_commit));
    if (message_arena != submessage_arena) {
      mdp_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_commit, submessage_arena);
    }
    set_has_mdp_commit();
    _impl_.event_.mdp_commit_ = mdp_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_commit)
}
void FtraceEvent::clear_mdp_commit() {
  if (event_case() == kMdpCommit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_commit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_ot(::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_perf_set_ot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_perf_set_ot));
    if (message_arena != submessage_arena) {
      mdp_perf_set_ot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_ot, submessage_arena);
    }
    set_has_mdp_perf_set_ot();
    _impl_.event_.mdp_perf_set_ot_ = mdp_perf_set_ot;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
}
void FtraceEvent::clear_mdp_perf_set_ot() {
  if (event_case() == kMdpPerfSetOt) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_perf_set_ot_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_sspp_change(::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_sspp_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_sspp_change));
    if (message_arena != submessage_arena) {
      mdp_sspp_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_sspp_change, submessage_arena);
    }
    set_has_mdp_sspp_change();
    _impl_.event_.mdp_sspp_change_ = mdp_sspp_change;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_sspp_change)
}
void FtraceEvent::clear_mdp_sspp_change() {
  if (event_case() == kMdpSsppChange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_sspp_change_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_tracing_mark_write(::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracing_mark_write));
    if (message_arena != submessage_arena) {
      tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracing_mark_write, submessage_arena);
    }
    set_has_tracing_mark_write();
    _impl_.event_.tracing_mark_write_ = tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.tracing_mark_write)
}
void FtraceEvent::clear_tracing_mark_write() {
  if (event_case() == kTracingMarkWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.tracing_mark_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_pingpong_done(::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_cmd_pingpong_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_cmd_pingpong_done));
    if (message_arena != submessage_arena) {
      mdp_cmd_pingpong_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_pingpong_done, submessage_arena);
    }
    set_has_mdp_cmd_pingpong_done();
    _impl_.event_.mdp_cmd_pingpong_done_ = mdp_cmd_pingpong_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
}
void FtraceEvent::clear_mdp_cmd_pingpong_done() {
  if (event_case() == kMdpCmdPingpongDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_cmd_pingpong_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_compare_bw(::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_compare_bw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_compare_bw));
    if (message_arena != submessage_arena) {
      mdp_compare_bw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_compare_bw, submessage_arena);
    }
    set_has_mdp_compare_bw();
    _impl_.event_.mdp_compare_bw_ = mdp_compare_bw;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_compare_bw)
}
void FtraceEvent::clear_mdp_compare_bw() {
  if (event_case() == kMdpCompareBw) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_compare_bw_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_panic_luts(::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_perf_set_panic_luts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_perf_set_panic_luts));
    if (message_arena != submessage_arena) {
      mdp_perf_set_panic_luts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_panic_luts, submessage_arena);
    }
    set_has_mdp_perf_set_panic_luts();
    _impl_.event_.mdp_perf_set_panic_luts_ = mdp_perf_set_panic_luts;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
}
void FtraceEvent::clear_mdp_perf_set_panic_luts() {
  if (event_case() == kMdpPerfSetPanicLuts) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_perf_set_panic_luts_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_sspp_set(::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_sspp_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_sspp_set));
    if (message_arena != submessage_arena) {
      mdp_sspp_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_sspp_set, submessage_arena);
    }
    set_has_mdp_sspp_set();
    _impl_.event_.mdp_sspp_set_ = mdp_sspp_set;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_sspp_set)
}
void FtraceEvent::clear_mdp_sspp_set() {
  if (event_case() == kMdpSsppSet) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_sspp_set_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_readptr_done(::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_cmd_readptr_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_cmd_readptr_done));
    if (message_arena != submessage_arena) {
      mdp_cmd_readptr_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_readptr_done, submessage_arena);
    }
    set_has_mdp_cmd_readptr_done();
    _impl_.event_.mdp_cmd_readptr_done_ = mdp_cmd_readptr_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
}
void FtraceEvent::clear_mdp_cmd_readptr_done() {
  if (event_case() == kMdpCmdReadptrDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_cmd_readptr_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_misr_crc(::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_misr_crc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_misr_crc));
    if (message_arena != submessage_arena) {
      mdp_misr_crc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_misr_crc, submessage_arena);
    }
    set_has_mdp_misr_crc();
    _impl_.event_.mdp_misr_crc_ = mdp_misr_crc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_misr_crc)
}
void FtraceEvent::clear_mdp_misr_crc() {
  if (event_case() == kMdpMisrCrc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_misr_crc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_qos_luts(::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_perf_set_qos_luts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_perf_set_qos_luts));
    if (message_arena != submessage_arena) {
      mdp_perf_set_qos_luts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_qos_luts, submessage_arena);
    }
    set_has_mdp_perf_set_qos_luts();
    _impl_.event_.mdp_perf_set_qos_luts_ = mdp_perf_set_qos_luts;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
}
void FtraceEvent::clear_mdp_perf_set_qos_luts() {
  if (event_case() == kMdpPerfSetQosLuts) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_perf_set_qos_luts_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_trace_counter(::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_trace_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_trace_counter));
    if (message_arena != submessage_arena) {
      mdp_trace_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_trace_counter, submessage_arena);
    }
    set_has_mdp_trace_counter();
    _impl_.event_.mdp_trace_counter_ = mdp_trace_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_trace_counter)
}
void FtraceEvent::clear_mdp_trace_counter() {
  if (event_case() == kMdpTraceCounter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_trace_counter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_release_bw(::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_cmd_release_bw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_cmd_release_bw));
    if (message_arena != submessage_arena) {
      mdp_cmd_release_bw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_release_bw, submessage_arena);
    }
    set_has_mdp_cmd_release_bw();
    _impl_.event_.mdp_cmd_release_bw_ = mdp_cmd_release_bw;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
}
void FtraceEvent::clear_mdp_cmd_release_bw() {
  if (event_case() == kMdpCmdReleaseBw) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_cmd_release_bw_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_mixer_update(::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_mixer_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_mixer_update));
    if (message_arena != submessage_arena) {
      mdp_mixer_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_mixer_update, submessage_arena);
    }
    set_has_mdp_mixer_update();
    _impl_.event_.mdp_mixer_update_ = mdp_mixer_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_mixer_update)
}
void FtraceEvent::clear_mdp_mixer_update() {
  if (event_case() == kMdpMixerUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_mixer_update_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_set_wm_levels(::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_perf_set_wm_levels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_perf_set_wm_levels));
    if (message_arena != submessage_arena) {
      mdp_perf_set_wm_levels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_set_wm_levels, submessage_arena);
    }
    set_has_mdp_perf_set_wm_levels();
    _impl_.event_.mdp_perf_set_wm_levels_ = mdp_perf_set_wm_levels;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
}
void FtraceEvent::clear_mdp_perf_set_wm_levels() {
  if (event_case() == kMdpPerfSetWmLevels) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_perf_set_wm_levels_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_video_underrun_done(::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_video_underrun_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_video_underrun_done));
    if (message_arena != submessage_arena) {
      mdp_video_underrun_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_video_underrun_done, submessage_arena);
    }
    set_has_mdp_video_underrun_done();
    _impl_.event_.mdp_video_underrun_done_ = mdp_video_underrun_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
}
void FtraceEvent::clear_mdp_video_underrun_done() {
  if (event_case() == kMdpVideoUnderrunDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_video_underrun_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_cmd_wait_pingpong(::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_cmd_wait_pingpong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_cmd_wait_pingpong));
    if (message_arena != submessage_arena) {
      mdp_cmd_wait_pingpong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_cmd_wait_pingpong, submessage_arena);
    }
    set_has_mdp_cmd_wait_pingpong();
    _impl_.event_.mdp_cmd_wait_pingpong_ = mdp_cmd_wait_pingpong;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
}
void FtraceEvent::clear_mdp_cmd_wait_pingpong() {
  if (event_case() == kMdpCmdWaitPingpong) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_cmd_wait_pingpong_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_prefill_calc(::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_perf_prefill_calc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_perf_prefill_calc));
    if (message_arena != submessage_arena) {
      mdp_perf_prefill_calc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_prefill_calc, submessage_arena);
    }
    set_has_mdp_perf_prefill_calc();
    _impl_.event_.mdp_perf_prefill_calc_ = mdp_perf_prefill_calc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
}
void FtraceEvent::clear_mdp_perf_prefill_calc() {
  if (event_case() == kMdpPerfPrefillCalc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_perf_prefill_calc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mdp_perf_update_bus(::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mdp_perf_update_bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdp_perf_update_bus));
    if (message_arena != submessage_arena) {
      mdp_perf_update_bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdp_perf_update_bus, submessage_arena);
    }
    set_has_mdp_perf_update_bus();
    _impl_.event_.mdp_perf_update_bus_ = mdp_perf_update_bus;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
}
void FtraceEvent::clear_mdp_perf_update_bus() {
  if (event_case() == kMdpPerfUpdateBus) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mdp_perf_update_bus_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_rotator_bw_ao_as_context(::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (rotator_bw_ao_as_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotator_bw_ao_as_context));
    if (message_arena != submessage_arena) {
      rotator_bw_ao_as_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotator_bw_ao_as_context, submessage_arena);
    }
    set_has_rotator_bw_ao_as_context();
    _impl_.event_.rotator_bw_ao_as_context_ = rotator_bw_ao_as_context;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
}
void FtraceEvent::clear_rotator_bw_ao_as_context() {
  if (event_case() == kRotatorBwAoAsContext) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.rotator_bw_ao_as_context_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_filemap_add_to_page_cache(::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_filemap_add_to_page_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_filemap_add_to_page_cache));
    if (message_arena != submessage_arena) {
      mm_filemap_add_to_page_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_filemap_add_to_page_cache, submessage_arena);
    }
    set_has_mm_filemap_add_to_page_cache();
    _impl_.event_.mm_filemap_add_to_page_cache_ = mm_filemap_add_to_page_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
}
void FtraceEvent::clear_mm_filemap_add_to_page_cache() {
  if (event_case() == kMmFilemapAddToPageCache) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_filemap_add_to_page_cache_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_filemap_delete_from_page_cache(::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_filemap_delete_from_page_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_filemap_delete_from_page_cache));
    if (message_arena != submessage_arena) {
      mm_filemap_delete_from_page_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_filemap_delete_from_page_cache, submessage_arena);
    }
    set_has_mm_filemap_delete_from_page_cache();
    _impl_.event_.mm_filemap_delete_from_page_cache_ = mm_filemap_delete_from_page_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
}
void FtraceEvent::clear_mm_filemap_delete_from_page_cache() {
  if (event_case() == kMmFilemapDeleteFromPageCache) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_filemap_delete_from_page_cache_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_begin(::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_begin));
    if (message_arena != submessage_arena) {
      mm_compaction_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_begin, submessage_arena);
    }
    set_has_mm_compaction_begin();
    _impl_.event_.mm_compaction_begin_ = mm_compaction_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_begin)
}
void FtraceEvent::clear_mm_compaction_begin() {
  if (event_case() == kMmCompactionBegin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_begin_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_defer_compaction(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_defer_compaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_defer_compaction));
    if (message_arena != submessage_arena) {
      mm_compaction_defer_compaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_defer_compaction, submessage_arena);
    }
    set_has_mm_compaction_defer_compaction();
    _impl_.event_.mm_compaction_defer_compaction_ = mm_compaction_defer_compaction;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
}
void FtraceEvent::clear_mm_compaction_defer_compaction() {
  if (event_case() == kMmCompactionDeferCompaction) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_defer_compaction_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_deferred(::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_deferred) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_deferred));
    if (message_arena != submessage_arena) {
      mm_compaction_deferred = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_deferred, submessage_arena);
    }
    set_has_mm_compaction_deferred();
    _impl_.event_.mm_compaction_deferred_ = mm_compaction_deferred;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_deferred)
}
void FtraceEvent::clear_mm_compaction_deferred() {
  if (event_case() == kMmCompactionDeferred) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_deferred_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_defer_reset(::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_defer_reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_defer_reset));
    if (message_arena != submessage_arena) {
      mm_compaction_defer_reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_defer_reset, submessage_arena);
    }
    set_has_mm_compaction_defer_reset();
    _impl_.event_.mm_compaction_defer_reset_ = mm_compaction_defer_reset;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
}
void FtraceEvent::clear_mm_compaction_defer_reset() {
  if (event_case() == kMmCompactionDeferReset) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_defer_reset_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_end(::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_end));
    if (message_arena != submessage_arena) {
      mm_compaction_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_end, submessage_arena);
    }
    set_has_mm_compaction_end();
    _impl_.event_.mm_compaction_end_ = mm_compaction_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_end)
}
void FtraceEvent::clear_mm_compaction_end() {
  if (event_case() == kMmCompactionEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_finished(::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_finished));
    if (message_arena != submessage_arena) {
      mm_compaction_finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_finished, submessage_arena);
    }
    set_has_mm_compaction_finished();
    _impl_.event_.mm_compaction_finished_ = mm_compaction_finished;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_finished)
}
void FtraceEvent::clear_mm_compaction_finished() {
  if (event_case() == kMmCompactionFinished) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_finished_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_isolate_freepages(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_isolate_freepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_isolate_freepages));
    if (message_arena != submessage_arena) {
      mm_compaction_isolate_freepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_isolate_freepages, submessage_arena);
    }
    set_has_mm_compaction_isolate_freepages();
    _impl_.event_.mm_compaction_isolate_freepages_ = mm_compaction_isolate_freepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
}
void FtraceEvent::clear_mm_compaction_isolate_freepages() {
  if (event_case() == kMmCompactionIsolateFreepages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_isolate_freepages_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_isolate_migratepages(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_isolate_migratepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_isolate_migratepages));
    if (message_arena != submessage_arena) {
      mm_compaction_isolate_migratepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_isolate_migratepages, submessage_arena);
    }
    set_has_mm_compaction_isolate_migratepages();
    _impl_.event_.mm_compaction_isolate_migratepages_ = mm_compaction_isolate_migratepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
}
void FtraceEvent::clear_mm_compaction_isolate_migratepages() {
  if (event_case() == kMmCompactionIsolateMigratepages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_isolate_migratepages_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_kcompactd_sleep(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_kcompactd_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_kcompactd_sleep));
    if (message_arena != submessage_arena) {
      mm_compaction_kcompactd_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_kcompactd_sleep, submessage_arena);
    }
    set_has_mm_compaction_kcompactd_sleep();
    _impl_.event_.mm_compaction_kcompactd_sleep_ = mm_compaction_kcompactd_sleep;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
}
void FtraceEvent::clear_mm_compaction_kcompactd_sleep() {
  if (event_case() == kMmCompactionKcompactdSleep) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_kcompactd_sleep_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_kcompactd_wake(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_kcompactd_wake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_kcompactd_wake));
    if (message_arena != submessage_arena) {
      mm_compaction_kcompactd_wake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_kcompactd_wake, submessage_arena);
    }
    set_has_mm_compaction_kcompactd_wake();
    _impl_.event_.mm_compaction_kcompactd_wake_ = mm_compaction_kcompactd_wake;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
}
void FtraceEvent::clear_mm_compaction_kcompactd_wake() {
  if (event_case() == kMmCompactionKcompactdWake) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_kcompactd_wake_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_migratepages(::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_migratepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_migratepages));
    if (message_arena != submessage_arena) {
      mm_compaction_migratepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_migratepages, submessage_arena);
    }
    set_has_mm_compaction_migratepages();
    _impl_.event_.mm_compaction_migratepages_ = mm_compaction_migratepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
}
void FtraceEvent::clear_mm_compaction_migratepages() {
  if (event_case() == kMmCompactionMigratepages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_migratepages_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_suitable(::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_suitable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_suitable));
    if (message_arena != submessage_arena) {
      mm_compaction_suitable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_suitable, submessage_arena);
    }
    set_has_mm_compaction_suitable();
    _impl_.event_.mm_compaction_suitable_ = mm_compaction_suitable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_suitable)
}
void FtraceEvent::clear_mm_compaction_suitable() {
  if (event_case() == kMmCompactionSuitable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_suitable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_try_to_compact_pages(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_try_to_compact_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_try_to_compact_pages));
    if (message_arena != submessage_arena) {
      mm_compaction_try_to_compact_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_try_to_compact_pages, submessage_arena);
    }
    set_has_mm_compaction_try_to_compact_pages();
    _impl_.event_.mm_compaction_try_to_compact_pages_ = mm_compaction_try_to_compact_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
}
void FtraceEvent::clear_mm_compaction_try_to_compact_pages() {
  if (event_case() == kMmCompactionTryToCompactPages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_try_to_compact_pages_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_compaction_wakeup_kcompactd(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_compaction_wakeup_kcompactd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_compaction_wakeup_kcompactd));
    if (message_arena != submessage_arena) {
      mm_compaction_wakeup_kcompactd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_compaction_wakeup_kcompactd, submessage_arena);
    }
    set_has_mm_compaction_wakeup_kcompactd();
    _impl_.event_.mm_compaction_wakeup_kcompactd_ = mm_compaction_wakeup_kcompactd;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
}
void FtraceEvent::clear_mm_compaction_wakeup_kcompactd() {
  if (event_case() == kMmCompactionWakeupKcompactd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_compaction_wakeup_kcompactd_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_suspend_resume(::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (suspend_resume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suspend_resume));
    if (message_arena != submessage_arena) {
      suspend_resume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspend_resume, submessage_arena);
    }
    set_has_suspend_resume();
    _impl_.event_.suspend_resume_ = suspend_resume;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.suspend_resume)
}
void FtraceEvent::clear_suspend_resume() {
  if (event_case() == kSuspendResume) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.suspend_resume_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_wakeup_new(::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_wakeup_new) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_wakeup_new));
    if (message_arena != submessage_arena) {
      sched_wakeup_new = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_wakeup_new, submessage_arena);
    }
    set_has_sched_wakeup_new();
    _impl_.event_.sched_wakeup_new_ = sched_wakeup_new;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_wakeup_new)
}
void FtraceEvent::clear_sched_wakeup_new() {
  if (event_case() == kSchedWakeupNew) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_wakeup_new_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_backmerge(::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_bio_backmerge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_bio_backmerge));
    if (message_arena != submessage_arena) {
      block_bio_backmerge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_backmerge, submessage_arena);
    }
    set_has_block_bio_backmerge();
    _impl_.event_.block_bio_backmerge_ = block_bio_backmerge;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_backmerge)
}
void FtraceEvent::clear_block_bio_backmerge() {
  if (event_case() == kBlockBioBackmerge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_bio_backmerge_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_bounce(::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_bio_bounce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_bio_bounce));
    if (message_arena != submessage_arena) {
      block_bio_bounce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_bounce, submessage_arena);
    }
    set_has_block_bio_bounce();
    _impl_.event_.block_bio_bounce_ = block_bio_bounce;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_bounce)
}
void FtraceEvent::clear_block_bio_bounce() {
  if (event_case() == kBlockBioBounce) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_bio_bounce_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_complete(::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_bio_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_bio_complete));
    if (message_arena != submessage_arena) {
      block_bio_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_complete, submessage_arena);
    }
    set_has_block_bio_complete();
    _impl_.event_.block_bio_complete_ = block_bio_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_complete)
}
void FtraceEvent::clear_block_bio_complete() {
  if (event_case() == kBlockBioComplete) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_bio_complete_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_frontmerge(::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_bio_frontmerge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_bio_frontmerge));
    if (message_arena != submessage_arena) {
      block_bio_frontmerge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_frontmerge, submessage_arena);
    }
    set_has_block_bio_frontmerge();
    _impl_.event_.block_bio_frontmerge_ = block_bio_frontmerge;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_frontmerge)
}
void FtraceEvent::clear_block_bio_frontmerge() {
  if (event_case() == kBlockBioFrontmerge) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_bio_frontmerge_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_queue(::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_bio_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_bio_queue));
    if (message_arena != submessage_arena) {
      block_bio_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_queue, submessage_arena);
    }
    set_has_block_bio_queue();
    _impl_.event_.block_bio_queue_ = block_bio_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_queue)
}
void FtraceEvent::clear_block_bio_queue() {
  if (event_case() == kBlockBioQueue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_bio_queue_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_bio_remap(::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_bio_remap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_bio_remap));
    if (message_arena != submessage_arena) {
      block_bio_remap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_bio_remap, submessage_arena);
    }
    set_has_block_bio_remap();
    _impl_.event_.block_bio_remap_ = block_bio_remap;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_bio_remap)
}
void FtraceEvent::clear_block_bio_remap() {
  if (event_case() == kBlockBioRemap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_bio_remap_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_dirty_buffer(::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_dirty_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_dirty_buffer));
    if (message_arena != submessage_arena) {
      block_dirty_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_dirty_buffer, submessage_arena);
    }
    set_has_block_dirty_buffer();
    _impl_.event_.block_dirty_buffer_ = block_dirty_buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_dirty_buffer)
}
void FtraceEvent::clear_block_dirty_buffer() {
  if (event_case() == kBlockDirtyBuffer) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_dirty_buffer_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_getrq(::perfetto::protos::BlockGetrqFtraceEvent* block_getrq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_getrq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_getrq));
    if (message_arena != submessage_arena) {
      block_getrq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_getrq, submessage_arena);
    }
    set_has_block_getrq();
    _impl_.event_.block_getrq_ = block_getrq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_getrq)
}
void FtraceEvent::clear_block_getrq() {
  if (event_case() == kBlockGetrq) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_getrq_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_plug(::perfetto::protos::BlockPlugFtraceEvent* block_plug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_plug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_plug));
    if (message_arena != submessage_arena) {
      block_plug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_plug, submessage_arena);
    }
    set_has_block_plug();
    _impl_.event_.block_plug_ = block_plug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_plug)
}
void FtraceEvent::clear_block_plug() {
  if (event_case() == kBlockPlug) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_plug_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_abort(::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_rq_abort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rq_abort));
    if (message_arena != submessage_arena) {
      block_rq_abort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_abort, submessage_arena);
    }
    set_has_block_rq_abort();
    _impl_.event_.block_rq_abort_ = block_rq_abort;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_abort)
}
void FtraceEvent::clear_block_rq_abort() {
  if (event_case() == kBlockRqAbort) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_rq_abort_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_complete(::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_rq_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rq_complete));
    if (message_arena != submessage_arena) {
      block_rq_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_complete, submessage_arena);
    }
    set_has_block_rq_complete();
    _impl_.event_.block_rq_complete_ = block_rq_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_complete)
}
void FtraceEvent::clear_block_rq_complete() {
  if (event_case() == kBlockRqComplete) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_rq_complete_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_insert(::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_rq_insert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rq_insert));
    if (message_arena != submessage_arena) {
      block_rq_insert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_insert, submessage_arena);
    }
    set_has_block_rq_insert();
    _impl_.event_.block_rq_insert_ = block_rq_insert;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_insert)
}
void FtraceEvent::clear_block_rq_insert() {
  if (event_case() == kBlockRqInsert) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_rq_insert_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_remap(::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_rq_remap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rq_remap));
    if (message_arena != submessage_arena) {
      block_rq_remap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_remap, submessage_arena);
    }
    set_has_block_rq_remap();
    _impl_.event_.block_rq_remap_ = block_rq_remap;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_remap)
}
void FtraceEvent::clear_block_rq_remap() {
  if (event_case() == kBlockRqRemap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_rq_remap_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_rq_requeue(::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_rq_requeue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rq_requeue));
    if (message_arena != submessage_arena) {
      block_rq_requeue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rq_requeue, submessage_arena);
    }
    set_has_block_rq_requeue();
    _impl_.event_.block_rq_requeue_ = block_rq_requeue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_rq_requeue)
}
void FtraceEvent::clear_block_rq_requeue() {
  if (event_case() == kBlockRqRequeue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_rq_requeue_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_sleeprq(::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_sleeprq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_sleeprq));
    if (message_arena != submessage_arena) {
      block_sleeprq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_sleeprq, submessage_arena);
    }
    set_has_block_sleeprq();
    _impl_.event_.block_sleeprq_ = block_sleeprq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_sleeprq)
}
void FtraceEvent::clear_block_sleeprq() {
  if (event_case() == kBlockSleeprq) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_sleeprq_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_split(::perfetto::protos::BlockSplitFtraceEvent* block_split) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_split) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_split));
    if (message_arena != submessage_arena) {
      block_split = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_split, submessage_arena);
    }
    set_has_block_split();
    _impl_.event_.block_split_ = block_split;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_split)
}
void FtraceEvent::clear_block_split() {
  if (event_case() == kBlockSplit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_split_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_touch_buffer(::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_touch_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_touch_buffer));
    if (message_arena != submessage_arena) {
      block_touch_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_touch_buffer, submessage_arena);
    }
    set_has_block_touch_buffer();
    _impl_.event_.block_touch_buffer_ = block_touch_buffer;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_touch_buffer)
}
void FtraceEvent::clear_block_touch_buffer() {
  if (event_case() == kBlockTouchBuffer) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_touch_buffer_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_block_unplug(::perfetto::protos::BlockUnplugFtraceEvent* block_unplug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (block_unplug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_unplug));
    if (message_arena != submessage_arena) {
      block_unplug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_unplug, submessage_arena);
    }
    set_has_block_unplug();
    _impl_.event_.block_unplug_ = block_unplug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.block_unplug)
}
void FtraceEvent::clear_block_unplug() {
  if (event_case() == kBlockUnplug) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.block_unplug_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_alloc_da_blocks(::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_alloc_da_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_alloc_da_blocks));
    if (message_arena != submessage_arena) {
      ext4_alloc_da_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_alloc_da_blocks, submessage_arena);
    }
    set_has_ext4_alloc_da_blocks();
    _impl_.event_.ext4_alloc_da_blocks_ = ext4_alloc_da_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
}
void FtraceEvent::clear_ext4_alloc_da_blocks() {
  if (event_case() == kExt4AllocDaBlocks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_alloc_da_blocks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_allocate_blocks(::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_allocate_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_allocate_blocks));
    if (message_arena != submessage_arena) {
      ext4_allocate_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_allocate_blocks, submessage_arena);
    }
    set_has_ext4_allocate_blocks();
    _impl_.event_.ext4_allocate_blocks_ = ext4_allocate_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
}
void FtraceEvent::clear_ext4_allocate_blocks() {
  if (event_case() == kExt4AllocateBlocks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_allocate_blocks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_allocate_inode(::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_allocate_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_allocate_inode));
    if (message_arena != submessage_arena) {
      ext4_allocate_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_allocate_inode, submessage_arena);
    }
    set_has_ext4_allocate_inode();
    _impl_.event_.ext4_allocate_inode_ = ext4_allocate_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_allocate_inode)
}
void FtraceEvent::clear_ext4_allocate_inode() {
  if (event_case() == kExt4AllocateInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_allocate_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_begin_ordered_truncate(::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_begin_ordered_truncate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_begin_ordered_truncate));
    if (message_arena != submessage_arena) {
      ext4_begin_ordered_truncate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_begin_ordered_truncate, submessage_arena);
    }
    set_has_ext4_begin_ordered_truncate();
    _impl_.event_.ext4_begin_ordered_truncate_ = ext4_begin_ordered_truncate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
}
void FtraceEvent::clear_ext4_begin_ordered_truncate() {
  if (event_case() == kExt4BeginOrderedTruncate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_begin_ordered_truncate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_collapse_range(::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_collapse_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_collapse_range));
    if (message_arena != submessage_arena) {
      ext4_collapse_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_collapse_range, submessage_arena);
    }
    set_has_ext4_collapse_range();
    _impl_.event_.ext4_collapse_range_ = ext4_collapse_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_collapse_range)
}
void FtraceEvent::clear_ext4_collapse_range() {
  if (event_case() == kExt4CollapseRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_collapse_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_release_space(::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_release_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_release_space));
    if (message_arena != submessage_arena) {
      ext4_da_release_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_release_space, submessage_arena);
    }
    set_has_ext4_da_release_space();
    _impl_.event_.ext4_da_release_space_ = ext4_da_release_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_release_space)
}
void FtraceEvent::clear_ext4_da_release_space() {
  if (event_case() == kExt4DaReleaseSpace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_release_space_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_reserve_space(::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_reserve_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_reserve_space));
    if (message_arena != submessage_arena) {
      ext4_da_reserve_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_reserve_space, submessage_arena);
    }
    set_has_ext4_da_reserve_space();
    _impl_.event_.ext4_da_reserve_space_ = ext4_da_reserve_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
}
void FtraceEvent::clear_ext4_da_reserve_space() {
  if (event_case() == kExt4DaReserveSpace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_reserve_space_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_update_reserve_space(::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_update_reserve_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_update_reserve_space));
    if (message_arena != submessage_arena) {
      ext4_da_update_reserve_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_update_reserve_space, submessage_arena);
    }
    set_has_ext4_da_update_reserve_space();
    _impl_.event_.ext4_da_update_reserve_space_ = ext4_da_update_reserve_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
}
void FtraceEvent::clear_ext4_da_update_reserve_space() {
  if (event_case() == kExt4DaUpdateReserveSpace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_update_reserve_space_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_pages(::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_write_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_write_pages));
    if (message_arena != submessage_arena) {
      ext4_da_write_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_pages, submessage_arena);
    }
    set_has_ext4_da_write_pages();
    _impl_.event_.ext4_da_write_pages_ = ext4_da_write_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_pages)
}
void FtraceEvent::clear_ext4_da_write_pages() {
  if (event_case() == kExt4DaWritePages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_write_pages_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_da_write_pages_extent(::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_da_write_pages_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_da_write_pages_extent));
    if (message_arena != submessage_arena) {
      ext4_da_write_pages_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_da_write_pages_extent, submessage_arena);
    }
    set_has_ext4_da_write_pages_extent();
    _impl_.event_.ext4_da_write_pages_extent_ = ext4_da_write_pages_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
}
void FtraceEvent::clear_ext4_da_write_pages_extent() {
  if (event_case() == kExt4DaWritePagesExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_da_write_pages_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_direct_io_enter(::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_direct_io_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_direct_io_enter));
    if (message_arena != submessage_arena) {
      ext4_direct_io_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_direct_io_enter, submessage_arena);
    }
    set_has_ext4_direct_io_enter();
    _impl_.event_.ext4_direct_io_enter_ = ext4_direct_io_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
}
void FtraceEvent::clear_ext4_direct_io_enter() {
  if (event_case() == kExt4DirectIOEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_direct_io_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_direct_io_exit(::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_direct_io_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_direct_io_exit));
    if (message_arena != submessage_arena) {
      ext4_direct_io_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_direct_io_exit, submessage_arena);
    }
    set_has_ext4_direct_io_exit();
    _impl_.event_.ext4_direct_io_exit_ = ext4_direct_io_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
}
void FtraceEvent::clear_ext4_direct_io_exit() {
  if (event_case() == kExt4DirectIOExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_direct_io_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_discard_blocks(::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_discard_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_discard_blocks));
    if (message_arena != submessage_arena) {
      ext4_discard_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_discard_blocks, submessage_arena);
    }
    set_has_ext4_discard_blocks();
    _impl_.event_.ext4_discard_blocks_ = ext4_discard_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_discard_blocks)
}
void FtraceEvent::clear_ext4_discard_blocks() {
  if (event_case() == kExt4DiscardBlocks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_discard_blocks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_discard_preallocations(::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_discard_preallocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_discard_preallocations));
    if (message_arena != submessage_arena) {
      ext4_discard_preallocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_discard_preallocations, submessage_arena);
    }
    set_has_ext4_discard_preallocations();
    _impl_.event_.ext4_discard_preallocations_ = ext4_discard_preallocations;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
}
void FtraceEvent::clear_ext4_discard_preallocations() {
  if (event_case() == kExt4DiscardPreallocations) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_discard_preallocations_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_drop_inode(::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_drop_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_drop_inode));
    if (message_arena != submessage_arena) {
      ext4_drop_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_drop_inode, submessage_arena);
    }
    set_has_ext4_drop_inode();
    _impl_.event_.ext4_drop_inode_ = ext4_drop_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_drop_inode)
}
void FtraceEvent::clear_ext4_drop_inode() {
  if (event_case() == kExt4DropInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_drop_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_cache_extent(::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_cache_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_cache_extent));
    if (message_arena != submessage_arena) {
      ext4_es_cache_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_cache_extent, submessage_arena);
    }
    set_has_ext4_es_cache_extent();
    _impl_.event_.ext4_es_cache_extent_ = ext4_es_cache_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
}
void FtraceEvent::clear_ext4_es_cache_extent() {
  if (event_case() == kExt4EsCacheExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_cache_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_find_delayed_extent_range_enter(::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_find_delayed_extent_range_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_find_delayed_extent_range_enter));
    if (message_arena != submessage_arena) {
      ext4_es_find_delayed_extent_range_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_find_delayed_extent_range_enter, submessage_arena);
    }
    set_has_ext4_es_find_delayed_extent_range_enter();
    _impl_.event_.ext4_es_find_delayed_extent_range_enter_ = ext4_es_find_delayed_extent_range_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
}
void FtraceEvent::clear_ext4_es_find_delayed_extent_range_enter() {
  if (event_case() == kExt4EsFindDelayedExtentRangeEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_find_delayed_extent_range_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_find_delayed_extent_range_exit(::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_find_delayed_extent_range_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_find_delayed_extent_range_exit));
    if (message_arena != submessage_arena) {
      ext4_es_find_delayed_extent_range_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_find_delayed_extent_range_exit, submessage_arena);
    }
    set_has_ext4_es_find_delayed_extent_range_exit();
    _impl_.event_.ext4_es_find_delayed_extent_range_exit_ = ext4_es_find_delayed_extent_range_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
}
void FtraceEvent::clear_ext4_es_find_delayed_extent_range_exit() {
  if (event_case() == kExt4EsFindDelayedExtentRangeExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_find_delayed_extent_range_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_insert_extent(::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_insert_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_insert_extent));
    if (message_arena != submessage_arena) {
      ext4_es_insert_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_insert_extent, submessage_arena);
    }
    set_has_ext4_es_insert_extent();
    _impl_.event_.ext4_es_insert_extent_ = ext4_es_insert_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
}
void FtraceEvent::clear_ext4_es_insert_extent() {
  if (event_case() == kExt4EsInsertExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_insert_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_lookup_extent_enter(::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_lookup_extent_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_lookup_extent_enter));
    if (message_arena != submessage_arena) {
      ext4_es_lookup_extent_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_lookup_extent_enter, submessage_arena);
    }
    set_has_ext4_es_lookup_extent_enter();
    _impl_.event_.ext4_es_lookup_extent_enter_ = ext4_es_lookup_extent_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
}
void FtraceEvent::clear_ext4_es_lookup_extent_enter() {
  if (event_case() == kExt4EsLookupExtentEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_lookup_extent_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_lookup_extent_exit(::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_lookup_extent_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_lookup_extent_exit));
    if (message_arena != submessage_arena) {
      ext4_es_lookup_extent_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_lookup_extent_exit, submessage_arena);
    }
    set_has_ext4_es_lookup_extent_exit();
    _impl_.event_.ext4_es_lookup_extent_exit_ = ext4_es_lookup_extent_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
}
void FtraceEvent::clear_ext4_es_lookup_extent_exit() {
  if (event_case() == kExt4EsLookupExtentExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_lookup_extent_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_remove_extent(::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_remove_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_remove_extent));
    if (message_arena != submessage_arena) {
      ext4_es_remove_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_remove_extent, submessage_arena);
    }
    set_has_ext4_es_remove_extent();
    _impl_.event_.ext4_es_remove_extent_ = ext4_es_remove_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
}
void FtraceEvent::clear_ext4_es_remove_extent() {
  if (event_case() == kExt4EsRemoveExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_remove_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink(::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_shrink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_shrink));
    if (message_arena != submessage_arena) {
      ext4_es_shrink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink, submessage_arena);
    }
    set_has_ext4_es_shrink();
    _impl_.event_.ext4_es_shrink_ = ext4_es_shrink;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink)
}
void FtraceEvent::clear_ext4_es_shrink() {
  if (event_case() == kExt4EsShrink) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_shrink_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink_count(::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_shrink_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_shrink_count));
    if (message_arena != submessage_arena) {
      ext4_es_shrink_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink_count, submessage_arena);
    }
    set_has_ext4_es_shrink_count();
    _impl_.event_.ext4_es_shrink_count_ = ext4_es_shrink_count;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
}
void FtraceEvent::clear_ext4_es_shrink_count() {
  if (event_case() == kExt4EsShrinkCount) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_shrink_count_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink_scan_enter(::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_shrink_scan_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_shrink_scan_enter));
    if (message_arena != submessage_arena) {
      ext4_es_shrink_scan_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink_scan_enter, submessage_arena);
    }
    set_has_ext4_es_shrink_scan_enter();
    _impl_.event_.ext4_es_shrink_scan_enter_ = ext4_es_shrink_scan_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
}
void FtraceEvent::clear_ext4_es_shrink_scan_enter() {
  if (event_case() == kExt4EsShrinkScanEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_shrink_scan_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_es_shrink_scan_exit(::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_es_shrink_scan_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_es_shrink_scan_exit));
    if (message_arena != submessage_arena) {
      ext4_es_shrink_scan_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_es_shrink_scan_exit, submessage_arena);
    }
    set_has_ext4_es_shrink_scan_exit();
    _impl_.event_.ext4_es_shrink_scan_exit_ = ext4_es_shrink_scan_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
}
void FtraceEvent::clear_ext4_es_shrink_scan_exit() {
  if (event_case() == kExt4EsShrinkScanExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_es_shrink_scan_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_evict_inode(::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_evict_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_evict_inode));
    if (message_arena != submessage_arena) {
      ext4_evict_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_evict_inode, submessage_arena);
    }
    set_has_ext4_evict_inode();
    _impl_.event_.ext4_evict_inode_ = ext4_evict_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_evict_inode)
}
void FtraceEvent::clear_ext4_evict_inode() {
  if (event_case() == kExt4EvictInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_evict_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_convert_to_initialized_enter(::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_convert_to_initialized_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_convert_to_initialized_enter));
    if (message_arena != submessage_arena) {
      ext4_ext_convert_to_initialized_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_convert_to_initialized_enter, submessage_arena);
    }
    set_has_ext4_ext_convert_to_initialized_enter();
    _impl_.event_.ext4_ext_convert_to_initialized_enter_ = ext4_ext_convert_to_initialized_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
}
void FtraceEvent::clear_ext4_ext_convert_to_initialized_enter() {
  if (event_case() == kExt4ExtConvertToInitializedEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_convert_to_initialized_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_convert_to_initialized_fastpath(::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_convert_to_initialized_fastpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_convert_to_initialized_fastpath));
    if (message_arena != submessage_arena) {
      ext4_ext_convert_to_initialized_fastpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_convert_to_initialized_fastpath, submessage_arena);
    }
    set_has_ext4_ext_convert_to_initialized_fastpath();
    _impl_.event_.ext4_ext_convert_to_initialized_fastpath_ = ext4_ext_convert_to_initialized_fastpath;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
}
void FtraceEvent::clear_ext4_ext_convert_to_initialized_fastpath() {
  if (event_case() == kExt4ExtConvertToInitializedFastpath) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_convert_to_initialized_fastpath_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_handle_unwritten_extents(::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_handle_unwritten_extents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_handle_unwritten_extents));
    if (message_arena != submessage_arena) {
      ext4_ext_handle_unwritten_extents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_handle_unwritten_extents, submessage_arena);
    }
    set_has_ext4_ext_handle_unwritten_extents();
    _impl_.event_.ext4_ext_handle_unwritten_extents_ = ext4_ext_handle_unwritten_extents;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
}
void FtraceEvent::clear_ext4_ext_handle_unwritten_extents() {
  if (event_case() == kExt4ExtHandleUnwrittenExtents) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_handle_unwritten_extents_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_in_cache(::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_in_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_in_cache));
    if (message_arena != submessage_arena) {
      ext4_ext_in_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_in_cache, submessage_arena);
    }
    set_has_ext4_ext_in_cache();
    _impl_.event_.ext4_ext_in_cache_ = ext4_ext_in_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
}
void FtraceEvent::clear_ext4_ext_in_cache() {
  if (event_case() == kExt4ExtInCache) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_in_cache_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_load_extent(::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_load_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_load_extent));
    if (message_arena != submessage_arena) {
      ext4_ext_load_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_load_extent, submessage_arena);
    }
    set_has_ext4_ext_load_extent();
    _impl_.event_.ext4_ext_load_extent_ = ext4_ext_load_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
}
void FtraceEvent::clear_ext4_ext_load_extent() {
  if (event_case() == kExt4ExtLoadExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_load_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_map_blocks_enter(::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_map_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_map_blocks_enter));
    if (message_arena != submessage_arena) {
      ext4_ext_map_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_map_blocks_enter, submessage_arena);
    }
    set_has_ext4_ext_map_blocks_enter();
    _impl_.event_.ext4_ext_map_blocks_enter_ = ext4_ext_map_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
}
void FtraceEvent::clear_ext4_ext_map_blocks_enter() {
  if (event_case() == kExt4ExtMapBlocksEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_map_blocks_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_map_blocks_exit(::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_map_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_map_blocks_exit));
    if (message_arena != submessage_arena) {
      ext4_ext_map_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_map_blocks_exit, submessage_arena);
    }
    set_has_ext4_ext_map_blocks_exit();
    _impl_.event_.ext4_ext_map_blocks_exit_ = ext4_ext_map_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
}
void FtraceEvent::clear_ext4_ext_map_blocks_exit() {
  if (event_case() == kExt4ExtMapBlocksExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_map_blocks_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_put_in_cache(::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_put_in_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_put_in_cache));
    if (message_arena != submessage_arena) {
      ext4_ext_put_in_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_put_in_cache, submessage_arena);
    }
    set_has_ext4_ext_put_in_cache();
    _impl_.event_.ext4_ext_put_in_cache_ = ext4_ext_put_in_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
}
void FtraceEvent::clear_ext4_ext_put_in_cache() {
  if (event_case() == kExt4ExtPutInCache) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_put_in_cache_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_remove_space(::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_remove_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_remove_space));
    if (message_arena != submessage_arena) {
      ext4_ext_remove_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_remove_space, submessage_arena);
    }
    set_has_ext4_ext_remove_space();
    _impl_.event_.ext4_ext_remove_space_ = ext4_ext_remove_space;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
}
void FtraceEvent::clear_ext4_ext_remove_space() {
  if (event_case() == kExt4ExtRemoveSpace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_remove_space_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_remove_space_done(::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_remove_space_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_remove_space_done));
    if (message_arena != submessage_arena) {
      ext4_ext_remove_space_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_remove_space_done, submessage_arena);
    }
    set_has_ext4_ext_remove_space_done();
    _impl_.event_.ext4_ext_remove_space_done_ = ext4_ext_remove_space_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
}
void FtraceEvent::clear_ext4_ext_remove_space_done() {
  if (event_case() == kExt4ExtRemoveSpaceDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_remove_space_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_rm_idx(::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_rm_idx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_rm_idx));
    if (message_arena != submessage_arena) {
      ext4_ext_rm_idx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_rm_idx, submessage_arena);
    }
    set_has_ext4_ext_rm_idx();
    _impl_.event_.ext4_ext_rm_idx_ = ext4_ext_rm_idx;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
}
void FtraceEvent::clear_ext4_ext_rm_idx() {
  if (event_case() == kExt4ExtRmIdx) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_rm_idx_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_rm_leaf(::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_rm_leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_rm_leaf));
    if (message_arena != submessage_arena) {
      ext4_ext_rm_leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_rm_leaf, submessage_arena);
    }
    set_has_ext4_ext_rm_leaf();
    _impl_.event_.ext4_ext_rm_leaf_ = ext4_ext_rm_leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
}
void FtraceEvent::clear_ext4_ext_rm_leaf() {
  if (event_case() == kExt4ExtRmLeaf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_rm_leaf_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ext_show_extent(::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ext_show_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ext_show_extent));
    if (message_arena != submessage_arena) {
      ext4_ext_show_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ext_show_extent, submessage_arena);
    }
    set_has_ext4_ext_show_extent();
    _impl_.event_.ext4_ext_show_extent_ = ext4_ext_show_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
}
void FtraceEvent::clear_ext4_ext_show_extent() {
  if (event_case() == kExt4ExtShowExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ext_show_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_fallocate_enter(::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_fallocate_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_fallocate_enter));
    if (message_arena != submessage_arena) {
      ext4_fallocate_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_fallocate_enter, submessage_arena);
    }
    set_has_ext4_fallocate_enter();
    _impl_.event_.ext4_fallocate_enter_ = ext4_fallocate_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
}
void FtraceEvent::clear_ext4_fallocate_enter() {
  if (event_case() == kExt4FallocateEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_fallocate_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_fallocate_exit(::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_fallocate_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_fallocate_exit));
    if (message_arena != submessage_arena) {
      ext4_fallocate_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_fallocate_exit, submessage_arena);
    }
    set_has_ext4_fallocate_exit();
    _impl_.event_.ext4_fallocate_exit_ = ext4_fallocate_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
}
void FtraceEvent::clear_ext4_fallocate_exit() {
  if (event_case() == kExt4FallocateExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_fallocate_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_find_delalloc_range(::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_find_delalloc_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_find_delalloc_range));
    if (message_arena != submessage_arena) {
      ext4_find_delalloc_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_find_delalloc_range, submessage_arena);
    }
    set_has_ext4_find_delalloc_range();
    _impl_.event_.ext4_find_delalloc_range_ = ext4_find_delalloc_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
}
void FtraceEvent::clear_ext4_find_delalloc_range() {
  if (event_case() == kExt4FindDelallocRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_find_delalloc_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_forget(::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_forget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_forget));
    if (message_arena != submessage_arena) {
      ext4_forget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_forget, submessage_arena);
    }
    set_has_ext4_forget();
    _impl_.event_.ext4_forget_ = ext4_forget;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_forget)
}
void FtraceEvent::clear_ext4_forget() {
  if (event_case() == kExt4Forget) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_forget_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_free_blocks(::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_free_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_free_blocks));
    if (message_arena != submessage_arena) {
      ext4_free_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_free_blocks, submessage_arena);
    }
    set_has_ext4_free_blocks();
    _impl_.event_.ext4_free_blocks_ = ext4_free_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_free_blocks)
}
void FtraceEvent::clear_ext4_free_blocks() {
  if (event_case() == kExt4FreeBlocks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_free_blocks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_free_inode(::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_free_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_free_inode));
    if (message_arena != submessage_arena) {
      ext4_free_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_free_inode, submessage_arena);
    }
    set_has_ext4_free_inode();
    _impl_.event_.ext4_free_inode_ = ext4_free_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_free_inode)
}
void FtraceEvent::clear_ext4_free_inode() {
  if (event_case() == kExt4FreeInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_free_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_get_implied_cluster_alloc_exit(::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_get_implied_cluster_alloc_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_get_implied_cluster_alloc_exit));
    if (message_arena != submessage_arena) {
      ext4_get_implied_cluster_alloc_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_get_implied_cluster_alloc_exit, submessage_arena);
    }
    set_has_ext4_get_implied_cluster_alloc_exit();
    _impl_.event_.ext4_get_implied_cluster_alloc_exit_ = ext4_get_implied_cluster_alloc_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
}
void FtraceEvent::clear_ext4_get_implied_cluster_alloc_exit() {
  if (event_case() == kExt4GetImpliedClusterAllocExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_get_implied_cluster_alloc_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_get_reserved_cluster_alloc(::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_get_reserved_cluster_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_get_reserved_cluster_alloc));
    if (message_arena != submessage_arena) {
      ext4_get_reserved_cluster_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_get_reserved_cluster_alloc, submessage_arena);
    }
    set_has_ext4_get_reserved_cluster_alloc();
    _impl_.event_.ext4_get_reserved_cluster_alloc_ = ext4_get_reserved_cluster_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
}
void FtraceEvent::clear_ext4_get_reserved_cluster_alloc() {
  if (event_case() == kExt4GetReservedClusterAlloc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_get_reserved_cluster_alloc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ind_map_blocks_enter(::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ind_map_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ind_map_blocks_enter));
    if (message_arena != submessage_arena) {
      ext4_ind_map_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ind_map_blocks_enter, submessage_arena);
    }
    set_has_ext4_ind_map_blocks_enter();
    _impl_.event_.ext4_ind_map_blocks_enter_ = ext4_ind_map_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
}
void FtraceEvent::clear_ext4_ind_map_blocks_enter() {
  if (event_case() == kExt4IndMapBlocksEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ind_map_blocks_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_ind_map_blocks_exit(::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_ind_map_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_ind_map_blocks_exit));
    if (message_arena != submessage_arena) {
      ext4_ind_map_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_ind_map_blocks_exit, submessage_arena);
    }
    set_has_ext4_ind_map_blocks_exit();
    _impl_.event_.ext4_ind_map_blocks_exit_ = ext4_ind_map_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
}
void FtraceEvent::clear_ext4_ind_map_blocks_exit() {
  if (event_case() == kExt4IndMapBlocksExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_ind_map_blocks_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_insert_range(::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_insert_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_insert_range));
    if (message_arena != submessage_arena) {
      ext4_insert_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_insert_range, submessage_arena);
    }
    set_has_ext4_insert_range();
    _impl_.event_.ext4_insert_range_ = ext4_insert_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_insert_range)
}
void FtraceEvent::clear_ext4_insert_range() {
  if (event_case() == kExt4InsertRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_insert_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_invalidatepage(::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_invalidatepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_invalidatepage));
    if (message_arena != submessage_arena) {
      ext4_invalidatepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_invalidatepage, submessage_arena);
    }
    set_has_ext4_invalidatepage();
    _impl_.event_.ext4_invalidatepage_ = ext4_invalidatepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_invalidatepage)
}
void FtraceEvent::clear_ext4_invalidatepage() {
  if (event_case() == kExt4Invalidatepage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_invalidatepage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journal_start(::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_journal_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_journal_start));
    if (message_arena != submessage_arena) {
      ext4_journal_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journal_start, submessage_arena);
    }
    set_has_ext4_journal_start();
    _impl_.event_.ext4_journal_start_ = ext4_journal_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journal_start)
}
void FtraceEvent::clear_ext4_journal_start() {
  if (event_case() == kExt4JournalStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_journal_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journal_start_reserved(::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_journal_start_reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_journal_start_reserved));
    if (message_arena != submessage_arena) {
      ext4_journal_start_reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journal_start_reserved, submessage_arena);
    }
    set_has_ext4_journal_start_reserved();
    _impl_.event_.ext4_journal_start_reserved_ = ext4_journal_start_reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
}
void FtraceEvent::clear_ext4_journal_start_reserved() {
  if (event_case() == kExt4JournalStartReserved) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_journal_start_reserved_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journalled_invalidatepage(::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_journalled_invalidatepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_journalled_invalidatepage));
    if (message_arena != submessage_arena) {
      ext4_journalled_invalidatepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journalled_invalidatepage, submessage_arena);
    }
    set_has_ext4_journalled_invalidatepage();
    _impl_.event_.ext4_journalled_invalidatepage_ = ext4_journalled_invalidatepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
}
void FtraceEvent::clear_ext4_journalled_invalidatepage() {
  if (event_case() == kExt4JournalledInvalidatepage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_journalled_invalidatepage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_journalled_write_end(::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_journalled_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_journalled_write_end));
    if (message_arena != submessage_arena) {
      ext4_journalled_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_journalled_write_end, submessage_arena);
    }
    set_has_ext4_journalled_write_end();
    _impl_.event_.ext4_journalled_write_end_ = ext4_journalled_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
}
void FtraceEvent::clear_ext4_journalled_write_end() {
  if (event_case() == kExt4JournalledWriteEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_journalled_write_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_load_inode(::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_load_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_load_inode));
    if (message_arena != submessage_arena) {
      ext4_load_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_load_inode, submessage_arena);
    }
    set_has_ext4_load_inode();
    _impl_.event_.ext4_load_inode_ = ext4_load_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_load_inode)
}
void FtraceEvent::clear_ext4_load_inode() {
  if (event_case() == kExt4LoadInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_load_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_load_inode_bitmap(::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_load_inode_bitmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_load_inode_bitmap));
    if (message_arena != submessage_arena) {
      ext4_load_inode_bitmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_load_inode_bitmap, submessage_arena);
    }
    set_has_ext4_load_inode_bitmap();
    _impl_.event_.ext4_load_inode_bitmap_ = ext4_load_inode_bitmap;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
}
void FtraceEvent::clear_ext4_load_inode_bitmap() {
  if (event_case() == kExt4LoadInodeBitmap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_load_inode_bitmap_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mark_inode_dirty(::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mark_inode_dirty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mark_inode_dirty));
    if (message_arena != submessage_arena) {
      ext4_mark_inode_dirty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mark_inode_dirty, submessage_arena);
    }
    set_has_ext4_mark_inode_dirty();
    _impl_.event_.ext4_mark_inode_dirty_ = ext4_mark_inode_dirty;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
}
void FtraceEvent::clear_ext4_mark_inode_dirty() {
  if (event_case() == kExt4MarkInodeDirty) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mark_inode_dirty_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_bitmap_load(::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_bitmap_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_bitmap_load));
    if (message_arena != submessage_arena) {
      ext4_mb_bitmap_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_bitmap_load, submessage_arena);
    }
    set_has_ext4_mb_bitmap_load();
    _impl_.event_.ext4_mb_bitmap_load_ = ext4_mb_bitmap_load;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
}
void FtraceEvent::clear_ext4_mb_bitmap_load() {
  if (event_case() == kExt4MbBitmapLoad) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_bitmap_load_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_buddy_bitmap_load(::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_buddy_bitmap_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_buddy_bitmap_load));
    if (message_arena != submessage_arena) {
      ext4_mb_buddy_bitmap_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_buddy_bitmap_load, submessage_arena);
    }
    set_has_ext4_mb_buddy_bitmap_load();
    _impl_.event_.ext4_mb_buddy_bitmap_load_ = ext4_mb_buddy_bitmap_load;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
}
void FtraceEvent::clear_ext4_mb_buddy_bitmap_load() {
  if (event_case() == kExt4MbBuddyBitmapLoad) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_buddy_bitmap_load_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_discard_preallocations(::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_discard_preallocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_discard_preallocations));
    if (message_arena != submessage_arena) {
      ext4_mb_discard_preallocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_discard_preallocations, submessage_arena);
    }
    set_has_ext4_mb_discard_preallocations();
    _impl_.event_.ext4_mb_discard_preallocations_ = ext4_mb_discard_preallocations;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
}
void FtraceEvent::clear_ext4_mb_discard_preallocations() {
  if (event_case() == kExt4MbDiscardPreallocations) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_discard_preallocations_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_new_group_pa(::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_new_group_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_new_group_pa));
    if (message_arena != submessage_arena) {
      ext4_mb_new_group_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_new_group_pa, submessage_arena);
    }
    set_has_ext4_mb_new_group_pa();
    _impl_.event_.ext4_mb_new_group_pa_ = ext4_mb_new_group_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
}
void FtraceEvent::clear_ext4_mb_new_group_pa() {
  if (event_case() == kExt4MbNewGroupPa) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_new_group_pa_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_new_inode_pa(::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_new_inode_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_new_inode_pa));
    if (message_arena != submessage_arena) {
      ext4_mb_new_inode_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_new_inode_pa, submessage_arena);
    }
    set_has_ext4_mb_new_inode_pa();
    _impl_.event_.ext4_mb_new_inode_pa_ = ext4_mb_new_inode_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
}
void FtraceEvent::clear_ext4_mb_new_inode_pa() {
  if (event_case() == kExt4MbNewInodePa) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_new_inode_pa_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_release_group_pa(::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_release_group_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_release_group_pa));
    if (message_arena != submessage_arena) {
      ext4_mb_release_group_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_release_group_pa, submessage_arena);
    }
    set_has_ext4_mb_release_group_pa();
    _impl_.event_.ext4_mb_release_group_pa_ = ext4_mb_release_group_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
}
void FtraceEvent::clear_ext4_mb_release_group_pa() {
  if (event_case() == kExt4MbReleaseGroupPa) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_release_group_pa_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mb_release_inode_pa(::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mb_release_inode_pa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mb_release_inode_pa));
    if (message_arena != submessage_arena) {
      ext4_mb_release_inode_pa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mb_release_inode_pa, submessage_arena);
    }
    set_has_ext4_mb_release_inode_pa();
    _impl_.event_.ext4_mb_release_inode_pa_ = ext4_mb_release_inode_pa;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
}
void FtraceEvent::clear_ext4_mb_release_inode_pa() {
  if (event_case() == kExt4MbReleaseInodePa) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mb_release_inode_pa_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_alloc(::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mballoc_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mballoc_alloc));
    if (message_arena != submessage_arena) {
      ext4_mballoc_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_alloc, submessage_arena);
    }
    set_has_ext4_mballoc_alloc();
    _impl_.event_.ext4_mballoc_alloc_ = ext4_mballoc_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
}
void FtraceEvent::clear_ext4_mballoc_alloc() {
  if (event_case() == kExt4MballocAlloc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mballoc_alloc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_discard(::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mballoc_discard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mballoc_discard));
    if (message_arena != submessage_arena) {
      ext4_mballoc_discard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_discard, submessage_arena);
    }
    set_has_ext4_mballoc_discard();
    _impl_.event_.ext4_mballoc_discard_ = ext4_mballoc_discard;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
}
void FtraceEvent::clear_ext4_mballoc_discard() {
  if (event_case() == kExt4MballocDiscard) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mballoc_discard_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_free(::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mballoc_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mballoc_free));
    if (message_arena != submessage_arena) {
      ext4_mballoc_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_free, submessage_arena);
    }
    set_has_ext4_mballoc_free();
    _impl_.event_.ext4_mballoc_free_ = ext4_mballoc_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_free)
}
void FtraceEvent::clear_ext4_mballoc_free() {
  if (event_case() == kExt4MballocFree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mballoc_free_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_mballoc_prealloc(::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_mballoc_prealloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_mballoc_prealloc));
    if (message_arena != submessage_arena) {
      ext4_mballoc_prealloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_mballoc_prealloc, submessage_arena);
    }
    set_has_ext4_mballoc_prealloc();
    _impl_.event_.ext4_mballoc_prealloc_ = ext4_mballoc_prealloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
}
void FtraceEvent::clear_ext4_mballoc_prealloc() {
  if (event_case() == kExt4MballocPrealloc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_mballoc_prealloc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_other_inode_update_time(::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_other_inode_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_other_inode_update_time));
    if (message_arena != submessage_arena) {
      ext4_other_inode_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_other_inode_update_time, submessage_arena);
    }
    set_has_ext4_other_inode_update_time();
    _impl_.event_.ext4_other_inode_update_time_ = ext4_other_inode_update_time;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
}
void FtraceEvent::clear_ext4_other_inode_update_time() {
  if (event_case() == kExt4OtherInodeUpdateTime) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_other_inode_update_time_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_punch_hole(::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_punch_hole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_punch_hole));
    if (message_arena != submessage_arena) {
      ext4_punch_hole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_punch_hole, submessage_arena);
    }
    set_has_ext4_punch_hole();
    _impl_.event_.ext4_punch_hole_ = ext4_punch_hole;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_punch_hole)
}
void FtraceEvent::clear_ext4_punch_hole() {
  if (event_case() == kExt4PunchHole) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_punch_hole_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_read_block_bitmap_load(::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_read_block_bitmap_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_read_block_bitmap_load));
    if (message_arena != submessage_arena) {
      ext4_read_block_bitmap_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_read_block_bitmap_load, submessage_arena);
    }
    set_has_ext4_read_block_bitmap_load();
    _impl_.event_.ext4_read_block_bitmap_load_ = ext4_read_block_bitmap_load;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
}
void FtraceEvent::clear_ext4_read_block_bitmap_load() {
  if (event_case() == kExt4ReadBlockBitmapLoad) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_read_block_bitmap_load_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_readpage(::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_readpage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_readpage));
    if (message_arena != submessage_arena) {
      ext4_readpage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_readpage, submessage_arena);
    }
    set_has_ext4_readpage();
    _impl_.event_.ext4_readpage_ = ext4_readpage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_readpage)
}
void FtraceEvent::clear_ext4_readpage() {
  if (event_case() == kExt4Readpage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_readpage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_releasepage(::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_releasepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_releasepage));
    if (message_arena != submessage_arena) {
      ext4_releasepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_releasepage, submessage_arena);
    }
    set_has_ext4_releasepage();
    _impl_.event_.ext4_releasepage_ = ext4_releasepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_releasepage)
}
void FtraceEvent::clear_ext4_releasepage() {
  if (event_case() == kExt4Releasepage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_releasepage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_remove_blocks(::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_remove_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_remove_blocks));
    if (message_arena != submessage_arena) {
      ext4_remove_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_remove_blocks, submessage_arena);
    }
    set_has_ext4_remove_blocks();
    _impl_.event_.ext4_remove_blocks_ = ext4_remove_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_remove_blocks)
}
void FtraceEvent::clear_ext4_remove_blocks() {
  if (event_case() == kExt4RemoveBlocks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_remove_blocks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_request_blocks(::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_request_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_request_blocks));
    if (message_arena != submessage_arena) {
      ext4_request_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_request_blocks, submessage_arena);
    }
    set_has_ext4_request_blocks();
    _impl_.event_.ext4_request_blocks_ = ext4_request_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_request_blocks)
}
void FtraceEvent::clear_ext4_request_blocks() {
  if (event_case() == kExt4RequestBlocks) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_request_blocks_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_request_inode(::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_request_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_request_inode));
    if (message_arena != submessage_arena) {
      ext4_request_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_request_inode, submessage_arena);
    }
    set_has_ext4_request_inode();
    _impl_.event_.ext4_request_inode_ = ext4_request_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_request_inode)
}
void FtraceEvent::clear_ext4_request_inode() {
  if (event_case() == kExt4RequestInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_request_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_sync_fs(::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_sync_fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_sync_fs));
    if (message_arena != submessage_arena) {
      ext4_sync_fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_sync_fs, submessage_arena);
    }
    set_has_ext4_sync_fs();
    _impl_.event_.ext4_sync_fs_ = ext4_sync_fs;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_fs)
}
void FtraceEvent::clear_ext4_sync_fs() {
  if (event_case() == kExt4SyncFs) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_sync_fs_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_trim_all_free(::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_trim_all_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_trim_all_free));
    if (message_arena != submessage_arena) {
      ext4_trim_all_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_trim_all_free, submessage_arena);
    }
    set_has_ext4_trim_all_free();
    _impl_.event_.ext4_trim_all_free_ = ext4_trim_all_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_trim_all_free)
}
void FtraceEvent::clear_ext4_trim_all_free() {
  if (event_case() == kExt4TrimAllFree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_trim_all_free_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_trim_extent(::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_trim_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_trim_extent));
    if (message_arena != submessage_arena) {
      ext4_trim_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_trim_extent, submessage_arena);
    }
    set_has_ext4_trim_extent();
    _impl_.event_.ext4_trim_extent_ = ext4_trim_extent;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_trim_extent)
}
void FtraceEvent::clear_ext4_trim_extent() {
  if (event_case() == kExt4TrimExtent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_trim_extent_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_truncate_enter(::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_truncate_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_truncate_enter));
    if (message_arena != submessage_arena) {
      ext4_truncate_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_truncate_enter, submessage_arena);
    }
    set_has_ext4_truncate_enter();
    _impl_.event_.ext4_truncate_enter_ = ext4_truncate_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_truncate_enter)
}
void FtraceEvent::clear_ext4_truncate_enter() {
  if (event_case() == kExt4TruncateEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_truncate_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_truncate_exit(::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_truncate_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_truncate_exit));
    if (message_arena != submessage_arena) {
      ext4_truncate_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_truncate_exit, submessage_arena);
    }
    set_has_ext4_truncate_exit();
    _impl_.event_.ext4_truncate_exit_ = ext4_truncate_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_truncate_exit)
}
void FtraceEvent::clear_ext4_truncate_exit() {
  if (event_case() == kExt4TruncateExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_truncate_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_unlink_enter(::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_unlink_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_unlink_enter));
    if (message_arena != submessage_arena) {
      ext4_unlink_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_unlink_enter, submessage_arena);
    }
    set_has_ext4_unlink_enter();
    _impl_.event_.ext4_unlink_enter_ = ext4_unlink_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_unlink_enter)
}
void FtraceEvent::clear_ext4_unlink_enter() {
  if (event_case() == kExt4UnlinkEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_unlink_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_unlink_exit(::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_unlink_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_unlink_exit));
    if (message_arena != submessage_arena) {
      ext4_unlink_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_unlink_exit, submessage_arena);
    }
    set_has_ext4_unlink_exit();
    _impl_.event_.ext4_unlink_exit_ = ext4_unlink_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_unlink_exit)
}
void FtraceEvent::clear_ext4_unlink_exit() {
  if (event_case() == kExt4UnlinkExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_unlink_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_write_begin(::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_write_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_write_begin));
    if (message_arena != submessage_arena) {
      ext4_write_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_write_begin, submessage_arena);
    }
    set_has_ext4_write_begin();
    _impl_.event_.ext4_write_begin_ = ext4_write_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_write_begin)
}
void FtraceEvent::clear_ext4_write_begin() {
  if (event_case() == kExt4WriteBegin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_write_begin_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_write_end(::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_write_end));
    if (message_arena != submessage_arena) {
      ext4_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_write_end, submessage_arena);
    }
    set_has_ext4_write_end();
    _impl_.event_.ext4_write_end_ = ext4_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_write_end)
}
void FtraceEvent::clear_ext4_write_end() {
  if (event_case() == kExt4WriteEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_write_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_writepage(::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_writepage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_writepage));
    if (message_arena != submessage_arena) {
      ext4_writepage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_writepage, submessage_arena);
    }
    set_has_ext4_writepage();
    _impl_.event_.ext4_writepage_ = ext4_writepage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_writepage)
}
void FtraceEvent::clear_ext4_writepage() {
  if (event_case() == kExt4Writepage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_writepage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_writepages(::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_writepages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_writepages));
    if (message_arena != submessage_arena) {
      ext4_writepages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_writepages, submessage_arena);
    }
    set_has_ext4_writepages();
    _impl_.event_.ext4_writepages_ = ext4_writepages;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_writepages)
}
void FtraceEvent::clear_ext4_writepages() {
  if (event_case() == kExt4Writepages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_writepages_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_writepages_result(::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_writepages_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_writepages_result));
    if (message_arena != submessage_arena) {
      ext4_writepages_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_writepages_result, submessage_arena);
    }
    set_has_ext4_writepages_result();
    _impl_.event_.ext4_writepages_result_ = ext4_writepages_result;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_writepages_result)
}
void FtraceEvent::clear_ext4_writepages_result() {
  if (event_case() == kExt4WritepagesResult) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_writepages_result_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ext4_zero_range(::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ext4_zero_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext4_zero_range));
    if (message_arena != submessage_arena) {
      ext4_zero_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext4_zero_range, submessage_arena);
    }
    set_has_ext4_zero_range();
    _impl_.event_.ext4_zero_range_ = ext4_zero_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ext4_zero_range)
}
void FtraceEvent::clear_ext4_zero_range() {
  if (event_case() == kExt4ZeroRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ext4_zero_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_task_newtask(::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (task_newtask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_newtask));
    if (message_arena != submessage_arena) {
      task_newtask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_newtask, submessage_arena);
    }
    set_has_task_newtask();
    _impl_.event_.task_newtask_ = task_newtask;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.task_newtask)
}
void FtraceEvent::clear_task_newtask() {
  if (event_case() == kTaskNewtask) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.task_newtask_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_task_rename(::perfetto::protos::TaskRenameFtraceEvent* task_rename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (task_rename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_rename));
    if (message_arena != submessage_arena) {
      task_rename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_rename, submessage_arena);
    }
    set_has_task_rename();
    _impl_.event_.task_rename_ = task_rename;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.task_rename)
}
void FtraceEvent::clear_task_rename() {
  if (event_case() == kTaskRename) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.task_rename_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_exec(::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_process_exec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_process_exec));
    if (message_arena != submessage_arena) {
      sched_process_exec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_exec, submessage_arena);
    }
    set_has_sched_process_exec();
    _impl_.event_.sched_process_exec_ = sched_process_exec;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_exec)
}
void FtraceEvent::clear_sched_process_exec() {
  if (event_case() == kSchedProcessExec) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_process_exec_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_exit(::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_process_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_process_exit));
    if (message_arena != submessage_arena) {
      sched_process_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_exit, submessage_arena);
    }
    set_has_sched_process_exit();
    _impl_.event_.sched_process_exit_ = sched_process_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_exit)
}
void FtraceEvent::clear_sched_process_exit() {
  if (event_case() == kSchedProcessExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_process_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_fork(::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_process_fork) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_process_fork));
    if (message_arena != submessage_arena) {
      sched_process_fork = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_fork, submessage_arena);
    }
    set_has_sched_process_fork();
    _impl_.event_.sched_process_fork_ = sched_process_fork;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_fork)
}
void FtraceEvent::clear_sched_process_fork() {
  if (event_case() == kSchedProcessFork) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_process_fork_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_free(::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_process_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_process_free));
    if (message_arena != submessage_arena) {
      sched_process_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_free, submessage_arena);
    }
    set_has_sched_process_free();
    _impl_.event_.sched_process_free_ = sched_process_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_free)
}
void FtraceEvent::clear_sched_process_free() {
  if (event_case() == kSchedProcessFree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_process_free_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_hang(::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_process_hang) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_process_hang));
    if (message_arena != submessage_arena) {
      sched_process_hang = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_hang, submessage_arena);
    }
    set_has_sched_process_hang();
    _impl_.event_.sched_process_hang_ = sched_process_hang;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_hang)
}
void FtraceEvent::clear_sched_process_hang() {
  if (event_case() == kSchedProcessHang) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_process_hang_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_process_wait(::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_process_wait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_process_wait));
    if (message_arena != submessage_arena) {
      sched_process_wait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_process_wait, submessage_arena);
    }
    set_has_sched_process_wait();
    _impl_.event_.sched_process_wait_ = sched_process_wait;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_process_wait)
}
void FtraceEvent::clear_sched_process_wait() {
  if (event_case() == kSchedProcessWait) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_process_wait_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_do_submit_bio(::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_do_submit_bio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_do_submit_bio));
    if (message_arena != submessage_arena) {
      f2fs_do_submit_bio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_do_submit_bio, submessage_arena);
    }
    set_has_f2fs_do_submit_bio();
    _impl_.event_.f2fs_do_submit_bio_ = f2fs_do_submit_bio;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
}
void FtraceEvent::clear_f2fs_do_submit_bio() {
  if (event_case() == kF2FsDoSubmitBio) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_do_submit_bio_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_evict_inode(::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_evict_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_evict_inode));
    if (message_arena != submessage_arena) {
      f2fs_evict_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_evict_inode, submessage_arena);
    }
    set_has_f2fs_evict_inode();
    _impl_.event_.f2fs_evict_inode_ = f2fs_evict_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_evict_inode)
}
void FtraceEvent::clear_f2fs_evict_inode() {
  if (event_case() == kF2FsEvictInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_evict_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_fallocate(::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_fallocate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_fallocate));
    if (message_arena != submessage_arena) {
      f2fs_fallocate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_fallocate, submessage_arena);
    }
    set_has_f2fs_fallocate();
    _impl_.event_.f2fs_fallocate_ = f2fs_fallocate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_fallocate)
}
void FtraceEvent::clear_f2fs_fallocate() {
  if (event_case() == kF2FsFallocate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_fallocate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_get_data_block(::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_get_data_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_get_data_block));
    if (message_arena != submessage_arena) {
      f2fs_get_data_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_get_data_block, submessage_arena);
    }
    set_has_f2fs_get_data_block();
    _impl_.event_.f2fs_get_data_block_ = f2fs_get_data_block;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_get_data_block)
}
void FtraceEvent::clear_f2fs_get_data_block() {
  if (event_case() == kF2FsGetDataBlock) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_get_data_block_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_get_victim(::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_get_victim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_get_victim));
    if (message_arena != submessage_arena) {
      f2fs_get_victim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_get_victim, submessage_arena);
    }
    set_has_f2fs_get_victim();
    _impl_.event_.f2fs_get_victim_ = f2fs_get_victim;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_get_victim)
}
void FtraceEvent::clear_f2fs_get_victim() {
  if (event_case() == kF2FsGetVictim) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_get_victim_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_iget(::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_iget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_iget));
    if (message_arena != submessage_arena) {
      f2fs_iget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_iget, submessage_arena);
    }
    set_has_f2fs_iget();
    _impl_.event_.f2fs_iget_ = f2fs_iget;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_iget)
}
void FtraceEvent::clear_f2fs_iget() {
  if (event_case() == kF2FsIget) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_iget_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_iget_exit(::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_iget_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_iget_exit));
    if (message_arena != submessage_arena) {
      f2fs_iget_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_iget_exit, submessage_arena);
    }
    set_has_f2fs_iget_exit();
    _impl_.event_.f2fs_iget_exit_ = f2fs_iget_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_iget_exit)
}
void FtraceEvent::clear_f2fs_iget_exit() {
  if (event_case() == kF2FsIgetExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_iget_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_new_inode(::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_new_inode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_new_inode));
    if (message_arena != submessage_arena) {
      f2fs_new_inode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_new_inode, submessage_arena);
    }
    set_has_f2fs_new_inode();
    _impl_.event_.f2fs_new_inode_ = f2fs_new_inode;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_new_inode)
}
void FtraceEvent::clear_f2fs_new_inode() {
  if (event_case() == kF2FsNewInode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_new_inode_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_readpage(::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_readpage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_readpage));
    if (message_arena != submessage_arena) {
      f2fs_readpage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_readpage, submessage_arena);
    }
    set_has_f2fs_readpage();
    _impl_.event_.f2fs_readpage_ = f2fs_readpage;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_readpage)
}
void FtraceEvent::clear_f2fs_readpage() {
  if (event_case() == kF2FsReadpage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_readpage_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_reserve_new_block(::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_reserve_new_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_reserve_new_block));
    if (message_arena != submessage_arena) {
      f2fs_reserve_new_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_reserve_new_block, submessage_arena);
    }
    set_has_f2fs_reserve_new_block();
    _impl_.event_.f2fs_reserve_new_block_ = f2fs_reserve_new_block;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
}
void FtraceEvent::clear_f2fs_reserve_new_block() {
  if (event_case() == kF2FsReserveNewBlock) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_reserve_new_block_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_set_page_dirty(::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_set_page_dirty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_set_page_dirty));
    if (message_arena != submessage_arena) {
      f2fs_set_page_dirty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_set_page_dirty, submessage_arena);
    }
    set_has_f2fs_set_page_dirty();
    _impl_.event_.f2fs_set_page_dirty_ = f2fs_set_page_dirty;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
}
void FtraceEvent::clear_f2fs_set_page_dirty() {
  if (event_case() == kF2FsSetPageDirty) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_set_page_dirty_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_submit_write_page(::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_submit_write_page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_submit_write_page));
    if (message_arena != submessage_arena) {
      f2fs_submit_write_page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_submit_write_page, submessage_arena);
    }
    set_has_f2fs_submit_write_page();
    _impl_.event_.f2fs_submit_write_page_ = f2fs_submit_write_page;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
}
void FtraceEvent::clear_f2fs_submit_write_page() {
  if (event_case() == kF2FsSubmitWritePage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_submit_write_page_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_sync_file_enter(::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_sync_file_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_sync_file_enter));
    if (message_arena != submessage_arena) {
      f2fs_sync_file_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_sync_file_enter, submessage_arena);
    }
    set_has_f2fs_sync_file_enter();
    _impl_.event_.f2fs_sync_file_enter_ = f2fs_sync_file_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
}
void FtraceEvent::clear_f2fs_sync_file_enter() {
  if (event_case() == kF2FsSyncFileEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_sync_file_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_sync_file_exit(::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_sync_file_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_sync_file_exit));
    if (message_arena != submessage_arena) {
      f2fs_sync_file_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_sync_file_exit, submessage_arena);
    }
    set_has_f2fs_sync_file_exit();
    _impl_.event_.f2fs_sync_file_exit_ = f2fs_sync_file_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
}
void FtraceEvent::clear_f2fs_sync_file_exit() {
  if (event_case() == kF2FsSyncFileExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_sync_file_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_sync_fs(::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_sync_fs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_sync_fs));
    if (message_arena != submessage_arena) {
      f2fs_sync_fs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_sync_fs, submessage_arena);
    }
    set_has_f2fs_sync_fs();
    _impl_.event_.f2fs_sync_fs_ = f2fs_sync_fs;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_fs)
}
void FtraceEvent::clear_f2fs_sync_fs() {
  if (event_case() == kF2FsSyncFs) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_sync_fs_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate(::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate));
    if (message_arena != submessage_arena) {
      f2fs_truncate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate, submessage_arena);
    }
    set_has_f2fs_truncate();
    _impl_.event_.f2fs_truncate_ = f2fs_truncate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate)
}
void FtraceEvent::clear_f2fs_truncate() {
  if (event_case() == kF2FsTruncate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_blocks_enter(::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_blocks_enter));
    if (message_arena != submessage_arena) {
      f2fs_truncate_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_blocks_enter, submessage_arena);
    }
    set_has_f2fs_truncate_blocks_enter();
    _impl_.event_.f2fs_truncate_blocks_enter_ = f2fs_truncate_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
}
void FtraceEvent::clear_f2fs_truncate_blocks_enter() {
  if (event_case() == kF2FsTruncateBlocksEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_blocks_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_blocks_exit(::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_blocks_exit));
    if (message_arena != submessage_arena) {
      f2fs_truncate_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_blocks_exit, submessage_arena);
    }
    set_has_f2fs_truncate_blocks_exit();
    _impl_.event_.f2fs_truncate_blocks_exit_ = f2fs_truncate_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
}
void FtraceEvent::clear_f2fs_truncate_blocks_exit() {
  if (event_case() == kF2FsTruncateBlocksExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_blocks_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_data_blocks_range(::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_data_blocks_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_data_blocks_range));
    if (message_arena != submessage_arena) {
      f2fs_truncate_data_blocks_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_data_blocks_range, submessage_arena);
    }
    set_has_f2fs_truncate_data_blocks_range();
    _impl_.event_.f2fs_truncate_data_blocks_range_ = f2fs_truncate_data_blocks_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
}
void FtraceEvent::clear_f2fs_truncate_data_blocks_range() {
  if (event_case() == kF2FsTruncateDataBlocksRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_data_blocks_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_inode_blocks_enter(::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_inode_blocks_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_inode_blocks_enter));
    if (message_arena != submessage_arena) {
      f2fs_truncate_inode_blocks_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_inode_blocks_enter, submessage_arena);
    }
    set_has_f2fs_truncate_inode_blocks_enter();
    _impl_.event_.f2fs_truncate_inode_blocks_enter_ = f2fs_truncate_inode_blocks_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
}
void FtraceEvent::clear_f2fs_truncate_inode_blocks_enter() {
  if (event_case() == kF2FsTruncateInodeBlocksEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_inode_blocks_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_inode_blocks_exit(::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_inode_blocks_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_inode_blocks_exit));
    if (message_arena != submessage_arena) {
      f2fs_truncate_inode_blocks_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_inode_blocks_exit, submessage_arena);
    }
    set_has_f2fs_truncate_inode_blocks_exit();
    _impl_.event_.f2fs_truncate_inode_blocks_exit_ = f2fs_truncate_inode_blocks_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
}
void FtraceEvent::clear_f2fs_truncate_inode_blocks_exit() {
  if (event_case() == kF2FsTruncateInodeBlocksExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_inode_blocks_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_node(::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_node));
    if (message_arena != submessage_arena) {
      f2fs_truncate_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_node, submessage_arena);
    }
    set_has_f2fs_truncate_node();
    _impl_.event_.f2fs_truncate_node_ = f2fs_truncate_node;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_node)
}
void FtraceEvent::clear_f2fs_truncate_node() {
  if (event_case() == kF2FsTruncateNode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_node_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_nodes_enter(::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_nodes_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_nodes_enter));
    if (message_arena != submessage_arena) {
      f2fs_truncate_nodes_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_nodes_enter, submessage_arena);
    }
    set_has_f2fs_truncate_nodes_enter();
    _impl_.event_.f2fs_truncate_nodes_enter_ = f2fs_truncate_nodes_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
}
void FtraceEvent::clear_f2fs_truncate_nodes_enter() {
  if (event_case() == kF2FsTruncateNodesEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_nodes_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_nodes_exit(::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_nodes_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_nodes_exit));
    if (message_arena != submessage_arena) {
      f2fs_truncate_nodes_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_nodes_exit, submessage_arena);
    }
    set_has_f2fs_truncate_nodes_exit();
    _impl_.event_.f2fs_truncate_nodes_exit_ = f2fs_truncate_nodes_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
}
void FtraceEvent::clear_f2fs_truncate_nodes_exit() {
  if (event_case() == kF2FsTruncateNodesExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_nodes_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_truncate_partial_nodes(::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_truncate_partial_nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_truncate_partial_nodes));
    if (message_arena != submessage_arena) {
      f2fs_truncate_partial_nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_truncate_partial_nodes, submessage_arena);
    }
    set_has_f2fs_truncate_partial_nodes();
    _impl_.event_.f2fs_truncate_partial_nodes_ = f2fs_truncate_partial_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
}
void FtraceEvent::clear_f2fs_truncate_partial_nodes() {
  if (event_case() == kF2FsTruncatePartialNodes) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_truncate_partial_nodes_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_unlink_enter(::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_unlink_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_unlink_enter));
    if (message_arena != submessage_arena) {
      f2fs_unlink_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_unlink_enter, submessage_arena);
    }
    set_has_f2fs_unlink_enter();
    _impl_.event_.f2fs_unlink_enter_ = f2fs_unlink_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
}
void FtraceEvent::clear_f2fs_unlink_enter() {
  if (event_case() == kF2FsUnlinkEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_unlink_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_unlink_exit(::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_unlink_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_unlink_exit));
    if (message_arena != submessage_arena) {
      f2fs_unlink_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_unlink_exit, submessage_arena);
    }
    set_has_f2fs_unlink_exit();
    _impl_.event_.f2fs_unlink_exit_ = f2fs_unlink_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
}
void FtraceEvent::clear_f2fs_unlink_exit() {
  if (event_case() == kF2FsUnlinkExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_unlink_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_vm_page_mkwrite(::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_vm_page_mkwrite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_vm_page_mkwrite));
    if (message_arena != submessage_arena) {
      f2fs_vm_page_mkwrite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_vm_page_mkwrite, submessage_arena);
    }
    set_has_f2fs_vm_page_mkwrite();
    _impl_.event_.f2fs_vm_page_mkwrite_ = f2fs_vm_page_mkwrite;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
}
void FtraceEvent::clear_f2fs_vm_page_mkwrite() {
  if (event_case() == kF2FsVmPageMkwrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_vm_page_mkwrite_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_write_begin(::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_write_begin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_write_begin));
    if (message_arena != submessage_arena) {
      f2fs_write_begin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_write_begin, submessage_arena);
    }
    set_has_f2fs_write_begin();
    _impl_.event_.f2fs_write_begin_ = f2fs_write_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_begin)
}
void FtraceEvent::clear_f2fs_write_begin() {
  if (event_case() == kF2FsWriteBegin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_write_begin_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_write_checkpoint(::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_write_checkpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_write_checkpoint));
    if (message_arena != submessage_arena) {
      f2fs_write_checkpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_write_checkpoint, submessage_arena);
    }
    set_has_f2fs_write_checkpoint();
    _impl_.event_.f2fs_write_checkpoint_ = f2fs_write_checkpoint;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
}
void FtraceEvent::clear_f2fs_write_checkpoint() {
  if (event_case() == kF2FsWriteCheckpoint) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_write_checkpoint_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_write_end(::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_write_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_write_end));
    if (message_arena != submessage_arena) {
      f2fs_write_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_write_end, submessage_arena);
    }
    set_has_f2fs_write_end();
    _impl_.event_.f2fs_write_end_ = f2fs_write_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_end)
}
void FtraceEvent::clear_f2fs_write_end() {
  if (event_case() == kF2FsWriteEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_write_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_iommu_end(::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (alloc_pages_iommu_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloc_pages_iommu_end));
    if (message_arena != submessage_arena) {
      alloc_pages_iommu_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_iommu_end, submessage_arena);
    }
    set_has_alloc_pages_iommu_end();
    _impl_.event_.alloc_pages_iommu_end_ = alloc_pages_iommu_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
}
void FtraceEvent::clear_alloc_pages_iommu_end() {
  if (event_case() == kAllocPagesIommuEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.alloc_pages_iommu_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_iommu_fail(::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (alloc_pages_iommu_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloc_pages_iommu_fail));
    if (message_arena != submessage_arena) {
      alloc_pages_iommu_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_iommu_fail, submessage_arena);
    }
    set_has_alloc_pages_iommu_fail();
    _impl_.event_.alloc_pages_iommu_fail_ = alloc_pages_iommu_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
}
void FtraceEvent::clear_alloc_pages_iommu_fail() {
  if (event_case() == kAllocPagesIommuFail) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.alloc_pages_iommu_fail_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_iommu_start(::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (alloc_pages_iommu_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloc_pages_iommu_start));
    if (message_arena != submessage_arena) {
      alloc_pages_iommu_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_iommu_start, submessage_arena);
    }
    set_has_alloc_pages_iommu_start();
    _impl_.event_.alloc_pages_iommu_start_ = alloc_pages_iommu_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
}
void FtraceEvent::clear_alloc_pages_iommu_start() {
  if (event_case() == kAllocPagesIommuStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.alloc_pages_iommu_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_sys_end(::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (alloc_pages_sys_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloc_pages_sys_end));
    if (message_arena != submessage_arena) {
      alloc_pages_sys_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_sys_end, submessage_arena);
    }
    set_has_alloc_pages_sys_end();
    _impl_.event_.alloc_pages_sys_end_ = alloc_pages_sys_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
}
void FtraceEvent::clear_alloc_pages_sys_end() {
  if (event_case() == kAllocPagesSysEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.alloc_pages_sys_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_sys_fail(::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (alloc_pages_sys_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloc_pages_sys_fail));
    if (message_arena != submessage_arena) {
      alloc_pages_sys_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_sys_fail, submessage_arena);
    }
    set_has_alloc_pages_sys_fail();
    _impl_.event_.alloc_pages_sys_fail_ = alloc_pages_sys_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
}
void FtraceEvent::clear_alloc_pages_sys_fail() {
  if (event_case() == kAllocPagesSysFail) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.alloc_pages_sys_fail_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_alloc_pages_sys_start(::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (alloc_pages_sys_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alloc_pages_sys_start));
    if (message_arena != submessage_arena) {
      alloc_pages_sys_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alloc_pages_sys_start, submessage_arena);
    }
    set_has_alloc_pages_sys_start();
    _impl_.event_.alloc_pages_sys_start_ = alloc_pages_sys_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
}
void FtraceEvent::clear_alloc_pages_sys_start() {
  if (event_case() == kAllocPagesSysStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.alloc_pages_sys_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_alloc_contiguous_retry(::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_alloc_contiguous_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_alloc_contiguous_retry));
    if (message_arena != submessage_arena) {
      dma_alloc_contiguous_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_alloc_contiguous_retry, submessage_arena);
    }
    set_has_dma_alloc_contiguous_retry();
    _impl_.event_.dma_alloc_contiguous_retry_ = dma_alloc_contiguous_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
}
void FtraceEvent::clear_dma_alloc_contiguous_retry() {
  if (event_case() == kDmaAllocContiguousRetry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_alloc_contiguous_retry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_iommu_map_range(::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (iommu_map_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iommu_map_range));
    if (message_arena != submessage_arena) {
      iommu_map_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iommu_map_range, submessage_arena);
    }
    set_has_iommu_map_range();
    _impl_.event_.iommu_map_range_ = iommu_map_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.iommu_map_range)
}
void FtraceEvent::clear_iommu_map_range() {
  if (event_case() == kIommuMapRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.iommu_map_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_iommu_sec_ptbl_map_range_end(::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (iommu_sec_ptbl_map_range_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iommu_sec_ptbl_map_range_end));
    if (message_arena != submessage_arena) {
      iommu_sec_ptbl_map_range_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iommu_sec_ptbl_map_range_end, submessage_arena);
    }
    set_has_iommu_sec_ptbl_map_range_end();
    _impl_.event_.iommu_sec_ptbl_map_range_end_ = iommu_sec_ptbl_map_range_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
}
void FtraceEvent::clear_iommu_sec_ptbl_map_range_end() {
  if (event_case() == kIommuSecPtblMapRangeEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.iommu_sec_ptbl_map_range_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_iommu_sec_ptbl_map_range_start(::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (iommu_sec_ptbl_map_range_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iommu_sec_ptbl_map_range_start));
    if (message_arena != submessage_arena) {
      iommu_sec_ptbl_map_range_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iommu_sec_ptbl_map_range_start, submessage_arena);
    }
    set_has_iommu_sec_ptbl_map_range_start();
    _impl_.event_.iommu_sec_ptbl_map_range_start_ = iommu_sec_ptbl_map_range_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
}
void FtraceEvent::clear_iommu_sec_ptbl_map_range_start() {
  if (event_case() == kIommuSecPtblMapRangeStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.iommu_sec_ptbl_map_range_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_end(::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_alloc_buffer_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_alloc_buffer_end));
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_end, submessage_arena);
    }
    set_has_ion_alloc_buffer_end();
    _impl_.event_.ion_alloc_buffer_end_ = ion_alloc_buffer_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
}
void FtraceEvent::clear_ion_alloc_buffer_end() {
  if (event_case() == kIonAllocBufferEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_alloc_buffer_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_fail(::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_alloc_buffer_fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_alloc_buffer_fail));
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_fail, submessage_arena);
    }
    set_has_ion_alloc_buffer_fail();
    _impl_.event_.ion_alloc_buffer_fail_ = ion_alloc_buffer_fail;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
}
void FtraceEvent::clear_ion_alloc_buffer_fail() {
  if (event_case() == kIonAllocBufferFail) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_alloc_buffer_fail_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_fallback(::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_alloc_buffer_fallback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_alloc_buffer_fallback));
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_fallback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_fallback, submessage_arena);
    }
    set_has_ion_alloc_buffer_fallback();
    _impl_.event_.ion_alloc_buffer_fallback_ = ion_alloc_buffer_fallback;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
}
void FtraceEvent::clear_ion_alloc_buffer_fallback() {
  if (event_case() == kIonAllocBufferFallback) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_alloc_buffer_fallback_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_alloc_buffer_start(::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_alloc_buffer_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_alloc_buffer_start));
    if (message_arena != submessage_arena) {
      ion_alloc_buffer_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_alloc_buffer_start, submessage_arena);
    }
    set_has_ion_alloc_buffer_start();
    _impl_.event_.ion_alloc_buffer_start_ = ion_alloc_buffer_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
}
void FtraceEvent::clear_ion_alloc_buffer_start() {
  if (event_case() == kIonAllocBufferStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_alloc_buffer_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_cp_alloc_retry(::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_cp_alloc_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_cp_alloc_retry));
    if (message_arena != submessage_arena) {
      ion_cp_alloc_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_cp_alloc_retry, submessage_arena);
    }
    set_has_ion_cp_alloc_retry();
    _impl_.event_.ion_cp_alloc_retry_ = ion_cp_alloc_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
}
void FtraceEvent::clear_ion_cp_alloc_retry() {
  if (event_case() == kIonCpAllocRetry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_cp_alloc_retry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_cp_secure_buffer_end(::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_cp_secure_buffer_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_cp_secure_buffer_end));
    if (message_arena != submessage_arena) {
      ion_cp_secure_buffer_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_cp_secure_buffer_end, submessage_arena);
    }
    set_has_ion_cp_secure_buffer_end();
    _impl_.event_.ion_cp_secure_buffer_end_ = ion_cp_secure_buffer_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
}
void FtraceEvent::clear_ion_cp_secure_buffer_end() {
  if (event_case() == kIonCpSecureBufferEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_cp_secure_buffer_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_cp_secure_buffer_start(::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_cp_secure_buffer_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_cp_secure_buffer_start));
    if (message_arena != submessage_arena) {
      ion_cp_secure_buffer_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_cp_secure_buffer_start, submessage_arena);
    }
    set_has_ion_cp_secure_buffer_start();
    _impl_.event_.ion_cp_secure_buffer_start_ = ion_cp_secure_buffer_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
}
void FtraceEvent::clear_ion_cp_secure_buffer_start() {
  if (event_case() == kIonCpSecureBufferStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_cp_secure_buffer_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_prefetching(::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_prefetching) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_prefetching));
    if (message_arena != submessage_arena) {
      ion_prefetching = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_prefetching, submessage_arena);
    }
    set_has_ion_prefetching();
    _impl_.event_.ion_prefetching_ = ion_prefetching;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_prefetching)
}
void FtraceEvent::clear_ion_prefetching() {
  if (event_case() == kIonPrefetching) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_prefetching_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_add_to_pool_end(::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_secure_cma_add_to_pool_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_secure_cma_add_to_pool_end));
    if (message_arena != submessage_arena) {
      ion_secure_cma_add_to_pool_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_add_to_pool_end, submessage_arena);
    }
    set_has_ion_secure_cma_add_to_pool_end();
    _impl_.event_.ion_secure_cma_add_to_pool_end_ = ion_secure_cma_add_to_pool_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
}
void FtraceEvent::clear_ion_secure_cma_add_to_pool_end() {
  if (event_case() == kIonSecureCmaAddToPoolEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_secure_cma_add_to_pool_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_add_to_pool_start(::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_secure_cma_add_to_pool_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_secure_cma_add_to_pool_start));
    if (message_arena != submessage_arena) {
      ion_secure_cma_add_to_pool_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_add_to_pool_start, submessage_arena);
    }
    set_has_ion_secure_cma_add_to_pool_start();
    _impl_.event_.ion_secure_cma_add_to_pool_start_ = ion_secure_cma_add_to_pool_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
}
void FtraceEvent::clear_ion_secure_cma_add_to_pool_start() {
  if (event_case() == kIonSecureCmaAddToPoolStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_secure_cma_add_to_pool_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_allocate_end(::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_secure_cma_allocate_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_secure_cma_allocate_end));
    if (message_arena != submessage_arena) {
      ion_secure_cma_allocate_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_allocate_end, submessage_arena);
    }
    set_has_ion_secure_cma_allocate_end();
    _impl_.event_.ion_secure_cma_allocate_end_ = ion_secure_cma_allocate_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
}
void FtraceEvent::clear_ion_secure_cma_allocate_end() {
  if (event_case() == kIonSecureCmaAllocateEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_secure_cma_allocate_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_allocate_start(::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_secure_cma_allocate_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_secure_cma_allocate_start));
    if (message_arena != submessage_arena) {
      ion_secure_cma_allocate_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_allocate_start, submessage_arena);
    }
    set_has_ion_secure_cma_allocate_start();
    _impl_.event_.ion_secure_cma_allocate_start_ = ion_secure_cma_allocate_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
}
void FtraceEvent::clear_ion_secure_cma_allocate_start() {
  if (event_case() == kIonSecureCmaAllocateStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_secure_cma_allocate_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_shrink_pool_end(::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_secure_cma_shrink_pool_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_secure_cma_shrink_pool_end));
    if (message_arena != submessage_arena) {
      ion_secure_cma_shrink_pool_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_shrink_pool_end, submessage_arena);
    }
    set_has_ion_secure_cma_shrink_pool_end();
    _impl_.event_.ion_secure_cma_shrink_pool_end_ = ion_secure_cma_shrink_pool_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
}
void FtraceEvent::clear_ion_secure_cma_shrink_pool_end() {
  if (event_case() == kIonSecureCmaShrinkPoolEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_secure_cma_shrink_pool_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_secure_cma_shrink_pool_start(::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_secure_cma_shrink_pool_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_secure_cma_shrink_pool_start));
    if (message_arena != submessage_arena) {
      ion_secure_cma_shrink_pool_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_secure_cma_shrink_pool_start, submessage_arena);
    }
    set_has_ion_secure_cma_shrink_pool_start();
    _impl_.event_.ion_secure_cma_shrink_pool_start_ = ion_secure_cma_shrink_pool_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
}
void FtraceEvent::clear_ion_secure_cma_shrink_pool_start() {
  if (event_case() == kIonSecureCmaShrinkPoolStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_secure_cma_shrink_pool_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kfree(::perfetto::protos::KfreeFtraceEvent* kfree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kfree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kfree));
    if (message_arena != submessage_arena) {
      kfree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kfree, submessage_arena);
    }
    set_has_kfree();
    _impl_.event_.kfree_ = kfree;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kfree)
}
void FtraceEvent::clear_kfree() {
  if (event_case() == kKfree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kfree_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmalloc(::perfetto::protos::KmallocFtraceEvent* kmalloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kmalloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmalloc));
    if (message_arena != submessage_arena) {
      kmalloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmalloc, submessage_arena);
    }
    set_has_kmalloc();
    _impl_.event_.kmalloc_ = kmalloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmalloc)
}
void FtraceEvent::clear_kmalloc() {
  if (event_case() == kKmalloc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kmalloc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmalloc_node(::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kmalloc_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmalloc_node));
    if (message_arena != submessage_arena) {
      kmalloc_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmalloc_node, submessage_arena);
    }
    set_has_kmalloc_node();
    _impl_.event_.kmalloc_node_ = kmalloc_node;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmalloc_node)
}
void FtraceEvent::clear_kmalloc_node() {
  if (event_case() == kKmallocNode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kmalloc_node_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmem_cache_alloc(::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kmem_cache_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmem_cache_alloc));
    if (message_arena != submessage_arena) {
      kmem_cache_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmem_cache_alloc, submessage_arena);
    }
    set_has_kmem_cache_alloc();
    _impl_.event_.kmem_cache_alloc_ = kmem_cache_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_alloc)
}
void FtraceEvent::clear_kmem_cache_alloc() {
  if (event_case() == kKmemCacheAlloc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kmem_cache_alloc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmem_cache_alloc_node(::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kmem_cache_alloc_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmem_cache_alloc_node));
    if (message_arena != submessage_arena) {
      kmem_cache_alloc_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmem_cache_alloc_node, submessage_arena);
    }
    set_has_kmem_cache_alloc_node();
    _impl_.event_.kmem_cache_alloc_node_ = kmem_cache_alloc_node;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
}
void FtraceEvent::clear_kmem_cache_alloc_node() {
  if (event_case() == kKmemCacheAllocNode) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kmem_cache_alloc_node_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kmem_cache_free(::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kmem_cache_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kmem_cache_free));
    if (message_arena != submessage_arena) {
      kmem_cache_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmem_cache_free, submessage_arena);
    }
    set_has_kmem_cache_free();
    _impl_.event_.kmem_cache_free_ = kmem_cache_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_free)
}
void FtraceEvent::clear_kmem_cache_free() {
  if (event_case() == kKmemCacheFree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kmem_cache_free_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_migrate_pages_end(::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (migrate_pages_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrate_pages_end));
    if (message_arena != submessage_arena) {
      migrate_pages_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_pages_end, submessage_arena);
    }
    set_has_migrate_pages_end();
    _impl_.event_.migrate_pages_end_ = migrate_pages_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.migrate_pages_end)
}
void FtraceEvent::clear_migrate_pages_end() {
  if (event_case() == kMigratePagesEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.migrate_pages_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_migrate_pages_start(::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (migrate_pages_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrate_pages_start));
    if (message_arena != submessage_arena) {
      migrate_pages_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_pages_start, submessage_arena);
    }
    set_has_migrate_pages_start();
    _impl_.event_.migrate_pages_start_ = migrate_pages_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.migrate_pages_start)
}
void FtraceEvent::clear_migrate_pages_start() {
  if (event_case() == kMigratePagesStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.migrate_pages_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_migrate_retry(::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (migrate_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(migrate_retry));
    if (message_arena != submessage_arena) {
      migrate_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, migrate_retry, submessage_arena);
    }
    set_has_migrate_retry();
    _impl_.event_.migrate_retry_ = migrate_retry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.migrate_retry)
}
void FtraceEvent::clear_migrate_retry() {
  if (event_case() == kMigrateRetry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.migrate_retry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_alloc(::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_page_alloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_page_alloc));
    if (message_arena != submessage_arena) {
      mm_page_alloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_alloc, submessage_arena);
    }
    set_has_mm_page_alloc();
    _impl_.event_.mm_page_alloc_ = mm_page_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc)
}
void FtraceEvent::clear_mm_page_alloc() {
  if (event_case() == kMmPageAlloc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_page_alloc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_alloc_extfrag(::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_page_alloc_extfrag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_page_alloc_extfrag));
    if (message_arena != submessage_arena) {
      mm_page_alloc_extfrag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_alloc_extfrag, submessage_arena);
    }
    set_has_mm_page_alloc_extfrag();
    _impl_.event_.mm_page_alloc_extfrag_ = mm_page_alloc_extfrag;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
}
void FtraceEvent::clear_mm_page_alloc_extfrag() {
  if (event_case() == kMmPageAllocExtfrag) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_page_alloc_extfrag_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_alloc_zone_locked(::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_page_alloc_zone_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_page_alloc_zone_locked));
    if (message_arena != submessage_arena) {
      mm_page_alloc_zone_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_alloc_zone_locked, submessage_arena);
    }
    set_has_mm_page_alloc_zone_locked();
    _impl_.event_.mm_page_alloc_zone_locked_ = mm_page_alloc_zone_locked;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
}
void FtraceEvent::clear_mm_page_alloc_zone_locked() {
  if (event_case() == kMmPageAllocZoneLocked) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_page_alloc_zone_locked_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_free(::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_page_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_page_free));
    if (message_arena != submessage_arena) {
      mm_page_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_free, submessage_arena);
    }
    set_has_mm_page_free();
    _impl_.event_.mm_page_free_ = mm_page_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_free)
}
void FtraceEvent::clear_mm_page_free() {
  if (event_case() == kMmPageFree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_page_free_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_free_batched(::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_page_free_batched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_page_free_batched));
    if (message_arena != submessage_arena) {
      mm_page_free_batched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_free_batched, submessage_arena);
    }
    set_has_mm_page_free_batched();
    _impl_.event_.mm_page_free_batched_ = mm_page_free_batched;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_free_batched)
}
void FtraceEvent::clear_mm_page_free_batched() {
  if (event_case() == kMmPageFreeBatched) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_page_free_batched_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_page_pcpu_drain(::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_page_pcpu_drain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_page_pcpu_drain));
    if (message_arena != submessage_arena) {
      mm_page_pcpu_drain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_page_pcpu_drain, submessage_arena);
    }
    set_has_mm_page_pcpu_drain();
    _impl_.event_.mm_page_pcpu_drain_ = mm_page_pcpu_drain;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
}
void FtraceEvent::clear_mm_page_pcpu_drain() {
  if (event_case() == kMmPagePcpuDrain) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_page_pcpu_drain_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_rss_stat(::perfetto::protos::RssStatFtraceEvent* rss_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (rss_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rss_stat));
    if (message_arena != submessage_arena) {
      rss_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rss_stat, submessage_arena);
    }
    set_has_rss_stat();
    _impl_.event_.rss_stat_ = rss_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.rss_stat)
}
void FtraceEvent::clear_rss_stat() {
  if (event_case() == kRssStat) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.rss_stat_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_heap_shrink(::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_heap_shrink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_heap_shrink));
    if (message_arena != submessage_arena) {
      ion_heap_shrink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_heap_shrink, submessage_arena);
    }
    set_has_ion_heap_shrink();
    _impl_.event_.ion_heap_shrink_ = ion_heap_shrink;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_heap_shrink)
}
void FtraceEvent::clear_ion_heap_shrink() {
  if (event_case() == kIonHeapShrink) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_heap_shrink_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_heap_grow(::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_heap_grow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_heap_grow));
    if (message_arena != submessage_arena) {
      ion_heap_grow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_heap_grow, submessage_arena);
    }
    set_has_ion_heap_grow();
    _impl_.event_.ion_heap_grow_ = ion_heap_grow;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_heap_grow)
}
void FtraceEvent::clear_ion_heap_grow() {
  if (event_case() == kIonHeapGrow) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_heap_grow_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_init(::perfetto::protos::FenceInitFtraceEvent* fence_init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (fence_init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_init));
    if (message_arena != submessage_arena) {
      fence_init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_init, submessage_arena);
    }
    set_has_fence_init();
    _impl_.event_.fence_init_ = fence_init;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_init)
}
void FtraceEvent::clear_fence_init() {
  if (event_case() == kFenceInit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.fence_init_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_destroy(::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (fence_destroy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_destroy));
    if (message_arena != submessage_arena) {
      fence_destroy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_destroy, submessage_arena);
    }
    set_has_fence_destroy();
    _impl_.event_.fence_destroy_ = fence_destroy;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_destroy)
}
void FtraceEvent::clear_fence_destroy() {
  if (event_case() == kFenceDestroy) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.fence_destroy_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_enable_signal(::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (fence_enable_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_enable_signal));
    if (message_arena != submessage_arena) {
      fence_enable_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_enable_signal, submessage_arena);
    }
    set_has_fence_enable_signal();
    _impl_.event_.fence_enable_signal_ = fence_enable_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_enable_signal)
}
void FtraceEvent::clear_fence_enable_signal() {
  if (event_case() == kFenceEnableSignal) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.fence_enable_signal_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fence_signaled(::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (fence_signaled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_signaled));
    if (message_arena != submessage_arena) {
      fence_signaled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_signaled, submessage_arena);
    }
    set_has_fence_signaled();
    _impl_.event_.fence_signaled_ = fence_signaled;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fence_signaled)
}
void FtraceEvent::clear_fence_signaled() {
  if (event_case() == kFenceSignaled) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.fence_signaled_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clk_enable(::perfetto::protos::ClkEnableFtraceEvent* clk_enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (clk_enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clk_enable));
    if (message_arena != submessage_arena) {
      clk_enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk_enable, submessage_arena);
    }
    set_has_clk_enable();
    _impl_.event_.clk_enable_ = clk_enable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clk_enable)
}
void FtraceEvent::clear_clk_enable() {
  if (event_case() == kClkEnable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.clk_enable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clk_disable(::perfetto::protos::ClkDisableFtraceEvent* clk_disable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (clk_disable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clk_disable));
    if (message_arena != submessage_arena) {
      clk_disable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk_disable, submessage_arena);
    }
    set_has_clk_disable();
    _impl_.event_.clk_disable_ = clk_disable;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clk_disable)
}
void FtraceEvent::clear_clk_disable() {
  if (event_case() == kClkDisable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.clk_disable_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_clk_set_rate(::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (clk_set_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clk_set_rate));
    if (message_arena != submessage_arena) {
      clk_set_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk_set_rate, submessage_arena);
    }
    set_has_clk_set_rate();
    _impl_.event_.clk_set_rate_ = clk_set_rate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.clk_set_rate)
}
void FtraceEvent::clear_clk_set_rate() {
  if (event_case() == kClkSetRate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.clk_set_rate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_binder_transaction_alloc_buf(::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (binder_transaction_alloc_buf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binder_transaction_alloc_buf));
    if (message_arena != submessage_arena) {
      binder_transaction_alloc_buf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binder_transaction_alloc_buf, submessage_arena);
    }
    set_has_binder_transaction_alloc_buf();
    _impl_.event_.binder_transaction_alloc_buf_ = binder_transaction_alloc_buf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
}
void FtraceEvent::clear_binder_transaction_alloc_buf() {
  if (event_case() == kBinderTransactionAllocBuf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.binder_transaction_alloc_buf_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_signal_deliver(::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (signal_deliver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_deliver));
    if (message_arena != submessage_arena) {
      signal_deliver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_deliver, submessage_arena);
    }
    set_has_signal_deliver();
    _impl_.event_.signal_deliver_ = signal_deliver;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.signal_deliver)
}
void FtraceEvent::clear_signal_deliver() {
  if (event_case() == kSignalDeliver) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.signal_deliver_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_signal_generate(::perfetto::protos::SignalGenerateFtraceEvent* signal_generate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (signal_generate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_generate));
    if (message_arena != submessage_arena) {
      signal_generate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_generate, submessage_arena);
    }
    set_has_signal_generate();
    _impl_.event_.signal_generate_ = signal_generate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.signal_generate)
}
void FtraceEvent::clear_signal_generate() {
  if (event_case() == kSignalGenerate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.signal_generate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_oom_score_adj_update(::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (oom_score_adj_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oom_score_adj_update));
    if (message_arena != submessage_arena) {
      oom_score_adj_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oom_score_adj_update, submessage_arena);
    }
    set_has_oom_score_adj_update();
    _impl_.event_.oom_score_adj_update_ = oom_score_adj_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.oom_score_adj_update)
}
void FtraceEvent::clear_oom_score_adj_update() {
  if (event_case() == kOomScoreAdjUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.oom_score_adj_update_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_generic(::perfetto::protos::GenericFtraceEvent* generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generic));
    if (message_arena != submessage_arena) {
      generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic, submessage_arena);
    }
    set_has_generic();
    _impl_.event_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.generic)
}
void FtraceEvent::clear_generic() {
  if (event_case() == kGeneric) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.generic_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_event_record(::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_event_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_event_record));
    if (message_arena != submessage_arena) {
      mm_event_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_event_record, submessage_arena);
    }
    set_has_mm_event_record();
    _impl_.event_.mm_event_record_ = mm_event_record;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_event_record)
}
void FtraceEvent::clear_mm_event_record() {
  if (event_case() == kMmEventRecord) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_event_record_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sys_enter(::perfetto::protos::SysEnterFtraceEvent* sys_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sys_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_enter));
    if (message_arena != submessage_arena) {
      sys_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_enter, submessage_arena);
    }
    set_has_sys_enter();
    _impl_.event_.sys_enter_ = sys_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sys_enter)
}
void FtraceEvent::clear_sys_enter() {
  if (event_case() == kSysEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sys_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sys_exit(::perfetto::protos::SysExitFtraceEvent* sys_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sys_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_exit));
    if (message_arena != submessage_arena) {
      sys_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_exit, submessage_arena);
    }
    set_has_sys_exit();
    _impl_.event_.sys_exit_ = sys_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sys_exit)
}
void FtraceEvent::clear_sys_exit() {
  if (event_case() == kSysExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sys_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_zero(::perfetto::protos::ZeroFtraceEvent* zero) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (zero) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zero));
    if (message_arena != submessage_arena) {
      zero = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zero, submessage_arena);
    }
    set_has_zero();
    _impl_.event_.zero_ = zero;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.zero)
}
void FtraceEvent::clear_zero() {
  if (event_case() == kZero) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.zero_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_gpu_frequency(::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (gpu_frequency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_frequency));
    if (message_arena != submessage_arena) {
      gpu_frequency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_frequency, submessage_arena);
    }
    set_has_gpu_frequency();
    _impl_.event_.gpu_frequency_ = gpu_frequency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.gpu_frequency)
}
void FtraceEvent::clear_gpu_frequency() {
  if (event_case() == kGpuFrequency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.gpu_frequency_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_tracing_mark_write(::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sde_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sde_tracing_mark_write));
    if (message_arena != submessage_arena) {
      sde_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_tracing_mark_write, submessage_arena);
    }
    set_has_sde_tracing_mark_write();
    _impl_.event_.sde_tracing_mark_write_ = sde_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
}
void FtraceEvent::clear_sde_tracing_mark_write() {
  if (event_case() == kSdeTracingMarkWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sde_tracing_mark_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mark_victim(::perfetto::protos::MarkVictimFtraceEvent* mark_victim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mark_victim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mark_victim));
    if (message_arena != submessage_arena) {
      mark_victim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mark_victim, submessage_arena);
    }
    set_has_mark_victim();
    _impl_.event_.mark_victim_ = mark_victim;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mark_victim)
}
void FtraceEvent::clear_mark_victim() {
  if (event_case() == kMarkVictim) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mark_victim_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_stat(::perfetto::protos::IonStatFtraceEvent* ion_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_stat));
    if (message_arena != submessage_arena) {
      ion_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_stat, submessage_arena);
    }
    set_has_ion_stat();
    _impl_.event_.ion_stat_ = ion_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_stat)
}
void FtraceEvent::clear_ion_stat() {
  if (event_case() == kIonStat) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_stat_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_buffer_create(::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_buffer_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_buffer_create));
    if (message_arena != submessage_arena) {
      ion_buffer_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_buffer_create, submessage_arena);
    }
    set_has_ion_buffer_create();
    _impl_.event_.ion_buffer_create_ = ion_buffer_create;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_buffer_create)
}
void FtraceEvent::clear_ion_buffer_create() {
  if (event_case() == kIonBufferCreate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_buffer_create_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ion_buffer_destroy(::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ion_buffer_destroy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ion_buffer_destroy));
    if (message_arena != submessage_arena) {
      ion_buffer_destroy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ion_buffer_destroy, submessage_arena);
    }
    set_has_ion_buffer_destroy();
    _impl_.event_.ion_buffer_destroy_ = ion_buffer_destroy;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ion_buffer_destroy)
}
void FtraceEvent::clear_ion_buffer_destroy() {
  if (event_case() == kIonBufferDestroy) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ion_buffer_destroy_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_scm_call_start(::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (scm_call_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scm_call_start));
    if (message_arena != submessage_arena) {
      scm_call_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scm_call_start, submessage_arena);
    }
    set_has_scm_call_start();
    _impl_.event_.scm_call_start_ = scm_call_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.scm_call_start)
}
void FtraceEvent::clear_scm_call_start() {
  if (event_case() == kScmCallStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.scm_call_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_scm_call_end(::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (scm_call_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scm_call_end));
    if (message_arena != submessage_arena) {
      scm_call_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scm_call_end, submessage_arena);
    }
    set_has_scm_call_end();
    _impl_.event_.scm_call_end_ = scm_call_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.scm_call_end)
}
void FtraceEvent::clear_scm_call_end() {
  if (event_case() == kScmCallEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.scm_call_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_gpu_mem_total(::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (gpu_mem_total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_mem_total));
    if (message_arena != submessage_arena) {
      gpu_mem_total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_mem_total, submessage_arena);
    }
    set_has_gpu_mem_total();
    _impl_.event_.gpu_mem_total_ = gpu_mem_total;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.gpu_mem_total)
}
void FtraceEvent::clear_gpu_mem_total() {
  if (event_case() == kGpuMemTotal) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.gpu_mem_total_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_thermal_temperature(::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (thermal_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thermal_temperature));
    if (message_arena != submessage_arena) {
      thermal_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thermal_temperature, submessage_arena);
    }
    set_has_thermal_temperature();
    _impl_.event_.thermal_temperature_ = thermal_temperature;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.thermal_temperature)
}
void FtraceEvent::clear_thermal_temperature() {
  if (event_case() == kThermalTemperature) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.thermal_temperature_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cdev_update(::perfetto::protos::CdevUpdateFtraceEvent* cdev_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cdev_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdev_update));
    if (message_arena != submessage_arena) {
      cdev_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdev_update, submessage_arena);
    }
    set_has_cdev_update();
    _impl_.event_.cdev_update_ = cdev_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cdev_update)
}
void FtraceEvent::clear_cdev_update() {
  if (event_case() == kCdevUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cdev_update_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_exit(::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpuhp_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuhp_exit));
    if (message_arena != submessage_arena) {
      cpuhp_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_exit, submessage_arena);
    }
    set_has_cpuhp_exit();
    _impl_.event_.cpuhp_exit_ = cpuhp_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_exit)
}
void FtraceEvent::clear_cpuhp_exit() {
  if (event_case() == kCpuhpExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpuhp_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_multi_enter(::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpuhp_multi_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuhp_multi_enter));
    if (message_arena != submessage_arena) {
      cpuhp_multi_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_multi_enter, submessage_arena);
    }
    set_has_cpuhp_multi_enter();
    _impl_.event_.cpuhp_multi_enter_ = cpuhp_multi_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
}
void FtraceEvent::clear_cpuhp_multi_enter() {
  if (event_case() == kCpuhpMultiEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpuhp_multi_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_enter(::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpuhp_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuhp_enter));
    if (message_arena != submessage_arena) {
      cpuhp_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_enter, submessage_arena);
    }
    set_has_cpuhp_enter();
    _impl_.event_.cpuhp_enter_ = cpuhp_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_enter)
}
void FtraceEvent::clear_cpuhp_enter() {
  if (event_case() == kCpuhpEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpuhp_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_latency(::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpuhp_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuhp_latency));
    if (message_arena != submessage_arena) {
      cpuhp_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_latency, submessage_arena);
    }
    set_has_cpuhp_latency();
    _impl_.event_.cpuhp_latency_ = cpuhp_latency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_latency)
}
void FtraceEvent::clear_cpuhp_latency() {
  if (event_case() == kCpuhpLatency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpuhp_latency_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_fastrpc_dma_stat(::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (fastrpc_dma_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fastrpc_dma_stat));
    if (message_arena != submessage_arena) {
      fastrpc_dma_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fastrpc_dma_stat, submessage_arena);
    }
    set_has_fastrpc_dma_stat();
    _impl_.event_.fastrpc_dma_stat_ = fastrpc_dma_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
}
void FtraceEvent::clear_fastrpc_dma_stat() {
  if (event_case() == kFastrpcDmaStat) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.fastrpc_dma_stat_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dpu_tracing_mark_write(::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dpu_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dpu_tracing_mark_write));
    if (message_arena != submessage_arena) {
      dpu_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dpu_tracing_mark_write, submessage_arena);
    }
    set_has_dpu_tracing_mark_write();
    _impl_.event_.dpu_tracing_mark_write_ = dpu_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
}
void FtraceEvent::clear_dpu_tracing_mark_write() {
  if (event_case() == kDpuTracingMarkWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dpu_tracing_mark_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_g2d_tracing_mark_write(::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (g2d_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(g2d_tracing_mark_write));
    if (message_arena != submessage_arena) {
      g2d_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, g2d_tracing_mark_write, submessage_arena);
    }
    set_has_g2d_tracing_mark_write();
    _impl_.event_.g2d_tracing_mark_write_ = g2d_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
}
void FtraceEvent::clear_g2d_tracing_mark_write() {
  if (event_case() == kG2DTracingMarkWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.g2d_tracing_mark_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_tracing_mark_write(::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_tracing_mark_write));
    if (message_arena != submessage_arena) {
      mali_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_tracing_mark_write, submessage_arena);
    }
    set_has_mali_tracing_mark_write();
    _impl_.event_.mali_tracing_mark_write_ = mali_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
}
void FtraceEvent::clear_mali_tracing_mark_write() {
  if (event_case() == kMaliTracingMarkWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_tracing_mark_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_heap_stat(::perfetto::protos::DmaHeapStatFtraceEvent* dma_heap_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_heap_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_heap_stat));
    if (message_arena != submessage_arena) {
      dma_heap_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_heap_stat, submessage_arena);
    }
    set_has_dma_heap_stat();
    _impl_.event_.dma_heap_stat_ = dma_heap_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_heap_stat)
}
void FtraceEvent::clear_dma_heap_stat() {
  if (event_case() == kDmaHeapStat) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_heap_stat_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cpuhp_pause(::perfetto::protos::CpuhpPauseFtraceEvent* cpuhp_pause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cpuhp_pause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuhp_pause));
    if (message_arena != submessage_arena) {
      cpuhp_pause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuhp_pause, submessage_arena);
    }
    set_has_cpuhp_pause();
    _impl_.event_.cpuhp_pause_ = cpuhp_pause;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cpuhp_pause)
}
void FtraceEvent::clear_cpuhp_pause() {
  if (event_case() == kCpuhpPause) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cpuhp_pause_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_pi_setprio(::perfetto::protos::SchedPiSetprioFtraceEvent* sched_pi_setprio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_pi_setprio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_pi_setprio));
    if (message_arena != submessage_arena) {
      sched_pi_setprio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_pi_setprio, submessage_arena);
    }
    set_has_sched_pi_setprio();
    _impl_.event_.sched_pi_setprio_ = sched_pi_setprio;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_pi_setprio)
}
void FtraceEvent::clear_sched_pi_setprio() {
  if (event_case() == kSchedPiSetprio) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_pi_setprio_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_sde_evtlog(::perfetto::protos::SdeSdeEvtlogFtraceEvent* sde_sde_evtlog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sde_sde_evtlog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sde_sde_evtlog));
    if (message_arena != submessage_arena) {
      sde_sde_evtlog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_sde_evtlog, submessage_arena);
    }
    set_has_sde_sde_evtlog();
    _impl_.event_.sde_sde_evtlog_ = sde_sde_evtlog;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_sde_evtlog)
}
void FtraceEvent::clear_sde_sde_evtlog() {
  if (event_case() == kSdeSdeEvtlog) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sde_sde_evtlog_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_sde_perf_calc_crtc(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* sde_sde_perf_calc_crtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sde_sde_perf_calc_crtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sde_sde_perf_calc_crtc));
    if (message_arena != submessage_arena) {
      sde_sde_perf_calc_crtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_sde_perf_calc_crtc, submessage_arena);
    }
    set_has_sde_sde_perf_calc_crtc();
    _impl_.event_.sde_sde_perf_calc_crtc_ = sde_sde_perf_calc_crtc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_calc_crtc)
}
void FtraceEvent::clear_sde_sde_perf_calc_crtc() {
  if (event_case() == kSdeSdePerfCalcCrtc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sde_sde_perf_calc_crtc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_sde_perf_crtc_update(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* sde_sde_perf_crtc_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sde_sde_perf_crtc_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sde_sde_perf_crtc_update));
    if (message_arena != submessage_arena) {
      sde_sde_perf_crtc_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_sde_perf_crtc_update, submessage_arena);
    }
    set_has_sde_sde_perf_crtc_update();
    _impl_.event_.sde_sde_perf_crtc_update_ = sde_sde_perf_crtc_update;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_crtc_update)
}
void FtraceEvent::clear_sde_sde_perf_crtc_update() {
  if (event_case() == kSdeSdePerfCrtcUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sde_sde_perf_crtc_update_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_sde_perf_set_qos_luts(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* sde_sde_perf_set_qos_luts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sde_sde_perf_set_qos_luts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sde_sde_perf_set_qos_luts));
    if (message_arena != submessage_arena) {
      sde_sde_perf_set_qos_luts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_sde_perf_set_qos_luts, submessage_arena);
    }
    set_has_sde_sde_perf_set_qos_luts();
    _impl_.event_.sde_sde_perf_set_qos_luts_ = sde_sde_perf_set_qos_luts;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_set_qos_luts)
}
void FtraceEvent::clear_sde_sde_perf_set_qos_luts() {
  if (event_case() == kSdeSdePerfSetQosLuts) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sde_sde_perf_set_qos_luts_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sde_sde_perf_update_bus(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* sde_sde_perf_update_bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sde_sde_perf_update_bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sde_sde_perf_update_bus));
    if (message_arena != submessage_arena) {
      sde_sde_perf_update_bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sde_sde_perf_update_bus, submessage_arena);
    }
    set_has_sde_sde_perf_update_bus();
    _impl_.event_.sde_sde_perf_update_bus_ = sde_sde_perf_update_bus;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_update_bus)
}
void FtraceEvent::clear_sde_sde_perf_update_bus() {
  if (event_case() == kSdeSdePerfUpdateBus) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sde_sde_perf_update_bus_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_rss_stat_throttled(::perfetto::protos::RssStatThrottledFtraceEvent* rss_stat_throttled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (rss_stat_throttled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rss_stat_throttled));
    if (message_arena != submessage_arena) {
      rss_stat_throttled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rss_stat_throttled, submessage_arena);
    }
    set_has_rss_stat_throttled();
    _impl_.event_.rss_stat_throttled_ = rss_stat_throttled;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.rss_stat_throttled)
}
void FtraceEvent::clear_rss_stat_throttled() {
  if (event_case() == kRssStatThrottled) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.rss_stat_throttled_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_netif_receive_skb(::perfetto::protos::NetifReceiveSkbFtraceEvent* netif_receive_skb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (netif_receive_skb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(netif_receive_skb));
    if (message_arena != submessage_arena) {
      netif_receive_skb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, netif_receive_skb, submessage_arena);
    }
    set_has_netif_receive_skb();
    _impl_.event_.netif_receive_skb_ = netif_receive_skb;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.netif_receive_skb)
}
void FtraceEvent::clear_netif_receive_skb() {
  if (event_case() == kNetifReceiveSkb) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.netif_receive_skb_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_net_dev_xmit(::perfetto::protos::NetDevXmitFtraceEvent* net_dev_xmit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (net_dev_xmit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_dev_xmit));
    if (message_arena != submessage_arena) {
      net_dev_xmit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_dev_xmit, submessage_arena);
    }
    set_has_net_dev_xmit();
    _impl_.event_.net_dev_xmit_ = net_dev_xmit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.net_dev_xmit)
}
void FtraceEvent::clear_net_dev_xmit() {
  if (event_case() == kNetDevXmit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.net_dev_xmit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_inet_sock_set_state(::perfetto::protos::InetSockSetStateFtraceEvent* inet_sock_set_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (inet_sock_set_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inet_sock_set_state));
    if (message_arena != submessage_arena) {
      inet_sock_set_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inet_sock_set_state, submessage_arena);
    }
    set_has_inet_sock_set_state();
    _impl_.event_.inet_sock_set_state_ = inet_sock_set_state;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.inet_sock_set_state)
}
void FtraceEvent::clear_inet_sock_set_state() {
  if (event_case() == kInetSockSetState) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.inet_sock_set_state_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_tcp_retransmit_skb(::perfetto::protos::TcpRetransmitSkbFtraceEvent* tcp_retransmit_skb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (tcp_retransmit_skb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_retransmit_skb));
    if (message_arena != submessage_arena) {
      tcp_retransmit_skb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_retransmit_skb, submessage_arena);
    }
    set_has_tcp_retransmit_skb();
    _impl_.event_.tcp_retransmit_skb_ = tcp_retransmit_skb;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.tcp_retransmit_skb)
}
void FtraceEvent::clear_tcp_retransmit_skb() {
  if (event_case() == kTcpRetransmitSkb) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.tcp_retransmit_skb_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cros_ec_sensorhub_data(::perfetto::protos::CrosEcSensorhubDataFtraceEvent* cros_ec_sensorhub_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cros_ec_sensorhub_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cros_ec_sensorhub_data));
    if (message_arena != submessage_arena) {
      cros_ec_sensorhub_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cros_ec_sensorhub_data, submessage_arena);
    }
    set_has_cros_ec_sensorhub_data();
    _impl_.event_.cros_ec_sensorhub_data_ = cros_ec_sensorhub_data;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cros_ec_sensorhub_data)
}
void FtraceEvent::clear_cros_ec_sensorhub_data() {
  if (event_case() == kCrosEcSensorhubData) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cros_ec_sensorhub_data_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_napi_gro_receive_entry(::perfetto::protos::NapiGroReceiveEntryFtraceEvent* napi_gro_receive_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (napi_gro_receive_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(napi_gro_receive_entry));
    if (message_arena != submessage_arena) {
      napi_gro_receive_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, napi_gro_receive_entry, submessage_arena);
    }
    set_has_napi_gro_receive_entry();
    _impl_.event_.napi_gro_receive_entry_ = napi_gro_receive_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.napi_gro_receive_entry)
}
void FtraceEvent::clear_napi_gro_receive_entry() {
  if (event_case() == kNapiGroReceiveEntry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.napi_gro_receive_entry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_napi_gro_receive_exit(::perfetto::protos::NapiGroReceiveExitFtraceEvent* napi_gro_receive_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (napi_gro_receive_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(napi_gro_receive_exit));
    if (message_arena != submessage_arena) {
      napi_gro_receive_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, napi_gro_receive_exit, submessage_arena);
    }
    set_has_napi_gro_receive_exit();
    _impl_.event_.napi_gro_receive_exit_ = napi_gro_receive_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.napi_gro_receive_exit)
}
void FtraceEvent::clear_napi_gro_receive_exit() {
  if (event_case() == kNapiGroReceiveExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.napi_gro_receive_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kfree_skb(::perfetto::protos::KfreeSkbFtraceEvent* kfree_skb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kfree_skb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kfree_skb));
    if (message_arena != submessage_arena) {
      kfree_skb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kfree_skb, submessage_arena);
    }
    set_has_kfree_skb();
    _impl_.event_.kfree_skb_ = kfree_skb;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kfree_skb)
}
void FtraceEvent::clear_kfree_skb() {
  if (event_case() == kKfreeSkb) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kfree_skb_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_access_fault(::perfetto::protos::KvmAccessFaultFtraceEvent* kvm_access_fault) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_access_fault) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_access_fault));
    if (message_arena != submessage_arena) {
      kvm_access_fault = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_access_fault, submessage_arena);
    }
    set_has_kvm_access_fault();
    _impl_.event_.kvm_access_fault_ = kvm_access_fault;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_access_fault)
}
void FtraceEvent::clear_kvm_access_fault() {
  if (event_case() == kKvmAccessFault) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_access_fault_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_ack_irq(::perfetto::protos::KvmAckIrqFtraceEvent* kvm_ack_irq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_ack_irq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_ack_irq));
    if (message_arena != submessage_arena) {
      kvm_ack_irq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_ack_irq, submessage_arena);
    }
    set_has_kvm_ack_irq();
    _impl_.event_.kvm_ack_irq_ = kvm_ack_irq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_ack_irq)
}
void FtraceEvent::clear_kvm_ack_irq() {
  if (event_case() == kKvmAckIrq) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_ack_irq_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_age_hva(::perfetto::protos::KvmAgeHvaFtraceEvent* kvm_age_hva) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_age_hva) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_age_hva));
    if (message_arena != submessage_arena) {
      kvm_age_hva = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_age_hva, submessage_arena);
    }
    set_has_kvm_age_hva();
    _impl_.event_.kvm_age_hva_ = kvm_age_hva;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_age_hva)
}
void FtraceEvent::clear_kvm_age_hva() {
  if (event_case() == kKvmAgeHva) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_age_hva_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_age_page(::perfetto::protos::KvmAgePageFtraceEvent* kvm_age_page) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_age_page) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_age_page));
    if (message_arena != submessage_arena) {
      kvm_age_page = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_age_page, submessage_arena);
    }
    set_has_kvm_age_page();
    _impl_.event_.kvm_age_page_ = kvm_age_page;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_age_page)
}
void FtraceEvent::clear_kvm_age_page() {
  if (event_case() == kKvmAgePage) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_age_page_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_arm_clear_debug(::perfetto::protos::KvmArmClearDebugFtraceEvent* kvm_arm_clear_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_arm_clear_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_arm_clear_debug));
    if (message_arena != submessage_arena) {
      kvm_arm_clear_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_arm_clear_debug, submessage_arena);
    }
    set_has_kvm_arm_clear_debug();
    _impl_.event_.kvm_arm_clear_debug_ = kvm_arm_clear_debug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_clear_debug)
}
void FtraceEvent::clear_kvm_arm_clear_debug() {
  if (event_case() == kKvmArmClearDebug) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_arm_clear_debug_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_arm_set_dreg32(::perfetto::protos::KvmArmSetDreg32FtraceEvent* kvm_arm_set_dreg32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_arm_set_dreg32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_arm_set_dreg32));
    if (message_arena != submessage_arena) {
      kvm_arm_set_dreg32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_arm_set_dreg32, submessage_arena);
    }
    set_has_kvm_arm_set_dreg32();
    _impl_.event_.kvm_arm_set_dreg32_ = kvm_arm_set_dreg32;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_set_dreg32)
}
void FtraceEvent::clear_kvm_arm_set_dreg32() {
  if (event_case() == kKvmArmSetDreg32) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_arm_set_dreg32_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_arm_set_regset(::perfetto::protos::KvmArmSetRegsetFtraceEvent* kvm_arm_set_regset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_arm_set_regset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_arm_set_regset));
    if (message_arena != submessage_arena) {
      kvm_arm_set_regset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_arm_set_regset, submessage_arena);
    }
    set_has_kvm_arm_set_regset();
    _impl_.event_.kvm_arm_set_regset_ = kvm_arm_set_regset;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_set_regset)
}
void FtraceEvent::clear_kvm_arm_set_regset() {
  if (event_case() == kKvmArmSetRegset) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_arm_set_regset_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_arm_setup_debug(::perfetto::protos::KvmArmSetupDebugFtraceEvent* kvm_arm_setup_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_arm_setup_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_arm_setup_debug));
    if (message_arena != submessage_arena) {
      kvm_arm_setup_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_arm_setup_debug, submessage_arena);
    }
    set_has_kvm_arm_setup_debug();
    _impl_.event_.kvm_arm_setup_debug_ = kvm_arm_setup_debug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_setup_debug)
}
void FtraceEvent::clear_kvm_arm_setup_debug() {
  if (event_case() == kKvmArmSetupDebug) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_arm_setup_debug_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_entry(::perfetto::protos::KvmEntryFtraceEvent* kvm_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_entry));
    if (message_arena != submessage_arena) {
      kvm_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_entry, submessage_arena);
    }
    set_has_kvm_entry();
    _impl_.event_.kvm_entry_ = kvm_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_entry)
}
void FtraceEvent::clear_kvm_entry() {
  if (event_case() == kKvmEntry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_entry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_exit(::perfetto::protos::KvmExitFtraceEvent* kvm_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_exit));
    if (message_arena != submessage_arena) {
      kvm_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_exit, submessage_arena);
    }
    set_has_kvm_exit();
    _impl_.event_.kvm_exit_ = kvm_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_exit)
}
void FtraceEvent::clear_kvm_exit() {
  if (event_case() == kKvmExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_fpu(::perfetto::protos::KvmFpuFtraceEvent* kvm_fpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_fpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_fpu));
    if (message_arena != submessage_arena) {
      kvm_fpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_fpu, submessage_arena);
    }
    set_has_kvm_fpu();
    _impl_.event_.kvm_fpu_ = kvm_fpu;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_fpu)
}
void FtraceEvent::clear_kvm_fpu() {
  if (event_case() == kKvmFpu) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_fpu_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_get_timer_map(::perfetto::protos::KvmGetTimerMapFtraceEvent* kvm_get_timer_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_get_timer_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_get_timer_map));
    if (message_arena != submessage_arena) {
      kvm_get_timer_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_get_timer_map, submessage_arena);
    }
    set_has_kvm_get_timer_map();
    _impl_.event_.kvm_get_timer_map_ = kvm_get_timer_map;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_get_timer_map)
}
void FtraceEvent::clear_kvm_get_timer_map() {
  if (event_case() == kKvmGetTimerMap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_get_timer_map_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_guest_fault(::perfetto::protos::KvmGuestFaultFtraceEvent* kvm_guest_fault) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_guest_fault) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_guest_fault));
    if (message_arena != submessage_arena) {
      kvm_guest_fault = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_guest_fault, submessage_arena);
    }
    set_has_kvm_guest_fault();
    _impl_.event_.kvm_guest_fault_ = kvm_guest_fault;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_guest_fault)
}
void FtraceEvent::clear_kvm_guest_fault() {
  if (event_case() == kKvmGuestFault) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_guest_fault_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_handle_sys_reg(::perfetto::protos::KvmHandleSysRegFtraceEvent* kvm_handle_sys_reg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_handle_sys_reg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_handle_sys_reg));
    if (message_arena != submessage_arena) {
      kvm_handle_sys_reg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_handle_sys_reg, submessage_arena);
    }
    set_has_kvm_handle_sys_reg();
    _impl_.event_.kvm_handle_sys_reg_ = kvm_handle_sys_reg;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_handle_sys_reg)
}
void FtraceEvent::clear_kvm_handle_sys_reg() {
  if (event_case() == kKvmHandleSysReg) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_handle_sys_reg_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_hvc_arm64(::perfetto::protos::KvmHvcArm64FtraceEvent* kvm_hvc_arm64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_hvc_arm64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_hvc_arm64));
    if (message_arena != submessage_arena) {
      kvm_hvc_arm64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_hvc_arm64, submessage_arena);
    }
    set_has_kvm_hvc_arm64();
    _impl_.event_.kvm_hvc_arm64_ = kvm_hvc_arm64;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_hvc_arm64)
}
void FtraceEvent::clear_kvm_hvc_arm64() {
  if (event_case() == kKvmHvcArm64) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_hvc_arm64_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_irq_line(::perfetto::protos::KvmIrqLineFtraceEvent* kvm_irq_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_irq_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_irq_line));
    if (message_arena != submessage_arena) {
      kvm_irq_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_irq_line, submessage_arena);
    }
    set_has_kvm_irq_line();
    _impl_.event_.kvm_irq_line_ = kvm_irq_line;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_irq_line)
}
void FtraceEvent::clear_kvm_irq_line() {
  if (event_case() == kKvmIrqLine) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_irq_line_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_mmio(::perfetto::protos::KvmMmioFtraceEvent* kvm_mmio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_mmio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_mmio));
    if (message_arena != submessage_arena) {
      kvm_mmio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_mmio, submessage_arena);
    }
    set_has_kvm_mmio();
    _impl_.event_.kvm_mmio_ = kvm_mmio;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_mmio)
}
void FtraceEvent::clear_kvm_mmio() {
  if (event_case() == kKvmMmio) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_mmio_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_mmio_emulate(::perfetto::protos::KvmMmioEmulateFtraceEvent* kvm_mmio_emulate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_mmio_emulate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_mmio_emulate));
    if (message_arena != submessage_arena) {
      kvm_mmio_emulate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_mmio_emulate, submessage_arena);
    }
    set_has_kvm_mmio_emulate();
    _impl_.event_.kvm_mmio_emulate_ = kvm_mmio_emulate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_mmio_emulate)
}
void FtraceEvent::clear_kvm_mmio_emulate() {
  if (event_case() == kKvmMmioEmulate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_mmio_emulate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_set_guest_debug(::perfetto::protos::KvmSetGuestDebugFtraceEvent* kvm_set_guest_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_set_guest_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_set_guest_debug));
    if (message_arena != submessage_arena) {
      kvm_set_guest_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_set_guest_debug, submessage_arena);
    }
    set_has_kvm_set_guest_debug();
    _impl_.event_.kvm_set_guest_debug_ = kvm_set_guest_debug;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_set_guest_debug)
}
void FtraceEvent::clear_kvm_set_guest_debug() {
  if (event_case() == kKvmSetGuestDebug) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_set_guest_debug_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_set_irq(::perfetto::protos::KvmSetIrqFtraceEvent* kvm_set_irq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_set_irq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_set_irq));
    if (message_arena != submessage_arena) {
      kvm_set_irq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_set_irq, submessage_arena);
    }
    set_has_kvm_set_irq();
    _impl_.event_.kvm_set_irq_ = kvm_set_irq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_set_irq)
}
void FtraceEvent::clear_kvm_set_irq() {
  if (event_case() == kKvmSetIrq) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_set_irq_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_set_spte_hva(::perfetto::protos::KvmSetSpteHvaFtraceEvent* kvm_set_spte_hva) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_set_spte_hva) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_set_spte_hva));
    if (message_arena != submessage_arena) {
      kvm_set_spte_hva = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_set_spte_hva, submessage_arena);
    }
    set_has_kvm_set_spte_hva();
    _impl_.event_.kvm_set_spte_hva_ = kvm_set_spte_hva;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_set_spte_hva)
}
void FtraceEvent::clear_kvm_set_spte_hva() {
  if (event_case() == kKvmSetSpteHva) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_set_spte_hva_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_set_way_flush(::perfetto::protos::KvmSetWayFlushFtraceEvent* kvm_set_way_flush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_set_way_flush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_set_way_flush));
    if (message_arena != submessage_arena) {
      kvm_set_way_flush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_set_way_flush, submessage_arena);
    }
    set_has_kvm_set_way_flush();
    _impl_.event_.kvm_set_way_flush_ = kvm_set_way_flush;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_set_way_flush)
}
void FtraceEvent::clear_kvm_set_way_flush() {
  if (event_case() == kKvmSetWayFlush) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_set_way_flush_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_sys_access(::perfetto::protos::KvmSysAccessFtraceEvent* kvm_sys_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_sys_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_sys_access));
    if (message_arena != submessage_arena) {
      kvm_sys_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_sys_access, submessage_arena);
    }
    set_has_kvm_sys_access();
    _impl_.event_.kvm_sys_access_ = kvm_sys_access;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_sys_access)
}
void FtraceEvent::clear_kvm_sys_access() {
  if (event_case() == kKvmSysAccess) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_sys_access_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_test_age_hva(::perfetto::protos::KvmTestAgeHvaFtraceEvent* kvm_test_age_hva) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_test_age_hva) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_test_age_hva));
    if (message_arena != submessage_arena) {
      kvm_test_age_hva = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_test_age_hva, submessage_arena);
    }
    set_has_kvm_test_age_hva();
    _impl_.event_.kvm_test_age_hva_ = kvm_test_age_hva;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_test_age_hva)
}
void FtraceEvent::clear_kvm_test_age_hva() {
  if (event_case() == kKvmTestAgeHva) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_test_age_hva_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_timer_emulate(::perfetto::protos::KvmTimerEmulateFtraceEvent* kvm_timer_emulate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_timer_emulate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_timer_emulate));
    if (message_arena != submessage_arena) {
      kvm_timer_emulate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_timer_emulate, submessage_arena);
    }
    set_has_kvm_timer_emulate();
    _impl_.event_.kvm_timer_emulate_ = kvm_timer_emulate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_emulate)
}
void FtraceEvent::clear_kvm_timer_emulate() {
  if (event_case() == kKvmTimerEmulate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_timer_emulate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_timer_hrtimer_expire(::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* kvm_timer_hrtimer_expire) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_timer_hrtimer_expire) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_timer_hrtimer_expire));
    if (message_arena != submessage_arena) {
      kvm_timer_hrtimer_expire = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_timer_hrtimer_expire, submessage_arena);
    }
    set_has_kvm_timer_hrtimer_expire();
    _impl_.event_.kvm_timer_hrtimer_expire_ = kvm_timer_hrtimer_expire;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_hrtimer_expire)
}
void FtraceEvent::clear_kvm_timer_hrtimer_expire() {
  if (event_case() == kKvmTimerHrtimerExpire) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_timer_hrtimer_expire_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_timer_restore_state(::perfetto::protos::KvmTimerRestoreStateFtraceEvent* kvm_timer_restore_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_timer_restore_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_timer_restore_state));
    if (message_arena != submessage_arena) {
      kvm_timer_restore_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_timer_restore_state, submessage_arena);
    }
    set_has_kvm_timer_restore_state();
    _impl_.event_.kvm_timer_restore_state_ = kvm_timer_restore_state;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_restore_state)
}
void FtraceEvent::clear_kvm_timer_restore_state() {
  if (event_case() == kKvmTimerRestoreState) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_timer_restore_state_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_timer_save_state(::perfetto::protos::KvmTimerSaveStateFtraceEvent* kvm_timer_save_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_timer_save_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_timer_save_state));
    if (message_arena != submessage_arena) {
      kvm_timer_save_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_timer_save_state, submessage_arena);
    }
    set_has_kvm_timer_save_state();
    _impl_.event_.kvm_timer_save_state_ = kvm_timer_save_state;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_save_state)
}
void FtraceEvent::clear_kvm_timer_save_state() {
  if (event_case() == kKvmTimerSaveState) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_timer_save_state_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_timer_update_irq(::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* kvm_timer_update_irq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_timer_update_irq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_timer_update_irq));
    if (message_arena != submessage_arena) {
      kvm_timer_update_irq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_timer_update_irq, submessage_arena);
    }
    set_has_kvm_timer_update_irq();
    _impl_.event_.kvm_timer_update_irq_ = kvm_timer_update_irq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_update_irq)
}
void FtraceEvent::clear_kvm_timer_update_irq() {
  if (event_case() == kKvmTimerUpdateIrq) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_timer_update_irq_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_toggle_cache(::perfetto::protos::KvmToggleCacheFtraceEvent* kvm_toggle_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_toggle_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_toggle_cache));
    if (message_arena != submessage_arena) {
      kvm_toggle_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_toggle_cache, submessage_arena);
    }
    set_has_kvm_toggle_cache();
    _impl_.event_.kvm_toggle_cache_ = kvm_toggle_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_toggle_cache)
}
void FtraceEvent::clear_kvm_toggle_cache() {
  if (event_case() == kKvmToggleCache) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_toggle_cache_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_unmap_hva_range(::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* kvm_unmap_hva_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_unmap_hva_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_unmap_hva_range));
    if (message_arena != submessage_arena) {
      kvm_unmap_hva_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_unmap_hva_range, submessage_arena);
    }
    set_has_kvm_unmap_hva_range();
    _impl_.event_.kvm_unmap_hva_range_ = kvm_unmap_hva_range;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_unmap_hva_range)
}
void FtraceEvent::clear_kvm_unmap_hva_range() {
  if (event_case() == kKvmUnmapHvaRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_unmap_hva_range_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_userspace_exit(::perfetto::protos::KvmUserspaceExitFtraceEvent* kvm_userspace_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_userspace_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_userspace_exit));
    if (message_arena != submessage_arena) {
      kvm_userspace_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_userspace_exit, submessage_arena);
    }
    set_has_kvm_userspace_exit();
    _impl_.event_.kvm_userspace_exit_ = kvm_userspace_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_userspace_exit)
}
void FtraceEvent::clear_kvm_userspace_exit() {
  if (event_case() == kKvmUserspaceExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_userspace_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_vcpu_wakeup(::perfetto::protos::KvmVcpuWakeupFtraceEvent* kvm_vcpu_wakeup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_vcpu_wakeup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_vcpu_wakeup));
    if (message_arena != submessage_arena) {
      kvm_vcpu_wakeup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_vcpu_wakeup, submessage_arena);
    }
    set_has_kvm_vcpu_wakeup();
    _impl_.event_.kvm_vcpu_wakeup_ = kvm_vcpu_wakeup;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_vcpu_wakeup)
}
void FtraceEvent::clear_kvm_vcpu_wakeup() {
  if (event_case() == kKvmVcpuWakeup) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_vcpu_wakeup_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_kvm_wfx_arm64(::perfetto::protos::KvmWfxArm64FtraceEvent* kvm_wfx_arm64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kvm_wfx_arm64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kvm_wfx_arm64));
    if (message_arena != submessage_arena) {
      kvm_wfx_arm64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvm_wfx_arm64, submessage_arena);
    }
    set_has_kvm_wfx_arm64();
    _impl_.event_.kvm_wfx_arm64_ = kvm_wfx_arm64;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.kvm_wfx_arm64)
}
void FtraceEvent::clear_kvm_wfx_arm64() {
  if (event_case() == kKvmWfxArm64) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.kvm_wfx_arm64_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trap_reg(::perfetto::protos::TrapRegFtraceEvent* trap_reg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trap_reg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trap_reg));
    if (message_arena != submessage_arena) {
      trap_reg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trap_reg, submessage_arena);
    }
    set_has_trap_reg();
    _impl_.event_.trap_reg_ = trap_reg;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trap_reg)
}
void FtraceEvent::clear_trap_reg() {
  if (event_case() == kTrapReg) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trap_reg_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_vgic_update_irq_pending(::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* vgic_update_irq_pending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vgic_update_irq_pending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vgic_update_irq_pending));
    if (message_arena != submessage_arena) {
      vgic_update_irq_pending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vgic_update_irq_pending, submessage_arena);
    }
    set_has_vgic_update_irq_pending();
    _impl_.event_.vgic_update_irq_pending_ = vgic_update_irq_pending;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.vgic_update_irq_pending)
}
void FtraceEvent::clear_vgic_update_irq_pending() {
  if (event_case() == kVgicUpdateIrqPending) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vgic_update_irq_pending_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_wakeup_source_activate(::perfetto::protos::WakeupSourceActivateFtraceEvent* wakeup_source_activate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (wakeup_source_activate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wakeup_source_activate));
    if (message_arena != submessage_arena) {
      wakeup_source_activate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakeup_source_activate, submessage_arena);
    }
    set_has_wakeup_source_activate();
    _impl_.event_.wakeup_source_activate_ = wakeup_source_activate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.wakeup_source_activate)
}
void FtraceEvent::clear_wakeup_source_activate() {
  if (event_case() == kWakeupSourceActivate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.wakeup_source_activate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_wakeup_source_deactivate(::perfetto::protos::WakeupSourceDeactivateFtraceEvent* wakeup_source_deactivate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (wakeup_source_deactivate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wakeup_source_deactivate));
    if (message_arena != submessage_arena) {
      wakeup_source_deactivate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakeup_source_deactivate, submessage_arena);
    }
    set_has_wakeup_source_deactivate();
    _impl_.event_.wakeup_source_deactivate_ = wakeup_source_deactivate;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.wakeup_source_deactivate)
}
void FtraceEvent::clear_wakeup_source_deactivate() {
  if (event_case() == kWakeupSourceDeactivate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.wakeup_source_deactivate_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ufshcd_command(::perfetto::protos::UfshcdCommandFtraceEvent* ufshcd_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ufshcd_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ufshcd_command));
    if (message_arena != submessage_arena) {
      ufshcd_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ufshcd_command, submessage_arena);
    }
    set_has_ufshcd_command();
    _impl_.event_.ufshcd_command_ = ufshcd_command;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ufshcd_command)
}
void FtraceEvent::clear_ufshcd_command() {
  if (event_case() == kUfshcdCommand) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ufshcd_command_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_ufshcd_clk_gating(::perfetto::protos::UfshcdClkGatingFtraceEvent* ufshcd_clk_gating) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ufshcd_clk_gating) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ufshcd_clk_gating));
    if (message_arena != submessage_arena) {
      ufshcd_clk_gating = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ufshcd_clk_gating, submessage_arena);
    }
    set_has_ufshcd_clk_gating();
    _impl_.event_.ufshcd_clk_gating_ = ufshcd_clk_gating;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.ufshcd_clk_gating)
}
void FtraceEvent::clear_ufshcd_clk_gating() {
  if (event_case() == kUfshcdClkGating) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.ufshcd_clk_gating_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_console(::perfetto::protos::ConsoleFtraceEvent* console) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (console) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(console));
    if (message_arena != submessage_arena) {
      console = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, console, submessage_arena);
    }
    set_has_console();
    _impl_.event_.console_ = console;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.console)
}
void FtraceEvent::clear_console() {
  if (event_case() == kConsole) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.console_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_drm_vblank_event(::perfetto::protos::DrmVblankEventFtraceEvent* drm_vblank_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (drm_vblank_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drm_vblank_event));
    if (message_arena != submessage_arena) {
      drm_vblank_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drm_vblank_event, submessage_arena);
    }
    set_has_drm_vblank_event();
    _impl_.event_.drm_vblank_event_ = drm_vblank_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.drm_vblank_event)
}
void FtraceEvent::clear_drm_vblank_event() {
  if (event_case() == kDrmVblankEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.drm_vblank_event_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_drm_vblank_event_delivered(::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* drm_vblank_event_delivered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (drm_vblank_event_delivered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drm_vblank_event_delivered));
    if (message_arena != submessage_arena) {
      drm_vblank_event_delivered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drm_vblank_event_delivered, submessage_arena);
    }
    set_has_drm_vblank_event_delivered();
    _impl_.event_.drm_vblank_event_delivered_ = drm_vblank_event_delivered;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.drm_vblank_event_delivered)
}
void FtraceEvent::clear_drm_vblank_event_delivered() {
  if (event_case() == kDrmVblankEventDelivered) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.drm_vblank_event_delivered_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_drm_sched_job(::perfetto::protos::DrmSchedJobFtraceEvent* drm_sched_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (drm_sched_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drm_sched_job));
    if (message_arena != submessage_arena) {
      drm_sched_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drm_sched_job, submessage_arena);
    }
    set_has_drm_sched_job();
    _impl_.event_.drm_sched_job_ = drm_sched_job;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.drm_sched_job)
}
void FtraceEvent::clear_drm_sched_job() {
  if (event_case() == kDrmSchedJob) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.drm_sched_job_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_drm_run_job(::perfetto::protos::DrmRunJobFtraceEvent* drm_run_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (drm_run_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drm_run_job));
    if (message_arena != submessage_arena) {
      drm_run_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drm_run_job, submessage_arena);
    }
    set_has_drm_run_job();
    _impl_.event_.drm_run_job_ = drm_run_job;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.drm_run_job)
}
void FtraceEvent::clear_drm_run_job() {
  if (event_case() == kDrmRunJob) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.drm_run_job_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_drm_sched_process_job(::perfetto::protos::DrmSchedProcessJobFtraceEvent* drm_sched_process_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (drm_sched_process_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drm_sched_process_job));
    if (message_arena != submessage_arena) {
      drm_sched_process_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drm_sched_process_job, submessage_arena);
    }
    set_has_drm_sched_process_job();
    _impl_.event_.drm_sched_process_job_ = drm_sched_process_job;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.drm_sched_process_job)
}
void FtraceEvent::clear_drm_sched_process_job() {
  if (event_case() == kDrmSchedProcessJob) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.drm_sched_process_job_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_fence_init(::perfetto::protos::DmaFenceInitFtraceEvent* dma_fence_init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_fence_init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_fence_init));
    if (message_arena != submessage_arena) {
      dma_fence_init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_fence_init, submessage_arena);
    }
    set_has_dma_fence_init();
    _impl_.event_.dma_fence_init_ = dma_fence_init;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_fence_init)
}
void FtraceEvent::clear_dma_fence_init() {
  if (event_case() == kDmaFenceInit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_fence_init_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_fence_emit(::perfetto::protos::DmaFenceEmitFtraceEvent* dma_fence_emit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_fence_emit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_fence_emit));
    if (message_arena != submessage_arena) {
      dma_fence_emit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_fence_emit, submessage_arena);
    }
    set_has_dma_fence_emit();
    _impl_.event_.dma_fence_emit_ = dma_fence_emit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_fence_emit)
}
void FtraceEvent::clear_dma_fence_emit() {
  if (event_case() == kDmaFenceEmit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_fence_emit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_fence_signaled(::perfetto::protos::DmaFenceSignaledFtraceEvent* dma_fence_signaled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_fence_signaled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_fence_signaled));
    if (message_arena != submessage_arena) {
      dma_fence_signaled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_fence_signaled, submessage_arena);
    }
    set_has_dma_fence_signaled();
    _impl_.event_.dma_fence_signaled_ = dma_fence_signaled;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_fence_signaled)
}
void FtraceEvent::clear_dma_fence_signaled() {
  if (event_case() == kDmaFenceSignaled) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_fence_signaled_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_fence_wait_start(::perfetto::protos::DmaFenceWaitStartFtraceEvent* dma_fence_wait_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_fence_wait_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_fence_wait_start));
    if (message_arena != submessage_arena) {
      dma_fence_wait_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_fence_wait_start, submessage_arena);
    }
    set_has_dma_fence_wait_start();
    _impl_.event_.dma_fence_wait_start_ = dma_fence_wait_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_fence_wait_start)
}
void FtraceEvent::clear_dma_fence_wait_start() {
  if (event_case() == kDmaFenceWaitStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_fence_wait_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dma_fence_wait_end(::perfetto::protos::DmaFenceWaitEndFtraceEvent* dma_fence_wait_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dma_fence_wait_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dma_fence_wait_end));
    if (message_arena != submessage_arena) {
      dma_fence_wait_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dma_fence_wait_end, submessage_arena);
    }
    set_has_dma_fence_wait_end();
    _impl_.event_.dma_fence_wait_end_ = dma_fence_wait_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dma_fence_wait_end)
}
void FtraceEvent::clear_dma_fence_wait_end() {
  if (event_case() == kDmaFenceWaitEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dma_fence_wait_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_iostat(::perfetto::protos::F2fsIostatFtraceEvent* f2fs_iostat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_iostat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_iostat));
    if (message_arena != submessage_arena) {
      f2fs_iostat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_iostat, submessage_arena);
    }
    set_has_f2fs_iostat();
    _impl_.event_.f2fs_iostat_ = f2fs_iostat;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_iostat)
}
void FtraceEvent::clear_f2fs_iostat() {
  if (event_case() == kF2FsIostat) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_iostat_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_f2fs_iostat_latency(::perfetto::protos::F2fsIostatLatencyFtraceEvent* f2fs_iostat_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (f2fs_iostat_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2fs_iostat_latency));
    if (message_arena != submessage_arena) {
      f2fs_iostat_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2fs_iostat_latency, submessage_arena);
    }
    set_has_f2fs_iostat_latency();
    _impl_.event_.f2fs_iostat_latency_ = f2fs_iostat_latency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.f2fs_iostat_latency)
}
void FtraceEvent::clear_f2fs_iostat_latency() {
  if (event_case() == kF2FsIostatLatency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.f2fs_iostat_latency_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_sched_cpu_util_cfs(::perfetto::protos::SchedCpuUtilCfsFtraceEvent* sched_cpu_util_cfs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (sched_cpu_util_cfs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sched_cpu_util_cfs));
    if (message_arena != submessage_arena) {
      sched_cpu_util_cfs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sched_cpu_util_cfs, submessage_arena);
    }
    set_has_sched_cpu_util_cfs();
    _impl_.event_.sched_cpu_util_cfs_ = sched_cpu_util_cfs;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.sched_cpu_util_cfs)
}
void FtraceEvent::clear_sched_cpu_util_cfs() {
  if (event_case() == kSchedCpuUtilCfs) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.sched_cpu_util_cfs_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_v4l2_qbuf(::perfetto::protos::V4l2QbufFtraceEvent* v4l2_qbuf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (v4l2_qbuf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4l2_qbuf));
    if (message_arena != submessage_arena) {
      v4l2_qbuf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v4l2_qbuf, submessage_arena);
    }
    set_has_v4l2_qbuf();
    _impl_.event_.v4l2_qbuf_ = v4l2_qbuf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.v4l2_qbuf)
}
void FtraceEvent::clear_v4l2_qbuf() {
  if (event_case() == kV4L2Qbuf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.v4l2_qbuf_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_v4l2_dqbuf(::perfetto::protos::V4l2DqbufFtraceEvent* v4l2_dqbuf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (v4l2_dqbuf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4l2_dqbuf));
    if (message_arena != submessage_arena) {
      v4l2_dqbuf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v4l2_dqbuf, submessage_arena);
    }
    set_has_v4l2_dqbuf();
    _impl_.event_.v4l2_dqbuf_ = v4l2_dqbuf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.v4l2_dqbuf)
}
void FtraceEvent::clear_v4l2_dqbuf() {
  if (event_case() == kV4L2Dqbuf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.v4l2_dqbuf_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_vb2_v4l2_buf_queue(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* vb2_v4l2_buf_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vb2_v4l2_buf_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vb2_v4l2_buf_queue));
    if (message_arena != submessage_arena) {
      vb2_v4l2_buf_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vb2_v4l2_buf_queue, submessage_arena);
    }
    set_has_vb2_v4l2_buf_queue();
    _impl_.event_.vb2_v4l2_buf_queue_ = vb2_v4l2_buf_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_buf_queue)
}
void FtraceEvent::clear_vb2_v4l2_buf_queue() {
  if (event_case() == kVb2V4L2BufQueue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vb2_v4l2_buf_queue_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_vb2_v4l2_buf_done(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* vb2_v4l2_buf_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vb2_v4l2_buf_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vb2_v4l2_buf_done));
    if (message_arena != submessage_arena) {
      vb2_v4l2_buf_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vb2_v4l2_buf_done, submessage_arena);
    }
    set_has_vb2_v4l2_buf_done();
    _impl_.event_.vb2_v4l2_buf_done_ = vb2_v4l2_buf_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_buf_done)
}
void FtraceEvent::clear_vb2_v4l2_buf_done() {
  if (event_case() == kVb2V4L2BufDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vb2_v4l2_buf_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_vb2_v4l2_qbuf(::perfetto::protos::Vb2V4l2QbufFtraceEvent* vb2_v4l2_qbuf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vb2_v4l2_qbuf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vb2_v4l2_qbuf));
    if (message_arena != submessage_arena) {
      vb2_v4l2_qbuf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vb2_v4l2_qbuf, submessage_arena);
    }
    set_has_vb2_v4l2_qbuf();
    _impl_.event_.vb2_v4l2_qbuf_ = vb2_v4l2_qbuf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_qbuf)
}
void FtraceEvent::clear_vb2_v4l2_qbuf() {
  if (event_case() == kVb2V4L2Qbuf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vb2_v4l2_qbuf_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_vb2_v4l2_dqbuf(::perfetto::protos::Vb2V4l2DqbufFtraceEvent* vb2_v4l2_dqbuf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (vb2_v4l2_dqbuf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vb2_v4l2_dqbuf));
    if (message_arena != submessage_arena) {
      vb2_v4l2_dqbuf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vb2_v4l2_dqbuf, submessage_arena);
    }
    set_has_vb2_v4l2_dqbuf();
    _impl_.event_.vb2_v4l2_dqbuf_ = vb2_v4l2_dqbuf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_dqbuf)
}
void FtraceEvent::clear_vb2_v4l2_dqbuf() {
  if (event_case() == kVb2V4L2Dqbuf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vb2_v4l2_dqbuf_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dsi_cmd_fifo_status(::perfetto::protos::DsiCmdFifoStatusFtraceEvent* dsi_cmd_fifo_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dsi_cmd_fifo_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dsi_cmd_fifo_status));
    if (message_arena != submessage_arena) {
      dsi_cmd_fifo_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dsi_cmd_fifo_status, submessage_arena);
    }
    set_has_dsi_cmd_fifo_status();
    _impl_.event_.dsi_cmd_fifo_status_ = dsi_cmd_fifo_status;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dsi_cmd_fifo_status)
}
void FtraceEvent::clear_dsi_cmd_fifo_status() {
  if (event_case() == kDsiCmdFifoStatus) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dsi_cmd_fifo_status_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dsi_rx(::perfetto::protos::DsiRxFtraceEvent* dsi_rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dsi_rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dsi_rx));
    if (message_arena != submessage_arena) {
      dsi_rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dsi_rx, submessage_arena);
    }
    set_has_dsi_rx();
    _impl_.event_.dsi_rx_ = dsi_rx;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dsi_rx)
}
void FtraceEvent::clear_dsi_rx() {
  if (event_case() == kDsiRx) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dsi_rx_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_dsi_tx(::perfetto::protos::DsiTxFtraceEvent* dsi_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (dsi_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dsi_tx));
    if (message_arena != submessage_arena) {
      dsi_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dsi_tx, submessage_arena);
    }
    set_has_dsi_tx();
    _impl_.event_.dsi_tx_ = dsi_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.dsi_tx)
}
void FtraceEvent::clear_dsi_tx() {
  if (event_case() == kDsiTx) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.dsi_tx_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_android_fs_dataread_end(::perfetto::protos::AndroidFsDatareadEndFtraceEvent* android_fs_dataread_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (android_fs_dataread_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_fs_dataread_end));
    if (message_arena != submessage_arena) {
      android_fs_dataread_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_fs_dataread_end, submessage_arena);
    }
    set_has_android_fs_dataread_end();
    _impl_.event_.android_fs_dataread_end_ = android_fs_dataread_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.android_fs_dataread_end)
}
void FtraceEvent::clear_android_fs_dataread_end() {
  if (event_case() == kAndroidFsDatareadEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.android_fs_dataread_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_android_fs_dataread_start(::perfetto::protos::AndroidFsDatareadStartFtraceEvent* android_fs_dataread_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (android_fs_dataread_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_fs_dataread_start));
    if (message_arena != submessage_arena) {
      android_fs_dataread_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_fs_dataread_start, submessage_arena);
    }
    set_has_android_fs_dataread_start();
    _impl_.event_.android_fs_dataread_start_ = android_fs_dataread_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.android_fs_dataread_start)
}
void FtraceEvent::clear_android_fs_dataread_start() {
  if (event_case() == kAndroidFsDatareadStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.android_fs_dataread_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_android_fs_datawrite_end(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* android_fs_datawrite_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (android_fs_datawrite_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_fs_datawrite_end));
    if (message_arena != submessage_arena) {
      android_fs_datawrite_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_fs_datawrite_end, submessage_arena);
    }
    set_has_android_fs_datawrite_end();
    _impl_.event_.android_fs_datawrite_end_ = android_fs_datawrite_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.android_fs_datawrite_end)
}
void FtraceEvent::clear_android_fs_datawrite_end() {
  if (event_case() == kAndroidFsDatawriteEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.android_fs_datawrite_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_android_fs_datawrite_start(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* android_fs_datawrite_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (android_fs_datawrite_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_fs_datawrite_start));
    if (message_arena != submessage_arena) {
      android_fs_datawrite_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_fs_datawrite_start, submessage_arena);
    }
    set_has_android_fs_datawrite_start();
    _impl_.event_.android_fs_datawrite_start_ = android_fs_datawrite_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.android_fs_datawrite_start)
}
void FtraceEvent::clear_android_fs_datawrite_start() {
  if (event_case() == kAndroidFsDatawriteStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.android_fs_datawrite_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_android_fs_fsync_end(::perfetto::protos::AndroidFsFsyncEndFtraceEvent* android_fs_fsync_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (android_fs_fsync_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_fs_fsync_end));
    if (message_arena != submessage_arena) {
      android_fs_fsync_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_fs_fsync_end, submessage_arena);
    }
    set_has_android_fs_fsync_end();
    _impl_.event_.android_fs_fsync_end_ = android_fs_fsync_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.android_fs_fsync_end)
}
void FtraceEvent::clear_android_fs_fsync_end() {
  if (event_case() == kAndroidFsFsyncEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.android_fs_fsync_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_android_fs_fsync_start(::perfetto::protos::AndroidFsFsyncStartFtraceEvent* android_fs_fsync_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (android_fs_fsync_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_fs_fsync_start));
    if (message_arena != submessage_arena) {
      android_fs_fsync_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_fs_fsync_start, submessage_arena);
    }
    set_has_android_fs_fsync_start();
    _impl_.event_.android_fs_fsync_start_ = android_fs_fsync_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.android_fs_fsync_start)
}
void FtraceEvent::clear_android_fs_fsync_start() {
  if (event_case() == kAndroidFsFsyncStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.android_fs_fsync_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_funcgraph_entry(::perfetto::protos::FuncgraphEntryFtraceEvent* funcgraph_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (funcgraph_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(funcgraph_entry));
    if (message_arena != submessage_arena) {
      funcgraph_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funcgraph_entry, submessage_arena);
    }
    set_has_funcgraph_entry();
    _impl_.event_.funcgraph_entry_ = funcgraph_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.funcgraph_entry)
}
void FtraceEvent::clear_funcgraph_entry() {
  if (event_case() == kFuncgraphEntry) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.funcgraph_entry_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_funcgraph_exit(::perfetto::protos::FuncgraphExitFtraceEvent* funcgraph_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (funcgraph_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(funcgraph_exit));
    if (message_arena != submessage_arena) {
      funcgraph_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funcgraph_exit, submessage_arena);
    }
    set_has_funcgraph_exit();
    _impl_.event_.funcgraph_exit_ = funcgraph_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.funcgraph_exit)
}
void FtraceEvent::clear_funcgraph_exit() {
  if (event_case() == kFuncgraphExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.funcgraph_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_virtio_video_cmd(::perfetto::protos::VirtioVideoCmdFtraceEvent* virtio_video_cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (virtio_video_cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtio_video_cmd));
    if (message_arena != submessage_arena) {
      virtio_video_cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_video_cmd, submessage_arena);
    }
    set_has_virtio_video_cmd();
    _impl_.event_.virtio_video_cmd_ = virtio_video_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.virtio_video_cmd)
}
void FtraceEvent::clear_virtio_video_cmd() {
  if (event_case() == kVirtioVideoCmd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.virtio_video_cmd_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_virtio_video_cmd_done(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* virtio_video_cmd_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (virtio_video_cmd_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtio_video_cmd_done));
    if (message_arena != submessage_arena) {
      virtio_video_cmd_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_video_cmd_done, submessage_arena);
    }
    set_has_virtio_video_cmd_done();
    _impl_.event_.virtio_video_cmd_done_ = virtio_video_cmd_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.virtio_video_cmd_done)
}
void FtraceEvent::clear_virtio_video_cmd_done() {
  if (event_case() == kVirtioVideoCmdDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.virtio_video_cmd_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_virtio_video_resource_queue(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* virtio_video_resource_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (virtio_video_resource_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtio_video_resource_queue));
    if (message_arena != submessage_arena) {
      virtio_video_resource_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_video_resource_queue, submessage_arena);
    }
    set_has_virtio_video_resource_queue();
    _impl_.event_.virtio_video_resource_queue_ = virtio_video_resource_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.virtio_video_resource_queue)
}
void FtraceEvent::clear_virtio_video_resource_queue() {
  if (event_case() == kVirtioVideoResourceQueue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.virtio_video_resource_queue_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_virtio_video_resource_queue_done(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* virtio_video_resource_queue_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (virtio_video_resource_queue_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtio_video_resource_queue_done));
    if (message_arena != submessage_arena) {
      virtio_video_resource_queue_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_video_resource_queue_done, submessage_arena);
    }
    set_has_virtio_video_resource_queue_done();
    _impl_.event_.virtio_video_resource_queue_done_ = virtio_video_resource_queue_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.virtio_video_resource_queue_done)
}
void FtraceEvent::clear_virtio_video_resource_queue_done() {
  if (event_case() == kVirtioVideoResourceQueueDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.virtio_video_resource_queue_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_shrink_slab_start(::perfetto::protos::MmShrinkSlabStartFtraceEvent* mm_shrink_slab_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_shrink_slab_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_shrink_slab_start));
    if (message_arena != submessage_arena) {
      mm_shrink_slab_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_shrink_slab_start, submessage_arena);
    }
    set_has_mm_shrink_slab_start();
    _impl_.event_.mm_shrink_slab_start_ = mm_shrink_slab_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_shrink_slab_start)
}
void FtraceEvent::clear_mm_shrink_slab_start() {
  if (event_case() == kMmShrinkSlabStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_shrink_slab_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mm_shrink_slab_end(::perfetto::protos::MmShrinkSlabEndFtraceEvent* mm_shrink_slab_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mm_shrink_slab_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mm_shrink_slab_end));
    if (message_arena != submessage_arena) {
      mm_shrink_slab_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mm_shrink_slab_end, submessage_arena);
    }
    set_has_mm_shrink_slab_end();
    _impl_.event_.mm_shrink_slab_end_ = mm_shrink_slab_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mm_shrink_slab_end)
}
void FtraceEvent::clear_mm_shrink_slab_end() {
  if (event_case() == kMmShrinkSlabEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mm_shrink_slab_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_smc(::perfetto::protos::TrustySmcFtraceEvent* trusty_smc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_smc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_smc));
    if (message_arena != submessage_arena) {
      trusty_smc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_smc, submessage_arena);
    }
    set_has_trusty_smc();
    _impl_.event_.trusty_smc_ = trusty_smc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_smc)
}
void FtraceEvent::clear_trusty_smc() {
  if (event_case() == kTrustySmc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_smc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_smc_done(::perfetto::protos::TrustySmcDoneFtraceEvent* trusty_smc_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_smc_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_smc_done));
    if (message_arena != submessage_arena) {
      trusty_smc_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_smc_done, submessage_arena);
    }
    set_has_trusty_smc_done();
    _impl_.event_.trusty_smc_done_ = trusty_smc_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_smc_done)
}
void FtraceEvent::clear_trusty_smc_done() {
  if (event_case() == kTrustySmcDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_smc_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_std_call32(::perfetto::protos::TrustyStdCall32FtraceEvent* trusty_std_call32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_std_call32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_std_call32));
    if (message_arena != submessage_arena) {
      trusty_std_call32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_std_call32, submessage_arena);
    }
    set_has_trusty_std_call32();
    _impl_.event_.trusty_std_call32_ = trusty_std_call32;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_std_call32)
}
void FtraceEvent::clear_trusty_std_call32() {
  if (event_case() == kTrustyStdCall32) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_std_call32_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_std_call32_done(::perfetto::protos::TrustyStdCall32DoneFtraceEvent* trusty_std_call32_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_std_call32_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_std_call32_done));
    if (message_arena != submessage_arena) {
      trusty_std_call32_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_std_call32_done, submessage_arena);
    }
    set_has_trusty_std_call32_done();
    _impl_.event_.trusty_std_call32_done_ = trusty_std_call32_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_std_call32_done)
}
void FtraceEvent::clear_trusty_std_call32_done() {
  if (event_case() == kTrustyStdCall32Done) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_std_call32_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_share_memory(::perfetto::protos::TrustyShareMemoryFtraceEvent* trusty_share_memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_share_memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_share_memory));
    if (message_arena != submessage_arena) {
      trusty_share_memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_share_memory, submessage_arena);
    }
    set_has_trusty_share_memory();
    _impl_.event_.trusty_share_memory_ = trusty_share_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_share_memory)
}
void FtraceEvent::clear_trusty_share_memory() {
  if (event_case() == kTrustyShareMemory) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_share_memory_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_share_memory_done(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* trusty_share_memory_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_share_memory_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_share_memory_done));
    if (message_arena != submessage_arena) {
      trusty_share_memory_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_share_memory_done, submessage_arena);
    }
    set_has_trusty_share_memory_done();
    _impl_.event_.trusty_share_memory_done_ = trusty_share_memory_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_share_memory_done)
}
void FtraceEvent::clear_trusty_share_memory_done() {
  if (event_case() == kTrustyShareMemoryDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_share_memory_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_reclaim_memory(::perfetto::protos::TrustyReclaimMemoryFtraceEvent* trusty_reclaim_memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_reclaim_memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_reclaim_memory));
    if (message_arena != submessage_arena) {
      trusty_reclaim_memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_reclaim_memory, submessage_arena);
    }
    set_has_trusty_reclaim_memory();
    _impl_.event_.trusty_reclaim_memory_ = trusty_reclaim_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_reclaim_memory)
}
void FtraceEvent::clear_trusty_reclaim_memory() {
  if (event_case() == kTrustyReclaimMemory) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_reclaim_memory_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_reclaim_memory_done(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* trusty_reclaim_memory_done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_reclaim_memory_done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_reclaim_memory_done));
    if (message_arena != submessage_arena) {
      trusty_reclaim_memory_done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_reclaim_memory_done, submessage_arena);
    }
    set_has_trusty_reclaim_memory_done();
    _impl_.event_.trusty_reclaim_memory_done_ = trusty_reclaim_memory_done;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_reclaim_memory_done)
}
void FtraceEvent::clear_trusty_reclaim_memory_done() {
  if (event_case() == kTrustyReclaimMemoryDone) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_reclaim_memory_done_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_irq(::perfetto::protos::TrustyIrqFtraceEvent* trusty_irq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_irq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_irq));
    if (message_arena != submessage_arena) {
      trusty_irq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_irq, submessage_arena);
    }
    set_has_trusty_irq();
    _impl_.event_.trusty_irq_ = trusty_irq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_irq)
}
void FtraceEvent::clear_trusty_irq() {
  if (event_case() == kTrustyIrq) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_irq_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_handle_event(::perfetto::protos::TrustyIpcHandleEventFtraceEvent* trusty_ipc_handle_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_handle_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_handle_event));
    if (message_arena != submessage_arena) {
      trusty_ipc_handle_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_handle_event, submessage_arena);
    }
    set_has_trusty_ipc_handle_event();
    _impl_.event_.trusty_ipc_handle_event_ = trusty_ipc_handle_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_handle_event)
}
void FtraceEvent::clear_trusty_ipc_handle_event() {
  if (event_case() == kTrustyIpcHandleEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_handle_event_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_connect(::perfetto::protos::TrustyIpcConnectFtraceEvent* trusty_ipc_connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_connect));
    if (message_arena != submessage_arena) {
      trusty_ipc_connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_connect, submessage_arena);
    }
    set_has_trusty_ipc_connect();
    _impl_.event_.trusty_ipc_connect_ = trusty_ipc_connect;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_connect)
}
void FtraceEvent::clear_trusty_ipc_connect() {
  if (event_case() == kTrustyIpcConnect) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_connect_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_connect_end(::perfetto::protos::TrustyIpcConnectEndFtraceEvent* trusty_ipc_connect_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_connect_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_connect_end));
    if (message_arena != submessage_arena) {
      trusty_ipc_connect_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_connect_end, submessage_arena);
    }
    set_has_trusty_ipc_connect_end();
    _impl_.event_.trusty_ipc_connect_end_ = trusty_ipc_connect_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_connect_end)
}
void FtraceEvent::clear_trusty_ipc_connect_end() {
  if (event_case() == kTrustyIpcConnectEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_connect_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_write(::perfetto::protos::TrustyIpcWriteFtraceEvent* trusty_ipc_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_write));
    if (message_arena != submessage_arena) {
      trusty_ipc_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_write, submessage_arena);
    }
    set_has_trusty_ipc_write();
    _impl_.event_.trusty_ipc_write_ = trusty_ipc_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_write)
}
void FtraceEvent::clear_trusty_ipc_write() {
  if (event_case() == kTrustyIpcWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_poll(::perfetto::protos::TrustyIpcPollFtraceEvent* trusty_ipc_poll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_poll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_poll));
    if (message_arena != submessage_arena) {
      trusty_ipc_poll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_poll, submessage_arena);
    }
    set_has_trusty_ipc_poll();
    _impl_.event_.trusty_ipc_poll_ = trusty_ipc_poll;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_poll)
}
void FtraceEvent::clear_trusty_ipc_poll() {
  if (event_case() == kTrustyIpcPoll) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_poll_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_read(::perfetto::protos::TrustyIpcReadFtraceEvent* trusty_ipc_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_read));
    if (message_arena != submessage_arena) {
      trusty_ipc_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_read, submessage_arena);
    }
    set_has_trusty_ipc_read();
    _impl_.event_.trusty_ipc_read_ = trusty_ipc_read;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_read)
}
void FtraceEvent::clear_trusty_ipc_read() {
  if (event_case() == kTrustyIpcRead) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_read_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_read_end(::perfetto::protos::TrustyIpcReadEndFtraceEvent* trusty_ipc_read_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_read_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_read_end));
    if (message_arena != submessage_arena) {
      trusty_ipc_read_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_read_end, submessage_arena);
    }
    set_has_trusty_ipc_read_end();
    _impl_.event_.trusty_ipc_read_end_ = trusty_ipc_read_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_read_end)
}
void FtraceEvent::clear_trusty_ipc_read_end() {
  if (event_case() == kTrustyIpcReadEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_read_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_ipc_rx(::perfetto::protos::TrustyIpcRxFtraceEvent* trusty_ipc_rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_ipc_rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_ipc_rx));
    if (message_arena != submessage_arena) {
      trusty_ipc_rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_ipc_rx, submessage_arena);
    }
    set_has_trusty_ipc_rx();
    _impl_.event_.trusty_ipc_rx_ = trusty_ipc_rx;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_rx)
}
void FtraceEvent::clear_trusty_ipc_rx() {
  if (event_case() == kTrustyIpcRx) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_ipc_rx_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_trusty_enqueue_nop(::perfetto::protos::TrustyEnqueueNopFtraceEvent* trusty_enqueue_nop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trusty_enqueue_nop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusty_enqueue_nop));
    if (message_arena != submessage_arena) {
      trusty_enqueue_nop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusty_enqueue_nop, submessage_arena);
    }
    set_has_trusty_enqueue_nop();
    _impl_.event_.trusty_enqueue_nop_ = trusty_enqueue_nop;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.trusty_enqueue_nop)
}
void FtraceEvent::clear_trusty_enqueue_nop() {
  if (event_case() == kTrustyEnqueueNop) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.trusty_enqueue_nop_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cma_alloc_start(::perfetto::protos::CmaAllocStartFtraceEvent* cma_alloc_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cma_alloc_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cma_alloc_start));
    if (message_arena != submessage_arena) {
      cma_alloc_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cma_alloc_start, submessage_arena);
    }
    set_has_cma_alloc_start();
    _impl_.event_.cma_alloc_start_ = cma_alloc_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cma_alloc_start)
}
void FtraceEvent::clear_cma_alloc_start() {
  if (event_case() == kCmaAllocStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cma_alloc_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_cma_alloc_info(::perfetto::protos::CmaAllocInfoFtraceEvent* cma_alloc_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (cma_alloc_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cma_alloc_info));
    if (message_arena != submessage_arena) {
      cma_alloc_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cma_alloc_info, submessage_arena);
    }
    set_has_cma_alloc_info();
    _impl_.event_.cma_alloc_info_ = cma_alloc_info;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.cma_alloc_info)
}
void FtraceEvent::clear_cma_alloc_info() {
  if (event_case() == kCmaAllocInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cma_alloc_info_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_lwis_tracing_mark_write(::perfetto::protos::LwisTracingMarkWriteFtraceEvent* lwis_tracing_mark_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (lwis_tracing_mark_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lwis_tracing_mark_write));
    if (message_arena != submessage_arena) {
      lwis_tracing_mark_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lwis_tracing_mark_write, submessage_arena);
    }
    set_has_lwis_tracing_mark_write();
    _impl_.event_.lwis_tracing_mark_write_ = lwis_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.lwis_tracing_mark_write)
}
void FtraceEvent::clear_lwis_tracing_mark_write() {
  if (event_case() == kLwisTracingMarkWrite) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.lwis_tracing_mark_write_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_virtio_gpu_cmd_queue(::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* virtio_gpu_cmd_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (virtio_gpu_cmd_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtio_gpu_cmd_queue));
    if (message_arena != submessage_arena) {
      virtio_gpu_cmd_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_gpu_cmd_queue, submessage_arena);
    }
    set_has_virtio_gpu_cmd_queue();
    _impl_.event_.virtio_gpu_cmd_queue_ = virtio_gpu_cmd_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.virtio_gpu_cmd_queue)
}
void FtraceEvent::clear_virtio_gpu_cmd_queue() {
  if (event_case() == kVirtioGpuCmdQueue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.virtio_gpu_cmd_queue_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_virtio_gpu_cmd_response(::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* virtio_gpu_cmd_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (virtio_gpu_cmd_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtio_gpu_cmd_response));
    if (message_arena != submessage_arena) {
      virtio_gpu_cmd_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtio_gpu_cmd_response, submessage_arena);
    }
    set_has_virtio_gpu_cmd_response();
    _impl_.event_.virtio_gpu_cmd_response_ = virtio_gpu_cmd_response;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.virtio_gpu_cmd_response)
}
void FtraceEvent::clear_virtio_gpu_cmd_response() {
  if (event_case() == kVirtioGpuCmdResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.virtio_gpu_cmd_response_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_kcpu_cqs_set(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* mali_mali_kcpu_cqs_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_kcpu_cqs_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_kcpu_cqs_set));
    if (message_arena != submessage_arena) {
      mali_mali_kcpu_cqs_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_kcpu_cqs_set, submessage_arena);
    }
    set_has_mali_mali_kcpu_cqs_set();
    _impl_.event_.mali_mali_kcpu_cqs_set_ = mali_mali_kcpu_cqs_set;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_SET)
}
void FtraceEvent::clear_mali_mali_kcpu_cqs_set() {
  if (event_case() == kMaliMaliKCPUCQSSET) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_kcpu_cqs_set_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_kcpu_cqs_wait_start(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* mali_mali_kcpu_cqs_wait_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_kcpu_cqs_wait_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_kcpu_cqs_wait_start));
    if (message_arena != submessage_arena) {
      mali_mali_kcpu_cqs_wait_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_kcpu_cqs_wait_start, submessage_arena);
    }
    set_has_mali_mali_kcpu_cqs_wait_start();
    _impl_.event_.mali_mali_kcpu_cqs_wait_start_ = mali_mali_kcpu_cqs_wait_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_START)
}
void FtraceEvent::clear_mali_mali_kcpu_cqs_wait_start() {
  if (event_case() == kMaliMaliKCPUCQSWAITSTART) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_kcpu_cqs_wait_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_kcpu_cqs_wait_end(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* mali_mali_kcpu_cqs_wait_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_kcpu_cqs_wait_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_kcpu_cqs_wait_end));
    if (message_arena != submessage_arena) {
      mali_mali_kcpu_cqs_wait_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_kcpu_cqs_wait_end, submessage_arena);
    }
    set_has_mali_mali_kcpu_cqs_wait_end();
    _impl_.event_.mali_mali_kcpu_cqs_wait_end_ = mali_mali_kcpu_cqs_wait_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_END)
}
void FtraceEvent::clear_mali_mali_kcpu_cqs_wait_end() {
  if (event_case() == kMaliMaliKCPUCQSWAITEND) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_kcpu_cqs_wait_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_kcpu_fence_signal(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* mali_mali_kcpu_fence_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_kcpu_fence_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_kcpu_fence_signal));
    if (message_arena != submessage_arena) {
      mali_mali_kcpu_fence_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_kcpu_fence_signal, submessage_arena);
    }
    set_has_mali_mali_kcpu_fence_signal();
    _impl_.event_.mali_mali_kcpu_fence_signal_ = mali_mali_kcpu_fence_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_SIGNAL)
}
void FtraceEvent::clear_mali_mali_kcpu_fence_signal() {
  if (event_case() == kMaliMaliKCPUFENCESIGNAL) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_kcpu_fence_signal_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_kcpu_fence_wait_start(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* mali_mali_kcpu_fence_wait_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_kcpu_fence_wait_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_kcpu_fence_wait_start));
    if (message_arena != submessage_arena) {
      mali_mali_kcpu_fence_wait_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_kcpu_fence_wait_start, submessage_arena);
    }
    set_has_mali_mali_kcpu_fence_wait_start();
    _impl_.event_.mali_mali_kcpu_fence_wait_start_ = mali_mali_kcpu_fence_wait_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_START)
}
void FtraceEvent::clear_mali_mali_kcpu_fence_wait_start() {
  if (event_case() == kMaliMaliKCPUFENCEWAITSTART) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_kcpu_fence_wait_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_kcpu_fence_wait_end(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* mali_mali_kcpu_fence_wait_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_kcpu_fence_wait_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_kcpu_fence_wait_end));
    if (message_arena != submessage_arena) {
      mali_mali_kcpu_fence_wait_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_kcpu_fence_wait_end, submessage_arena);
    }
    set_has_mali_mali_kcpu_fence_wait_end();
    _impl_.event_.mali_mali_kcpu_fence_wait_end_ = mali_mali_kcpu_fence_wait_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_END)
}
void FtraceEvent::clear_mali_mali_kcpu_fence_wait_end() {
  if (event_case() == kMaliMaliKCPUFENCEWAITEND) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_kcpu_fence_wait_end_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_hyp_enter(::perfetto::protos::HypEnterFtraceEvent* hyp_enter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (hyp_enter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyp_enter));
    if (message_arena != submessage_arena) {
      hyp_enter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hyp_enter, submessage_arena);
    }
    set_has_hyp_enter();
    _impl_.event_.hyp_enter_ = hyp_enter;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.hyp_enter)
}
void FtraceEvent::clear_hyp_enter() {
  if (event_case() == kHypEnter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.hyp_enter_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_hyp_exit(::perfetto::protos::HypExitFtraceEvent* hyp_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (hyp_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyp_exit));
    if (message_arena != submessage_arena) {
      hyp_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hyp_exit, submessage_arena);
    }
    set_has_hyp_exit();
    _impl_.event_.hyp_exit_ = hyp_exit;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.hyp_exit)
}
void FtraceEvent::clear_hyp_exit() {
  if (event_case() == kHypExit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.hyp_exit_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_host_hcall(::perfetto::protos::HostHcallFtraceEvent* host_hcall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (host_hcall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_hcall));
    if (message_arena != submessage_arena) {
      host_hcall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_hcall, submessage_arena);
    }
    set_has_host_hcall();
    _impl_.event_.host_hcall_ = host_hcall;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.host_hcall)
}
void FtraceEvent::clear_host_hcall() {
  if (event_case() == kHostHcall) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.host_hcall_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_host_smc(::perfetto::protos::HostSmcFtraceEvent* host_smc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (host_smc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_smc));
    if (message_arena != submessage_arena) {
      host_smc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_smc, submessage_arena);
    }
    set_has_host_smc();
    _impl_.event_.host_smc_ = host_smc;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.host_smc)
}
void FtraceEvent::clear_host_smc() {
  if (event_case() == kHostSmc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.host_smc_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_host_mem_abort(::perfetto::protos::HostMemAbortFtraceEvent* host_mem_abort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (host_mem_abort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_mem_abort));
    if (message_arena != submessage_arena) {
      host_mem_abort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_mem_abort, submessage_arena);
    }
    set_has_host_mem_abort();
    _impl_.event_.host_mem_abort_ = host_mem_abort;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.host_mem_abort)
}
void FtraceEvent::clear_host_mem_abort() {
  if (event_case() == kHostMemAbort) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.host_mem_abort_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_suspend_resume_minimal(::perfetto::protos::SuspendResumeMinimalFtraceEvent* suspend_resume_minimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (suspend_resume_minimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suspend_resume_minimal));
    if (message_arena != submessage_arena) {
      suspend_resume_minimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspend_resume_minimal, submessage_arena);
    }
    set_has_suspend_resume_minimal();
    _impl_.event_.suspend_resume_minimal_ = suspend_resume_minimal;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.suspend_resume_minimal)
}
void FtraceEvent::clear_suspend_resume_minimal() {
  if (event_case() == kSuspendResumeMinimal) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.suspend_resume_minimal_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_csf_interrupt_start(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* mali_mali_csf_interrupt_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_csf_interrupt_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_csf_interrupt_start));
    if (message_arena != submessage_arena) {
      mali_mali_csf_interrupt_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_csf_interrupt_start, submessage_arena);
    }
    set_has_mali_mali_csf_interrupt_start();
    _impl_.event_.mali_mali_csf_interrupt_start_ = mali_mali_csf_interrupt_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_START)
}
void FtraceEvent::clear_mali_mali_csf_interrupt_start() {
  if (event_case() == kMaliMaliCSFINTERRUPTSTART) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_csf_interrupt_start_;
    }
    clear_has_event();
  }
}
void FtraceEvent::set_allocated_mali_mali_csf_interrupt_end(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* mali_mali_csf_interrupt_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (mali_mali_csf_interrupt_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mali_mali_csf_interrupt_end));
    if (message_arena != submessage_arena) {
      mali_mali_csf_interrupt_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mali_mali_csf_interrupt_end, submessage_arena);
    }
    set_has_mali_mali_csf_interrupt_end();
    _impl_.event_.mali_mali_csf_interrupt_end_ = mali_mali_csf_interrupt_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_END)
}
void FtraceEvent::clear_mali_mali_csf_interrupt_end() {
  if (event_case() == kMaliMaliCSFINTERRUPTEND) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.mali_mali_csf_interrupt_end_;
    }
    clear_has_event();
  }
}
FtraceEvent::FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceEvent)
}
FtraceEvent::FtraceEvent(const FtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.common_flags_) {}

    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.common_flags_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.common_flags_));
  clear_has_event();
  switch (from.event_case()) {
    case kPrint: {
      _this->_internal_mutable_print()->::perfetto::protos::PrintFtraceEvent::MergeFrom(
          from._internal_print());
      break;
    }
    case kSchedSwitch: {
      _this->_internal_mutable_sched_switch()->::perfetto::protos::SchedSwitchFtraceEvent::MergeFrom(
          from._internal_sched_switch());
      break;
    }
    case kCpuFrequency: {
      _this->_internal_mutable_cpu_frequency()->::perfetto::protos::CpuFrequencyFtraceEvent::MergeFrom(
          from._internal_cpu_frequency());
      break;
    }
    case kCpuFrequencyLimits: {
      _this->_internal_mutable_cpu_frequency_limits()->::perfetto::protos::CpuFrequencyLimitsFtraceEvent::MergeFrom(
          from._internal_cpu_frequency_limits());
      break;
    }
    case kCpuIdle: {
      _this->_internal_mutable_cpu_idle()->::perfetto::protos::CpuIdleFtraceEvent::MergeFrom(
          from._internal_cpu_idle());
      break;
    }
    case kClockEnable: {
      _this->_internal_mutable_clock_enable()->::perfetto::protos::ClockEnableFtraceEvent::MergeFrom(
          from._internal_clock_enable());
      break;
    }
    case kClockDisable: {
      _this->_internal_mutable_clock_disable()->::perfetto::protos::ClockDisableFtraceEvent::MergeFrom(
          from._internal_clock_disable());
      break;
    }
    case kClockSetRate: {
      _this->_internal_mutable_clock_set_rate()->::perfetto::protos::ClockSetRateFtraceEvent::MergeFrom(
          from._internal_clock_set_rate());
      break;
    }
    case kSchedWakeup: {
      _this->_internal_mutable_sched_wakeup()->::perfetto::protos::SchedWakeupFtraceEvent::MergeFrom(
          from._internal_sched_wakeup());
      break;
    }
    case kSchedBlockedReason: {
      _this->_internal_mutable_sched_blocked_reason()->::perfetto::protos::SchedBlockedReasonFtraceEvent::MergeFrom(
          from._internal_sched_blocked_reason());
      break;
    }
    case kSchedCpuHotplug: {
      _this->_internal_mutable_sched_cpu_hotplug()->::perfetto::protos::SchedCpuHotplugFtraceEvent::MergeFrom(
          from._internal_sched_cpu_hotplug());
      break;
    }
    case kSchedWaking: {
      _this->_internal_mutable_sched_waking()->::perfetto::protos::SchedWakingFtraceEvent::MergeFrom(
          from._internal_sched_waking());
      break;
    }
    case kIpiEntry: {
      _this->_internal_mutable_ipi_entry()->::perfetto::protos::IpiEntryFtraceEvent::MergeFrom(
          from._internal_ipi_entry());
      break;
    }
    case kIpiExit: {
      _this->_internal_mutable_ipi_exit()->::perfetto::protos::IpiExitFtraceEvent::MergeFrom(
          from._internal_ipi_exit());
      break;
    }
    case kIpiRaise: {
      _this->_internal_mutable_ipi_raise()->::perfetto::protos::IpiRaiseFtraceEvent::MergeFrom(
          from._internal_ipi_raise());
      break;
    }
    case kSoftirqEntry: {
      _this->_internal_mutable_softirq_entry()->::perfetto::protos::SoftirqEntryFtraceEvent::MergeFrom(
          from._internal_softirq_entry());
      break;
    }
    case kSoftirqExit: {
      _this->_internal_mutable_softirq_exit()->::perfetto::protos::SoftirqExitFtraceEvent::MergeFrom(
          from._internal_softirq_exit());
      break;
    }
    case kSoftirqRaise: {
      _this->_internal_mutable_softirq_raise()->::perfetto::protos::SoftirqRaiseFtraceEvent::MergeFrom(
          from._internal_softirq_raise());
      break;
    }
    case kI2CRead: {
      _this->_internal_mutable_i2c_read()->::perfetto::protos::I2cReadFtraceEvent::MergeFrom(
          from._internal_i2c_read());
      break;
    }
    case kI2CWrite: {
      _this->_internal_mutable_i2c_write()->::perfetto::protos::I2cWriteFtraceEvent::MergeFrom(
          from._internal_i2c_write());
      break;
    }
    case kI2CResult: {
      _this->_internal_mutable_i2c_result()->::perfetto::protos::I2cResultFtraceEvent::MergeFrom(
          from._internal_i2c_result());
      break;
    }
    case kI2CReply: {
      _this->_internal_mutable_i2c_reply()->::perfetto::protos::I2cReplyFtraceEvent::MergeFrom(
          from._internal_i2c_reply());
      break;
    }
    case kSmbusRead: {
      _this->_internal_mutable_smbus_read()->::perfetto::protos::SmbusReadFtraceEvent::MergeFrom(
          from._internal_smbus_read());
      break;
    }
    case kSmbusWrite: {
      _this->_internal_mutable_smbus_write()->::perfetto::protos::SmbusWriteFtraceEvent::MergeFrom(
          from._internal_smbus_write());
      break;
    }
    case kSmbusResult: {
      _this->_internal_mutable_smbus_result()->::perfetto::protos::SmbusResultFtraceEvent::MergeFrom(
          from._internal_smbus_result());
      break;
    }
    case kSmbusReply: {
      _this->_internal_mutable_smbus_reply()->::perfetto::protos::SmbusReplyFtraceEvent::MergeFrom(
          from._internal_smbus_reply());
      break;
    }
    case kLowmemoryKill: {
      _this->_internal_mutable_lowmemory_kill()->::perfetto::protos::LowmemoryKillFtraceEvent::MergeFrom(
          from._internal_lowmemory_kill());
      break;
    }
    case kIrqHandlerEntry: {
      _this->_internal_mutable_irq_handler_entry()->::perfetto::protos::IrqHandlerEntryFtraceEvent::MergeFrom(
          from._internal_irq_handler_entry());
      break;
    }
    case kIrqHandlerExit: {
      _this->_internal_mutable_irq_handler_exit()->::perfetto::protos::IrqHandlerExitFtraceEvent::MergeFrom(
          from._internal_irq_handler_exit());
      break;
    }
    case kSyncPt: {
      _this->_internal_mutable_sync_pt()->::perfetto::protos::SyncPtFtraceEvent::MergeFrom(
          from._internal_sync_pt());
      break;
    }
    case kSyncTimeline: {
      _this->_internal_mutable_sync_timeline()->::perfetto::protos::SyncTimelineFtraceEvent::MergeFrom(
          from._internal_sync_timeline());
      break;
    }
    case kSyncWait: {
      _this->_internal_mutable_sync_wait()->::perfetto::protos::SyncWaitFtraceEvent::MergeFrom(
          from._internal_sync_wait());
      break;
    }
    case kExt4DaWriteBegin: {
      _this->_internal_mutable_ext4_da_write_begin()->::perfetto::protos::Ext4DaWriteBeginFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_begin());
      break;
    }
    case kExt4DaWriteEnd: {
      _this->_internal_mutable_ext4_da_write_end()->::perfetto::protos::Ext4DaWriteEndFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_end());
      break;
    }
    case kExt4SyncFileEnter: {
      _this->_internal_mutable_ext4_sync_file_enter()->::perfetto::protos::Ext4SyncFileEnterFtraceEvent::MergeFrom(
          from._internal_ext4_sync_file_enter());
      break;
    }
    case kExt4SyncFileExit: {
      _this->_internal_mutable_ext4_sync_file_exit()->::perfetto::protos::Ext4SyncFileExitFtraceEvent::MergeFrom(
          from._internal_ext4_sync_file_exit());
      break;
    }
    case kBlockRqIssue: {
      _this->_internal_mutable_block_rq_issue()->::perfetto::protos::BlockRqIssueFtraceEvent::MergeFrom(
          from._internal_block_rq_issue());
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      _this->_internal_mutable_mm_vmscan_direct_reclaim_begin()->::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_direct_reclaim_begin());
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      _this->_internal_mutable_mm_vmscan_direct_reclaim_end()->::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_direct_reclaim_end());
      break;
    }
    case kMmVmscanKswapdWake: {
      _this->_internal_mutable_mm_vmscan_kswapd_wake()->::perfetto::protos::MmVmscanKswapdWakeFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_kswapd_wake());
      break;
    }
    case kMmVmscanKswapdSleep: {
      _this->_internal_mutable_mm_vmscan_kswapd_sleep()->::perfetto::protos::MmVmscanKswapdSleepFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_kswapd_sleep());
      break;
    }
    case kBinderTransaction: {
      _this->_internal_mutable_binder_transaction()->::perfetto::protos::BinderTransactionFtraceEvent::MergeFrom(
          from._internal_binder_transaction());
      break;
    }
    case kBinderTransactionReceived: {
      _this->_internal_mutable_binder_transaction_received()->::perfetto::protos::BinderTransactionReceivedFtraceEvent::MergeFrom(
          from._internal_binder_transaction_received());
      break;
    }
    case kBinderSetPriority: {
      _this->_internal_mutable_binder_set_priority()->::perfetto::protos::BinderSetPriorityFtraceEvent::MergeFrom(
          from._internal_binder_set_priority());
      break;
    }
    case kBinderLock: {
      _this->_internal_mutable_binder_lock()->::perfetto::protos::BinderLockFtraceEvent::MergeFrom(
          from._internal_binder_lock());
      break;
    }
    case kBinderLocked: {
      _this->_internal_mutable_binder_locked()->::perfetto::protos::BinderLockedFtraceEvent::MergeFrom(
          from._internal_binder_locked());
      break;
    }
    case kBinderUnlock: {
      _this->_internal_mutable_binder_unlock()->::perfetto::protos::BinderUnlockFtraceEvent::MergeFrom(
          from._internal_binder_unlock());
      break;
    }
    case kWorkqueueActivateWork: {
      _this->_internal_mutable_workqueue_activate_work()->::perfetto::protos::WorkqueueActivateWorkFtraceEvent::MergeFrom(
          from._internal_workqueue_activate_work());
      break;
    }
    case kWorkqueueExecuteEnd: {
      _this->_internal_mutable_workqueue_execute_end()->::perfetto::protos::WorkqueueExecuteEndFtraceEvent::MergeFrom(
          from._internal_workqueue_execute_end());
      break;
    }
    case kWorkqueueExecuteStart: {
      _this->_internal_mutable_workqueue_execute_start()->::perfetto::protos::WorkqueueExecuteStartFtraceEvent::MergeFrom(
          from._internal_workqueue_execute_start());
      break;
    }
    case kWorkqueueQueueWork: {
      _this->_internal_mutable_workqueue_queue_work()->::perfetto::protos::WorkqueueQueueWorkFtraceEvent::MergeFrom(
          from._internal_workqueue_queue_work());
      break;
    }
    case kRegulatorDisable: {
      _this->_internal_mutable_regulator_disable()->::perfetto::protos::RegulatorDisableFtraceEvent::MergeFrom(
          from._internal_regulator_disable());
      break;
    }
    case kRegulatorDisableComplete: {
      _this->_internal_mutable_regulator_disable_complete()->::perfetto::protos::RegulatorDisableCompleteFtraceEvent::MergeFrom(
          from._internal_regulator_disable_complete());
      break;
    }
    case kRegulatorEnable: {
      _this->_internal_mutable_regulator_enable()->::perfetto::protos::RegulatorEnableFtraceEvent::MergeFrom(
          from._internal_regulator_enable());
      break;
    }
    case kRegulatorEnableComplete: {
      _this->_internal_mutable_regulator_enable_complete()->::perfetto::protos::RegulatorEnableCompleteFtraceEvent::MergeFrom(
          from._internal_regulator_enable_complete());
      break;
    }
    case kRegulatorEnableDelay: {
      _this->_internal_mutable_regulator_enable_delay()->::perfetto::protos::RegulatorEnableDelayFtraceEvent::MergeFrom(
          from._internal_regulator_enable_delay());
      break;
    }
    case kRegulatorSetVoltage: {
      _this->_internal_mutable_regulator_set_voltage()->::perfetto::protos::RegulatorSetVoltageFtraceEvent::MergeFrom(
          from._internal_regulator_set_voltage());
      break;
    }
    case kRegulatorSetVoltageComplete: {
      _this->_internal_mutable_regulator_set_voltage_complete()->::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent::MergeFrom(
          from._internal_regulator_set_voltage_complete());
      break;
    }
    case kCgroupAttachTask: {
      _this->_internal_mutable_cgroup_attach_task()->::perfetto::protos::CgroupAttachTaskFtraceEvent::MergeFrom(
          from._internal_cgroup_attach_task());
      break;
    }
    case kCgroupMkdir: {
      _this->_internal_mutable_cgroup_mkdir()->::perfetto::protos::CgroupMkdirFtraceEvent::MergeFrom(
          from._internal_cgroup_mkdir());
      break;
    }
    case kCgroupRemount: {
      _this->_internal_mutable_cgroup_remount()->::perfetto::protos::CgroupRemountFtraceEvent::MergeFrom(
          from._internal_cgroup_remount());
      break;
    }
    case kCgroupRmdir: {
      _this->_internal_mutable_cgroup_rmdir()->::perfetto::protos::CgroupRmdirFtraceEvent::MergeFrom(
          from._internal_cgroup_rmdir());
      break;
    }
    case kCgroupTransferTasks: {
      _this->_internal_mutable_cgroup_transfer_tasks()->::perfetto::protos::CgroupTransferTasksFtraceEvent::MergeFrom(
          from._internal_cgroup_transfer_tasks());
      break;
    }
    case kCgroupDestroyRoot: {
      _this->_internal_mutable_cgroup_destroy_root()->::perfetto::protos::CgroupDestroyRootFtraceEvent::MergeFrom(
          from._internal_cgroup_destroy_root());
      break;
    }
    case kCgroupRelease: {
      _this->_internal_mutable_cgroup_release()->::perfetto::protos::CgroupReleaseFtraceEvent::MergeFrom(
          from._internal_cgroup_release());
      break;
    }
    case kCgroupRename: {
      _this->_internal_mutable_cgroup_rename()->::perfetto::protos::CgroupRenameFtraceEvent::MergeFrom(
          from._internal_cgroup_rename());
      break;
    }
    case kCgroupSetupRoot: {
      _this->_internal_mutable_cgroup_setup_root()->::perfetto::protos::CgroupSetupRootFtraceEvent::MergeFrom(
          from._internal_cgroup_setup_root());
      break;
    }
    case kMdpCmdKickoff: {
      _this->_internal_mutable_mdp_cmd_kickoff()->::perfetto::protos::MdpCmdKickoffFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_kickoff());
      break;
    }
    case kMdpCommit: {
      _this->_internal_mutable_mdp_commit()->::perfetto::protos::MdpCommitFtraceEvent::MergeFrom(
          from._internal_mdp_commit());
      break;
    }
    case kMdpPerfSetOt: {
      _this->_internal_mutable_mdp_perf_set_ot()->::perfetto::protos::MdpPerfSetOtFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_ot());
      break;
    }
    case kMdpSsppChange: {
      _this->_internal_mutable_mdp_sspp_change()->::perfetto::protos::MdpSsppChangeFtraceEvent::MergeFrom(
          from._internal_mdp_sspp_change());
      break;
    }
    case kTracingMarkWrite: {
      _this->_internal_mutable_tracing_mark_write()->::perfetto::protos::TracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_tracing_mark_write());
      break;
    }
    case kMdpCmdPingpongDone: {
      _this->_internal_mutable_mdp_cmd_pingpong_done()->::perfetto::protos::MdpCmdPingpongDoneFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_pingpong_done());
      break;
    }
    case kMdpCompareBw: {
      _this->_internal_mutable_mdp_compare_bw()->::perfetto::protos::MdpCompareBwFtraceEvent::MergeFrom(
          from._internal_mdp_compare_bw());
      break;
    }
    case kMdpPerfSetPanicLuts: {
      _this->_internal_mutable_mdp_perf_set_panic_luts()->::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_panic_luts());
      break;
    }
    case kMdpSsppSet: {
      _this->_internal_mutable_mdp_sspp_set()->::perfetto::protos::MdpSsppSetFtraceEvent::MergeFrom(
          from._internal_mdp_sspp_set());
      break;
    }
    case kMdpCmdReadptrDone: {
      _this->_internal_mutable_mdp_cmd_readptr_done()->::perfetto::protos::MdpCmdReadptrDoneFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_readptr_done());
      break;
    }
    case kMdpMisrCrc: {
      _this->_internal_mutable_mdp_misr_crc()->::perfetto::protos::MdpMisrCrcFtraceEvent::MergeFrom(
          from._internal_mdp_misr_crc());
      break;
    }
    case kMdpPerfSetQosLuts: {
      _this->_internal_mutable_mdp_perf_set_qos_luts()->::perfetto::protos::MdpPerfSetQosLutsFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_qos_luts());
      break;
    }
    case kMdpTraceCounter: {
      _this->_internal_mutable_mdp_trace_counter()->::perfetto::protos::MdpTraceCounterFtraceEvent::MergeFrom(
          from._internal_mdp_trace_counter());
      break;
    }
    case kMdpCmdReleaseBw: {
      _this->_internal_mutable_mdp_cmd_release_bw()->::perfetto::protos::MdpCmdReleaseBwFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_release_bw());
      break;
    }
    case kMdpMixerUpdate: {
      _this->_internal_mutable_mdp_mixer_update()->::perfetto::protos::MdpMixerUpdateFtraceEvent::MergeFrom(
          from._internal_mdp_mixer_update());
      break;
    }
    case kMdpPerfSetWmLevels: {
      _this->_internal_mutable_mdp_perf_set_wm_levels()->::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_wm_levels());
      break;
    }
    case kMdpVideoUnderrunDone: {
      _this->_internal_mutable_mdp_video_underrun_done()->::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent::MergeFrom(
          from._internal_mdp_video_underrun_done());
      break;
    }
    case kMdpCmdWaitPingpong: {
      _this->_internal_mutable_mdp_cmd_wait_pingpong()->::perfetto::protos::MdpCmdWaitPingpongFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_wait_pingpong());
      break;
    }
    case kMdpPerfPrefillCalc: {
      _this->_internal_mutable_mdp_perf_prefill_calc()->::perfetto::protos::MdpPerfPrefillCalcFtraceEvent::MergeFrom(
          from._internal_mdp_perf_prefill_calc());
      break;
    }
    case kMdpPerfUpdateBus: {
      _this->_internal_mutable_mdp_perf_update_bus()->::perfetto::protos::MdpPerfUpdateBusFtraceEvent::MergeFrom(
          from._internal_mdp_perf_update_bus());
      break;
    }
    case kRotatorBwAoAsContext: {
      _this->_internal_mutable_rotator_bw_ao_as_context()->::perfetto::protos::RotatorBwAoAsContextFtraceEvent::MergeFrom(
          from._internal_rotator_bw_ao_as_context());
      break;
    }
    case kMmFilemapAddToPageCache: {
      _this->_internal_mutable_mm_filemap_add_to_page_cache()->::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent::MergeFrom(
          from._internal_mm_filemap_add_to_page_cache());
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      _this->_internal_mutable_mm_filemap_delete_from_page_cache()->::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent::MergeFrom(
          from._internal_mm_filemap_delete_from_page_cache());
      break;
    }
    case kMmCompactionBegin: {
      _this->_internal_mutable_mm_compaction_begin()->::perfetto::protos::MmCompactionBeginFtraceEvent::MergeFrom(
          from._internal_mm_compaction_begin());
      break;
    }
    case kMmCompactionDeferCompaction: {
      _this->_internal_mutable_mm_compaction_defer_compaction()->::perfetto::protos::MmCompactionDeferCompactionFtraceEvent::MergeFrom(
          from._internal_mm_compaction_defer_compaction());
      break;
    }
    case kMmCompactionDeferred: {
      _this->_internal_mutable_mm_compaction_deferred()->::perfetto::protos::MmCompactionDeferredFtraceEvent::MergeFrom(
          from._internal_mm_compaction_deferred());
      break;
    }
    case kMmCompactionDeferReset: {
      _this->_internal_mutable_mm_compaction_defer_reset()->::perfetto::protos::MmCompactionDeferResetFtraceEvent::MergeFrom(
          from._internal_mm_compaction_defer_reset());
      break;
    }
    case kMmCompactionEnd: {
      _this->_internal_mutable_mm_compaction_end()->::perfetto::protos::MmCompactionEndFtraceEvent::MergeFrom(
          from._internal_mm_compaction_end());
      break;
    }
    case kMmCompactionFinished: {
      _this->_internal_mutable_mm_compaction_finished()->::perfetto::protos::MmCompactionFinishedFtraceEvent::MergeFrom(
          from._internal_mm_compaction_finished());
      break;
    }
    case kMmCompactionIsolateFreepages: {
      _this->_internal_mutable_mm_compaction_isolate_freepages()->::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_isolate_freepages());
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      _this->_internal_mutable_mm_compaction_isolate_migratepages()->::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_isolate_migratepages());
      break;
    }
    case kMmCompactionKcompactdSleep: {
      _this->_internal_mutable_mm_compaction_kcompactd_sleep()->::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent::MergeFrom(
          from._internal_mm_compaction_kcompactd_sleep());
      break;
    }
    case kMmCompactionKcompactdWake: {
      _this->_internal_mutable_mm_compaction_kcompactd_wake()->::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent::MergeFrom(
          from._internal_mm_compaction_kcompactd_wake());
      break;
    }
    case kMmCompactionMigratepages: {
      _this->_internal_mutable_mm_compaction_migratepages()->::perfetto::protos::MmCompactionMigratepagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_migratepages());
      break;
    }
    case kMmCompactionSuitable: {
      _this->_internal_mutable_mm_compaction_suitable()->::perfetto::protos::MmCompactionSuitableFtraceEvent::MergeFrom(
          from._internal_mm_compaction_suitable());
      break;
    }
    case kMmCompactionTryToCompactPages: {
      _this->_internal_mutable_mm_compaction_try_to_compact_pages()->::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_try_to_compact_pages());
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      _this->_internal_mutable_mm_compaction_wakeup_kcompactd()->::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent::MergeFrom(
          from._internal_mm_compaction_wakeup_kcompactd());
      break;
    }
    case kSuspendResume: {
      _this->_internal_mutable_suspend_resume()->::perfetto::protos::SuspendResumeFtraceEvent::MergeFrom(
          from._internal_suspend_resume());
      break;
    }
    case kSchedWakeupNew: {
      _this->_internal_mutable_sched_wakeup_new()->::perfetto::protos::SchedWakeupNewFtraceEvent::MergeFrom(
          from._internal_sched_wakeup_new());
      break;
    }
    case kBlockBioBackmerge: {
      _this->_internal_mutable_block_bio_backmerge()->::perfetto::protos::BlockBioBackmergeFtraceEvent::MergeFrom(
          from._internal_block_bio_backmerge());
      break;
    }
    case kBlockBioBounce: {
      _this->_internal_mutable_block_bio_bounce()->::perfetto::protos::BlockBioBounceFtraceEvent::MergeFrom(
          from._internal_block_bio_bounce());
      break;
    }
    case kBlockBioComplete: {
      _this->_internal_mutable_block_bio_complete()->::perfetto::protos::BlockBioCompleteFtraceEvent::MergeFrom(
          from._internal_block_bio_complete());
      break;
    }
    case kBlockBioFrontmerge: {
      _this->_internal_mutable_block_bio_frontmerge()->::perfetto::protos::BlockBioFrontmergeFtraceEvent::MergeFrom(
          from._internal_block_bio_frontmerge());
      break;
    }
    case kBlockBioQueue: {
      _this->_internal_mutable_block_bio_queue()->::perfetto::protos::BlockBioQueueFtraceEvent::MergeFrom(
          from._internal_block_bio_queue());
      break;
    }
    case kBlockBioRemap: {
      _this->_internal_mutable_block_bio_remap()->::perfetto::protos::BlockBioRemapFtraceEvent::MergeFrom(
          from._internal_block_bio_remap());
      break;
    }
    case kBlockDirtyBuffer: {
      _this->_internal_mutable_block_dirty_buffer()->::perfetto::protos::BlockDirtyBufferFtraceEvent::MergeFrom(
          from._internal_block_dirty_buffer());
      break;
    }
    case kBlockGetrq: {
      _this->_internal_mutable_block_getrq()->::perfetto::protos::BlockGetrqFtraceEvent::MergeFrom(
          from._internal_block_getrq());
      break;
    }
    case kBlockPlug: {
      _this->_internal_mutable_block_plug()->::perfetto::protos::BlockPlugFtraceEvent::MergeFrom(
          from._internal_block_plug());
      break;
    }
    case kBlockRqAbort: {
      _this->_internal_mutable_block_rq_abort()->::perfetto::protos::BlockRqAbortFtraceEvent::MergeFrom(
          from._internal_block_rq_abort());
      break;
    }
    case kBlockRqComplete: {
      _this->_internal_mutable_block_rq_complete()->::perfetto::protos::BlockRqCompleteFtraceEvent::MergeFrom(
          from._internal_block_rq_complete());
      break;
    }
    case kBlockRqInsert: {
      _this->_internal_mutable_block_rq_insert()->::perfetto::protos::BlockRqInsertFtraceEvent::MergeFrom(
          from._internal_block_rq_insert());
      break;
    }
    case kBlockRqRemap: {
      _this->_internal_mutable_block_rq_remap()->::perfetto::protos::BlockRqRemapFtraceEvent::MergeFrom(
          from._internal_block_rq_remap());
      break;
    }
    case kBlockRqRequeue: {
      _this->_internal_mutable_block_rq_requeue()->::perfetto::protos::BlockRqRequeueFtraceEvent::MergeFrom(
          from._internal_block_rq_requeue());
      break;
    }
    case kBlockSleeprq: {
      _this->_internal_mutable_block_sleeprq()->::perfetto::protos::BlockSleeprqFtraceEvent::MergeFrom(
          from._internal_block_sleeprq());
      break;
    }
    case kBlockSplit: {
      _this->_internal_mutable_block_split()->::perfetto::protos::BlockSplitFtraceEvent::MergeFrom(
          from._internal_block_split());
      break;
    }
    case kBlockTouchBuffer: {
      _this->_internal_mutable_block_touch_buffer()->::perfetto::protos::BlockTouchBufferFtraceEvent::MergeFrom(
          from._internal_block_touch_buffer());
      break;
    }
    case kBlockUnplug: {
      _this->_internal_mutable_block_unplug()->::perfetto::protos::BlockUnplugFtraceEvent::MergeFrom(
          from._internal_block_unplug());
      break;
    }
    case kExt4AllocDaBlocks: {
      _this->_internal_mutable_ext4_alloc_da_blocks()->::perfetto::protos::Ext4AllocDaBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_alloc_da_blocks());
      break;
    }
    case kExt4AllocateBlocks: {
      _this->_internal_mutable_ext4_allocate_blocks()->::perfetto::protos::Ext4AllocateBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_allocate_blocks());
      break;
    }
    case kExt4AllocateInode: {
      _this->_internal_mutable_ext4_allocate_inode()->::perfetto::protos::Ext4AllocateInodeFtraceEvent::MergeFrom(
          from._internal_ext4_allocate_inode());
      break;
    }
    case kExt4BeginOrderedTruncate: {
      _this->_internal_mutable_ext4_begin_ordered_truncate()->::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent::MergeFrom(
          from._internal_ext4_begin_ordered_truncate());
      break;
    }
    case kExt4CollapseRange: {
      _this->_internal_mutable_ext4_collapse_range()->::perfetto::protos::Ext4CollapseRangeFtraceEvent::MergeFrom(
          from._internal_ext4_collapse_range());
      break;
    }
    case kExt4DaReleaseSpace: {
      _this->_internal_mutable_ext4_da_release_space()->::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_da_release_space());
      break;
    }
    case kExt4DaReserveSpace: {
      _this->_internal_mutable_ext4_da_reserve_space()->::perfetto::protos::Ext4DaReserveSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_da_reserve_space());
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      _this->_internal_mutable_ext4_da_update_reserve_space()->::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_da_update_reserve_space());
      break;
    }
    case kExt4DaWritePages: {
      _this->_internal_mutable_ext4_da_write_pages()->::perfetto::protos::Ext4DaWritePagesFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_pages());
      break;
    }
    case kExt4DaWritePagesExtent: {
      _this->_internal_mutable_ext4_da_write_pages_extent()->::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_pages_extent());
      break;
    }
    case kExt4DirectIOEnter: {
      _this->_internal_mutable_ext4_direct_io_enter()->::perfetto::protos::Ext4DirectIOEnterFtraceEvent::MergeFrom(
          from._internal_ext4_direct_io_enter());
      break;
    }
    case kExt4DirectIOExit: {
      _this->_internal_mutable_ext4_direct_io_exit()->::perfetto::protos::Ext4DirectIOExitFtraceEvent::MergeFrom(
          from._internal_ext4_direct_io_exit());
      break;
    }
    case kExt4DiscardBlocks: {
      _this->_internal_mutable_ext4_discard_blocks()->::perfetto::protos::Ext4DiscardBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_discard_blocks());
      break;
    }
    case kExt4DiscardPreallocations: {
      _this->_internal_mutable_ext4_discard_preallocations()->::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent::MergeFrom(
          from._internal_ext4_discard_preallocations());
      break;
    }
    case kExt4DropInode: {
      _this->_internal_mutable_ext4_drop_inode()->::perfetto::protos::Ext4DropInodeFtraceEvent::MergeFrom(
          from._internal_ext4_drop_inode());
      break;
    }
    case kExt4EsCacheExtent: {
      _this->_internal_mutable_ext4_es_cache_extent()->::perfetto::protos::Ext4EsCacheExtentFtraceEvent::MergeFrom(
          from._internal_ext4_es_cache_extent());
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      _this->_internal_mutable_ext4_es_find_delayed_extent_range_enter()->::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent::MergeFrom(
          from._internal_ext4_es_find_delayed_extent_range_enter());
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      _this->_internal_mutable_ext4_es_find_delayed_extent_range_exit()->::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent::MergeFrom(
          from._internal_ext4_es_find_delayed_extent_range_exit());
      break;
    }
    case kExt4EsInsertExtent: {
      _this->_internal_mutable_ext4_es_insert_extent()->::perfetto::protos::Ext4EsInsertExtentFtraceEvent::MergeFrom(
          from._internal_ext4_es_insert_extent());
      break;
    }
    case kExt4EsLookupExtentEnter: {
      _this->_internal_mutable_ext4_es_lookup_extent_enter()->::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent::MergeFrom(
          from._internal_ext4_es_lookup_extent_enter());
      break;
    }
    case kExt4EsLookupExtentExit: {
      _this->_internal_mutable_ext4_es_lookup_extent_exit()->::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent::MergeFrom(
          from._internal_ext4_es_lookup_extent_exit());
      break;
    }
    case kExt4EsRemoveExtent: {
      _this->_internal_mutable_ext4_es_remove_extent()->::perfetto::protos::Ext4EsRemoveExtentFtraceEvent::MergeFrom(
          from._internal_ext4_es_remove_extent());
      break;
    }
    case kExt4EsShrink: {
      _this->_internal_mutable_ext4_es_shrink()->::perfetto::protos::Ext4EsShrinkFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink());
      break;
    }
    case kExt4EsShrinkCount: {
      _this->_internal_mutable_ext4_es_shrink_count()->::perfetto::protos::Ext4EsShrinkCountFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink_count());
      break;
    }
    case kExt4EsShrinkScanEnter: {
      _this->_internal_mutable_ext4_es_shrink_scan_enter()->::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink_scan_enter());
      break;
    }
    case kExt4EsShrinkScanExit: {
      _this->_internal_mutable_ext4_es_shrink_scan_exit()->::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink_scan_exit());
      break;
    }
    case kExt4EvictInode: {
      _this->_internal_mutable_ext4_evict_inode()->::perfetto::protos::Ext4EvictInodeFtraceEvent::MergeFrom(
          from._internal_ext4_evict_inode());
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      _this->_internal_mutable_ext4_ext_convert_to_initialized_enter()->::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent::MergeFrom(
          from._internal_ext4_ext_convert_to_initialized_enter());
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      _this->_internal_mutable_ext4_ext_convert_to_initialized_fastpath()->::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent::MergeFrom(
          from._internal_ext4_ext_convert_to_initialized_fastpath());
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      _this->_internal_mutable_ext4_ext_handle_unwritten_extents()->::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent::MergeFrom(
          from._internal_ext4_ext_handle_unwritten_extents());
      break;
    }
    case kExt4ExtInCache: {
      _this->_internal_mutable_ext4_ext_in_cache()->::perfetto::protos::Ext4ExtInCacheFtraceEvent::MergeFrom(
          from._internal_ext4_ext_in_cache());
      break;
    }
    case kExt4ExtLoadExtent: {
      _this->_internal_mutable_ext4_ext_load_extent()->::perfetto::protos::Ext4ExtLoadExtentFtraceEvent::MergeFrom(
          from._internal_ext4_ext_load_extent());
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      _this->_internal_mutable_ext4_ext_map_blocks_enter()->::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent::MergeFrom(
          from._internal_ext4_ext_map_blocks_enter());
      break;
    }
    case kExt4ExtMapBlocksExit: {
      _this->_internal_mutable_ext4_ext_map_blocks_exit()->::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent::MergeFrom(
          from._internal_ext4_ext_map_blocks_exit());
      break;
    }
    case kExt4ExtPutInCache: {
      _this->_internal_mutable_ext4_ext_put_in_cache()->::perfetto::protos::Ext4ExtPutInCacheFtraceEvent::MergeFrom(
          from._internal_ext4_ext_put_in_cache());
      break;
    }
    case kExt4ExtRemoveSpace: {
      _this->_internal_mutable_ext4_ext_remove_space()->::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_ext_remove_space());
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      _this->_internal_mutable_ext4_ext_remove_space_done()->::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent::MergeFrom(
          from._internal_ext4_ext_remove_space_done());
      break;
    }
    case kExt4ExtRmIdx: {
      _this->_internal_mutable_ext4_ext_rm_idx()->::perfetto::protos::Ext4ExtRmIdxFtraceEvent::MergeFrom(
          from._internal_ext4_ext_rm_idx());
      break;
    }
    case kExt4ExtRmLeaf: {
      _this->_internal_mutable_ext4_ext_rm_leaf()->::perfetto::protos::Ext4ExtRmLeafFtraceEvent::MergeFrom(
          from._internal_ext4_ext_rm_leaf());
      break;
    }
    case kExt4ExtShowExtent: {
      _this->_internal_mutable_ext4_ext_show_extent()->::perfetto::protos::Ext4ExtShowExtentFtraceEvent::MergeFrom(
          from._internal_ext4_ext_show_extent());
      break;
    }
    case kExt4FallocateEnter: {
      _this->_internal_mutable_ext4_fallocate_enter()->::perfetto::protos::Ext4FallocateEnterFtraceEvent::MergeFrom(
          from._internal_ext4_fallocate_enter());
      break;
    }
    case kExt4FallocateExit: {
      _this->_internal_mutable_ext4_fallocate_exit()->::perfetto::protos::Ext4FallocateExitFtraceEvent::MergeFrom(
          from._internal_ext4_fallocate_exit());
      break;
    }
    case kExt4FindDelallocRange: {
      _this->_internal_mutable_ext4_find_delalloc_range()->::perfetto::protos::Ext4FindDelallocRangeFtraceEvent::MergeFrom(
          from._internal_ext4_find_delalloc_range());
      break;
    }
    case kExt4Forget: {
      _this->_internal_mutable_ext4_forget()->::perfetto::protos::Ext4ForgetFtraceEvent::MergeFrom(
          from._internal_ext4_forget());
      break;
    }
    case kExt4FreeBlocks: {
      _this->_internal_mutable_ext4_free_blocks()->::perfetto::protos::Ext4FreeBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_free_blocks());
      break;
    }
    case kExt4FreeInode: {
      _this->_internal_mutable_ext4_free_inode()->::perfetto::protos::Ext4FreeInodeFtraceEvent::MergeFrom(
          from._internal_ext4_free_inode());
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      _this->_internal_mutable_ext4_get_implied_cluster_alloc_exit()->::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent::MergeFrom(
          from._internal_ext4_get_implied_cluster_alloc_exit());
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      _this->_internal_mutable_ext4_get_reserved_cluster_alloc()->::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent::MergeFrom(
          from._internal_ext4_get_reserved_cluster_alloc());
      break;
    }
    case kExt4IndMapBlocksEnter: {
      _this->_internal_mutable_ext4_ind_map_blocks_enter()->::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent::MergeFrom(
          from._internal_ext4_ind_map_blocks_enter());
      break;
    }
    case kExt4IndMapBlocksExit: {
      _this->_internal_mutable_ext4_ind_map_blocks_exit()->::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent::MergeFrom(
          from._internal_ext4_ind_map_blocks_exit());
      break;
    }
    case kExt4InsertRange: {
      _this->_internal_mutable_ext4_insert_range()->::perfetto::protos::Ext4InsertRangeFtraceEvent::MergeFrom(
          from._internal_ext4_insert_range());
      break;
    }
    case kExt4Invalidatepage: {
      _this->_internal_mutable_ext4_invalidatepage()->::perfetto::protos::Ext4InvalidatepageFtraceEvent::MergeFrom(
          from._internal_ext4_invalidatepage());
      break;
    }
    case kExt4JournalStart: {
      _this->_internal_mutable_ext4_journal_start()->::perfetto::protos::Ext4JournalStartFtraceEvent::MergeFrom(
          from._internal_ext4_journal_start());
      break;
    }
    case kExt4JournalStartReserved: {
      _this->_internal_mutable_ext4_journal_start_reserved()->::perfetto::protos::Ext4JournalStartReservedFtraceEvent::MergeFrom(
          from._internal_ext4_journal_start_reserved());
      break;
    }
    case kExt4JournalledInvalidatepage: {
      _this->_internal_mutable_ext4_journalled_invalidatepage()->::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent::MergeFrom(
          from._internal_ext4_journalled_invalidatepage());
      break;
    }
    case kExt4JournalledWriteEnd: {
      _this->_internal_mutable_ext4_journalled_write_end()->::perfetto::protos::Ext4JournalledWriteEndFtraceEvent::MergeFrom(
          from._internal_ext4_journalled_write_end());
      break;
    }
    case kExt4LoadInode: {
      _this->_internal_mutable_ext4_load_inode()->::perfetto::protos::Ext4LoadInodeFtraceEvent::MergeFrom(
          from._internal_ext4_load_inode());
      break;
    }
    case kExt4LoadInodeBitmap: {
      _this->_internal_mutable_ext4_load_inode_bitmap()->::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent::MergeFrom(
          from._internal_ext4_load_inode_bitmap());
      break;
    }
    case kExt4MarkInodeDirty: {
      _this->_internal_mutable_ext4_mark_inode_dirty()->::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent::MergeFrom(
          from._internal_ext4_mark_inode_dirty());
      break;
    }
    case kExt4MbBitmapLoad: {
      _this->_internal_mutable_ext4_mb_bitmap_load()->::perfetto::protos::Ext4MbBitmapLoadFtraceEvent::MergeFrom(
          from._internal_ext4_mb_bitmap_load());
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      _this->_internal_mutable_ext4_mb_buddy_bitmap_load()->::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent::MergeFrom(
          from._internal_ext4_mb_buddy_bitmap_load());
      break;
    }
    case kExt4MbDiscardPreallocations: {
      _this->_internal_mutable_ext4_mb_discard_preallocations()->::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent::MergeFrom(
          from._internal_ext4_mb_discard_preallocations());
      break;
    }
    case kExt4MbNewGroupPa: {
      _this->_internal_mutable_ext4_mb_new_group_pa()->::perfetto::protos::Ext4MbNewGroupPaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_new_group_pa());
      break;
    }
    case kExt4MbNewInodePa: {
      _this->_internal_mutable_ext4_mb_new_inode_pa()->::perfetto::protos::Ext4MbNewInodePaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_new_inode_pa());
      break;
    }
    case kExt4MbReleaseGroupPa: {
      _this->_internal_mutable_ext4_mb_release_group_pa()->::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_release_group_pa());
      break;
    }
    case kExt4MbReleaseInodePa: {
      _this->_internal_mutable_ext4_mb_release_inode_pa()->::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_release_inode_pa());
      break;
    }
    case kExt4MballocAlloc: {
      _this->_internal_mutable_ext4_mballoc_alloc()->::perfetto::protos::Ext4MballocAllocFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_alloc());
      break;
    }
    case kExt4MballocDiscard: {
      _this->_internal_mutable_ext4_mballoc_discard()->::perfetto::protos::Ext4MballocDiscardFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_discard());
      break;
    }
    case kExt4MballocFree: {
      _this->_internal_mutable_ext4_mballoc_free()->::perfetto::protos::Ext4MballocFreeFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_free());
      break;
    }
    case kExt4MballocPrealloc: {
      _this->_internal_mutable_ext4_mballoc_prealloc()->::perfetto::protos::Ext4MballocPreallocFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_prealloc());
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      _this->_internal_mutable_ext4_other_inode_update_time()->::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent::MergeFrom(
          from._internal_ext4_other_inode_update_time());
      break;
    }
    case kExt4PunchHole: {
      _this->_internal_mutable_ext4_punch_hole()->::perfetto::protos::Ext4PunchHoleFtraceEvent::MergeFrom(
          from._internal_ext4_punch_hole());
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      _this->_internal_mutable_ext4_read_block_bitmap_load()->::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent::MergeFrom(
          from._internal_ext4_read_block_bitmap_load());
      break;
    }
    case kExt4Readpage: {
      _this->_internal_mutable_ext4_readpage()->::perfetto::protos::Ext4ReadpageFtraceEvent::MergeFrom(
          from._internal_ext4_readpage());
      break;
    }
    case kExt4Releasepage: {
      _this->_internal_mutable_ext4_releasepage()->::perfetto::protos::Ext4ReleasepageFtraceEvent::MergeFrom(
          from._internal_ext4_releasepage());
      break;
    }
    case kExt4RemoveBlocks: {
      _this->_internal_mutable_ext4_remove_blocks()->::perfetto::protos::Ext4RemoveBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_remove_blocks());
      break;
    }
    case kExt4RequestBlocks: {
      _this->_internal_mutable_ext4_request_blocks()->::perfetto::protos::Ext4RequestBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_request_blocks());
      break;
    }
    case kExt4RequestInode: {
      _this->_internal_mutable_ext4_request_inode()->::perfetto::protos::Ext4RequestInodeFtraceEvent::MergeFrom(
          from._internal_ext4_request_inode());
      break;
    }
    case kExt4SyncFs: {
      _this->_internal_mutable_ext4_sync_fs()->::perfetto::protos::Ext4SyncFsFtraceEvent::MergeFrom(
          from._internal_ext4_sync_fs());
      break;
    }
    case kExt4TrimAllFree: {
      _this->_internal_mutable_ext4_trim_all_free()->::perfetto::protos::Ext4TrimAllFreeFtraceEvent::MergeFrom(
          from._internal_ext4_trim_all_free());
      break;
    }
    case kExt4TrimExtent: {
      _this->_internal_mutable_ext4_trim_extent()->::perfetto::protos::Ext4TrimExtentFtraceEvent::MergeFrom(
          from._internal_ext4_trim_extent());
      break;
    }
    case kExt4TruncateEnter: {
      _this->_internal_mutable_ext4_truncate_enter()->::perfetto::protos::Ext4TruncateEnterFtraceEvent::MergeFrom(
          from._internal_ext4_truncate_enter());
      break;
    }
    case kExt4TruncateExit: {
      _this->_internal_mutable_ext4_truncate_exit()->::perfetto::protos::Ext4TruncateExitFtraceEvent::MergeFrom(
          from._internal_ext4_truncate_exit());
      break;
    }
    case kExt4UnlinkEnter: {
      _this->_internal_mutable_ext4_unlink_enter()->::perfetto::protos::Ext4UnlinkEnterFtraceEvent::MergeFrom(
          from._internal_ext4_unlink_enter());
      break;
    }
    case kExt4UnlinkExit: {
      _this->_internal_mutable_ext4_unlink_exit()->::perfetto::protos::Ext4UnlinkExitFtraceEvent::MergeFrom(
          from._internal_ext4_unlink_exit());
      break;
    }
    case kExt4WriteBegin: {
      _this->_internal_mutable_ext4_write_begin()->::perfetto::protos::Ext4WriteBeginFtraceEvent::MergeFrom(
          from._internal_ext4_write_begin());
      break;
    }
    case kExt4WriteEnd: {
      _this->_internal_mutable_ext4_write_end()->::perfetto::protos::Ext4WriteEndFtraceEvent::MergeFrom(
          from._internal_ext4_write_end());
      break;
    }
    case kExt4Writepage: {
      _this->_internal_mutable_ext4_writepage()->::perfetto::protos::Ext4WritepageFtraceEvent::MergeFrom(
          from._internal_ext4_writepage());
      break;
    }
    case kExt4Writepages: {
      _this->_internal_mutable_ext4_writepages()->::perfetto::protos::Ext4WritepagesFtraceEvent::MergeFrom(
          from._internal_ext4_writepages());
      break;
    }
    case kExt4WritepagesResult: {
      _this->_internal_mutable_ext4_writepages_result()->::perfetto::protos::Ext4WritepagesResultFtraceEvent::MergeFrom(
          from._internal_ext4_writepages_result());
      break;
    }
    case kExt4ZeroRange: {
      _this->_internal_mutable_ext4_zero_range()->::perfetto::protos::Ext4ZeroRangeFtraceEvent::MergeFrom(
          from._internal_ext4_zero_range());
      break;
    }
    case kTaskNewtask: {
      _this->_internal_mutable_task_newtask()->::perfetto::protos::TaskNewtaskFtraceEvent::MergeFrom(
          from._internal_task_newtask());
      break;
    }
    case kTaskRename: {
      _this->_internal_mutable_task_rename()->::perfetto::protos::TaskRenameFtraceEvent::MergeFrom(
          from._internal_task_rename());
      break;
    }
    case kSchedProcessExec: {
      _this->_internal_mutable_sched_process_exec()->::perfetto::protos::SchedProcessExecFtraceEvent::MergeFrom(
          from._internal_sched_process_exec());
      break;
    }
    case kSchedProcessExit: {
      _this->_internal_mutable_sched_process_exit()->::perfetto::protos::SchedProcessExitFtraceEvent::MergeFrom(
          from._internal_sched_process_exit());
      break;
    }
    case kSchedProcessFork: {
      _this->_internal_mutable_sched_process_fork()->::perfetto::protos::SchedProcessForkFtraceEvent::MergeFrom(
          from._internal_sched_process_fork());
      break;
    }
    case kSchedProcessFree: {
      _this->_internal_mutable_sched_process_free()->::perfetto::protos::SchedProcessFreeFtraceEvent::MergeFrom(
          from._internal_sched_process_free());
      break;
    }
    case kSchedProcessHang: {
      _this->_internal_mutable_sched_process_hang()->::perfetto::protos::SchedProcessHangFtraceEvent::MergeFrom(
          from._internal_sched_process_hang());
      break;
    }
    case kSchedProcessWait: {
      _this->_internal_mutable_sched_process_wait()->::perfetto::protos::SchedProcessWaitFtraceEvent::MergeFrom(
          from._internal_sched_process_wait());
      break;
    }
    case kF2FsDoSubmitBio: {
      _this->_internal_mutable_f2fs_do_submit_bio()->::perfetto::protos::F2fsDoSubmitBioFtraceEvent::MergeFrom(
          from._internal_f2fs_do_submit_bio());
      break;
    }
    case kF2FsEvictInode: {
      _this->_internal_mutable_f2fs_evict_inode()->::perfetto::protos::F2fsEvictInodeFtraceEvent::MergeFrom(
          from._internal_f2fs_evict_inode());
      break;
    }
    case kF2FsFallocate: {
      _this->_internal_mutable_f2fs_fallocate()->::perfetto::protos::F2fsFallocateFtraceEvent::MergeFrom(
          from._internal_f2fs_fallocate());
      break;
    }
    case kF2FsGetDataBlock: {
      _this->_internal_mutable_f2fs_get_data_block()->::perfetto::protos::F2fsGetDataBlockFtraceEvent::MergeFrom(
          from._internal_f2fs_get_data_block());
      break;
    }
    case kF2FsGetVictim: {
      _this->_internal_mutable_f2fs_get_victim()->::perfetto::protos::F2fsGetVictimFtraceEvent::MergeFrom(
          from._internal_f2fs_get_victim());
      break;
    }
    case kF2FsIget: {
      _this->_internal_mutable_f2fs_iget()->::perfetto::protos::F2fsIgetFtraceEvent::MergeFrom(
          from._internal_f2fs_iget());
      break;
    }
    case kF2FsIgetExit: {
      _this->_internal_mutable_f2fs_iget_exit()->::perfetto::protos::F2fsIgetExitFtraceEvent::MergeFrom(
          from._internal_f2fs_iget_exit());
      break;
    }
    case kF2FsNewInode: {
      _this->_internal_mutable_f2fs_new_inode()->::perfetto::protos::F2fsNewInodeFtraceEvent::MergeFrom(
          from._internal_f2fs_new_inode());
      break;
    }
    case kF2FsReadpage: {
      _this->_internal_mutable_f2fs_readpage()->::perfetto::protos::F2fsReadpageFtraceEvent::MergeFrom(
          from._internal_f2fs_readpage());
      break;
    }
    case kF2FsReserveNewBlock: {
      _this->_internal_mutable_f2fs_reserve_new_block()->::perfetto::protos::F2fsReserveNewBlockFtraceEvent::MergeFrom(
          from._internal_f2fs_reserve_new_block());
      break;
    }
    case kF2FsSetPageDirty: {
      _this->_internal_mutable_f2fs_set_page_dirty()->::perfetto::protos::F2fsSetPageDirtyFtraceEvent::MergeFrom(
          from._internal_f2fs_set_page_dirty());
      break;
    }
    case kF2FsSubmitWritePage: {
      _this->_internal_mutable_f2fs_submit_write_page()->::perfetto::protos::F2fsSubmitWritePageFtraceEvent::MergeFrom(
          from._internal_f2fs_submit_write_page());
      break;
    }
    case kF2FsSyncFileEnter: {
      _this->_internal_mutable_f2fs_sync_file_enter()->::perfetto::protos::F2fsSyncFileEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_sync_file_enter());
      break;
    }
    case kF2FsSyncFileExit: {
      _this->_internal_mutable_f2fs_sync_file_exit()->::perfetto::protos::F2fsSyncFileExitFtraceEvent::MergeFrom(
          from._internal_f2fs_sync_file_exit());
      break;
    }
    case kF2FsSyncFs: {
      _this->_internal_mutable_f2fs_sync_fs()->::perfetto::protos::F2fsSyncFsFtraceEvent::MergeFrom(
          from._internal_f2fs_sync_fs());
      break;
    }
    case kF2FsTruncate: {
      _this->_internal_mutable_f2fs_truncate()->::perfetto::protos::F2fsTruncateFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate());
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      _this->_internal_mutable_f2fs_truncate_blocks_enter()->::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_blocks_enter());
      break;
    }
    case kF2FsTruncateBlocksExit: {
      _this->_internal_mutable_f2fs_truncate_blocks_exit()->::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_blocks_exit());
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      _this->_internal_mutable_f2fs_truncate_data_blocks_range()->::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_data_blocks_range());
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      _this->_internal_mutable_f2fs_truncate_inode_blocks_enter()->::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_inode_blocks_enter());
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      _this->_internal_mutable_f2fs_truncate_inode_blocks_exit()->::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_inode_blocks_exit());
      break;
    }
    case kF2FsTruncateNode: {
      _this->_internal_mutable_f2fs_truncate_node()->::perfetto::protos::F2fsTruncateNodeFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_node());
      break;
    }
    case kF2FsTruncateNodesEnter: {
      _this->_internal_mutable_f2fs_truncate_nodes_enter()->::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_nodes_enter());
      break;
    }
    case kF2FsTruncateNodesExit: {
      _this->_internal_mutable_f2fs_truncate_nodes_exit()->::perfetto::protos::F2fsTruncateNodesExitFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_nodes_exit());
      break;
    }
    case kF2FsTruncatePartialNodes: {
      _this->_internal_mutable_f2fs_truncate_partial_nodes()->::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_partial_nodes());
      break;
    }
    case kF2FsUnlinkEnter: {
      _this->_internal_mutable_f2fs_unlink_enter()->::perfetto::protos::F2fsUnlinkEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_unlink_enter());
      break;
    }
    case kF2FsUnlinkExit: {
      _this->_internal_mutable_f2fs_unlink_exit()->::perfetto::protos::F2fsUnlinkExitFtraceEvent::MergeFrom(
          from._internal_f2fs_unlink_exit());
      break;
    }
    case kF2FsVmPageMkwrite: {
      _this->_internal_mutable_f2fs_vm_page_mkwrite()->::perfetto::protos::F2fsVmPageMkwriteFtraceEvent::MergeFrom(
          from._internal_f2fs_vm_page_mkwrite());
      break;
    }
    case kF2FsWriteBegin: {
      _this->_internal_mutable_f2fs_write_begin()->::perfetto::protos::F2fsWriteBeginFtraceEvent::MergeFrom(
          from._internal_f2fs_write_begin());
      break;
    }
    case kF2FsWriteCheckpoint: {
      _this->_internal_mutable_f2fs_write_checkpoint()->::perfetto::protos::F2fsWriteCheckpointFtraceEvent::MergeFrom(
          from._internal_f2fs_write_checkpoint());
      break;
    }
    case kF2FsWriteEnd: {
      _this->_internal_mutable_f2fs_write_end()->::perfetto::protos::F2fsWriteEndFtraceEvent::MergeFrom(
          from._internal_f2fs_write_end());
      break;
    }
    case kAllocPagesIommuEnd: {
      _this->_internal_mutable_alloc_pages_iommu_end()->::perfetto::protos::AllocPagesIommuEndFtraceEvent::MergeFrom(
          from._internal_alloc_pages_iommu_end());
      break;
    }
    case kAllocPagesIommuFail: {
      _this->_internal_mutable_alloc_pages_iommu_fail()->::perfetto::protos::AllocPagesIommuFailFtraceEvent::MergeFrom(
          from._internal_alloc_pages_iommu_fail());
      break;
    }
    case kAllocPagesIommuStart: {
      _this->_internal_mutable_alloc_pages_iommu_start()->::perfetto::protos::AllocPagesIommuStartFtraceEvent::MergeFrom(
          from._internal_alloc_pages_iommu_start());
      break;
    }
    case kAllocPagesSysEnd: {
      _this->_internal_mutable_alloc_pages_sys_end()->::perfetto::protos::AllocPagesSysEndFtraceEvent::MergeFrom(
          from._internal_alloc_pages_sys_end());
      break;
    }
    case kAllocPagesSysFail: {
      _this->_internal_mutable_alloc_pages_sys_fail()->::perfetto::protos::AllocPagesSysFailFtraceEvent::MergeFrom(
          from._internal_alloc_pages_sys_fail());
      break;
    }
    case kAllocPagesSysStart: {
      _this->_internal_mutable_alloc_pages_sys_start()->::perfetto::protos::AllocPagesSysStartFtraceEvent::MergeFrom(
          from._internal_alloc_pages_sys_start());
      break;
    }
    case kDmaAllocContiguousRetry: {
      _this->_internal_mutable_dma_alloc_contiguous_retry()->::perfetto::protos::DmaAllocContiguousRetryFtraceEvent::MergeFrom(
          from._internal_dma_alloc_contiguous_retry());
      break;
    }
    case kIommuMapRange: {
      _this->_internal_mutable_iommu_map_range()->::perfetto::protos::IommuMapRangeFtraceEvent::MergeFrom(
          from._internal_iommu_map_range());
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      _this->_internal_mutable_iommu_sec_ptbl_map_range_end()->::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent::MergeFrom(
          from._internal_iommu_sec_ptbl_map_range_end());
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      _this->_internal_mutable_iommu_sec_ptbl_map_range_start()->::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent::MergeFrom(
          from._internal_iommu_sec_ptbl_map_range_start());
      break;
    }
    case kIonAllocBufferEnd: {
      _this->_internal_mutable_ion_alloc_buffer_end()->::perfetto::protos::IonAllocBufferEndFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_end());
      break;
    }
    case kIonAllocBufferFail: {
      _this->_internal_mutable_ion_alloc_buffer_fail()->::perfetto::protos::IonAllocBufferFailFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_fail());
      break;
    }
    case kIonAllocBufferFallback: {
      _this->_internal_mutable_ion_alloc_buffer_fallback()->::perfetto::protos::IonAllocBufferFallbackFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_fallback());
      break;
    }
    case kIonAllocBufferStart: {
      _this->_internal_mutable_ion_alloc_buffer_start()->::perfetto::protos::IonAllocBufferStartFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_start());
      break;
    }
    case kIonCpAllocRetry: {
      _this->_internal_mutable_ion_cp_alloc_retry()->::perfetto::protos::IonCpAllocRetryFtraceEvent::MergeFrom(
          from._internal_ion_cp_alloc_retry());
      break;
    }
    case kIonCpSecureBufferEnd: {
      _this->_internal_mutable_ion_cp_secure_buffer_end()->::perfetto::protos::IonCpSecureBufferEndFtraceEvent::MergeFrom(
          from._internal_ion_cp_secure_buffer_end());
      break;
    }
    case kIonCpSecureBufferStart: {
      _this->_internal_mutable_ion_cp_secure_buffer_start()->::perfetto::protos::IonCpSecureBufferStartFtraceEvent::MergeFrom(
          from._internal_ion_cp_secure_buffer_start());
      break;
    }
    case kIonPrefetching: {
      _this->_internal_mutable_ion_prefetching()->::perfetto::protos::IonPrefetchingFtraceEvent::MergeFrom(
          from._internal_ion_prefetching());
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      _this->_internal_mutable_ion_secure_cma_add_to_pool_end()->::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_add_to_pool_end());
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      _this->_internal_mutable_ion_secure_cma_add_to_pool_start()->::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_add_to_pool_start());
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      _this->_internal_mutable_ion_secure_cma_allocate_end()->::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_allocate_end());
      break;
    }
    case kIonSecureCmaAllocateStart: {
      _this->_internal_mutable_ion_secure_cma_allocate_start()->::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_allocate_start());
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      _this->_internal_mutable_ion_secure_cma_shrink_pool_end()->::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_shrink_pool_end());
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      _this->_internal_mutable_ion_secure_cma_shrink_pool_start()->::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_shrink_pool_start());
      break;
    }
    case kKfree: {
      _this->_internal_mutable_kfree()->::perfetto::protos::KfreeFtraceEvent::MergeFrom(
          from._internal_kfree());
      break;
    }
    case kKmalloc: {
      _this->_internal_mutable_kmalloc()->::perfetto::protos::KmallocFtraceEvent::MergeFrom(
          from._internal_kmalloc());
      break;
    }
    case kKmallocNode: {
      _this->_internal_mutable_kmalloc_node()->::perfetto::protos::KmallocNodeFtraceEvent::MergeFrom(
          from._internal_kmalloc_node());
      break;
    }
    case kKmemCacheAlloc: {
      _this->_internal_mutable_kmem_cache_alloc()->::perfetto::protos::KmemCacheAllocFtraceEvent::MergeFrom(
          from._internal_kmem_cache_alloc());
      break;
    }
    case kKmemCacheAllocNode: {
      _this->_internal_mutable_kmem_cache_alloc_node()->::perfetto::protos::KmemCacheAllocNodeFtraceEvent::MergeFrom(
          from._internal_kmem_cache_alloc_node());
      break;
    }
    case kKmemCacheFree: {
      _this->_internal_mutable_kmem_cache_free()->::perfetto::protos::KmemCacheFreeFtraceEvent::MergeFrom(
          from._internal_kmem_cache_free());
      break;
    }
    case kMigratePagesEnd: {
      _this->_internal_mutable_migrate_pages_end()->::perfetto::protos::MigratePagesEndFtraceEvent::MergeFrom(
          from._internal_migrate_pages_end());
      break;
    }
    case kMigratePagesStart: {
      _this->_internal_mutable_migrate_pages_start()->::perfetto::protos::MigratePagesStartFtraceEvent::MergeFrom(
          from._internal_migrate_pages_start());
      break;
    }
    case kMigrateRetry: {
      _this->_internal_mutable_migrate_retry()->::perfetto::protos::MigrateRetryFtraceEvent::MergeFrom(
          from._internal_migrate_retry());
      break;
    }
    case kMmPageAlloc: {
      _this->_internal_mutable_mm_page_alloc()->::perfetto::protos::MmPageAllocFtraceEvent::MergeFrom(
          from._internal_mm_page_alloc());
      break;
    }
    case kMmPageAllocExtfrag: {
      _this->_internal_mutable_mm_page_alloc_extfrag()->::perfetto::protos::MmPageAllocExtfragFtraceEvent::MergeFrom(
          from._internal_mm_page_alloc_extfrag());
      break;
    }
    case kMmPageAllocZoneLocked: {
      _this->_internal_mutable_mm_page_alloc_zone_locked()->::perfetto::protos::MmPageAllocZoneLockedFtraceEvent::MergeFrom(
          from._internal_mm_page_alloc_zone_locked());
      break;
    }
    case kMmPageFree: {
      _this->_internal_mutable_mm_page_free()->::perfetto::protos::MmPageFreeFtraceEvent::MergeFrom(
          from._internal_mm_page_free());
      break;
    }
    case kMmPageFreeBatched: {
      _this->_internal_mutable_mm_page_free_batched()->::perfetto::protos::MmPageFreeBatchedFtraceEvent::MergeFrom(
          from._internal_mm_page_free_batched());
      break;
    }
    case kMmPagePcpuDrain: {
      _this->_internal_mutable_mm_page_pcpu_drain()->::perfetto::protos::MmPagePcpuDrainFtraceEvent::MergeFrom(
          from._internal_mm_page_pcpu_drain());
      break;
    }
    case kRssStat: {
      _this->_internal_mutable_rss_stat()->::perfetto::protos::RssStatFtraceEvent::MergeFrom(
          from._internal_rss_stat());
      break;
    }
    case kIonHeapShrink: {
      _this->_internal_mutable_ion_heap_shrink()->::perfetto::protos::IonHeapShrinkFtraceEvent::MergeFrom(
          from._internal_ion_heap_shrink());
      break;
    }
    case kIonHeapGrow: {
      _this->_internal_mutable_ion_heap_grow()->::perfetto::protos::IonHeapGrowFtraceEvent::MergeFrom(
          from._internal_ion_heap_grow());
      break;
    }
    case kFenceInit: {
      _this->_internal_mutable_fence_init()->::perfetto::protos::FenceInitFtraceEvent::MergeFrom(
          from._internal_fence_init());
      break;
    }
    case kFenceDestroy: {
      _this->_internal_mutable_fence_destroy()->::perfetto::protos::FenceDestroyFtraceEvent::MergeFrom(
          from._internal_fence_destroy());
      break;
    }
    case kFenceEnableSignal: {
      _this->_internal_mutable_fence_enable_signal()->::perfetto::protos::FenceEnableSignalFtraceEvent::MergeFrom(
          from._internal_fence_enable_signal());
      break;
    }
    case kFenceSignaled: {
      _this->_internal_mutable_fence_signaled()->::perfetto::protos::FenceSignaledFtraceEvent::MergeFrom(
          from._internal_fence_signaled());
      break;
    }
    case kClkEnable: {
      _this->_internal_mutable_clk_enable()->::perfetto::protos::ClkEnableFtraceEvent::MergeFrom(
          from._internal_clk_enable());
      break;
    }
    case kClkDisable: {
      _this->_internal_mutable_clk_disable()->::perfetto::protos::ClkDisableFtraceEvent::MergeFrom(
          from._internal_clk_disable());
      break;
    }
    case kClkSetRate: {
      _this->_internal_mutable_clk_set_rate()->::perfetto::protos::ClkSetRateFtraceEvent::MergeFrom(
          from._internal_clk_set_rate());
      break;
    }
    case kBinderTransactionAllocBuf: {
      _this->_internal_mutable_binder_transaction_alloc_buf()->::perfetto::protos::BinderTransactionAllocBufFtraceEvent::MergeFrom(
          from._internal_binder_transaction_alloc_buf());
      break;
    }
    case kSignalDeliver: {
      _this->_internal_mutable_signal_deliver()->::perfetto::protos::SignalDeliverFtraceEvent::MergeFrom(
          from._internal_signal_deliver());
      break;
    }
    case kSignalGenerate: {
      _this->_internal_mutable_signal_generate()->::perfetto::protos::SignalGenerateFtraceEvent::MergeFrom(
          from._internal_signal_generate());
      break;
    }
    case kOomScoreAdjUpdate: {
      _this->_internal_mutable_oom_score_adj_update()->::perfetto::protos::OomScoreAdjUpdateFtraceEvent::MergeFrom(
          from._internal_oom_score_adj_update());
      break;
    }
    case kGeneric: {
      _this->_internal_mutable_generic()->::perfetto::protos::GenericFtraceEvent::MergeFrom(
          from._internal_generic());
      break;
    }
    case kMmEventRecord: {
      _this->_internal_mutable_mm_event_record()->::perfetto::protos::MmEventRecordFtraceEvent::MergeFrom(
          from._internal_mm_event_record());
      break;
    }
    case kSysEnter: {
      _this->_internal_mutable_sys_enter()->::perfetto::protos::SysEnterFtraceEvent::MergeFrom(
          from._internal_sys_enter());
      break;
    }
    case kSysExit: {
      _this->_internal_mutable_sys_exit()->::perfetto::protos::SysExitFtraceEvent::MergeFrom(
          from._internal_sys_exit());
      break;
    }
    case kZero: {
      _this->_internal_mutable_zero()->::perfetto::protos::ZeroFtraceEvent::MergeFrom(
          from._internal_zero());
      break;
    }
    case kGpuFrequency: {
      _this->_internal_mutable_gpu_frequency()->::perfetto::protos::GpuFrequencyFtraceEvent::MergeFrom(
          from._internal_gpu_frequency());
      break;
    }
    case kSdeTracingMarkWrite: {
      _this->_internal_mutable_sde_tracing_mark_write()->::perfetto::protos::SdeTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_sde_tracing_mark_write());
      break;
    }
    case kMarkVictim: {
      _this->_internal_mutable_mark_victim()->::perfetto::protos::MarkVictimFtraceEvent::MergeFrom(
          from._internal_mark_victim());
      break;
    }
    case kIonStat: {
      _this->_internal_mutable_ion_stat()->::perfetto::protos::IonStatFtraceEvent::MergeFrom(
          from._internal_ion_stat());
      break;
    }
    case kIonBufferCreate: {
      _this->_internal_mutable_ion_buffer_create()->::perfetto::protos::IonBufferCreateFtraceEvent::MergeFrom(
          from._internal_ion_buffer_create());
      break;
    }
    case kIonBufferDestroy: {
      _this->_internal_mutable_ion_buffer_destroy()->::perfetto::protos::IonBufferDestroyFtraceEvent::MergeFrom(
          from._internal_ion_buffer_destroy());
      break;
    }
    case kScmCallStart: {
      _this->_internal_mutable_scm_call_start()->::perfetto::protos::ScmCallStartFtraceEvent::MergeFrom(
          from._internal_scm_call_start());
      break;
    }
    case kScmCallEnd: {
      _this->_internal_mutable_scm_call_end()->::perfetto::protos::ScmCallEndFtraceEvent::MergeFrom(
          from._internal_scm_call_end());
      break;
    }
    case kGpuMemTotal: {
      _this->_internal_mutable_gpu_mem_total()->::perfetto::protos::GpuMemTotalFtraceEvent::MergeFrom(
          from._internal_gpu_mem_total());
      break;
    }
    case kThermalTemperature: {
      _this->_internal_mutable_thermal_temperature()->::perfetto::protos::ThermalTemperatureFtraceEvent::MergeFrom(
          from._internal_thermal_temperature());
      break;
    }
    case kCdevUpdate: {
      _this->_internal_mutable_cdev_update()->::perfetto::protos::CdevUpdateFtraceEvent::MergeFrom(
          from._internal_cdev_update());
      break;
    }
    case kCpuhpExit: {
      _this->_internal_mutable_cpuhp_exit()->::perfetto::protos::CpuhpExitFtraceEvent::MergeFrom(
          from._internal_cpuhp_exit());
      break;
    }
    case kCpuhpMultiEnter: {
      _this->_internal_mutable_cpuhp_multi_enter()->::perfetto::protos::CpuhpMultiEnterFtraceEvent::MergeFrom(
          from._internal_cpuhp_multi_enter());
      break;
    }
    case kCpuhpEnter: {
      _this->_internal_mutable_cpuhp_enter()->::perfetto::protos::CpuhpEnterFtraceEvent::MergeFrom(
          from._internal_cpuhp_enter());
      break;
    }
    case kCpuhpLatency: {
      _this->_internal_mutable_cpuhp_latency()->::perfetto::protos::CpuhpLatencyFtraceEvent::MergeFrom(
          from._internal_cpuhp_latency());
      break;
    }
    case kFastrpcDmaStat: {
      _this->_internal_mutable_fastrpc_dma_stat()->::perfetto::protos::FastrpcDmaStatFtraceEvent::MergeFrom(
          from._internal_fastrpc_dma_stat());
      break;
    }
    case kDpuTracingMarkWrite: {
      _this->_internal_mutable_dpu_tracing_mark_write()->::perfetto::protos::DpuTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_dpu_tracing_mark_write());
      break;
    }
    case kG2DTracingMarkWrite: {
      _this->_internal_mutable_g2d_tracing_mark_write()->::perfetto::protos::G2dTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_g2d_tracing_mark_write());
      break;
    }
    case kMaliTracingMarkWrite: {
      _this->_internal_mutable_mali_tracing_mark_write()->::perfetto::protos::MaliTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_mali_tracing_mark_write());
      break;
    }
    case kDmaHeapStat: {
      _this->_internal_mutable_dma_heap_stat()->::perfetto::protos::DmaHeapStatFtraceEvent::MergeFrom(
          from._internal_dma_heap_stat());
      break;
    }
    case kCpuhpPause: {
      _this->_internal_mutable_cpuhp_pause()->::perfetto::protos::CpuhpPauseFtraceEvent::MergeFrom(
          from._internal_cpuhp_pause());
      break;
    }
    case kSchedPiSetprio: {
      _this->_internal_mutable_sched_pi_setprio()->::perfetto::protos::SchedPiSetprioFtraceEvent::MergeFrom(
          from._internal_sched_pi_setprio());
      break;
    }
    case kSdeSdeEvtlog: {
      _this->_internal_mutable_sde_sde_evtlog()->::perfetto::protos::SdeSdeEvtlogFtraceEvent::MergeFrom(
          from._internal_sde_sde_evtlog());
      break;
    }
    case kSdeSdePerfCalcCrtc: {
      _this->_internal_mutable_sde_sde_perf_calc_crtc()->::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_calc_crtc());
      break;
    }
    case kSdeSdePerfCrtcUpdate: {
      _this->_internal_mutable_sde_sde_perf_crtc_update()->::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_crtc_update());
      break;
    }
    case kSdeSdePerfSetQosLuts: {
      _this->_internal_mutable_sde_sde_perf_set_qos_luts()->::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_set_qos_luts());
      break;
    }
    case kSdeSdePerfUpdateBus: {
      _this->_internal_mutable_sde_sde_perf_update_bus()->::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_update_bus());
      break;
    }
    case kRssStatThrottled: {
      _this->_internal_mutable_rss_stat_throttled()->::perfetto::protos::RssStatThrottledFtraceEvent::MergeFrom(
          from._internal_rss_stat_throttled());
      break;
    }
    case kNetifReceiveSkb: {
      _this->_internal_mutable_netif_receive_skb()->::perfetto::protos::NetifReceiveSkbFtraceEvent::MergeFrom(
          from._internal_netif_receive_skb());
      break;
    }
    case kNetDevXmit: {
      _this->_internal_mutable_net_dev_xmit()->::perfetto::protos::NetDevXmitFtraceEvent::MergeFrom(
          from._internal_net_dev_xmit());
      break;
    }
    case kInetSockSetState: {
      _this->_internal_mutable_inet_sock_set_state()->::perfetto::protos::InetSockSetStateFtraceEvent::MergeFrom(
          from._internal_inet_sock_set_state());
      break;
    }
    case kTcpRetransmitSkb: {
      _this->_internal_mutable_tcp_retransmit_skb()->::perfetto::protos::TcpRetransmitSkbFtraceEvent::MergeFrom(
          from._internal_tcp_retransmit_skb());
      break;
    }
    case kCrosEcSensorhubData: {
      _this->_internal_mutable_cros_ec_sensorhub_data()->::perfetto::protos::CrosEcSensorhubDataFtraceEvent::MergeFrom(
          from._internal_cros_ec_sensorhub_data());
      break;
    }
    case kNapiGroReceiveEntry: {
      _this->_internal_mutable_napi_gro_receive_entry()->::perfetto::protos::NapiGroReceiveEntryFtraceEvent::MergeFrom(
          from._internal_napi_gro_receive_entry());
      break;
    }
    case kNapiGroReceiveExit: {
      _this->_internal_mutable_napi_gro_receive_exit()->::perfetto::protos::NapiGroReceiveExitFtraceEvent::MergeFrom(
          from._internal_napi_gro_receive_exit());
      break;
    }
    case kKfreeSkb: {
      _this->_internal_mutable_kfree_skb()->::perfetto::protos::KfreeSkbFtraceEvent::MergeFrom(
          from._internal_kfree_skb());
      break;
    }
    case kKvmAccessFault: {
      _this->_internal_mutable_kvm_access_fault()->::perfetto::protos::KvmAccessFaultFtraceEvent::MergeFrom(
          from._internal_kvm_access_fault());
      break;
    }
    case kKvmAckIrq: {
      _this->_internal_mutable_kvm_ack_irq()->::perfetto::protos::KvmAckIrqFtraceEvent::MergeFrom(
          from._internal_kvm_ack_irq());
      break;
    }
    case kKvmAgeHva: {
      _this->_internal_mutable_kvm_age_hva()->::perfetto::protos::KvmAgeHvaFtraceEvent::MergeFrom(
          from._internal_kvm_age_hva());
      break;
    }
    case kKvmAgePage: {
      _this->_internal_mutable_kvm_age_page()->::perfetto::protos::KvmAgePageFtraceEvent::MergeFrom(
          from._internal_kvm_age_page());
      break;
    }
    case kKvmArmClearDebug: {
      _this->_internal_mutable_kvm_arm_clear_debug()->::perfetto::protos::KvmArmClearDebugFtraceEvent::MergeFrom(
          from._internal_kvm_arm_clear_debug());
      break;
    }
    case kKvmArmSetDreg32: {
      _this->_internal_mutable_kvm_arm_set_dreg32()->::perfetto::protos::KvmArmSetDreg32FtraceEvent::MergeFrom(
          from._internal_kvm_arm_set_dreg32());
      break;
    }
    case kKvmArmSetRegset: {
      _this->_internal_mutable_kvm_arm_set_regset()->::perfetto::protos::KvmArmSetRegsetFtraceEvent::MergeFrom(
          from._internal_kvm_arm_set_regset());
      break;
    }
    case kKvmArmSetupDebug: {
      _this->_internal_mutable_kvm_arm_setup_debug()->::perfetto::protos::KvmArmSetupDebugFtraceEvent::MergeFrom(
          from._internal_kvm_arm_setup_debug());
      break;
    }
    case kKvmEntry: {
      _this->_internal_mutable_kvm_entry()->::perfetto::protos::KvmEntryFtraceEvent::MergeFrom(
          from._internal_kvm_entry());
      break;
    }
    case kKvmExit: {
      _this->_internal_mutable_kvm_exit()->::perfetto::protos::KvmExitFtraceEvent::MergeFrom(
          from._internal_kvm_exit());
      break;
    }
    case kKvmFpu: {
      _this->_internal_mutable_kvm_fpu()->::perfetto::protos::KvmFpuFtraceEvent::MergeFrom(
          from._internal_kvm_fpu());
      break;
    }
    case kKvmGetTimerMap: {
      _this->_internal_mutable_kvm_get_timer_map()->::perfetto::protos::KvmGetTimerMapFtraceEvent::MergeFrom(
          from._internal_kvm_get_timer_map());
      break;
    }
    case kKvmGuestFault: {
      _this->_internal_mutable_kvm_guest_fault()->::perfetto::protos::KvmGuestFaultFtraceEvent::MergeFrom(
          from._internal_kvm_guest_fault());
      break;
    }
    case kKvmHandleSysReg: {
      _this->_internal_mutable_kvm_handle_sys_reg()->::perfetto::protos::KvmHandleSysRegFtraceEvent::MergeFrom(
          from._internal_kvm_handle_sys_reg());
      break;
    }
    case kKvmHvcArm64: {
      _this->_internal_mutable_kvm_hvc_arm64()->::perfetto::protos::KvmHvcArm64FtraceEvent::MergeFrom(
          from._internal_kvm_hvc_arm64());
      break;
    }
    case kKvmIrqLine: {
      _this->_internal_mutable_kvm_irq_line()->::perfetto::protos::KvmIrqLineFtraceEvent::MergeFrom(
          from._internal_kvm_irq_line());
      break;
    }
    case kKvmMmio: {
      _this->_internal_mutable_kvm_mmio()->::perfetto::protos::KvmMmioFtraceEvent::MergeFrom(
          from._internal_kvm_mmio());
      break;
    }
    case kKvmMmioEmulate: {
      _this->_internal_mutable_kvm_mmio_emulate()->::perfetto::protos::KvmMmioEmulateFtraceEvent::MergeFrom(
          from._internal_kvm_mmio_emulate());
      break;
    }
    case kKvmSetGuestDebug: {
      _this->_internal_mutable_kvm_set_guest_debug()->::perfetto::protos::KvmSetGuestDebugFtraceEvent::MergeFrom(
          from._internal_kvm_set_guest_debug());
      break;
    }
    case kKvmSetIrq: {
      _this->_internal_mutable_kvm_set_irq()->::perfetto::protos::KvmSetIrqFtraceEvent::MergeFrom(
          from._internal_kvm_set_irq());
      break;
    }
    case kKvmSetSpteHva: {
      _this->_internal_mutable_kvm_set_spte_hva()->::perfetto::protos::KvmSetSpteHvaFtraceEvent::MergeFrom(
          from._internal_kvm_set_spte_hva());
      break;
    }
    case kKvmSetWayFlush: {
      _this->_internal_mutable_kvm_set_way_flush()->::perfetto::protos::KvmSetWayFlushFtraceEvent::MergeFrom(
          from._internal_kvm_set_way_flush());
      break;
    }
    case kKvmSysAccess: {
      _this->_internal_mutable_kvm_sys_access()->::perfetto::protos::KvmSysAccessFtraceEvent::MergeFrom(
          from._internal_kvm_sys_access());
      break;
    }
    case kKvmTestAgeHva: {
      _this->_internal_mutable_kvm_test_age_hva()->::perfetto::protos::KvmTestAgeHvaFtraceEvent::MergeFrom(
          from._internal_kvm_test_age_hva());
      break;
    }
    case kKvmTimerEmulate: {
      _this->_internal_mutable_kvm_timer_emulate()->::perfetto::protos::KvmTimerEmulateFtraceEvent::MergeFrom(
          from._internal_kvm_timer_emulate());
      break;
    }
    case kKvmTimerHrtimerExpire: {
      _this->_internal_mutable_kvm_timer_hrtimer_expire()->::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent::MergeFrom(
          from._internal_kvm_timer_hrtimer_expire());
      break;
    }
    case kKvmTimerRestoreState: {
      _this->_internal_mutable_kvm_timer_restore_state()->::perfetto::protos::KvmTimerRestoreStateFtraceEvent::MergeFrom(
          from._internal_kvm_timer_restore_state());
      break;
    }
    case kKvmTimerSaveState: {
      _this->_internal_mutable_kvm_timer_save_state()->::perfetto::protos::KvmTimerSaveStateFtraceEvent::MergeFrom(
          from._internal_kvm_timer_save_state());
      break;
    }
    case kKvmTimerUpdateIrq: {
      _this->_internal_mutable_kvm_timer_update_irq()->::perfetto::protos::KvmTimerUpdateIrqFtraceEvent::MergeFrom(
          from._internal_kvm_timer_update_irq());
      break;
    }
    case kKvmToggleCache: {
      _this->_internal_mutable_kvm_toggle_cache()->::perfetto::protos::KvmToggleCacheFtraceEvent::MergeFrom(
          from._internal_kvm_toggle_cache());
      break;
    }
    case kKvmUnmapHvaRange: {
      _this->_internal_mutable_kvm_unmap_hva_range()->::perfetto::protos::KvmUnmapHvaRangeFtraceEvent::MergeFrom(
          from._internal_kvm_unmap_hva_range());
      break;
    }
    case kKvmUserspaceExit: {
      _this->_internal_mutable_kvm_userspace_exit()->::perfetto::protos::KvmUserspaceExitFtraceEvent::MergeFrom(
          from._internal_kvm_userspace_exit());
      break;
    }
    case kKvmVcpuWakeup: {
      _this->_internal_mutable_kvm_vcpu_wakeup()->::perfetto::protos::KvmVcpuWakeupFtraceEvent::MergeFrom(
          from._internal_kvm_vcpu_wakeup());
      break;
    }
    case kKvmWfxArm64: {
      _this->_internal_mutable_kvm_wfx_arm64()->::perfetto::protos::KvmWfxArm64FtraceEvent::MergeFrom(
          from._internal_kvm_wfx_arm64());
      break;
    }
    case kTrapReg: {
      _this->_internal_mutable_trap_reg()->::perfetto::protos::TrapRegFtraceEvent::MergeFrom(
          from._internal_trap_reg());
      break;
    }
    case kVgicUpdateIrqPending: {
      _this->_internal_mutable_vgic_update_irq_pending()->::perfetto::protos::VgicUpdateIrqPendingFtraceEvent::MergeFrom(
          from._internal_vgic_update_irq_pending());
      break;
    }
    case kWakeupSourceActivate: {
      _this->_internal_mutable_wakeup_source_activate()->::perfetto::protos::WakeupSourceActivateFtraceEvent::MergeFrom(
          from._internal_wakeup_source_activate());
      break;
    }
    case kWakeupSourceDeactivate: {
      _this->_internal_mutable_wakeup_source_deactivate()->::perfetto::protos::WakeupSourceDeactivateFtraceEvent::MergeFrom(
          from._internal_wakeup_source_deactivate());
      break;
    }
    case kUfshcdCommand: {
      _this->_internal_mutable_ufshcd_command()->::perfetto::protos::UfshcdCommandFtraceEvent::MergeFrom(
          from._internal_ufshcd_command());
      break;
    }
    case kUfshcdClkGating: {
      _this->_internal_mutable_ufshcd_clk_gating()->::perfetto::protos::UfshcdClkGatingFtraceEvent::MergeFrom(
          from._internal_ufshcd_clk_gating());
      break;
    }
    case kConsole: {
      _this->_internal_mutable_console()->::perfetto::protos::ConsoleFtraceEvent::MergeFrom(
          from._internal_console());
      break;
    }
    case kDrmVblankEvent: {
      _this->_internal_mutable_drm_vblank_event()->::perfetto::protos::DrmVblankEventFtraceEvent::MergeFrom(
          from._internal_drm_vblank_event());
      break;
    }
    case kDrmVblankEventDelivered: {
      _this->_internal_mutable_drm_vblank_event_delivered()->::perfetto::protos::DrmVblankEventDeliveredFtraceEvent::MergeFrom(
          from._internal_drm_vblank_event_delivered());
      break;
    }
    case kDrmSchedJob: {
      _this->_internal_mutable_drm_sched_job()->::perfetto::protos::DrmSchedJobFtraceEvent::MergeFrom(
          from._internal_drm_sched_job());
      break;
    }
    case kDrmRunJob: {
      _this->_internal_mutable_drm_run_job()->::perfetto::protos::DrmRunJobFtraceEvent::MergeFrom(
          from._internal_drm_run_job());
      break;
    }
    case kDrmSchedProcessJob: {
      _this->_internal_mutable_drm_sched_process_job()->::perfetto::protos::DrmSchedProcessJobFtraceEvent::MergeFrom(
          from._internal_drm_sched_process_job());
      break;
    }
    case kDmaFenceInit: {
      _this->_internal_mutable_dma_fence_init()->::perfetto::protos::DmaFenceInitFtraceEvent::MergeFrom(
          from._internal_dma_fence_init());
      break;
    }
    case kDmaFenceEmit: {
      _this->_internal_mutable_dma_fence_emit()->::perfetto::protos::DmaFenceEmitFtraceEvent::MergeFrom(
          from._internal_dma_fence_emit());
      break;
    }
    case kDmaFenceSignaled: {
      _this->_internal_mutable_dma_fence_signaled()->::perfetto::protos::DmaFenceSignaledFtraceEvent::MergeFrom(
          from._internal_dma_fence_signaled());
      break;
    }
    case kDmaFenceWaitStart: {
      _this->_internal_mutable_dma_fence_wait_start()->::perfetto::protos::DmaFenceWaitStartFtraceEvent::MergeFrom(
          from._internal_dma_fence_wait_start());
      break;
    }
    case kDmaFenceWaitEnd: {
      _this->_internal_mutable_dma_fence_wait_end()->::perfetto::protos::DmaFenceWaitEndFtraceEvent::MergeFrom(
          from._internal_dma_fence_wait_end());
      break;
    }
    case kF2FsIostat: {
      _this->_internal_mutable_f2fs_iostat()->::perfetto::protos::F2fsIostatFtraceEvent::MergeFrom(
          from._internal_f2fs_iostat());
      break;
    }
    case kF2FsIostatLatency: {
      _this->_internal_mutable_f2fs_iostat_latency()->::perfetto::protos::F2fsIostatLatencyFtraceEvent::MergeFrom(
          from._internal_f2fs_iostat_latency());
      break;
    }
    case kSchedCpuUtilCfs: {
      _this->_internal_mutable_sched_cpu_util_cfs()->::perfetto::protos::SchedCpuUtilCfsFtraceEvent::MergeFrom(
          from._internal_sched_cpu_util_cfs());
      break;
    }
    case kV4L2Qbuf: {
      _this->_internal_mutable_v4l2_qbuf()->::perfetto::protos::V4l2QbufFtraceEvent::MergeFrom(
          from._internal_v4l2_qbuf());
      break;
    }
    case kV4L2Dqbuf: {
      _this->_internal_mutable_v4l2_dqbuf()->::perfetto::protos::V4l2DqbufFtraceEvent::MergeFrom(
          from._internal_v4l2_dqbuf());
      break;
    }
    case kVb2V4L2BufQueue: {
      _this->_internal_mutable_vb2_v4l2_buf_queue()->::perfetto::protos::Vb2V4l2BufQueueFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_buf_queue());
      break;
    }
    case kVb2V4L2BufDone: {
      _this->_internal_mutable_vb2_v4l2_buf_done()->::perfetto::protos::Vb2V4l2BufDoneFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_buf_done());
      break;
    }
    case kVb2V4L2Qbuf: {
      _this->_internal_mutable_vb2_v4l2_qbuf()->::perfetto::protos::Vb2V4l2QbufFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_qbuf());
      break;
    }
    case kVb2V4L2Dqbuf: {
      _this->_internal_mutable_vb2_v4l2_dqbuf()->::perfetto::protos::Vb2V4l2DqbufFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_dqbuf());
      break;
    }
    case kDsiCmdFifoStatus: {
      _this->_internal_mutable_dsi_cmd_fifo_status()->::perfetto::protos::DsiCmdFifoStatusFtraceEvent::MergeFrom(
          from._internal_dsi_cmd_fifo_status());
      break;
    }
    case kDsiRx: {
      _this->_internal_mutable_dsi_rx()->::perfetto::protos::DsiRxFtraceEvent::MergeFrom(
          from._internal_dsi_rx());
      break;
    }
    case kDsiTx: {
      _this->_internal_mutable_dsi_tx()->::perfetto::protos::DsiTxFtraceEvent::MergeFrom(
          from._internal_dsi_tx());
      break;
    }
    case kAndroidFsDatareadEnd: {
      _this->_internal_mutable_android_fs_dataread_end()->::perfetto::protos::AndroidFsDatareadEndFtraceEvent::MergeFrom(
          from._internal_android_fs_dataread_end());
      break;
    }
    case kAndroidFsDatareadStart: {
      _this->_internal_mutable_android_fs_dataread_start()->::perfetto::protos::AndroidFsDatareadStartFtraceEvent::MergeFrom(
          from._internal_android_fs_dataread_start());
      break;
    }
    case kAndroidFsDatawriteEnd: {
      _this->_internal_mutable_android_fs_datawrite_end()->::perfetto::protos::AndroidFsDatawriteEndFtraceEvent::MergeFrom(
          from._internal_android_fs_datawrite_end());
      break;
    }
    case kAndroidFsDatawriteStart: {
      _this->_internal_mutable_android_fs_datawrite_start()->::perfetto::protos::AndroidFsDatawriteStartFtraceEvent::MergeFrom(
          from._internal_android_fs_datawrite_start());
      break;
    }
    case kAndroidFsFsyncEnd: {
      _this->_internal_mutable_android_fs_fsync_end()->::perfetto::protos::AndroidFsFsyncEndFtraceEvent::MergeFrom(
          from._internal_android_fs_fsync_end());
      break;
    }
    case kAndroidFsFsyncStart: {
      _this->_internal_mutable_android_fs_fsync_start()->::perfetto::protos::AndroidFsFsyncStartFtraceEvent::MergeFrom(
          from._internal_android_fs_fsync_start());
      break;
    }
    case kFuncgraphEntry: {
      _this->_internal_mutable_funcgraph_entry()->::perfetto::protos::FuncgraphEntryFtraceEvent::MergeFrom(
          from._internal_funcgraph_entry());
      break;
    }
    case kFuncgraphExit: {
      _this->_internal_mutable_funcgraph_exit()->::perfetto::protos::FuncgraphExitFtraceEvent::MergeFrom(
          from._internal_funcgraph_exit());
      break;
    }
    case kVirtioVideoCmd: {
      _this->_internal_mutable_virtio_video_cmd()->::perfetto::protos::VirtioVideoCmdFtraceEvent::MergeFrom(
          from._internal_virtio_video_cmd());
      break;
    }
    case kVirtioVideoCmdDone: {
      _this->_internal_mutable_virtio_video_cmd_done()->::perfetto::protos::VirtioVideoCmdDoneFtraceEvent::MergeFrom(
          from._internal_virtio_video_cmd_done());
      break;
    }
    case kVirtioVideoResourceQueue: {
      _this->_internal_mutable_virtio_video_resource_queue()->::perfetto::protos::VirtioVideoResourceQueueFtraceEvent::MergeFrom(
          from._internal_virtio_video_resource_queue());
      break;
    }
    case kVirtioVideoResourceQueueDone: {
      _this->_internal_mutable_virtio_video_resource_queue_done()->::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent::MergeFrom(
          from._internal_virtio_video_resource_queue_done());
      break;
    }
    case kMmShrinkSlabStart: {
      _this->_internal_mutable_mm_shrink_slab_start()->::perfetto::protos::MmShrinkSlabStartFtraceEvent::MergeFrom(
          from._internal_mm_shrink_slab_start());
      break;
    }
    case kMmShrinkSlabEnd: {
      _this->_internal_mutable_mm_shrink_slab_end()->::perfetto::protos::MmShrinkSlabEndFtraceEvent::MergeFrom(
          from._internal_mm_shrink_slab_end());
      break;
    }
    case kTrustySmc: {
      _this->_internal_mutable_trusty_smc()->::perfetto::protos::TrustySmcFtraceEvent::MergeFrom(
          from._internal_trusty_smc());
      break;
    }
    case kTrustySmcDone: {
      _this->_internal_mutable_trusty_smc_done()->::perfetto::protos::TrustySmcDoneFtraceEvent::MergeFrom(
          from._internal_trusty_smc_done());
      break;
    }
    case kTrustyStdCall32: {
      _this->_internal_mutable_trusty_std_call32()->::perfetto::protos::TrustyStdCall32FtraceEvent::MergeFrom(
          from._internal_trusty_std_call32());
      break;
    }
    case kTrustyStdCall32Done: {
      _this->_internal_mutable_trusty_std_call32_done()->::perfetto::protos::TrustyStdCall32DoneFtraceEvent::MergeFrom(
          from._internal_trusty_std_call32_done());
      break;
    }
    case kTrustyShareMemory: {
      _this->_internal_mutable_trusty_share_memory()->::perfetto::protos::TrustyShareMemoryFtraceEvent::MergeFrom(
          from._internal_trusty_share_memory());
      break;
    }
    case kTrustyShareMemoryDone: {
      _this->_internal_mutable_trusty_share_memory_done()->::perfetto::protos::TrustyShareMemoryDoneFtraceEvent::MergeFrom(
          from._internal_trusty_share_memory_done());
      break;
    }
    case kTrustyReclaimMemory: {
      _this->_internal_mutable_trusty_reclaim_memory()->::perfetto::protos::TrustyReclaimMemoryFtraceEvent::MergeFrom(
          from._internal_trusty_reclaim_memory());
      break;
    }
    case kTrustyReclaimMemoryDone: {
      _this->_internal_mutable_trusty_reclaim_memory_done()->::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent::MergeFrom(
          from._internal_trusty_reclaim_memory_done());
      break;
    }
    case kTrustyIrq: {
      _this->_internal_mutable_trusty_irq()->::perfetto::protos::TrustyIrqFtraceEvent::MergeFrom(
          from._internal_trusty_irq());
      break;
    }
    case kTrustyIpcHandleEvent: {
      _this->_internal_mutable_trusty_ipc_handle_event()->::perfetto::protos::TrustyIpcHandleEventFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_handle_event());
      break;
    }
    case kTrustyIpcConnect: {
      _this->_internal_mutable_trusty_ipc_connect()->::perfetto::protos::TrustyIpcConnectFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_connect());
      break;
    }
    case kTrustyIpcConnectEnd: {
      _this->_internal_mutable_trusty_ipc_connect_end()->::perfetto::protos::TrustyIpcConnectEndFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_connect_end());
      break;
    }
    case kTrustyIpcWrite: {
      _this->_internal_mutable_trusty_ipc_write()->::perfetto::protos::TrustyIpcWriteFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_write());
      break;
    }
    case kTrustyIpcPoll: {
      _this->_internal_mutable_trusty_ipc_poll()->::perfetto::protos::TrustyIpcPollFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_poll());
      break;
    }
    case kTrustyIpcRead: {
      _this->_internal_mutable_trusty_ipc_read()->::perfetto::protos::TrustyIpcReadFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_read());
      break;
    }
    case kTrustyIpcReadEnd: {
      _this->_internal_mutable_trusty_ipc_read_end()->::perfetto::protos::TrustyIpcReadEndFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_read_end());
      break;
    }
    case kTrustyIpcRx: {
      _this->_internal_mutable_trusty_ipc_rx()->::perfetto::protos::TrustyIpcRxFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_rx());
      break;
    }
    case kTrustyEnqueueNop: {
      _this->_internal_mutable_trusty_enqueue_nop()->::perfetto::protos::TrustyEnqueueNopFtraceEvent::MergeFrom(
          from._internal_trusty_enqueue_nop());
      break;
    }
    case kCmaAllocStart: {
      _this->_internal_mutable_cma_alloc_start()->::perfetto::protos::CmaAllocStartFtraceEvent::MergeFrom(
          from._internal_cma_alloc_start());
      break;
    }
    case kCmaAllocInfo: {
      _this->_internal_mutable_cma_alloc_info()->::perfetto::protos::CmaAllocInfoFtraceEvent::MergeFrom(
          from._internal_cma_alloc_info());
      break;
    }
    case kLwisTracingMarkWrite: {
      _this->_internal_mutable_lwis_tracing_mark_write()->::perfetto::protos::LwisTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_lwis_tracing_mark_write());
      break;
    }
    case kVirtioGpuCmdQueue: {
      _this->_internal_mutable_virtio_gpu_cmd_queue()->::perfetto::protos::VirtioGpuCmdQueueFtraceEvent::MergeFrom(
          from._internal_virtio_gpu_cmd_queue());
      break;
    }
    case kVirtioGpuCmdResponse: {
      _this->_internal_mutable_virtio_gpu_cmd_response()->::perfetto::protos::VirtioGpuCmdResponseFtraceEvent::MergeFrom(
          from._internal_virtio_gpu_cmd_response());
      break;
    }
    case kMaliMaliKCPUCQSSET: {
      _this->_internal_mutable_mali_mali_kcpu_cqs_set()->::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_cqs_set());
      break;
    }
    case kMaliMaliKCPUCQSWAITSTART: {
      _this->_internal_mutable_mali_mali_kcpu_cqs_wait_start()->::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_cqs_wait_start());
      break;
    }
    case kMaliMaliKCPUCQSWAITEND: {
      _this->_internal_mutable_mali_mali_kcpu_cqs_wait_end()->::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_cqs_wait_end());
      break;
    }
    case kMaliMaliKCPUFENCESIGNAL: {
      _this->_internal_mutable_mali_mali_kcpu_fence_signal()->::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_fence_signal());
      break;
    }
    case kMaliMaliKCPUFENCEWAITSTART: {
      _this->_internal_mutable_mali_mali_kcpu_fence_wait_start()->::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_fence_wait_start());
      break;
    }
    case kMaliMaliKCPUFENCEWAITEND: {
      _this->_internal_mutable_mali_mali_kcpu_fence_wait_end()->::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_fence_wait_end());
      break;
    }
    case kHypEnter: {
      _this->_internal_mutable_hyp_enter()->::perfetto::protos::HypEnterFtraceEvent::MergeFrom(
          from._internal_hyp_enter());
      break;
    }
    case kHypExit: {
      _this->_internal_mutable_hyp_exit()->::perfetto::protos::HypExitFtraceEvent::MergeFrom(
          from._internal_hyp_exit());
      break;
    }
    case kHostHcall: {
      _this->_internal_mutable_host_hcall()->::perfetto::protos::HostHcallFtraceEvent::MergeFrom(
          from._internal_host_hcall());
      break;
    }
    case kHostSmc: {
      _this->_internal_mutable_host_smc()->::perfetto::protos::HostSmcFtraceEvent::MergeFrom(
          from._internal_host_smc());
      break;
    }
    case kHostMemAbort: {
      _this->_internal_mutable_host_mem_abort()->::perfetto::protos::HostMemAbortFtraceEvent::MergeFrom(
          from._internal_host_mem_abort());
      break;
    }
    case kSuspendResumeMinimal: {
      _this->_internal_mutable_suspend_resume_minimal()->::perfetto::protos::SuspendResumeMinimalFtraceEvent::MergeFrom(
          from._internal_suspend_resume_minimal());
      break;
    }
    case kMaliMaliCSFINTERRUPTSTART: {
      _this->_internal_mutable_mali_mali_csf_interrupt_start()->::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent::MergeFrom(
          from._internal_mali_mali_csf_interrupt_start());
      break;
    }
    case kMaliMaliCSFINTERRUPTEND: {
      _this->_internal_mutable_mali_mali_csf_interrupt_end()->::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent::MergeFrom(
          from._internal_mali_mali_csf_interrupt_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEvent)
}

inline void FtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.pid_) { 0u }

    , decltype(_impl_.common_flags_) { 0u }

    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

FtraceEvent::~FtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void FtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FtraceEvent)
  switch (event_case()) {
    case kPrint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.print_;
      }
      break;
    }
    case kSchedSwitch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_switch_;
      }
      break;
    }
    case kCpuFrequency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpu_frequency_;
      }
      break;
    }
    case kCpuFrequencyLimits: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpu_frequency_limits_;
      }
      break;
    }
    case kCpuIdle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpu_idle_;
      }
      break;
    }
    case kClockEnable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.clock_enable_;
      }
      break;
    }
    case kClockDisable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.clock_disable_;
      }
      break;
    }
    case kClockSetRate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.clock_set_rate_;
      }
      break;
    }
    case kSchedWakeup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_wakeup_;
      }
      break;
    }
    case kSchedBlockedReason: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_blocked_reason_;
      }
      break;
    }
    case kSchedCpuHotplug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_cpu_hotplug_;
      }
      break;
    }
    case kSchedWaking: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_waking_;
      }
      break;
    }
    case kIpiEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ipi_entry_;
      }
      break;
    }
    case kIpiExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ipi_exit_;
      }
      break;
    }
    case kIpiRaise: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ipi_raise_;
      }
      break;
    }
    case kSoftirqEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.softirq_entry_;
      }
      break;
    }
    case kSoftirqExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.softirq_exit_;
      }
      break;
    }
    case kSoftirqRaise: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.softirq_raise_;
      }
      break;
    }
    case kI2CRead: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.i2c_read_;
      }
      break;
    }
    case kI2CWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.i2c_write_;
      }
      break;
    }
    case kI2CResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.i2c_result_;
      }
      break;
    }
    case kI2CReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.i2c_reply_;
      }
      break;
    }
    case kSmbusRead: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.smbus_read_;
      }
      break;
    }
    case kSmbusWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.smbus_write_;
      }
      break;
    }
    case kSmbusResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.smbus_result_;
      }
      break;
    }
    case kSmbusReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.smbus_reply_;
      }
      break;
    }
    case kLowmemoryKill: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.lowmemory_kill_;
      }
      break;
    }
    case kIrqHandlerEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.irq_handler_entry_;
      }
      break;
    }
    case kIrqHandlerExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.irq_handler_exit_;
      }
      break;
    }
    case kSyncPt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sync_pt_;
      }
      break;
    }
    case kSyncTimeline: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sync_timeline_;
      }
      break;
    }
    case kSyncWait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sync_wait_;
      }
      break;
    }
    case kExt4DaWriteBegin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_write_begin_;
      }
      break;
    }
    case kExt4DaWriteEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_write_end_;
      }
      break;
    }
    case kExt4SyncFileEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_sync_file_enter_;
      }
      break;
    }
    case kExt4SyncFileExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_sync_file_exit_;
      }
      break;
    }
    case kBlockRqIssue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_rq_issue_;
      }
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_vmscan_direct_reclaim_begin_;
      }
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_vmscan_direct_reclaim_end_;
      }
      break;
    }
    case kMmVmscanKswapdWake: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_vmscan_kswapd_wake_;
      }
      break;
    }
    case kMmVmscanKswapdSleep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_vmscan_kswapd_sleep_;
      }
      break;
    }
    case kBinderTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_transaction_;
      }
      break;
    }
    case kBinderTransactionReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_transaction_received_;
      }
      break;
    }
    case kBinderSetPriority: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_set_priority_;
      }
      break;
    }
    case kBinderLock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_lock_;
      }
      break;
    }
    case kBinderLocked: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_locked_;
      }
      break;
    }
    case kBinderUnlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_unlock_;
      }
      break;
    }
    case kWorkqueueActivateWork: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.workqueue_activate_work_;
      }
      break;
    }
    case kWorkqueueExecuteEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.workqueue_execute_end_;
      }
      break;
    }
    case kWorkqueueExecuteStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.workqueue_execute_start_;
      }
      break;
    }
    case kWorkqueueQueueWork: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.workqueue_queue_work_;
      }
      break;
    }
    case kRegulatorDisable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_disable_;
      }
      break;
    }
    case kRegulatorDisableComplete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_disable_complete_;
      }
      break;
    }
    case kRegulatorEnable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_enable_;
      }
      break;
    }
    case kRegulatorEnableComplete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_enable_complete_;
      }
      break;
    }
    case kRegulatorEnableDelay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_enable_delay_;
      }
      break;
    }
    case kRegulatorSetVoltage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_set_voltage_;
      }
      break;
    }
    case kRegulatorSetVoltageComplete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.regulator_set_voltage_complete_;
      }
      break;
    }
    case kCgroupAttachTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_attach_task_;
      }
      break;
    }
    case kCgroupMkdir: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_mkdir_;
      }
      break;
    }
    case kCgroupRemount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_remount_;
      }
      break;
    }
    case kCgroupRmdir: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_rmdir_;
      }
      break;
    }
    case kCgroupTransferTasks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_transfer_tasks_;
      }
      break;
    }
    case kCgroupDestroyRoot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_destroy_root_;
      }
      break;
    }
    case kCgroupRelease: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_release_;
      }
      break;
    }
    case kCgroupRename: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_rename_;
      }
      break;
    }
    case kCgroupSetupRoot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cgroup_setup_root_;
      }
      break;
    }
    case kMdpCmdKickoff: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_cmd_kickoff_;
      }
      break;
    }
    case kMdpCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_commit_;
      }
      break;
    }
    case kMdpPerfSetOt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_perf_set_ot_;
      }
      break;
    }
    case kMdpSsppChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_sspp_change_;
      }
      break;
    }
    case kTracingMarkWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.tracing_mark_write_;
      }
      break;
    }
    case kMdpCmdPingpongDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_cmd_pingpong_done_;
      }
      break;
    }
    case kMdpCompareBw: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_compare_bw_;
      }
      break;
    }
    case kMdpPerfSetPanicLuts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_perf_set_panic_luts_;
      }
      break;
    }
    case kMdpSsppSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_sspp_set_;
      }
      break;
    }
    case kMdpCmdReadptrDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_cmd_readptr_done_;
      }
      break;
    }
    case kMdpMisrCrc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_misr_crc_;
      }
      break;
    }
    case kMdpPerfSetQosLuts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_perf_set_qos_luts_;
      }
      break;
    }
    case kMdpTraceCounter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_trace_counter_;
      }
      break;
    }
    case kMdpCmdReleaseBw: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_cmd_release_bw_;
      }
      break;
    }
    case kMdpMixerUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_mixer_update_;
      }
      break;
    }
    case kMdpPerfSetWmLevels: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_perf_set_wm_levels_;
      }
      break;
    }
    case kMdpVideoUnderrunDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_video_underrun_done_;
      }
      break;
    }
    case kMdpCmdWaitPingpong: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_cmd_wait_pingpong_;
      }
      break;
    }
    case kMdpPerfPrefillCalc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_perf_prefill_calc_;
      }
      break;
    }
    case kMdpPerfUpdateBus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mdp_perf_update_bus_;
      }
      break;
    }
    case kRotatorBwAoAsContext: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.rotator_bw_ao_as_context_;
      }
      break;
    }
    case kMmFilemapAddToPageCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_filemap_add_to_page_cache_;
      }
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_filemap_delete_from_page_cache_;
      }
      break;
    }
    case kMmCompactionBegin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_begin_;
      }
      break;
    }
    case kMmCompactionDeferCompaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_defer_compaction_;
      }
      break;
    }
    case kMmCompactionDeferred: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_deferred_;
      }
      break;
    }
    case kMmCompactionDeferReset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_defer_reset_;
      }
      break;
    }
    case kMmCompactionEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_end_;
      }
      break;
    }
    case kMmCompactionFinished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_finished_;
      }
      break;
    }
    case kMmCompactionIsolateFreepages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_isolate_freepages_;
      }
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_isolate_migratepages_;
      }
      break;
    }
    case kMmCompactionKcompactdSleep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_kcompactd_sleep_;
      }
      break;
    }
    case kMmCompactionKcompactdWake: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_kcompactd_wake_;
      }
      break;
    }
    case kMmCompactionMigratepages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_migratepages_;
      }
      break;
    }
    case kMmCompactionSuitable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_suitable_;
      }
      break;
    }
    case kMmCompactionTryToCompactPages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_try_to_compact_pages_;
      }
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_compaction_wakeup_kcompactd_;
      }
      break;
    }
    case kSuspendResume: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.suspend_resume_;
      }
      break;
    }
    case kSchedWakeupNew: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_wakeup_new_;
      }
      break;
    }
    case kBlockBioBackmerge: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_bio_backmerge_;
      }
      break;
    }
    case kBlockBioBounce: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_bio_bounce_;
      }
      break;
    }
    case kBlockBioComplete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_bio_complete_;
      }
      break;
    }
    case kBlockBioFrontmerge: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_bio_frontmerge_;
      }
      break;
    }
    case kBlockBioQueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_bio_queue_;
      }
      break;
    }
    case kBlockBioRemap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_bio_remap_;
      }
      break;
    }
    case kBlockDirtyBuffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_dirty_buffer_;
      }
      break;
    }
    case kBlockGetrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_getrq_;
      }
      break;
    }
    case kBlockPlug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_plug_;
      }
      break;
    }
    case kBlockRqAbort: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_rq_abort_;
      }
      break;
    }
    case kBlockRqComplete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_rq_complete_;
      }
      break;
    }
    case kBlockRqInsert: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_rq_insert_;
      }
      break;
    }
    case kBlockRqRemap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_rq_remap_;
      }
      break;
    }
    case kBlockRqRequeue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_rq_requeue_;
      }
      break;
    }
    case kBlockSleeprq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_sleeprq_;
      }
      break;
    }
    case kBlockSplit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_split_;
      }
      break;
    }
    case kBlockTouchBuffer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_touch_buffer_;
      }
      break;
    }
    case kBlockUnplug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.block_unplug_;
      }
      break;
    }
    case kExt4AllocDaBlocks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_alloc_da_blocks_;
      }
      break;
    }
    case kExt4AllocateBlocks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_allocate_blocks_;
      }
      break;
    }
    case kExt4AllocateInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_allocate_inode_;
      }
      break;
    }
    case kExt4BeginOrderedTruncate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_begin_ordered_truncate_;
      }
      break;
    }
    case kExt4CollapseRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_collapse_range_;
      }
      break;
    }
    case kExt4DaReleaseSpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_release_space_;
      }
      break;
    }
    case kExt4DaReserveSpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_reserve_space_;
      }
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_update_reserve_space_;
      }
      break;
    }
    case kExt4DaWritePages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_write_pages_;
      }
      break;
    }
    case kExt4DaWritePagesExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_da_write_pages_extent_;
      }
      break;
    }
    case kExt4DirectIOEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_direct_io_enter_;
      }
      break;
    }
    case kExt4DirectIOExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_direct_io_exit_;
      }
      break;
    }
    case kExt4DiscardBlocks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_discard_blocks_;
      }
      break;
    }
    case kExt4DiscardPreallocations: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_discard_preallocations_;
      }
      break;
    }
    case kExt4DropInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_drop_inode_;
      }
      break;
    }
    case kExt4EsCacheExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_cache_extent_;
      }
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_find_delayed_extent_range_enter_;
      }
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_find_delayed_extent_range_exit_;
      }
      break;
    }
    case kExt4EsInsertExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_insert_extent_;
      }
      break;
    }
    case kExt4EsLookupExtentEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_lookup_extent_enter_;
      }
      break;
    }
    case kExt4EsLookupExtentExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_lookup_extent_exit_;
      }
      break;
    }
    case kExt4EsRemoveExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_remove_extent_;
      }
      break;
    }
    case kExt4EsShrink: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_shrink_;
      }
      break;
    }
    case kExt4EsShrinkCount: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_shrink_count_;
      }
      break;
    }
    case kExt4EsShrinkScanEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_shrink_scan_enter_;
      }
      break;
    }
    case kExt4EsShrinkScanExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_es_shrink_scan_exit_;
      }
      break;
    }
    case kExt4EvictInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_evict_inode_;
      }
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_convert_to_initialized_enter_;
      }
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_convert_to_initialized_fastpath_;
      }
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_handle_unwritten_extents_;
      }
      break;
    }
    case kExt4ExtInCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_in_cache_;
      }
      break;
    }
    case kExt4ExtLoadExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_load_extent_;
      }
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_map_blocks_enter_;
      }
      break;
    }
    case kExt4ExtMapBlocksExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_map_blocks_exit_;
      }
      break;
    }
    case kExt4ExtPutInCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_put_in_cache_;
      }
      break;
    }
    case kExt4ExtRemoveSpace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_remove_space_;
      }
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_remove_space_done_;
      }
      break;
    }
    case kExt4ExtRmIdx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_rm_idx_;
      }
      break;
    }
    case kExt4ExtRmLeaf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_rm_leaf_;
      }
      break;
    }
    case kExt4ExtShowExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ext_show_extent_;
      }
      break;
    }
    case kExt4FallocateEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_fallocate_enter_;
      }
      break;
    }
    case kExt4FallocateExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_fallocate_exit_;
      }
      break;
    }
    case kExt4FindDelallocRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_find_delalloc_range_;
      }
      break;
    }
    case kExt4Forget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_forget_;
      }
      break;
    }
    case kExt4FreeBlocks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_free_blocks_;
      }
      break;
    }
    case kExt4FreeInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_free_inode_;
      }
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_get_implied_cluster_alloc_exit_;
      }
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_get_reserved_cluster_alloc_;
      }
      break;
    }
    case kExt4IndMapBlocksEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ind_map_blocks_enter_;
      }
      break;
    }
    case kExt4IndMapBlocksExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_ind_map_blocks_exit_;
      }
      break;
    }
    case kExt4InsertRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_insert_range_;
      }
      break;
    }
    case kExt4Invalidatepage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_invalidatepage_;
      }
      break;
    }
    case kExt4JournalStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_journal_start_;
      }
      break;
    }
    case kExt4JournalStartReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_journal_start_reserved_;
      }
      break;
    }
    case kExt4JournalledInvalidatepage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_journalled_invalidatepage_;
      }
      break;
    }
    case kExt4JournalledWriteEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_journalled_write_end_;
      }
      break;
    }
    case kExt4LoadInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_load_inode_;
      }
      break;
    }
    case kExt4LoadInodeBitmap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_load_inode_bitmap_;
      }
      break;
    }
    case kExt4MarkInodeDirty: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mark_inode_dirty_;
      }
      break;
    }
    case kExt4MbBitmapLoad: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_bitmap_load_;
      }
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_buddy_bitmap_load_;
      }
      break;
    }
    case kExt4MbDiscardPreallocations: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_discard_preallocations_;
      }
      break;
    }
    case kExt4MbNewGroupPa: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_new_group_pa_;
      }
      break;
    }
    case kExt4MbNewInodePa: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_new_inode_pa_;
      }
      break;
    }
    case kExt4MbReleaseGroupPa: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_release_group_pa_;
      }
      break;
    }
    case kExt4MbReleaseInodePa: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mb_release_inode_pa_;
      }
      break;
    }
    case kExt4MballocAlloc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mballoc_alloc_;
      }
      break;
    }
    case kExt4MballocDiscard: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mballoc_discard_;
      }
      break;
    }
    case kExt4MballocFree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mballoc_free_;
      }
      break;
    }
    case kExt4MballocPrealloc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_mballoc_prealloc_;
      }
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_other_inode_update_time_;
      }
      break;
    }
    case kExt4PunchHole: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_punch_hole_;
      }
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_read_block_bitmap_load_;
      }
      break;
    }
    case kExt4Readpage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_readpage_;
      }
      break;
    }
    case kExt4Releasepage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_releasepage_;
      }
      break;
    }
    case kExt4RemoveBlocks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_remove_blocks_;
      }
      break;
    }
    case kExt4RequestBlocks: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_request_blocks_;
      }
      break;
    }
    case kExt4RequestInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_request_inode_;
      }
      break;
    }
    case kExt4SyncFs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_sync_fs_;
      }
      break;
    }
    case kExt4TrimAllFree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_trim_all_free_;
      }
      break;
    }
    case kExt4TrimExtent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_trim_extent_;
      }
      break;
    }
    case kExt4TruncateEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_truncate_enter_;
      }
      break;
    }
    case kExt4TruncateExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_truncate_exit_;
      }
      break;
    }
    case kExt4UnlinkEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_unlink_enter_;
      }
      break;
    }
    case kExt4UnlinkExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_unlink_exit_;
      }
      break;
    }
    case kExt4WriteBegin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_write_begin_;
      }
      break;
    }
    case kExt4WriteEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_write_end_;
      }
      break;
    }
    case kExt4Writepage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_writepage_;
      }
      break;
    }
    case kExt4Writepages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_writepages_;
      }
      break;
    }
    case kExt4WritepagesResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_writepages_result_;
      }
      break;
    }
    case kExt4ZeroRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ext4_zero_range_;
      }
      break;
    }
    case kTaskNewtask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.task_newtask_;
      }
      break;
    }
    case kTaskRename: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.task_rename_;
      }
      break;
    }
    case kSchedProcessExec: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_process_exec_;
      }
      break;
    }
    case kSchedProcessExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_process_exit_;
      }
      break;
    }
    case kSchedProcessFork: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_process_fork_;
      }
      break;
    }
    case kSchedProcessFree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_process_free_;
      }
      break;
    }
    case kSchedProcessHang: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_process_hang_;
      }
      break;
    }
    case kSchedProcessWait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_process_wait_;
      }
      break;
    }
    case kF2FsDoSubmitBio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_do_submit_bio_;
      }
      break;
    }
    case kF2FsEvictInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_evict_inode_;
      }
      break;
    }
    case kF2FsFallocate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_fallocate_;
      }
      break;
    }
    case kF2FsGetDataBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_get_data_block_;
      }
      break;
    }
    case kF2FsGetVictim: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_get_victim_;
      }
      break;
    }
    case kF2FsIget: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_iget_;
      }
      break;
    }
    case kF2FsIgetExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_iget_exit_;
      }
      break;
    }
    case kF2FsNewInode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_new_inode_;
      }
      break;
    }
    case kF2FsReadpage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_readpage_;
      }
      break;
    }
    case kF2FsReserveNewBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_reserve_new_block_;
      }
      break;
    }
    case kF2FsSetPageDirty: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_set_page_dirty_;
      }
      break;
    }
    case kF2FsSubmitWritePage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_submit_write_page_;
      }
      break;
    }
    case kF2FsSyncFileEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_sync_file_enter_;
      }
      break;
    }
    case kF2FsSyncFileExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_sync_file_exit_;
      }
      break;
    }
    case kF2FsSyncFs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_sync_fs_;
      }
      break;
    }
    case kF2FsTruncate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_;
      }
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_blocks_enter_;
      }
      break;
    }
    case kF2FsTruncateBlocksExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_blocks_exit_;
      }
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_data_blocks_range_;
      }
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_inode_blocks_enter_;
      }
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_inode_blocks_exit_;
      }
      break;
    }
    case kF2FsTruncateNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_node_;
      }
      break;
    }
    case kF2FsTruncateNodesEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_nodes_enter_;
      }
      break;
    }
    case kF2FsTruncateNodesExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_nodes_exit_;
      }
      break;
    }
    case kF2FsTruncatePartialNodes: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_truncate_partial_nodes_;
      }
      break;
    }
    case kF2FsUnlinkEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_unlink_enter_;
      }
      break;
    }
    case kF2FsUnlinkExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_unlink_exit_;
      }
      break;
    }
    case kF2FsVmPageMkwrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_vm_page_mkwrite_;
      }
      break;
    }
    case kF2FsWriteBegin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_write_begin_;
      }
      break;
    }
    case kF2FsWriteCheckpoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_write_checkpoint_;
      }
      break;
    }
    case kF2FsWriteEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_write_end_;
      }
      break;
    }
    case kAllocPagesIommuEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.alloc_pages_iommu_end_;
      }
      break;
    }
    case kAllocPagesIommuFail: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.alloc_pages_iommu_fail_;
      }
      break;
    }
    case kAllocPagesIommuStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.alloc_pages_iommu_start_;
      }
      break;
    }
    case kAllocPagesSysEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.alloc_pages_sys_end_;
      }
      break;
    }
    case kAllocPagesSysFail: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.alloc_pages_sys_fail_;
      }
      break;
    }
    case kAllocPagesSysStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.alloc_pages_sys_start_;
      }
      break;
    }
    case kDmaAllocContiguousRetry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_alloc_contiguous_retry_;
      }
      break;
    }
    case kIommuMapRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.iommu_map_range_;
      }
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.iommu_sec_ptbl_map_range_end_;
      }
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.iommu_sec_ptbl_map_range_start_;
      }
      break;
    }
    case kIonAllocBufferEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_alloc_buffer_end_;
      }
      break;
    }
    case kIonAllocBufferFail: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_alloc_buffer_fail_;
      }
      break;
    }
    case kIonAllocBufferFallback: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_alloc_buffer_fallback_;
      }
      break;
    }
    case kIonAllocBufferStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_alloc_buffer_start_;
      }
      break;
    }
    case kIonCpAllocRetry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_cp_alloc_retry_;
      }
      break;
    }
    case kIonCpSecureBufferEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_cp_secure_buffer_end_;
      }
      break;
    }
    case kIonCpSecureBufferStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_cp_secure_buffer_start_;
      }
      break;
    }
    case kIonPrefetching: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_prefetching_;
      }
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_secure_cma_add_to_pool_end_;
      }
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_secure_cma_add_to_pool_start_;
      }
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_secure_cma_allocate_end_;
      }
      break;
    }
    case kIonSecureCmaAllocateStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_secure_cma_allocate_start_;
      }
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_secure_cma_shrink_pool_end_;
      }
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_secure_cma_shrink_pool_start_;
      }
      break;
    }
    case kKfree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kfree_;
      }
      break;
    }
    case kKmalloc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kmalloc_;
      }
      break;
    }
    case kKmallocNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kmalloc_node_;
      }
      break;
    }
    case kKmemCacheAlloc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kmem_cache_alloc_;
      }
      break;
    }
    case kKmemCacheAllocNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kmem_cache_alloc_node_;
      }
      break;
    }
    case kKmemCacheFree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kmem_cache_free_;
      }
      break;
    }
    case kMigratePagesEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.migrate_pages_end_;
      }
      break;
    }
    case kMigratePagesStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.migrate_pages_start_;
      }
      break;
    }
    case kMigrateRetry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.migrate_retry_;
      }
      break;
    }
    case kMmPageAlloc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_page_alloc_;
      }
      break;
    }
    case kMmPageAllocExtfrag: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_page_alloc_extfrag_;
      }
      break;
    }
    case kMmPageAllocZoneLocked: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_page_alloc_zone_locked_;
      }
      break;
    }
    case kMmPageFree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_page_free_;
      }
      break;
    }
    case kMmPageFreeBatched: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_page_free_batched_;
      }
      break;
    }
    case kMmPagePcpuDrain: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_page_pcpu_drain_;
      }
      break;
    }
    case kRssStat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.rss_stat_;
      }
      break;
    }
    case kIonHeapShrink: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_heap_shrink_;
      }
      break;
    }
    case kIonHeapGrow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_heap_grow_;
      }
      break;
    }
    case kFenceInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.fence_init_;
      }
      break;
    }
    case kFenceDestroy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.fence_destroy_;
      }
      break;
    }
    case kFenceEnableSignal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.fence_enable_signal_;
      }
      break;
    }
    case kFenceSignaled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.fence_signaled_;
      }
      break;
    }
    case kClkEnable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.clk_enable_;
      }
      break;
    }
    case kClkDisable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.clk_disable_;
      }
      break;
    }
    case kClkSetRate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.clk_set_rate_;
      }
      break;
    }
    case kBinderTransactionAllocBuf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.binder_transaction_alloc_buf_;
      }
      break;
    }
    case kSignalDeliver: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.signal_deliver_;
      }
      break;
    }
    case kSignalGenerate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.signal_generate_;
      }
      break;
    }
    case kOomScoreAdjUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.oom_score_adj_update_;
      }
      break;
    }
    case kGeneric: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.generic_;
      }
      break;
    }
    case kMmEventRecord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_event_record_;
      }
      break;
    }
    case kSysEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sys_enter_;
      }
      break;
    }
    case kSysExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sys_exit_;
      }
      break;
    }
    case kZero: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.zero_;
      }
      break;
    }
    case kGpuFrequency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.gpu_frequency_;
      }
      break;
    }
    case kSdeTracingMarkWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sde_tracing_mark_write_;
      }
      break;
    }
    case kMarkVictim: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mark_victim_;
      }
      break;
    }
    case kIonStat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_stat_;
      }
      break;
    }
    case kIonBufferCreate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_buffer_create_;
      }
      break;
    }
    case kIonBufferDestroy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ion_buffer_destroy_;
      }
      break;
    }
    case kScmCallStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.scm_call_start_;
      }
      break;
    }
    case kScmCallEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.scm_call_end_;
      }
      break;
    }
    case kGpuMemTotal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.gpu_mem_total_;
      }
      break;
    }
    case kThermalTemperature: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.thermal_temperature_;
      }
      break;
    }
    case kCdevUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cdev_update_;
      }
      break;
    }
    case kCpuhpExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpuhp_exit_;
      }
      break;
    }
    case kCpuhpMultiEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpuhp_multi_enter_;
      }
      break;
    }
    case kCpuhpEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpuhp_enter_;
      }
      break;
    }
    case kCpuhpLatency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpuhp_latency_;
      }
      break;
    }
    case kFastrpcDmaStat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.fastrpc_dma_stat_;
      }
      break;
    }
    case kDpuTracingMarkWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dpu_tracing_mark_write_;
      }
      break;
    }
    case kG2DTracingMarkWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.g2d_tracing_mark_write_;
      }
      break;
    }
    case kMaliTracingMarkWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_tracing_mark_write_;
      }
      break;
    }
    case kDmaHeapStat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_heap_stat_;
      }
      break;
    }
    case kCpuhpPause: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cpuhp_pause_;
      }
      break;
    }
    case kSchedPiSetprio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_pi_setprio_;
      }
      break;
    }
    case kSdeSdeEvtlog: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sde_sde_evtlog_;
      }
      break;
    }
    case kSdeSdePerfCalcCrtc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sde_sde_perf_calc_crtc_;
      }
      break;
    }
    case kSdeSdePerfCrtcUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sde_sde_perf_crtc_update_;
      }
      break;
    }
    case kSdeSdePerfSetQosLuts: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sde_sde_perf_set_qos_luts_;
      }
      break;
    }
    case kSdeSdePerfUpdateBus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sde_sde_perf_update_bus_;
      }
      break;
    }
    case kRssStatThrottled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.rss_stat_throttled_;
      }
      break;
    }
    case kNetifReceiveSkb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.netif_receive_skb_;
      }
      break;
    }
    case kNetDevXmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.net_dev_xmit_;
      }
      break;
    }
    case kInetSockSetState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.inet_sock_set_state_;
      }
      break;
    }
    case kTcpRetransmitSkb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.tcp_retransmit_skb_;
      }
      break;
    }
    case kCrosEcSensorhubData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cros_ec_sensorhub_data_;
      }
      break;
    }
    case kNapiGroReceiveEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.napi_gro_receive_entry_;
      }
      break;
    }
    case kNapiGroReceiveExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.napi_gro_receive_exit_;
      }
      break;
    }
    case kKfreeSkb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kfree_skb_;
      }
      break;
    }
    case kKvmAccessFault: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_access_fault_;
      }
      break;
    }
    case kKvmAckIrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_ack_irq_;
      }
      break;
    }
    case kKvmAgeHva: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_age_hva_;
      }
      break;
    }
    case kKvmAgePage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_age_page_;
      }
      break;
    }
    case kKvmArmClearDebug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_arm_clear_debug_;
      }
      break;
    }
    case kKvmArmSetDreg32: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_arm_set_dreg32_;
      }
      break;
    }
    case kKvmArmSetRegset: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_arm_set_regset_;
      }
      break;
    }
    case kKvmArmSetupDebug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_arm_setup_debug_;
      }
      break;
    }
    case kKvmEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_entry_;
      }
      break;
    }
    case kKvmExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_exit_;
      }
      break;
    }
    case kKvmFpu: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_fpu_;
      }
      break;
    }
    case kKvmGetTimerMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_get_timer_map_;
      }
      break;
    }
    case kKvmGuestFault: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_guest_fault_;
      }
      break;
    }
    case kKvmHandleSysReg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_handle_sys_reg_;
      }
      break;
    }
    case kKvmHvcArm64: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_hvc_arm64_;
      }
      break;
    }
    case kKvmIrqLine: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_irq_line_;
      }
      break;
    }
    case kKvmMmio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_mmio_;
      }
      break;
    }
    case kKvmMmioEmulate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_mmio_emulate_;
      }
      break;
    }
    case kKvmSetGuestDebug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_set_guest_debug_;
      }
      break;
    }
    case kKvmSetIrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_set_irq_;
      }
      break;
    }
    case kKvmSetSpteHva: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_set_spte_hva_;
      }
      break;
    }
    case kKvmSetWayFlush: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_set_way_flush_;
      }
      break;
    }
    case kKvmSysAccess: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_sys_access_;
      }
      break;
    }
    case kKvmTestAgeHva: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_test_age_hva_;
      }
      break;
    }
    case kKvmTimerEmulate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_timer_emulate_;
      }
      break;
    }
    case kKvmTimerHrtimerExpire: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_timer_hrtimer_expire_;
      }
      break;
    }
    case kKvmTimerRestoreState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_timer_restore_state_;
      }
      break;
    }
    case kKvmTimerSaveState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_timer_save_state_;
      }
      break;
    }
    case kKvmTimerUpdateIrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_timer_update_irq_;
      }
      break;
    }
    case kKvmToggleCache: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_toggle_cache_;
      }
      break;
    }
    case kKvmUnmapHvaRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_unmap_hva_range_;
      }
      break;
    }
    case kKvmUserspaceExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_userspace_exit_;
      }
      break;
    }
    case kKvmVcpuWakeup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_vcpu_wakeup_;
      }
      break;
    }
    case kKvmWfxArm64: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kvm_wfx_arm64_;
      }
      break;
    }
    case kTrapReg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trap_reg_;
      }
      break;
    }
    case kVgicUpdateIrqPending: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vgic_update_irq_pending_;
      }
      break;
    }
    case kWakeupSourceActivate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.wakeup_source_activate_;
      }
      break;
    }
    case kWakeupSourceDeactivate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.wakeup_source_deactivate_;
      }
      break;
    }
    case kUfshcdCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ufshcd_command_;
      }
      break;
    }
    case kUfshcdClkGating: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ufshcd_clk_gating_;
      }
      break;
    }
    case kConsole: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.console_;
      }
      break;
    }
    case kDrmVblankEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.drm_vblank_event_;
      }
      break;
    }
    case kDrmVblankEventDelivered: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.drm_vblank_event_delivered_;
      }
      break;
    }
    case kDrmSchedJob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.drm_sched_job_;
      }
      break;
    }
    case kDrmRunJob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.drm_run_job_;
      }
      break;
    }
    case kDrmSchedProcessJob: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.drm_sched_process_job_;
      }
      break;
    }
    case kDmaFenceInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_fence_init_;
      }
      break;
    }
    case kDmaFenceEmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_fence_emit_;
      }
      break;
    }
    case kDmaFenceSignaled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_fence_signaled_;
      }
      break;
    }
    case kDmaFenceWaitStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_fence_wait_start_;
      }
      break;
    }
    case kDmaFenceWaitEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dma_fence_wait_end_;
      }
      break;
    }
    case kF2FsIostat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_iostat_;
      }
      break;
    }
    case kF2FsIostatLatency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.f2fs_iostat_latency_;
      }
      break;
    }
    case kSchedCpuUtilCfs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.sched_cpu_util_cfs_;
      }
      break;
    }
    case kV4L2Qbuf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.v4l2_qbuf_;
      }
      break;
    }
    case kV4L2Dqbuf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.v4l2_dqbuf_;
      }
      break;
    }
    case kVb2V4L2BufQueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vb2_v4l2_buf_queue_;
      }
      break;
    }
    case kVb2V4L2BufDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vb2_v4l2_buf_done_;
      }
      break;
    }
    case kVb2V4L2Qbuf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vb2_v4l2_qbuf_;
      }
      break;
    }
    case kVb2V4L2Dqbuf: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.vb2_v4l2_dqbuf_;
      }
      break;
    }
    case kDsiCmdFifoStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dsi_cmd_fifo_status_;
      }
      break;
    }
    case kDsiRx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dsi_rx_;
      }
      break;
    }
    case kDsiTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.dsi_tx_;
      }
      break;
    }
    case kAndroidFsDatareadEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.android_fs_dataread_end_;
      }
      break;
    }
    case kAndroidFsDatareadStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.android_fs_dataread_start_;
      }
      break;
    }
    case kAndroidFsDatawriteEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.android_fs_datawrite_end_;
      }
      break;
    }
    case kAndroidFsDatawriteStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.android_fs_datawrite_start_;
      }
      break;
    }
    case kAndroidFsFsyncEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.android_fs_fsync_end_;
      }
      break;
    }
    case kAndroidFsFsyncStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.android_fs_fsync_start_;
      }
      break;
    }
    case kFuncgraphEntry: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.funcgraph_entry_;
      }
      break;
    }
    case kFuncgraphExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.funcgraph_exit_;
      }
      break;
    }
    case kVirtioVideoCmd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.virtio_video_cmd_;
      }
      break;
    }
    case kVirtioVideoCmdDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.virtio_video_cmd_done_;
      }
      break;
    }
    case kVirtioVideoResourceQueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.virtio_video_resource_queue_;
      }
      break;
    }
    case kVirtioVideoResourceQueueDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.virtio_video_resource_queue_done_;
      }
      break;
    }
    case kMmShrinkSlabStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_shrink_slab_start_;
      }
      break;
    }
    case kMmShrinkSlabEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mm_shrink_slab_end_;
      }
      break;
    }
    case kTrustySmc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_smc_;
      }
      break;
    }
    case kTrustySmcDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_smc_done_;
      }
      break;
    }
    case kTrustyStdCall32: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_std_call32_;
      }
      break;
    }
    case kTrustyStdCall32Done: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_std_call32_done_;
      }
      break;
    }
    case kTrustyShareMemory: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_share_memory_;
      }
      break;
    }
    case kTrustyShareMemoryDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_share_memory_done_;
      }
      break;
    }
    case kTrustyReclaimMemory: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_reclaim_memory_;
      }
      break;
    }
    case kTrustyReclaimMemoryDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_reclaim_memory_done_;
      }
      break;
    }
    case kTrustyIrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_irq_;
      }
      break;
    }
    case kTrustyIpcHandleEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_handle_event_;
      }
      break;
    }
    case kTrustyIpcConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_connect_;
      }
      break;
    }
    case kTrustyIpcConnectEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_connect_end_;
      }
      break;
    }
    case kTrustyIpcWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_write_;
      }
      break;
    }
    case kTrustyIpcPoll: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_poll_;
      }
      break;
    }
    case kTrustyIpcRead: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_read_;
      }
      break;
    }
    case kTrustyIpcReadEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_read_end_;
      }
      break;
    }
    case kTrustyIpcRx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_ipc_rx_;
      }
      break;
    }
    case kTrustyEnqueueNop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.trusty_enqueue_nop_;
      }
      break;
    }
    case kCmaAllocStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cma_alloc_start_;
      }
      break;
    }
    case kCmaAllocInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.cma_alloc_info_;
      }
      break;
    }
    case kLwisTracingMarkWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.lwis_tracing_mark_write_;
      }
      break;
    }
    case kVirtioGpuCmdQueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.virtio_gpu_cmd_queue_;
      }
      break;
    }
    case kVirtioGpuCmdResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.virtio_gpu_cmd_response_;
      }
      break;
    }
    case kMaliMaliKCPUCQSSET: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_kcpu_cqs_set_;
      }
      break;
    }
    case kMaliMaliKCPUCQSWAITSTART: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_kcpu_cqs_wait_start_;
      }
      break;
    }
    case kMaliMaliKCPUCQSWAITEND: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_kcpu_cqs_wait_end_;
      }
      break;
    }
    case kMaliMaliKCPUFENCESIGNAL: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_kcpu_fence_signal_;
      }
      break;
    }
    case kMaliMaliKCPUFENCEWAITSTART: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_kcpu_fence_wait_start_;
      }
      break;
    }
    case kMaliMaliKCPUFENCEWAITEND: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_kcpu_fence_wait_end_;
      }
      break;
    }
    case kHypEnter: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.hyp_enter_;
      }
      break;
    }
    case kHypExit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.hyp_exit_;
      }
      break;
    }
    case kHostHcall: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.host_hcall_;
      }
      break;
    }
    case kHostSmc: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.host_smc_;
      }
      break;
    }
    case kHostMemAbort: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.host_mem_abort_;
      }
      break;
    }
    case kSuspendResumeMinimal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.suspend_resume_minimal_;
      }
      break;
    }
    case kMaliMaliCSFINTERRUPTSTART: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_csf_interrupt_start_;
      }
      break;
    }
    case kMaliMaliCSFINTERRUPTEND: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.mali_mali_csf_interrupt_end_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void FtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.common_flags_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.common_flags_));
  }
  clear_event();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PrintFtraceEvent print = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_print(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_switch(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 common_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_common_flags(&has_bits);
          _impl_.common_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_frequency(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_frequency_limits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_idle(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock_enable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock_disable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock_set_rate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_wakeup(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_blocked_reason(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_cpu_hotplug(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_waking(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipi_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipi_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipi_raise(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_softirq_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_softirq_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_softirq_raise(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_i2c_read(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_i2c_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_i2c_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_i2c_reply(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_smbus_read(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_smbus_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_smbus_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_smbus_reply(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lowmemory_kill(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_irq_handler_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_irq_handler_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_pt(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_timeline(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_wait(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_write_begin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_write_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_sync_file_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_sync_file_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rq_issue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_vmscan_direct_reclaim_begin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_vmscan_direct_reclaim_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_vmscan_kswapd_wake(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_vmscan_kswapd_sleep(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_transaction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_transaction_received(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_set_priority(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_lock(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_locked(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_unlock(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_workqueue_activate_work(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_workqueue_execute_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_workqueue_execute_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_workqueue_queue_work(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_disable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_disable_complete(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_enable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_enable_complete(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_enable_delay(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_set_voltage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulator_set_voltage_complete(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_attach_task(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_mkdir(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_remount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_rmdir(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_transfer_tasks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_destroy_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_release(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_rename(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgroup_setup_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_cmd_kickoff(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_commit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_perf_set_ot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_sspp_change(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_cmd_pingpong_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_compare_bw(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_perf_set_panic_luts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_sspp_set(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_cmd_readptr_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_misr_crc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_perf_set_qos_luts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_trace_counter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_cmd_release_bw(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_mixer_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_perf_set_wm_levels(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_video_underrun_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_cmd_wait_pingpong(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_perf_prefill_calc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_mdp_perf_update_bus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotator_bw_ao_as_context(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_filemap_add_to_page_cache(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_filemap_delete_from_page_cache(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_begin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_defer_compaction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_deferred(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_defer_reset(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_finished(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_isolate_freepages(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_isolate_migratepages(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_kcompactd_sleep(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_kcompactd_wake(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_migratepages(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_suitable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_try_to_compact_pages(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_compaction_wakeup_kcompactd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspend_resume(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_wakeup_new(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_bio_backmerge(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_bio_bounce(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_bio_complete(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_bio_frontmerge(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_bio_queue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_bio_remap(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_dirty_buffer(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_getrq(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_plug(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rq_abort(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rq_complete(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rq_insert(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rq_remap(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rq_requeue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_sleeprq(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_split(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_touch_buffer(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_unplug(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_alloc_da_blocks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_allocate_blocks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_allocate_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_begin_ordered_truncate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_collapse_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_release_space(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_reserve_space(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_update_reserve_space(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_write_pages(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_da_write_pages_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_direct_io_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_direct_io_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_discard_blocks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_discard_preallocations(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_drop_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_cache_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_find_delayed_extent_range_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_find_delayed_extent_range_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_insert_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_lookup_extent_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_lookup_extent_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_remove_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_shrink(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_shrink_count(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_shrink_scan_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_es_shrink_scan_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_evict_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_convert_to_initialized_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_convert_to_initialized_fastpath(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_handle_unwritten_extents(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_in_cache(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_load_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_map_blocks_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_map_blocks_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_put_in_cache(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_remove_space(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_remove_space_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_rm_idx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_rm_leaf(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ext_show_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_fallocate_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_fallocate_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_find_delalloc_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_forget(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_free_blocks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_free_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_get_implied_cluster_alloc_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_get_reserved_cluster_alloc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ind_map_blocks_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_ind_map_blocks_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_insert_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_invalidatepage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_journal_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_journal_start_reserved(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_journalled_invalidatepage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_journalled_write_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_load_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_load_inode_bitmap(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mark_inode_dirty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_bitmap_load(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_buddy_bitmap_load(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_discard_preallocations(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_new_group_pa(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_new_inode_pa(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_release_group_pa(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mb_release_inode_pa(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mballoc_alloc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mballoc_discard(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mballoc_free(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_mballoc_prealloc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_other_inode_update_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_punch_hole(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_read_block_bitmap_load(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_readpage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_releasepage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_remove_blocks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_request_blocks(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_request_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_sync_fs(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_trim_all_free(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_trim_extent(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_truncate_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_truncate_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_unlink_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_unlink_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_write_begin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_write_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_writepage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_writepages(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
      case 233:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_writepages_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
      case 234:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext4_zero_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
      case 235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_newtask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
      case 236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_rename(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
      case 237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_process_exec(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
      case 238:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_process_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
      case 239:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_process_fork(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
      case 240:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_process_free(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
      case 241:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_process_hang(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
      case 242:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_process_wait(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
      case 243:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_do_submit_bio(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
      case 244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_evict_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
      case 245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_fallocate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
      case 246:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_get_data_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
      case 247:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_get_victim(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
      case 248:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_iget(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
      case 249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_iget_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
      case 250:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_new_inode(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
      case 251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_readpage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
      case 252:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_reserve_new_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
      case 253:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_set_page_dirty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_submit_write_page(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_sync_file_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
      case 256:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_sync_file_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
      case 257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_sync_fs(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
      case 258:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
      case 259:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_blocks_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
      case 260:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_blocks_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
      case 261:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_data_blocks_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_inode_blocks_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
      case 263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_inode_blocks_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
      case 264:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_node(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
      case 265:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_nodes_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
      case 266:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_nodes_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
      case 267:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_truncate_partial_nodes(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
      case 268:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_unlink_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
      case 269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_unlink_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
      case 270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_vm_page_mkwrite(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
      case 271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_write_begin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
      case 272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_write_checkpoint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
      case 273:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_write_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
      case 274:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloc_pages_iommu_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
      case 275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloc_pages_iommu_fail(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
      case 276:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloc_pages_iommu_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
      case 277:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloc_pages_sys_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
      case 278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloc_pages_sys_fail(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
      case 279:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_alloc_pages_sys_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
      case 280:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_alloc_contiguous_retry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
      case 281:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_iommu_map_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
      case 282:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_iommu_sec_ptbl_map_range_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
      case 283:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_iommu_sec_ptbl_map_range_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
      case 284:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_alloc_buffer_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
      case 285:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_alloc_buffer_fail(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
      case 286:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_alloc_buffer_fallback(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
      case 287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_alloc_buffer_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_cp_alloc_retry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
      case 289:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_cp_secure_buffer_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
      case 290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_cp_secure_buffer_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
      case 291:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_prefetching(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
      case 292:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_secure_cma_add_to_pool_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
      case 293:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_secure_cma_add_to_pool_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
      case 294:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_secure_cma_allocate_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
      case 295:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_secure_cma_allocate_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
      case 296:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_secure_cma_shrink_pool_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
      case 297:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_secure_cma_shrink_pool_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KfreeFtraceEvent kfree = 298;
      case 298:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_kfree(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
      case 299:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_kmalloc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_kmalloc_node(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_kmem_cache_alloc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_kmem_cache_alloc_node(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_kmem_cache_free(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_migrate_pages_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_migrate_pages_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_migrate_retry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_page_alloc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_page_alloc_extfrag(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_page_alloc_zone_locked(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_page_free(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_page_free_batched(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_page_pcpu_drain(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_rss_stat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
      case 314:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_heap_shrink(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
      case 315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_heap_grow(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_init(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
      case 317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_destroy(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_enable_signal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
      case 319:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_signaled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_clk_enable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clk_disable(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clk_set_rate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_binder_transaction_alloc_buf(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_deliver(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
      case 325:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_generate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oom_score_adj_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GenericFtraceEvent generic = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_generic(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
      case 328:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_event_record(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
      case 329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ZeroFtraceEvent zero = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_zero(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_frequency(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sde_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
      case 334:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mark_victim(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_stat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_buffer_create(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
      case 337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_ion_buffer_destroy(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
      case 338:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_scm_call_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
      case 339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_scm_call_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
      case 340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_mem_total(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
      case 341:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_thermal_temperature(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
      case 342:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdev_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
      case 343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuhp_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
      case 344:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuhp_multi_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
      case 345:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuhp_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
      case 346:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuhp_latency(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
      case 347:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_fastrpc_dma_stat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
      case 348:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_dpu_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
      case 349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_g2d_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaHeapStatFtraceEvent dma_heap_stat = 351;
      case 351:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_heap_stat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuhpPauseFtraceEvent cpuhp_pause = 352;
      case 352:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuhp_pause(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedPiSetprioFtraceEvent sched_pi_setprio = 353;
      case 353:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_pi_setprio(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SdeSdeEvtlogFtraceEvent sde_sde_evtlog = 354;
      case 354:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sde_sde_evtlog(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent sde_sde_perf_calc_crtc = 355;
      case 355:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sde_sde_perf_calc_crtc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent sde_sde_perf_crtc_update = 356;
      case 356:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sde_sde_perf_crtc_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent sde_sde_perf_set_qos_luts = 357;
      case 357:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sde_sde_perf_set_qos_luts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SdeSdePerfUpdateBusFtraceEvent sde_sde_perf_update_bus = 358;
      case 358:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sde_sde_perf_update_bus(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.RssStatThrottledFtraceEvent rss_stat_throttled = 359;
      case 359:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rss_stat_throttled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NetifReceiveSkbFtraceEvent netif_receive_skb = 360;
      case 360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_netif_receive_skb(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NetDevXmitFtraceEvent net_dev_xmit = 361;
      case 361:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_dev_xmit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.InetSockSetStateFtraceEvent inet_sock_set_state = 362;
      case 362:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_inet_sock_set_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TcpRetransmitSkbFtraceEvent tcp_retransmit_skb = 363;
      case 363:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_retransmit_skb(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CrosEcSensorhubDataFtraceEvent cros_ec_sensorhub_data = 364;
      case 364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cros_ec_sensorhub_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NapiGroReceiveEntryFtraceEvent napi_gro_receive_entry = 365;
      case 365:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_napi_gro_receive_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NapiGroReceiveExitFtraceEvent napi_gro_receive_exit = 366;
      case 366:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_napi_gro_receive_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KfreeSkbFtraceEvent kfree_skb = 367;
      case 367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_kfree_skb(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmAccessFaultFtraceEvent kvm_access_fault = 368;
      case 368:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_access_fault(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmAckIrqFtraceEvent kvm_ack_irq = 369;
      case 369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_ack_irq(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmAgeHvaFtraceEvent kvm_age_hva = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_age_hva(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmAgePageFtraceEvent kvm_age_page = 371;
      case 371:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_age_page(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmArmClearDebugFtraceEvent kvm_arm_clear_debug = 372;
      case 372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_arm_clear_debug(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmArmSetDreg32FtraceEvent kvm_arm_set_dreg32 = 373;
      case 373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_arm_set_dreg32(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmArmSetRegsetFtraceEvent kvm_arm_set_regset = 374;
      case 374:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_arm_set_regset(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmArmSetupDebugFtraceEvent kvm_arm_setup_debug = 375;
      case 375:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_arm_setup_debug(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmEntryFtraceEvent kvm_entry = 376;
      case 376:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmExitFtraceEvent kvm_exit = 377;
      case 377:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmFpuFtraceEvent kvm_fpu = 378;
      case 378:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_fpu(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmGetTimerMapFtraceEvent kvm_get_timer_map = 379;
      case 379:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_get_timer_map(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmGuestFaultFtraceEvent kvm_guest_fault = 380;
      case 380:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_guest_fault(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmHandleSysRegFtraceEvent kvm_handle_sys_reg = 381;
      case 381:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_handle_sys_reg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmHvcArm64FtraceEvent kvm_hvc_arm64 = 382;
      case 382:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_hvc_arm64(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmIrqLineFtraceEvent kvm_irq_line = 383;
      case 383:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_irq_line(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmMmioFtraceEvent kvm_mmio = 384;
      case 384:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_mmio(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmMmioEmulateFtraceEvent kvm_mmio_emulate = 385;
      case 385:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_mmio_emulate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmSetGuestDebugFtraceEvent kvm_set_guest_debug = 386;
      case 386:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_set_guest_debug(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmSetIrqFtraceEvent kvm_set_irq = 387;
      case 387:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_set_irq(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmSetSpteHvaFtraceEvent kvm_set_spte_hva = 388;
      case 388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_set_spte_hva(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmSetWayFlushFtraceEvent kvm_set_way_flush = 389;
      case 389:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_set_way_flush(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmSysAccessFtraceEvent kvm_sys_access = 390;
      case 390:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_sys_access(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmTestAgeHvaFtraceEvent kvm_test_age_hva = 391;
      case 391:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_test_age_hva(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmTimerEmulateFtraceEvent kvm_timer_emulate = 392;
      case 392:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_timer_emulate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmTimerHrtimerExpireFtraceEvent kvm_timer_hrtimer_expire = 393;
      case 393:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_timer_hrtimer_expire(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmTimerRestoreStateFtraceEvent kvm_timer_restore_state = 394;
      case 394:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_timer_restore_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmTimerSaveStateFtraceEvent kvm_timer_save_state = 395;
      case 395:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_timer_save_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmTimerUpdateIrqFtraceEvent kvm_timer_update_irq = 396;
      case 396:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_timer_update_irq(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmToggleCacheFtraceEvent kvm_toggle_cache = 397;
      case 397:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_toggle_cache(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmUnmapHvaRangeFtraceEvent kvm_unmap_hva_range = 398;
      case 398:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_unmap_hva_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmUserspaceExitFtraceEvent kvm_userspace_exit = 399;
      case 399:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_userspace_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmVcpuWakeupFtraceEvent kvm_vcpu_wakeup = 400;
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_vcpu_wakeup(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.KvmWfxArm64FtraceEvent kvm_wfx_arm64 = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvm_wfx_arm64(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrapRegFtraceEvent trap_reg = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_trap_reg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VgicUpdateIrqPendingFtraceEvent vgic_update_irq_pending = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_vgic_update_irq_pending(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.WakeupSourceActivateFtraceEvent wakeup_source_activate = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_wakeup_source_activate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.WakeupSourceDeactivateFtraceEvent wakeup_source_deactivate = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_wakeup_source_deactivate(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.UfshcdCommandFtraceEvent ufshcd_command = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ufshcd_command(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.UfshcdClkGatingFtraceEvent ufshcd_clk_gating = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ufshcd_clk_gating(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ConsoleFtraceEvent console = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_console(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DrmVblankEventFtraceEvent drm_vblank_event = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_drm_vblank_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DrmVblankEventDeliveredFtraceEvent drm_vblank_event_delivered = 410;
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_drm_vblank_event_delivered(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DrmSchedJobFtraceEvent drm_sched_job = 411;
      case 411:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_drm_sched_job(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DrmRunJobFtraceEvent drm_run_job = 412;
      case 412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_drm_run_job(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DrmSchedProcessJobFtraceEvent drm_sched_process_job = 413;
      case 413:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_drm_sched_process_job(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaFenceInitFtraceEvent dma_fence_init = 414;
      case 414:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_fence_init(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaFenceEmitFtraceEvent dma_fence_emit = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_fence_emit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaFenceSignaledFtraceEvent dma_fence_signaled = 416;
      case 416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_fence_signaled(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaFenceWaitStartFtraceEvent dma_fence_wait_start = 417;
      case 417:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_fence_wait_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DmaFenceWaitEndFtraceEvent dma_fence_wait_end = 418;
      case 418:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dma_fence_wait_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsIostatFtraceEvent f2fs_iostat = 419;
      case 419:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_iostat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.F2fsIostatLatencyFtraceEvent f2fs_iostat_latency = 420;
      case 420:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2fs_iostat_latency(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SchedCpuUtilCfsFtraceEvent sched_cpu_util_cfs = 421;
      case 421:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sched_cpu_util_cfs(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.V4l2QbufFtraceEvent v4l2_qbuf = 422;
      case 422:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_v4l2_qbuf(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.V4l2DqbufFtraceEvent v4l2_dqbuf = 423;
      case 423:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_v4l2_dqbuf(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Vb2V4l2BufQueueFtraceEvent vb2_v4l2_buf_queue = 424;
      case 424:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vb2_v4l2_buf_queue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Vb2V4l2BufDoneFtraceEvent vb2_v4l2_buf_done = 425;
      case 425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vb2_v4l2_buf_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Vb2V4l2QbufFtraceEvent vb2_v4l2_qbuf = 426;
      case 426:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vb2_v4l2_qbuf(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Vb2V4l2DqbufFtraceEvent vb2_v4l2_dqbuf = 427;
      case 427:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vb2_v4l2_dqbuf(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DsiCmdFifoStatusFtraceEvent dsi_cmd_fifo_status = 428;
      case 428:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsi_cmd_fifo_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DsiRxFtraceEvent dsi_rx = 429;
      case 429:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsi_rx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DsiTxFtraceEvent dsi_tx = 430;
      case 430:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_dsi_tx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidFsDatareadEndFtraceEvent android_fs_dataread_end = 431;
      case 431:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_fs_dataread_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidFsDatareadStartFtraceEvent android_fs_dataread_start = 432;
      case 432:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_fs_dataread_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidFsDatawriteEndFtraceEvent android_fs_datawrite_end = 433;
      case 433:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_fs_datawrite_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidFsDatawriteStartFtraceEvent android_fs_datawrite_start = 434;
      case 434:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_fs_datawrite_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidFsFsyncEndFtraceEvent android_fs_fsync_end = 435;
      case 435:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_fs_fsync_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidFsFsyncStartFtraceEvent android_fs_fsync_start = 436;
      case 436:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_fs_fsync_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FuncgraphEntryFtraceEvent funcgraph_entry = 437;
      case 437:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_funcgraph_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FuncgraphExitFtraceEvent funcgraph_exit = 438;
      case 438:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_funcgraph_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VirtioVideoCmdFtraceEvent virtio_video_cmd = 439;
      case 439:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtio_video_cmd(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VirtioVideoCmdDoneFtraceEvent virtio_video_cmd_done = 440;
      case 440:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtio_video_cmd_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VirtioVideoResourceQueueFtraceEvent virtio_video_resource_queue = 441;
      case 441:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtio_video_resource_queue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent virtio_video_resource_queue_done = 442;
      case 442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtio_video_resource_queue_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmShrinkSlabStartFtraceEvent mm_shrink_slab_start = 443;
      case 443:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_shrink_slab_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MmShrinkSlabEndFtraceEvent mm_shrink_slab_end = 444;
      case 444:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_mm_shrink_slab_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustySmcFtraceEvent trusty_smc = 445;
      case 445:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_smc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustySmcDoneFtraceEvent trusty_smc_done = 446;
      case 446:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_smc_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyStdCall32FtraceEvent trusty_std_call32 = 447;
      case 447:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_std_call32(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyStdCall32DoneFtraceEvent trusty_std_call32_done = 448;
      case 448:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_std_call32_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyShareMemoryFtraceEvent trusty_share_memory = 449;
      case 449:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_share_memory(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyShareMemoryDoneFtraceEvent trusty_share_memory_done = 450;
      case 450:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_share_memory_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyReclaimMemoryFtraceEvent trusty_reclaim_memory = 451;
      case 451:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_reclaim_memory(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent trusty_reclaim_memory_done = 452;
      case 452:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_reclaim_memory_done(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIrqFtraceEvent trusty_irq = 453;
      case 453:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_irq(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcHandleEventFtraceEvent trusty_ipc_handle_event = 454;
      case 454:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_handle_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcConnectFtraceEvent trusty_ipc_connect = 455;
      case 455:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_connect(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcConnectEndFtraceEvent trusty_ipc_connect_end = 456;
      case 456:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_connect_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcWriteFtraceEvent trusty_ipc_write = 457;
      case 457:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcPollFtraceEvent trusty_ipc_poll = 458;
      case 458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_poll(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcReadFtraceEvent trusty_ipc_read = 460;
      case 460:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_read(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcReadEndFtraceEvent trusty_ipc_read_end = 461;
      case 461:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_read_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyIpcRxFtraceEvent trusty_ipc_rx = 462;
      case 462:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_ipc_rx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrustyEnqueueNopFtraceEvent trusty_enqueue_nop = 464;
      case 464:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusty_enqueue_nop(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CmaAllocStartFtraceEvent cma_alloc_start = 465;
      case 465:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_cma_alloc_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CmaAllocInfoFtraceEvent cma_alloc_info = 466;
      case 466:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_cma_alloc_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.LwisTracingMarkWriteFtraceEvent lwis_tracing_mark_write = 467;
      case 467:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_lwis_tracing_mark_write(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VirtioGpuCmdQueueFtraceEvent virtio_gpu_cmd_queue = 468;
      case 468:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtio_gpu_cmd_queue(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VirtioGpuCmdResponseFtraceEvent virtio_gpu_cmd_response = 469;
      case 469:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtio_gpu_cmd_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent mali_mali_KCPU_CQS_SET = 470;
      case 470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_kcpu_cqs_set(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent mali_mali_KCPU_CQS_WAIT_START = 471;
      case 471:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_kcpu_cqs_wait_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent mali_mali_KCPU_CQS_WAIT_END = 472;
      case 472:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_kcpu_cqs_wait_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent mali_mali_KCPU_FENCE_SIGNAL = 473;
      case 473:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_kcpu_fence_signal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent mali_mali_KCPU_FENCE_WAIT_START = 474;
      case 474:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_kcpu_fence_wait_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent mali_mali_KCPU_FENCE_WAIT_END = 475;
      case 475:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_kcpu_fence_wait_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.HypEnterFtraceEvent hyp_enter = 476;
      case 476:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_hyp_enter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.HypExitFtraceEvent hyp_exit = 477;
      case 477:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_hyp_exit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.HostHcallFtraceEvent host_hcall = 478;
      case 478:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_hcall(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.HostSmcFtraceEvent host_smc = 479;
      case 479:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_smc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.HostMemAbortFtraceEvent host_mem_abort = 480;
      case 480:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_mem_abort(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SuspendResumeMinimalFtraceEvent suspend_resume_minimal = 481;
      case 481:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspend_resume_minimal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent mali_mali_CSF_INTERRUPT_START = 482;
      case 482:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_csf_interrupt_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent mali_mali_CSF_INTERRUPT_END = 483;
      case 483:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mali_mali_csf_interrupt_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_timestamp(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_pid(), target);
  }

  switch (event_case()) {
    case kPrint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::print(this),
          _Internal::print(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedSwitch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::sched_switch(this),
          _Internal::sched_switch(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional uint32 common_flags = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_common_flags(), target);
  }

  switch (event_case()) {
    case kCpuFrequency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::cpu_frequency(this),
          _Internal::cpu_frequency(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuFrequencyLimits: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::cpu_frequency_limits(this),
          _Internal::cpu_frequency_limits(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuIdle: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::cpu_idle(this),
          _Internal::cpu_idle(this).GetCachedSize(), target, stream);
      break;
    }
    case kClockEnable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::clock_enable(this),
          _Internal::clock_enable(this).GetCachedSize(), target, stream);
      break;
    }
    case kClockDisable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::clock_disable(this),
          _Internal::clock_disable(this).GetCachedSize(), target, stream);
      break;
    }
    case kClockSetRate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::clock_set_rate(this),
          _Internal::clock_set_rate(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedWakeup: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::sched_wakeup(this),
          _Internal::sched_wakeup(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedBlockedReason: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::sched_blocked_reason(this),
          _Internal::sched_blocked_reason(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedCpuHotplug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::sched_cpu_hotplug(this),
          _Internal::sched_cpu_hotplug(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedWaking: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::sched_waking(this),
          _Internal::sched_waking(this).GetCachedSize(), target, stream);
      break;
    }
    case kIpiEntry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::ipi_entry(this),
          _Internal::ipi_entry(this).GetCachedSize(), target, stream);
      break;
    }
    case kIpiExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::ipi_exit(this),
          _Internal::ipi_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kIpiRaise: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::ipi_raise(this),
          _Internal::ipi_raise(this).GetCachedSize(), target, stream);
      break;
    }
    case kSoftirqEntry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::softirq_entry(this),
          _Internal::softirq_entry(this).GetCachedSize(), target, stream);
      break;
    }
    case kSoftirqExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::softirq_exit(this),
          _Internal::softirq_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kSoftirqRaise: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::softirq_raise(this),
          _Internal::softirq_raise(this).GetCachedSize(), target, stream);
      break;
    }
    case kI2CRead: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::i2c_read(this),
          _Internal::i2c_read(this).GetCachedSize(), target, stream);
      break;
    }
    case kI2CWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::i2c_write(this),
          _Internal::i2c_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kI2CResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::i2c_result(this),
          _Internal::i2c_result(this).GetCachedSize(), target, stream);
      break;
    }
    case kI2CReply: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::i2c_reply(this),
          _Internal::i2c_reply(this).GetCachedSize(), target, stream);
      break;
    }
    case kSmbusRead: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, _Internal::smbus_read(this),
          _Internal::smbus_read(this).GetCachedSize(), target, stream);
      break;
    }
    case kSmbusWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, _Internal::smbus_write(this),
          _Internal::smbus_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kSmbusResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::smbus_result(this),
          _Internal::smbus_result(this).GetCachedSize(), target, stream);
      break;
    }
    case kSmbusReply: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, _Internal::smbus_reply(this),
          _Internal::smbus_reply(this).GetCachedSize(), target, stream);
      break;
    }
    case kLowmemoryKill: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, _Internal::lowmemory_kill(this),
          _Internal::lowmemory_kill(this).GetCachedSize(), target, stream);
      break;
    }
    case kIrqHandlerEntry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, _Internal::irq_handler_entry(this),
          _Internal::irq_handler_entry(this).GetCachedSize(), target, stream);
      break;
    }
    case kIrqHandlerExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, _Internal::irq_handler_exit(this),
          _Internal::irq_handler_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kSyncPt: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, _Internal::sync_pt(this),
          _Internal::sync_pt(this).GetCachedSize(), target, stream);
      break;
    }
    case kSyncTimeline: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, _Internal::sync_timeline(this),
          _Internal::sync_timeline(this).GetCachedSize(), target, stream);
      break;
    }
    case kSyncWait: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, _Internal::sync_wait(this),
          _Internal::sync_wait(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaWriteBegin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, _Internal::ext4_da_write_begin(this),
          _Internal::ext4_da_write_begin(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaWriteEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, _Internal::ext4_da_write_end(this),
          _Internal::ext4_da_write_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4SyncFileEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, _Internal::ext4_sync_file_enter(this),
          _Internal::ext4_sync_file_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4SyncFileExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, _Internal::ext4_sync_file_exit(this),
          _Internal::ext4_sync_file_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockRqIssue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, _Internal::block_rq_issue(this),
          _Internal::block_rq_issue(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(46, _Internal::mm_vmscan_direct_reclaim_begin(this),
          _Internal::mm_vmscan_direct_reclaim_begin(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, _Internal::mm_vmscan_direct_reclaim_end(this),
          _Internal::mm_vmscan_direct_reclaim_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmVmscanKswapdWake: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, _Internal::mm_vmscan_kswapd_wake(this),
          _Internal::mm_vmscan_kswapd_wake(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmVmscanKswapdSleep: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, _Internal::mm_vmscan_kswapd_sleep(this),
          _Internal::mm_vmscan_kswapd_sleep(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderTransaction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, _Internal::binder_transaction(this),
          _Internal::binder_transaction(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderTransactionReceived: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(51, _Internal::binder_transaction_received(this),
          _Internal::binder_transaction_received(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderSetPriority: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(52, _Internal::binder_set_priority(this),
          _Internal::binder_set_priority(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderLock: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(53, _Internal::binder_lock(this),
          _Internal::binder_lock(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderLocked: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(54, _Internal::binder_locked(this),
          _Internal::binder_locked(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderUnlock: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(55, _Internal::binder_unlock(this),
          _Internal::binder_unlock(this).GetCachedSize(), target, stream);
      break;
    }
    case kWorkqueueActivateWork: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(56, _Internal::workqueue_activate_work(this),
          _Internal::workqueue_activate_work(this).GetCachedSize(), target, stream);
      break;
    }
    case kWorkqueueExecuteEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(57, _Internal::workqueue_execute_end(this),
          _Internal::workqueue_execute_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kWorkqueueExecuteStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(58, _Internal::workqueue_execute_start(this),
          _Internal::workqueue_execute_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kWorkqueueQueueWork: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(59, _Internal::workqueue_queue_work(this),
          _Internal::workqueue_queue_work(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorDisable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(60, _Internal::regulator_disable(this),
          _Internal::regulator_disable(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorDisableComplete: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(61, _Internal::regulator_disable_complete(this),
          _Internal::regulator_disable_complete(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorEnable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(62, _Internal::regulator_enable(this),
          _Internal::regulator_enable(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorEnableComplete: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(63, _Internal::regulator_enable_complete(this),
          _Internal::regulator_enable_complete(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorEnableDelay: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(64, _Internal::regulator_enable_delay(this),
          _Internal::regulator_enable_delay(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorSetVoltage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(65, _Internal::regulator_set_voltage(this),
          _Internal::regulator_set_voltage(this).GetCachedSize(), target, stream);
      break;
    }
    case kRegulatorSetVoltageComplete: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(66, _Internal::regulator_set_voltage_complete(this),
          _Internal::regulator_set_voltage_complete(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupAttachTask: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(67, _Internal::cgroup_attach_task(this),
          _Internal::cgroup_attach_task(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupMkdir: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(68, _Internal::cgroup_mkdir(this),
          _Internal::cgroup_mkdir(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupRemount: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(69, _Internal::cgroup_remount(this),
          _Internal::cgroup_remount(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupRmdir: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(70, _Internal::cgroup_rmdir(this),
          _Internal::cgroup_rmdir(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupTransferTasks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(71, _Internal::cgroup_transfer_tasks(this),
          _Internal::cgroup_transfer_tasks(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupDestroyRoot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(72, _Internal::cgroup_destroy_root(this),
          _Internal::cgroup_destroy_root(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupRelease: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(73, _Internal::cgroup_release(this),
          _Internal::cgroup_release(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupRename: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(74, _Internal::cgroup_rename(this),
          _Internal::cgroup_rename(this).GetCachedSize(), target, stream);
      break;
    }
    case kCgroupSetupRoot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(75, _Internal::cgroup_setup_root(this),
          _Internal::cgroup_setup_root(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCmdKickoff: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(76, _Internal::mdp_cmd_kickoff(this),
          _Internal::mdp_cmd_kickoff(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCommit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(77, _Internal::mdp_commit(this),
          _Internal::mdp_commit(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpPerfSetOt: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(78, _Internal::mdp_perf_set_ot(this),
          _Internal::mdp_perf_set_ot(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpSsppChange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(79, _Internal::mdp_sspp_change(this),
          _Internal::mdp_sspp_change(this).GetCachedSize(), target, stream);
      break;
    }
    case kTracingMarkWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(80, _Internal::tracing_mark_write(this),
          _Internal::tracing_mark_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCmdPingpongDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(81, _Internal::mdp_cmd_pingpong_done(this),
          _Internal::mdp_cmd_pingpong_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCompareBw: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(82, _Internal::mdp_compare_bw(this),
          _Internal::mdp_compare_bw(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpPerfSetPanicLuts: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(83, _Internal::mdp_perf_set_panic_luts(this),
          _Internal::mdp_perf_set_panic_luts(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpSsppSet: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(84, _Internal::mdp_sspp_set(this),
          _Internal::mdp_sspp_set(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCmdReadptrDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(85, _Internal::mdp_cmd_readptr_done(this),
          _Internal::mdp_cmd_readptr_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpMisrCrc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(86, _Internal::mdp_misr_crc(this),
          _Internal::mdp_misr_crc(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpPerfSetQosLuts: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(87, _Internal::mdp_perf_set_qos_luts(this),
          _Internal::mdp_perf_set_qos_luts(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpTraceCounter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(88, _Internal::mdp_trace_counter(this),
          _Internal::mdp_trace_counter(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCmdReleaseBw: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(89, _Internal::mdp_cmd_release_bw(this),
          _Internal::mdp_cmd_release_bw(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpMixerUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(90, _Internal::mdp_mixer_update(this),
          _Internal::mdp_mixer_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpPerfSetWmLevels: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(91, _Internal::mdp_perf_set_wm_levels(this),
          _Internal::mdp_perf_set_wm_levels(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpVideoUnderrunDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(92, _Internal::mdp_video_underrun_done(this),
          _Internal::mdp_video_underrun_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpCmdWaitPingpong: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(93, _Internal::mdp_cmd_wait_pingpong(this),
          _Internal::mdp_cmd_wait_pingpong(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpPerfPrefillCalc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(94, _Internal::mdp_perf_prefill_calc(this),
          _Internal::mdp_perf_prefill_calc(this).GetCachedSize(), target, stream);
      break;
    }
    case kMdpPerfUpdateBus: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(95, _Internal::mdp_perf_update_bus(this),
          _Internal::mdp_perf_update_bus(this).GetCachedSize(), target, stream);
      break;
    }
    case kRotatorBwAoAsContext: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(96, _Internal::rotator_bw_ao_as_context(this),
          _Internal::rotator_bw_ao_as_context(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmFilemapAddToPageCache: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(97, _Internal::mm_filemap_add_to_page_cache(this),
          _Internal::mm_filemap_add_to_page_cache(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(98, _Internal::mm_filemap_delete_from_page_cache(this),
          _Internal::mm_filemap_delete_from_page_cache(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionBegin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(99, _Internal::mm_compaction_begin(this),
          _Internal::mm_compaction_begin(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionDeferCompaction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, _Internal::mm_compaction_defer_compaction(this),
          _Internal::mm_compaction_defer_compaction(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionDeferred: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(101, _Internal::mm_compaction_deferred(this),
          _Internal::mm_compaction_deferred(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionDeferReset: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(102, _Internal::mm_compaction_defer_reset(this),
          _Internal::mm_compaction_defer_reset(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(103, _Internal::mm_compaction_end(this),
          _Internal::mm_compaction_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionFinished: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(104, _Internal::mm_compaction_finished(this),
          _Internal::mm_compaction_finished(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionIsolateFreepages: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(105, _Internal::mm_compaction_isolate_freepages(this),
          _Internal::mm_compaction_isolate_freepages(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(106, _Internal::mm_compaction_isolate_migratepages(this),
          _Internal::mm_compaction_isolate_migratepages(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionKcompactdSleep: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(107, _Internal::mm_compaction_kcompactd_sleep(this),
          _Internal::mm_compaction_kcompactd_sleep(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionKcompactdWake: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(108, _Internal::mm_compaction_kcompactd_wake(this),
          _Internal::mm_compaction_kcompactd_wake(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionMigratepages: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(109, _Internal::mm_compaction_migratepages(this),
          _Internal::mm_compaction_migratepages(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionSuitable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(110, _Internal::mm_compaction_suitable(this),
          _Internal::mm_compaction_suitable(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionTryToCompactPages: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(111, _Internal::mm_compaction_try_to_compact_pages(this),
          _Internal::mm_compaction_try_to_compact_pages(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(112, _Internal::mm_compaction_wakeup_kcompactd(this),
          _Internal::mm_compaction_wakeup_kcompactd(this).GetCachedSize(), target, stream);
      break;
    }
    case kSuspendResume: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(113, _Internal::suspend_resume(this),
          _Internal::suspend_resume(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedWakeupNew: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(114, _Internal::sched_wakeup_new(this),
          _Internal::sched_wakeup_new(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockBioBackmerge: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(115, _Internal::block_bio_backmerge(this),
          _Internal::block_bio_backmerge(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockBioBounce: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(116, _Internal::block_bio_bounce(this),
          _Internal::block_bio_bounce(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockBioComplete: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(117, _Internal::block_bio_complete(this),
          _Internal::block_bio_complete(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockBioFrontmerge: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(118, _Internal::block_bio_frontmerge(this),
          _Internal::block_bio_frontmerge(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockBioQueue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(119, _Internal::block_bio_queue(this),
          _Internal::block_bio_queue(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockBioRemap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(120, _Internal::block_bio_remap(this),
          _Internal::block_bio_remap(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockDirtyBuffer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(121, _Internal::block_dirty_buffer(this),
          _Internal::block_dirty_buffer(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockGetrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(122, _Internal::block_getrq(this),
          _Internal::block_getrq(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockPlug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(123, _Internal::block_plug(this),
          _Internal::block_plug(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockRqAbort: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(124, _Internal::block_rq_abort(this),
          _Internal::block_rq_abort(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockRqComplete: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(125, _Internal::block_rq_complete(this),
          _Internal::block_rq_complete(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockRqInsert: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(126, _Internal::block_rq_insert(this),
          _Internal::block_rq_insert(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockRqRemap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(128, _Internal::block_rq_remap(this),
          _Internal::block_rq_remap(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockRqRequeue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(129, _Internal::block_rq_requeue(this),
          _Internal::block_rq_requeue(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockSleeprq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(130, _Internal::block_sleeprq(this),
          _Internal::block_sleeprq(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockSplit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(131, _Internal::block_split(this),
          _Internal::block_split(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockTouchBuffer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(132, _Internal::block_touch_buffer(this),
          _Internal::block_touch_buffer(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockUnplug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(133, _Internal::block_unplug(this),
          _Internal::block_unplug(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4AllocDaBlocks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(134, _Internal::ext4_alloc_da_blocks(this),
          _Internal::ext4_alloc_da_blocks(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4AllocateBlocks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(135, _Internal::ext4_allocate_blocks(this),
          _Internal::ext4_allocate_blocks(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4AllocateInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(136, _Internal::ext4_allocate_inode(this),
          _Internal::ext4_allocate_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4BeginOrderedTruncate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(137, _Internal::ext4_begin_ordered_truncate(this),
          _Internal::ext4_begin_ordered_truncate(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4CollapseRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(138, _Internal::ext4_collapse_range(this),
          _Internal::ext4_collapse_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaReleaseSpace: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(139, _Internal::ext4_da_release_space(this),
          _Internal::ext4_da_release_space(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaReserveSpace: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(140, _Internal::ext4_da_reserve_space(this),
          _Internal::ext4_da_reserve_space(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(141, _Internal::ext4_da_update_reserve_space(this),
          _Internal::ext4_da_update_reserve_space(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaWritePages: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(142, _Internal::ext4_da_write_pages(this),
          _Internal::ext4_da_write_pages(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DaWritePagesExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(143, _Internal::ext4_da_write_pages_extent(this),
          _Internal::ext4_da_write_pages_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DirectIOEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(144, _Internal::ext4_direct_io_enter(this),
          _Internal::ext4_direct_io_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DirectIOExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(145, _Internal::ext4_direct_io_exit(this),
          _Internal::ext4_direct_io_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DiscardBlocks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(146, _Internal::ext4_discard_blocks(this),
          _Internal::ext4_discard_blocks(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DiscardPreallocations: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(147, _Internal::ext4_discard_preallocations(this),
          _Internal::ext4_discard_preallocations(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4DropInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(148, _Internal::ext4_drop_inode(this),
          _Internal::ext4_drop_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsCacheExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(149, _Internal::ext4_es_cache_extent(this),
          _Internal::ext4_es_cache_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(150, _Internal::ext4_es_find_delayed_extent_range_enter(this),
          _Internal::ext4_es_find_delayed_extent_range_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(151, _Internal::ext4_es_find_delayed_extent_range_exit(this),
          _Internal::ext4_es_find_delayed_extent_range_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsInsertExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(152, _Internal::ext4_es_insert_extent(this),
          _Internal::ext4_es_insert_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsLookupExtentEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(153, _Internal::ext4_es_lookup_extent_enter(this),
          _Internal::ext4_es_lookup_extent_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsLookupExtentExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(154, _Internal::ext4_es_lookup_extent_exit(this),
          _Internal::ext4_es_lookup_extent_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsRemoveExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(155, _Internal::ext4_es_remove_extent(this),
          _Internal::ext4_es_remove_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsShrink: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(156, _Internal::ext4_es_shrink(this),
          _Internal::ext4_es_shrink(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsShrinkCount: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(157, _Internal::ext4_es_shrink_count(this),
          _Internal::ext4_es_shrink_count(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsShrinkScanEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(158, _Internal::ext4_es_shrink_scan_enter(this),
          _Internal::ext4_es_shrink_scan_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EsShrinkScanExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(159, _Internal::ext4_es_shrink_scan_exit(this),
          _Internal::ext4_es_shrink_scan_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4EvictInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(160, _Internal::ext4_evict_inode(this),
          _Internal::ext4_evict_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(161, _Internal::ext4_ext_convert_to_initialized_enter(this),
          _Internal::ext4_ext_convert_to_initialized_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(162, _Internal::ext4_ext_convert_to_initialized_fastpath(this),
          _Internal::ext4_ext_convert_to_initialized_fastpath(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(163, _Internal::ext4_ext_handle_unwritten_extents(this),
          _Internal::ext4_ext_handle_unwritten_extents(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtInCache: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(164, _Internal::ext4_ext_in_cache(this),
          _Internal::ext4_ext_in_cache(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtLoadExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(165, _Internal::ext4_ext_load_extent(this),
          _Internal::ext4_ext_load_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(166, _Internal::ext4_ext_map_blocks_enter(this),
          _Internal::ext4_ext_map_blocks_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtMapBlocksExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(167, _Internal::ext4_ext_map_blocks_exit(this),
          _Internal::ext4_ext_map_blocks_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtPutInCache: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(168, _Internal::ext4_ext_put_in_cache(this),
          _Internal::ext4_ext_put_in_cache(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtRemoveSpace: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(169, _Internal::ext4_ext_remove_space(this),
          _Internal::ext4_ext_remove_space(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(170, _Internal::ext4_ext_remove_space_done(this),
          _Internal::ext4_ext_remove_space_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtRmIdx: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(171, _Internal::ext4_ext_rm_idx(this),
          _Internal::ext4_ext_rm_idx(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtRmLeaf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(172, _Internal::ext4_ext_rm_leaf(this),
          _Internal::ext4_ext_rm_leaf(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ExtShowExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(173, _Internal::ext4_ext_show_extent(this),
          _Internal::ext4_ext_show_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4FallocateEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(174, _Internal::ext4_fallocate_enter(this),
          _Internal::ext4_fallocate_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4FallocateExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(175, _Internal::ext4_fallocate_exit(this),
          _Internal::ext4_fallocate_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4FindDelallocRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(176, _Internal::ext4_find_delalloc_range(this),
          _Internal::ext4_find_delalloc_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4Forget: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(177, _Internal::ext4_forget(this),
          _Internal::ext4_forget(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4FreeBlocks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(178, _Internal::ext4_free_blocks(this),
          _Internal::ext4_free_blocks(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4FreeInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(179, _Internal::ext4_free_inode(this),
          _Internal::ext4_free_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(180, _Internal::ext4_get_implied_cluster_alloc_exit(this),
          _Internal::ext4_get_implied_cluster_alloc_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(181, _Internal::ext4_get_reserved_cluster_alloc(this),
          _Internal::ext4_get_reserved_cluster_alloc(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4IndMapBlocksEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(182, _Internal::ext4_ind_map_blocks_enter(this),
          _Internal::ext4_ind_map_blocks_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4IndMapBlocksExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(183, _Internal::ext4_ind_map_blocks_exit(this),
          _Internal::ext4_ind_map_blocks_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4InsertRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(184, _Internal::ext4_insert_range(this),
          _Internal::ext4_insert_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4Invalidatepage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(185, _Internal::ext4_invalidatepage(this),
          _Internal::ext4_invalidatepage(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4JournalStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(186, _Internal::ext4_journal_start(this),
          _Internal::ext4_journal_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4JournalStartReserved: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(187, _Internal::ext4_journal_start_reserved(this),
          _Internal::ext4_journal_start_reserved(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4JournalledInvalidatepage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(188, _Internal::ext4_journalled_invalidatepage(this),
          _Internal::ext4_journalled_invalidatepage(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4JournalledWriteEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(189, _Internal::ext4_journalled_write_end(this),
          _Internal::ext4_journalled_write_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4LoadInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(190, _Internal::ext4_load_inode(this),
          _Internal::ext4_load_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4LoadInodeBitmap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(191, _Internal::ext4_load_inode_bitmap(this),
          _Internal::ext4_load_inode_bitmap(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MarkInodeDirty: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(192, _Internal::ext4_mark_inode_dirty(this),
          _Internal::ext4_mark_inode_dirty(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbBitmapLoad: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(193, _Internal::ext4_mb_bitmap_load(this),
          _Internal::ext4_mb_bitmap_load(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(194, _Internal::ext4_mb_buddy_bitmap_load(this),
          _Internal::ext4_mb_buddy_bitmap_load(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbDiscardPreallocations: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(195, _Internal::ext4_mb_discard_preallocations(this),
          _Internal::ext4_mb_discard_preallocations(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbNewGroupPa: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(196, _Internal::ext4_mb_new_group_pa(this),
          _Internal::ext4_mb_new_group_pa(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbNewInodePa: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(197, _Internal::ext4_mb_new_inode_pa(this),
          _Internal::ext4_mb_new_inode_pa(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbReleaseGroupPa: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(198, _Internal::ext4_mb_release_group_pa(this),
          _Internal::ext4_mb_release_group_pa(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MbReleaseInodePa: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(199, _Internal::ext4_mb_release_inode_pa(this),
          _Internal::ext4_mb_release_inode_pa(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MballocAlloc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(200, _Internal::ext4_mballoc_alloc(this),
          _Internal::ext4_mballoc_alloc(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MballocDiscard: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(201, _Internal::ext4_mballoc_discard(this),
          _Internal::ext4_mballoc_discard(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MballocFree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(202, _Internal::ext4_mballoc_free(this),
          _Internal::ext4_mballoc_free(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4MballocPrealloc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(203, _Internal::ext4_mballoc_prealloc(this),
          _Internal::ext4_mballoc_prealloc(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(204, _Internal::ext4_other_inode_update_time(this),
          _Internal::ext4_other_inode_update_time(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4PunchHole: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(205, _Internal::ext4_punch_hole(this),
          _Internal::ext4_punch_hole(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(206, _Internal::ext4_read_block_bitmap_load(this),
          _Internal::ext4_read_block_bitmap_load(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4Readpage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(207, _Internal::ext4_readpage(this),
          _Internal::ext4_readpage(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4Releasepage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(208, _Internal::ext4_releasepage(this),
          _Internal::ext4_releasepage(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4RemoveBlocks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(209, _Internal::ext4_remove_blocks(this),
          _Internal::ext4_remove_blocks(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4RequestBlocks: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(210, _Internal::ext4_request_blocks(this),
          _Internal::ext4_request_blocks(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4RequestInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(211, _Internal::ext4_request_inode(this),
          _Internal::ext4_request_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4SyncFs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(212, _Internal::ext4_sync_fs(this),
          _Internal::ext4_sync_fs(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4TrimAllFree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(213, _Internal::ext4_trim_all_free(this),
          _Internal::ext4_trim_all_free(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4TrimExtent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(214, _Internal::ext4_trim_extent(this),
          _Internal::ext4_trim_extent(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4TruncateEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(215, _Internal::ext4_truncate_enter(this),
          _Internal::ext4_truncate_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4TruncateExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(216, _Internal::ext4_truncate_exit(this),
          _Internal::ext4_truncate_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4UnlinkEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(217, _Internal::ext4_unlink_enter(this),
          _Internal::ext4_unlink_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4UnlinkExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(218, _Internal::ext4_unlink_exit(this),
          _Internal::ext4_unlink_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4WriteBegin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(219, _Internal::ext4_write_begin(this),
          _Internal::ext4_write_begin(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4WriteEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(230, _Internal::ext4_write_end(this),
          _Internal::ext4_write_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4Writepage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(231, _Internal::ext4_writepage(this),
          _Internal::ext4_writepage(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4Writepages: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(232, _Internal::ext4_writepages(this),
          _Internal::ext4_writepages(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4WritepagesResult: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(233, _Internal::ext4_writepages_result(this),
          _Internal::ext4_writepages_result(this).GetCachedSize(), target, stream);
      break;
    }
    case kExt4ZeroRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(234, _Internal::ext4_zero_range(this),
          _Internal::ext4_zero_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kTaskNewtask: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(235, _Internal::task_newtask(this),
          _Internal::task_newtask(this).GetCachedSize(), target, stream);
      break;
    }
    case kTaskRename: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(236, _Internal::task_rename(this),
          _Internal::task_rename(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedProcessExec: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(237, _Internal::sched_process_exec(this),
          _Internal::sched_process_exec(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedProcessExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(238, _Internal::sched_process_exit(this),
          _Internal::sched_process_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedProcessFork: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(239, _Internal::sched_process_fork(this),
          _Internal::sched_process_fork(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedProcessFree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(240, _Internal::sched_process_free(this),
          _Internal::sched_process_free(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedProcessHang: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(241, _Internal::sched_process_hang(this),
          _Internal::sched_process_hang(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedProcessWait: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(242, _Internal::sched_process_wait(this),
          _Internal::sched_process_wait(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsDoSubmitBio: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(243, _Internal::f2fs_do_submit_bio(this),
          _Internal::f2fs_do_submit_bio(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsEvictInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(244, _Internal::f2fs_evict_inode(this),
          _Internal::f2fs_evict_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsFallocate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(245, _Internal::f2fs_fallocate(this),
          _Internal::f2fs_fallocate(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsGetDataBlock: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(246, _Internal::f2fs_get_data_block(this),
          _Internal::f2fs_get_data_block(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsGetVictim: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(247, _Internal::f2fs_get_victim(this),
          _Internal::f2fs_get_victim(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsIget: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(248, _Internal::f2fs_iget(this),
          _Internal::f2fs_iget(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsIgetExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(249, _Internal::f2fs_iget_exit(this),
          _Internal::f2fs_iget_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsNewInode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(250, _Internal::f2fs_new_inode(this),
          _Internal::f2fs_new_inode(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsReadpage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(251, _Internal::f2fs_readpage(this),
          _Internal::f2fs_readpage(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsReserveNewBlock: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(252, _Internal::f2fs_reserve_new_block(this),
          _Internal::f2fs_reserve_new_block(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsSetPageDirty: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(253, _Internal::f2fs_set_page_dirty(this),
          _Internal::f2fs_set_page_dirty(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsSubmitWritePage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(254, _Internal::f2fs_submit_write_page(this),
          _Internal::f2fs_submit_write_page(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsSyncFileEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(255, _Internal::f2fs_sync_file_enter(this),
          _Internal::f2fs_sync_file_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsSyncFileExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(256, _Internal::f2fs_sync_file_exit(this),
          _Internal::f2fs_sync_file_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsSyncFs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(257, _Internal::f2fs_sync_fs(this),
          _Internal::f2fs_sync_fs(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(258, _Internal::f2fs_truncate(this),
          _Internal::f2fs_truncate(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(259, _Internal::f2fs_truncate_blocks_enter(this),
          _Internal::f2fs_truncate_blocks_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateBlocksExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(260, _Internal::f2fs_truncate_blocks_exit(this),
          _Internal::f2fs_truncate_blocks_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(261, _Internal::f2fs_truncate_data_blocks_range(this),
          _Internal::f2fs_truncate_data_blocks_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(262, _Internal::f2fs_truncate_inode_blocks_enter(this),
          _Internal::f2fs_truncate_inode_blocks_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(263, _Internal::f2fs_truncate_inode_blocks_exit(this),
          _Internal::f2fs_truncate_inode_blocks_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateNode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(264, _Internal::f2fs_truncate_node(this),
          _Internal::f2fs_truncate_node(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateNodesEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(265, _Internal::f2fs_truncate_nodes_enter(this),
          _Internal::f2fs_truncate_nodes_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncateNodesExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(266, _Internal::f2fs_truncate_nodes_exit(this),
          _Internal::f2fs_truncate_nodes_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsTruncatePartialNodes: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(267, _Internal::f2fs_truncate_partial_nodes(this),
          _Internal::f2fs_truncate_partial_nodes(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsUnlinkEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(268, _Internal::f2fs_unlink_enter(this),
          _Internal::f2fs_unlink_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsUnlinkExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(269, _Internal::f2fs_unlink_exit(this),
          _Internal::f2fs_unlink_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsVmPageMkwrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(270, _Internal::f2fs_vm_page_mkwrite(this),
          _Internal::f2fs_vm_page_mkwrite(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsWriteBegin: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(271, _Internal::f2fs_write_begin(this),
          _Internal::f2fs_write_begin(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsWriteCheckpoint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(272, _Internal::f2fs_write_checkpoint(this),
          _Internal::f2fs_write_checkpoint(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsWriteEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(273, _Internal::f2fs_write_end(this),
          _Internal::f2fs_write_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kAllocPagesIommuEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(274, _Internal::alloc_pages_iommu_end(this),
          _Internal::alloc_pages_iommu_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kAllocPagesIommuFail: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(275, _Internal::alloc_pages_iommu_fail(this),
          _Internal::alloc_pages_iommu_fail(this).GetCachedSize(), target, stream);
      break;
    }
    case kAllocPagesIommuStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(276, _Internal::alloc_pages_iommu_start(this),
          _Internal::alloc_pages_iommu_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kAllocPagesSysEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(277, _Internal::alloc_pages_sys_end(this),
          _Internal::alloc_pages_sys_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kAllocPagesSysFail: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(278, _Internal::alloc_pages_sys_fail(this),
          _Internal::alloc_pages_sys_fail(this).GetCachedSize(), target, stream);
      break;
    }
    case kAllocPagesSysStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(279, _Internal::alloc_pages_sys_start(this),
          _Internal::alloc_pages_sys_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaAllocContiguousRetry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(280, _Internal::dma_alloc_contiguous_retry(this),
          _Internal::dma_alloc_contiguous_retry(this).GetCachedSize(), target, stream);
      break;
    }
    case kIommuMapRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(281, _Internal::iommu_map_range(this),
          _Internal::iommu_map_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(282, _Internal::iommu_sec_ptbl_map_range_end(this),
          _Internal::iommu_sec_ptbl_map_range_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(283, _Internal::iommu_sec_ptbl_map_range_start(this),
          _Internal::iommu_sec_ptbl_map_range_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonAllocBufferEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(284, _Internal::ion_alloc_buffer_end(this),
          _Internal::ion_alloc_buffer_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonAllocBufferFail: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(285, _Internal::ion_alloc_buffer_fail(this),
          _Internal::ion_alloc_buffer_fail(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonAllocBufferFallback: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(286, _Internal::ion_alloc_buffer_fallback(this),
          _Internal::ion_alloc_buffer_fallback(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonAllocBufferStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(287, _Internal::ion_alloc_buffer_start(this),
          _Internal::ion_alloc_buffer_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonCpAllocRetry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(288, _Internal::ion_cp_alloc_retry(this),
          _Internal::ion_cp_alloc_retry(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonCpSecureBufferEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(289, _Internal::ion_cp_secure_buffer_end(this),
          _Internal::ion_cp_secure_buffer_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonCpSecureBufferStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(290, _Internal::ion_cp_secure_buffer_start(this),
          _Internal::ion_cp_secure_buffer_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonPrefetching: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(291, _Internal::ion_prefetching(this),
          _Internal::ion_prefetching(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(292, _Internal::ion_secure_cma_add_to_pool_end(this),
          _Internal::ion_secure_cma_add_to_pool_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(293, _Internal::ion_secure_cma_add_to_pool_start(this),
          _Internal::ion_secure_cma_add_to_pool_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(294, _Internal::ion_secure_cma_allocate_end(this),
          _Internal::ion_secure_cma_allocate_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonSecureCmaAllocateStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(295, _Internal::ion_secure_cma_allocate_start(this),
          _Internal::ion_secure_cma_allocate_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(296, _Internal::ion_secure_cma_shrink_pool_end(this),
          _Internal::ion_secure_cma_shrink_pool_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(297, _Internal::ion_secure_cma_shrink_pool_start(this),
          _Internal::ion_secure_cma_shrink_pool_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kKfree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(298, _Internal::kfree(this),
          _Internal::kfree(this).GetCachedSize(), target, stream);
      break;
    }
    case kKmalloc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(299, _Internal::kmalloc(this),
          _Internal::kmalloc(this).GetCachedSize(), target, stream);
      break;
    }
    case kKmallocNode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(300, _Internal::kmalloc_node(this),
          _Internal::kmalloc_node(this).GetCachedSize(), target, stream);
      break;
    }
    case kKmemCacheAlloc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(301, _Internal::kmem_cache_alloc(this),
          _Internal::kmem_cache_alloc(this).GetCachedSize(), target, stream);
      break;
    }
    case kKmemCacheAllocNode: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(302, _Internal::kmem_cache_alloc_node(this),
          _Internal::kmem_cache_alloc_node(this).GetCachedSize(), target, stream);
      break;
    }
    case kKmemCacheFree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(303, _Internal::kmem_cache_free(this),
          _Internal::kmem_cache_free(this).GetCachedSize(), target, stream);
      break;
    }
    case kMigratePagesEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(304, _Internal::migrate_pages_end(this),
          _Internal::migrate_pages_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kMigratePagesStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(305, _Internal::migrate_pages_start(this),
          _Internal::migrate_pages_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kMigrateRetry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(306, _Internal::migrate_retry(this),
          _Internal::migrate_retry(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmPageAlloc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(307, _Internal::mm_page_alloc(this),
          _Internal::mm_page_alloc(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmPageAllocExtfrag: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(308, _Internal::mm_page_alloc_extfrag(this),
          _Internal::mm_page_alloc_extfrag(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmPageAllocZoneLocked: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(309, _Internal::mm_page_alloc_zone_locked(this),
          _Internal::mm_page_alloc_zone_locked(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmPageFree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(310, _Internal::mm_page_free(this),
          _Internal::mm_page_free(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmPageFreeBatched: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(311, _Internal::mm_page_free_batched(this),
          _Internal::mm_page_free_batched(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmPagePcpuDrain: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(312, _Internal::mm_page_pcpu_drain(this),
          _Internal::mm_page_pcpu_drain(this).GetCachedSize(), target, stream);
      break;
    }
    case kRssStat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(313, _Internal::rss_stat(this),
          _Internal::rss_stat(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonHeapShrink: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(314, _Internal::ion_heap_shrink(this),
          _Internal::ion_heap_shrink(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonHeapGrow: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(315, _Internal::ion_heap_grow(this),
          _Internal::ion_heap_grow(this).GetCachedSize(), target, stream);
      break;
    }
    case kFenceInit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(316, _Internal::fence_init(this),
          _Internal::fence_init(this).GetCachedSize(), target, stream);
      break;
    }
    case kFenceDestroy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(317, _Internal::fence_destroy(this),
          _Internal::fence_destroy(this).GetCachedSize(), target, stream);
      break;
    }
    case kFenceEnableSignal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(318, _Internal::fence_enable_signal(this),
          _Internal::fence_enable_signal(this).GetCachedSize(), target, stream);
      break;
    }
    case kFenceSignaled: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(319, _Internal::fence_signaled(this),
          _Internal::fence_signaled(this).GetCachedSize(), target, stream);
      break;
    }
    case kClkEnable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(320, _Internal::clk_enable(this),
          _Internal::clk_enable(this).GetCachedSize(), target, stream);
      break;
    }
    case kClkDisable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(321, _Internal::clk_disable(this),
          _Internal::clk_disable(this).GetCachedSize(), target, stream);
      break;
    }
    case kClkSetRate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(322, _Internal::clk_set_rate(this),
          _Internal::clk_set_rate(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinderTransactionAllocBuf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(323, _Internal::binder_transaction_alloc_buf(this),
          _Internal::binder_transaction_alloc_buf(this).GetCachedSize(), target, stream);
      break;
    }
    case kSignalDeliver: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(324, _Internal::signal_deliver(this),
          _Internal::signal_deliver(this).GetCachedSize(), target, stream);
      break;
    }
    case kSignalGenerate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(325, _Internal::signal_generate(this),
          _Internal::signal_generate(this).GetCachedSize(), target, stream);
      break;
    }
    case kOomScoreAdjUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(326, _Internal::oom_score_adj_update(this),
          _Internal::oom_score_adj_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kGeneric: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(327, _Internal::generic(this),
          _Internal::generic(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmEventRecord: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(328, _Internal::mm_event_record(this),
          _Internal::mm_event_record(this).GetCachedSize(), target, stream);
      break;
    }
    case kSysEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(329, _Internal::sys_enter(this),
          _Internal::sys_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kSysExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(330, _Internal::sys_exit(this),
          _Internal::sys_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kZero: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(331, _Internal::zero(this),
          _Internal::zero(this).GetCachedSize(), target, stream);
      break;
    }
    case kGpuFrequency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(332, _Internal::gpu_frequency(this),
          _Internal::gpu_frequency(this).GetCachedSize(), target, stream);
      break;
    }
    case kSdeTracingMarkWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(333, _Internal::sde_tracing_mark_write(this),
          _Internal::sde_tracing_mark_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kMarkVictim: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(334, _Internal::mark_victim(this),
          _Internal::mark_victim(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonStat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(335, _Internal::ion_stat(this),
          _Internal::ion_stat(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonBufferCreate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(336, _Internal::ion_buffer_create(this),
          _Internal::ion_buffer_create(this).GetCachedSize(), target, stream);
      break;
    }
    case kIonBufferDestroy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(337, _Internal::ion_buffer_destroy(this),
          _Internal::ion_buffer_destroy(this).GetCachedSize(), target, stream);
      break;
    }
    case kScmCallStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(338, _Internal::scm_call_start(this),
          _Internal::scm_call_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kScmCallEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(339, _Internal::scm_call_end(this),
          _Internal::scm_call_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kGpuMemTotal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(340, _Internal::gpu_mem_total(this),
          _Internal::gpu_mem_total(this).GetCachedSize(), target, stream);
      break;
    }
    case kThermalTemperature: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(341, _Internal::thermal_temperature(this),
          _Internal::thermal_temperature(this).GetCachedSize(), target, stream);
      break;
    }
    case kCdevUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(342, _Internal::cdev_update(this),
          _Internal::cdev_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuhpExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(343, _Internal::cpuhp_exit(this),
          _Internal::cpuhp_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuhpMultiEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(344, _Internal::cpuhp_multi_enter(this),
          _Internal::cpuhp_multi_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuhpEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(345, _Internal::cpuhp_enter(this),
          _Internal::cpuhp_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuhpLatency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(346, _Internal::cpuhp_latency(this),
          _Internal::cpuhp_latency(this).GetCachedSize(), target, stream);
      break;
    }
    case kFastrpcDmaStat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(347, _Internal::fastrpc_dma_stat(this),
          _Internal::fastrpc_dma_stat(this).GetCachedSize(), target, stream);
      break;
    }
    case kDpuTracingMarkWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(348, _Internal::dpu_tracing_mark_write(this),
          _Internal::dpu_tracing_mark_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kG2DTracingMarkWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(349, _Internal::g2d_tracing_mark_write(this),
          _Internal::g2d_tracing_mark_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliTracingMarkWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(350, _Internal::mali_tracing_mark_write(this),
          _Internal::mali_tracing_mark_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaHeapStat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(351, _Internal::dma_heap_stat(this),
          _Internal::dma_heap_stat(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuhpPause: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(352, _Internal::cpuhp_pause(this),
          _Internal::cpuhp_pause(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedPiSetprio: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(353, _Internal::sched_pi_setprio(this),
          _Internal::sched_pi_setprio(this).GetCachedSize(), target, stream);
      break;
    }
    case kSdeSdeEvtlog: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(354, _Internal::sde_sde_evtlog(this),
          _Internal::sde_sde_evtlog(this).GetCachedSize(), target, stream);
      break;
    }
    case kSdeSdePerfCalcCrtc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(355, _Internal::sde_sde_perf_calc_crtc(this),
          _Internal::sde_sde_perf_calc_crtc(this).GetCachedSize(), target, stream);
      break;
    }
    case kSdeSdePerfCrtcUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(356, _Internal::sde_sde_perf_crtc_update(this),
          _Internal::sde_sde_perf_crtc_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kSdeSdePerfSetQosLuts: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(357, _Internal::sde_sde_perf_set_qos_luts(this),
          _Internal::sde_sde_perf_set_qos_luts(this).GetCachedSize(), target, stream);
      break;
    }
    case kSdeSdePerfUpdateBus: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(358, _Internal::sde_sde_perf_update_bus(this),
          _Internal::sde_sde_perf_update_bus(this).GetCachedSize(), target, stream);
      break;
    }
    case kRssStatThrottled: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(359, _Internal::rss_stat_throttled(this),
          _Internal::rss_stat_throttled(this).GetCachedSize(), target, stream);
      break;
    }
    case kNetifReceiveSkb: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(360, _Internal::netif_receive_skb(this),
          _Internal::netif_receive_skb(this).GetCachedSize(), target, stream);
      break;
    }
    case kNetDevXmit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(361, _Internal::net_dev_xmit(this),
          _Internal::net_dev_xmit(this).GetCachedSize(), target, stream);
      break;
    }
    case kInetSockSetState: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(362, _Internal::inet_sock_set_state(this),
          _Internal::inet_sock_set_state(this).GetCachedSize(), target, stream);
      break;
    }
    case kTcpRetransmitSkb: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(363, _Internal::tcp_retransmit_skb(this),
          _Internal::tcp_retransmit_skb(this).GetCachedSize(), target, stream);
      break;
    }
    case kCrosEcSensorhubData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(364, _Internal::cros_ec_sensorhub_data(this),
          _Internal::cros_ec_sensorhub_data(this).GetCachedSize(), target, stream);
      break;
    }
    case kNapiGroReceiveEntry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(365, _Internal::napi_gro_receive_entry(this),
          _Internal::napi_gro_receive_entry(this).GetCachedSize(), target, stream);
      break;
    }
    case kNapiGroReceiveExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(366, _Internal::napi_gro_receive_exit(this),
          _Internal::napi_gro_receive_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kKfreeSkb: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(367, _Internal::kfree_skb(this),
          _Internal::kfree_skb(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmAccessFault: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(368, _Internal::kvm_access_fault(this),
          _Internal::kvm_access_fault(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmAckIrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(369, _Internal::kvm_ack_irq(this),
          _Internal::kvm_ack_irq(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmAgeHva: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(370, _Internal::kvm_age_hva(this),
          _Internal::kvm_age_hva(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmAgePage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(371, _Internal::kvm_age_page(this),
          _Internal::kvm_age_page(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmArmClearDebug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(372, _Internal::kvm_arm_clear_debug(this),
          _Internal::kvm_arm_clear_debug(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmArmSetDreg32: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(373, _Internal::kvm_arm_set_dreg32(this),
          _Internal::kvm_arm_set_dreg32(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmArmSetRegset: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(374, _Internal::kvm_arm_set_regset(this),
          _Internal::kvm_arm_set_regset(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmArmSetupDebug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(375, _Internal::kvm_arm_setup_debug(this),
          _Internal::kvm_arm_setup_debug(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmEntry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(376, _Internal::kvm_entry(this),
          _Internal::kvm_entry(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(377, _Internal::kvm_exit(this),
          _Internal::kvm_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmFpu: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(378, _Internal::kvm_fpu(this),
          _Internal::kvm_fpu(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmGetTimerMap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(379, _Internal::kvm_get_timer_map(this),
          _Internal::kvm_get_timer_map(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmGuestFault: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(380, _Internal::kvm_guest_fault(this),
          _Internal::kvm_guest_fault(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmHandleSysReg: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(381, _Internal::kvm_handle_sys_reg(this),
          _Internal::kvm_handle_sys_reg(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmHvcArm64: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(382, _Internal::kvm_hvc_arm64(this),
          _Internal::kvm_hvc_arm64(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmIrqLine: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(383, _Internal::kvm_irq_line(this),
          _Internal::kvm_irq_line(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmMmio: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(384, _Internal::kvm_mmio(this),
          _Internal::kvm_mmio(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmMmioEmulate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(385, _Internal::kvm_mmio_emulate(this),
          _Internal::kvm_mmio_emulate(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmSetGuestDebug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(386, _Internal::kvm_set_guest_debug(this),
          _Internal::kvm_set_guest_debug(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmSetIrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(387, _Internal::kvm_set_irq(this),
          _Internal::kvm_set_irq(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmSetSpteHva: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(388, _Internal::kvm_set_spte_hva(this),
          _Internal::kvm_set_spte_hva(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmSetWayFlush: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(389, _Internal::kvm_set_way_flush(this),
          _Internal::kvm_set_way_flush(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmSysAccess: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(390, _Internal::kvm_sys_access(this),
          _Internal::kvm_sys_access(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmTestAgeHva: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(391, _Internal::kvm_test_age_hva(this),
          _Internal::kvm_test_age_hva(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmTimerEmulate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(392, _Internal::kvm_timer_emulate(this),
          _Internal::kvm_timer_emulate(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmTimerHrtimerExpire: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(393, _Internal::kvm_timer_hrtimer_expire(this),
          _Internal::kvm_timer_hrtimer_expire(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmTimerRestoreState: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(394, _Internal::kvm_timer_restore_state(this),
          _Internal::kvm_timer_restore_state(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmTimerSaveState: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(395, _Internal::kvm_timer_save_state(this),
          _Internal::kvm_timer_save_state(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmTimerUpdateIrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(396, _Internal::kvm_timer_update_irq(this),
          _Internal::kvm_timer_update_irq(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmToggleCache: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(397, _Internal::kvm_toggle_cache(this),
          _Internal::kvm_toggle_cache(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmUnmapHvaRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(398, _Internal::kvm_unmap_hva_range(this),
          _Internal::kvm_unmap_hva_range(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmUserspaceExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(399, _Internal::kvm_userspace_exit(this),
          _Internal::kvm_userspace_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmVcpuWakeup: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(400, _Internal::kvm_vcpu_wakeup(this),
          _Internal::kvm_vcpu_wakeup(this).GetCachedSize(), target, stream);
      break;
    }
    case kKvmWfxArm64: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(401, _Internal::kvm_wfx_arm64(this),
          _Internal::kvm_wfx_arm64(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrapReg: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(402, _Internal::trap_reg(this),
          _Internal::trap_reg(this).GetCachedSize(), target, stream);
      break;
    }
    case kVgicUpdateIrqPending: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(403, _Internal::vgic_update_irq_pending(this),
          _Internal::vgic_update_irq_pending(this).GetCachedSize(), target, stream);
      break;
    }
    case kWakeupSourceActivate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(404, _Internal::wakeup_source_activate(this),
          _Internal::wakeup_source_activate(this).GetCachedSize(), target, stream);
      break;
    }
    case kWakeupSourceDeactivate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(405, _Internal::wakeup_source_deactivate(this),
          _Internal::wakeup_source_deactivate(this).GetCachedSize(), target, stream);
      break;
    }
    case kUfshcdCommand: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(406, _Internal::ufshcd_command(this),
          _Internal::ufshcd_command(this).GetCachedSize(), target, stream);
      break;
    }
    case kUfshcdClkGating: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(407, _Internal::ufshcd_clk_gating(this),
          _Internal::ufshcd_clk_gating(this).GetCachedSize(), target, stream);
      break;
    }
    case kConsole: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(408, _Internal::console(this),
          _Internal::console(this).GetCachedSize(), target, stream);
      break;
    }
    case kDrmVblankEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(409, _Internal::drm_vblank_event(this),
          _Internal::drm_vblank_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kDrmVblankEventDelivered: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(410, _Internal::drm_vblank_event_delivered(this),
          _Internal::drm_vblank_event_delivered(this).GetCachedSize(), target, stream);
      break;
    }
    case kDrmSchedJob: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(411, _Internal::drm_sched_job(this),
          _Internal::drm_sched_job(this).GetCachedSize(), target, stream);
      break;
    }
    case kDrmRunJob: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(412, _Internal::drm_run_job(this),
          _Internal::drm_run_job(this).GetCachedSize(), target, stream);
      break;
    }
    case kDrmSchedProcessJob: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(413, _Internal::drm_sched_process_job(this),
          _Internal::drm_sched_process_job(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaFenceInit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(414, _Internal::dma_fence_init(this),
          _Internal::dma_fence_init(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaFenceEmit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(415, _Internal::dma_fence_emit(this),
          _Internal::dma_fence_emit(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaFenceSignaled: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(416, _Internal::dma_fence_signaled(this),
          _Internal::dma_fence_signaled(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaFenceWaitStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(417, _Internal::dma_fence_wait_start(this),
          _Internal::dma_fence_wait_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kDmaFenceWaitEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(418, _Internal::dma_fence_wait_end(this),
          _Internal::dma_fence_wait_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsIostat: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(419, _Internal::f2fs_iostat(this),
          _Internal::f2fs_iostat(this).GetCachedSize(), target, stream);
      break;
    }
    case kF2FsIostatLatency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(420, _Internal::f2fs_iostat_latency(this),
          _Internal::f2fs_iostat_latency(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchedCpuUtilCfs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(421, _Internal::sched_cpu_util_cfs(this),
          _Internal::sched_cpu_util_cfs(this).GetCachedSize(), target, stream);
      break;
    }
    case kV4L2Qbuf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(422, _Internal::v4l2_qbuf(this),
          _Internal::v4l2_qbuf(this).GetCachedSize(), target, stream);
      break;
    }
    case kV4L2Dqbuf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(423, _Internal::v4l2_dqbuf(this),
          _Internal::v4l2_dqbuf(this).GetCachedSize(), target, stream);
      break;
    }
    case kVb2V4L2BufQueue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(424, _Internal::vb2_v4l2_buf_queue(this),
          _Internal::vb2_v4l2_buf_queue(this).GetCachedSize(), target, stream);
      break;
    }
    case kVb2V4L2BufDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(425, _Internal::vb2_v4l2_buf_done(this),
          _Internal::vb2_v4l2_buf_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kVb2V4L2Qbuf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(426, _Internal::vb2_v4l2_qbuf(this),
          _Internal::vb2_v4l2_qbuf(this).GetCachedSize(), target, stream);
      break;
    }
    case kVb2V4L2Dqbuf: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(427, _Internal::vb2_v4l2_dqbuf(this),
          _Internal::vb2_v4l2_dqbuf(this).GetCachedSize(), target, stream);
      break;
    }
    case kDsiCmdFifoStatus: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(428, _Internal::dsi_cmd_fifo_status(this),
          _Internal::dsi_cmd_fifo_status(this).GetCachedSize(), target, stream);
      break;
    }
    case kDsiRx: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(429, _Internal::dsi_rx(this),
          _Internal::dsi_rx(this).GetCachedSize(), target, stream);
      break;
    }
    case kDsiTx: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(430, _Internal::dsi_tx(this),
          _Internal::dsi_tx(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidFsDatareadEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(431, _Internal::android_fs_dataread_end(this),
          _Internal::android_fs_dataread_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidFsDatareadStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(432, _Internal::android_fs_dataread_start(this),
          _Internal::android_fs_dataread_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidFsDatawriteEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(433, _Internal::android_fs_datawrite_end(this),
          _Internal::android_fs_datawrite_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidFsDatawriteStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(434, _Internal::android_fs_datawrite_start(this),
          _Internal::android_fs_datawrite_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidFsFsyncEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(435, _Internal::android_fs_fsync_end(this),
          _Internal::android_fs_fsync_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidFsFsyncStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(436, _Internal::android_fs_fsync_start(this),
          _Internal::android_fs_fsync_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kFuncgraphEntry: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(437, _Internal::funcgraph_entry(this),
          _Internal::funcgraph_entry(this).GetCachedSize(), target, stream);
      break;
    }
    case kFuncgraphExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(438, _Internal::funcgraph_exit(this),
          _Internal::funcgraph_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtioVideoCmd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(439, _Internal::virtio_video_cmd(this),
          _Internal::virtio_video_cmd(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtioVideoCmdDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(440, _Internal::virtio_video_cmd_done(this),
          _Internal::virtio_video_cmd_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtioVideoResourceQueue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(441, _Internal::virtio_video_resource_queue(this),
          _Internal::virtio_video_resource_queue(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtioVideoResourceQueueDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(442, _Internal::virtio_video_resource_queue_done(this),
          _Internal::virtio_video_resource_queue_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmShrinkSlabStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(443, _Internal::mm_shrink_slab_start(this),
          _Internal::mm_shrink_slab_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kMmShrinkSlabEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(444, _Internal::mm_shrink_slab_end(this),
          _Internal::mm_shrink_slab_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustySmc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(445, _Internal::trusty_smc(this),
          _Internal::trusty_smc(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustySmcDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(446, _Internal::trusty_smc_done(this),
          _Internal::trusty_smc_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyStdCall32: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(447, _Internal::trusty_std_call32(this),
          _Internal::trusty_std_call32(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyStdCall32Done: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(448, _Internal::trusty_std_call32_done(this),
          _Internal::trusty_std_call32_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyShareMemory: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(449, _Internal::trusty_share_memory(this),
          _Internal::trusty_share_memory(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyShareMemoryDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(450, _Internal::trusty_share_memory_done(this),
          _Internal::trusty_share_memory_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyReclaimMemory: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(451, _Internal::trusty_reclaim_memory(this),
          _Internal::trusty_reclaim_memory(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyReclaimMemoryDone: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(452, _Internal::trusty_reclaim_memory_done(this),
          _Internal::trusty_reclaim_memory_done(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(453, _Internal::trusty_irq(this),
          _Internal::trusty_irq(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcHandleEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(454, _Internal::trusty_ipc_handle_event(this),
          _Internal::trusty_ipc_handle_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcConnect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(455, _Internal::trusty_ipc_connect(this),
          _Internal::trusty_ipc_connect(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcConnectEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(456, _Internal::trusty_ipc_connect_end(this),
          _Internal::trusty_ipc_connect_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(457, _Internal::trusty_ipc_write(this),
          _Internal::trusty_ipc_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcPoll: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(458, _Internal::trusty_ipc_poll(this),
          _Internal::trusty_ipc_poll(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcRead: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(460, _Internal::trusty_ipc_read(this),
          _Internal::trusty_ipc_read(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcReadEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(461, _Internal::trusty_ipc_read_end(this),
          _Internal::trusty_ipc_read_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyIpcRx: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(462, _Internal::trusty_ipc_rx(this),
          _Internal::trusty_ipc_rx(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrustyEnqueueNop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(464, _Internal::trusty_enqueue_nop(this),
          _Internal::trusty_enqueue_nop(this).GetCachedSize(), target, stream);
      break;
    }
    case kCmaAllocStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(465, _Internal::cma_alloc_start(this),
          _Internal::cma_alloc_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kCmaAllocInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(466, _Internal::cma_alloc_info(this),
          _Internal::cma_alloc_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kLwisTracingMarkWrite: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(467, _Internal::lwis_tracing_mark_write(this),
          _Internal::lwis_tracing_mark_write(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtioGpuCmdQueue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(468, _Internal::virtio_gpu_cmd_queue(this),
          _Internal::virtio_gpu_cmd_queue(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtioGpuCmdResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(469, _Internal::virtio_gpu_cmd_response(this),
          _Internal::virtio_gpu_cmd_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliKCPUCQSSET: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(470, _Internal::mali_mali_kcpu_cqs_set(this),
          _Internal::mali_mali_kcpu_cqs_set(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliKCPUCQSWAITSTART: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(471, _Internal::mali_mali_kcpu_cqs_wait_start(this),
          _Internal::mali_mali_kcpu_cqs_wait_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliKCPUCQSWAITEND: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(472, _Internal::mali_mali_kcpu_cqs_wait_end(this),
          _Internal::mali_mali_kcpu_cqs_wait_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliKCPUFENCESIGNAL: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(473, _Internal::mali_mali_kcpu_fence_signal(this),
          _Internal::mali_mali_kcpu_fence_signal(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliKCPUFENCEWAITSTART: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(474, _Internal::mali_mali_kcpu_fence_wait_start(this),
          _Internal::mali_mali_kcpu_fence_wait_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliKCPUFENCEWAITEND: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(475, _Internal::mali_mali_kcpu_fence_wait_end(this),
          _Internal::mali_mali_kcpu_fence_wait_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kHypEnter: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(476, _Internal::hyp_enter(this),
          _Internal::hyp_enter(this).GetCachedSize(), target, stream);
      break;
    }
    case kHypExit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(477, _Internal::hyp_exit(this),
          _Internal::hyp_exit(this).GetCachedSize(), target, stream);
      break;
    }
    case kHostHcall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(478, _Internal::host_hcall(this),
          _Internal::host_hcall(this).GetCachedSize(), target, stream);
      break;
    }
    case kHostSmc: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(479, _Internal::host_smc(this),
          _Internal::host_smc(this).GetCachedSize(), target, stream);
      break;
    }
    case kHostMemAbort: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(480, _Internal::host_mem_abort(this),
          _Internal::host_mem_abort(this).GetCachedSize(), target, stream);
      break;
    }
    case kSuspendResumeMinimal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(481, _Internal::suspend_resume_minimal(this),
          _Internal::suspend_resume_minimal(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliCSFINTERRUPTSTART: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(482, _Internal::mali_mali_csf_interrupt_start(this),
          _Internal::mali_mali_csf_interrupt_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kMaliMaliCSFINTERRUPTEND: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(483, _Internal::mali_mali_csf_interrupt_end(this),
          _Internal::mali_mali_csf_interrupt_end(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceEvent)
  return target;
}

::size_t FtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pid());
    }

    // optional uint32 common_flags = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_common_flags());
    }

  }
  switch (event_case()) {
    // .perfetto.protos.PrintFtraceEvent print = 3;
    case kPrint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.print_);
      break;
    }
    // .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
    case kSchedSwitch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_switch_);
      break;
    }
    // .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
    case kCpuFrequency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpu_frequency_);
      break;
    }
    // .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
    case kCpuFrequencyLimits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpu_frequency_limits_);
      break;
    }
    // .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
    case kCpuIdle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpu_idle_);
      break;
    }
    // .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
    case kClockEnable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.clock_enable_);
      break;
    }
    // .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
    case kClockDisable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.clock_disable_);
      break;
    }
    // .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
    case kClockSetRate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.clock_set_rate_);
      break;
    }
    // .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
    case kSchedWakeup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_wakeup_);
      break;
    }
    // .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
    case kSchedBlockedReason: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_blocked_reason_);
      break;
    }
    // .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
    case kSchedCpuHotplug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_cpu_hotplug_);
      break;
    }
    // .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
    case kSchedWaking: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_waking_);
      break;
    }
    // .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
    case kIpiEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ipi_entry_);
      break;
    }
    // .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
    case kIpiExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ipi_exit_);
      break;
    }
    // .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
    case kIpiRaise: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ipi_raise_);
      break;
    }
    // .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
    case kSoftirqEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.softirq_entry_);
      break;
    }
    // .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
    case kSoftirqExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.softirq_exit_);
      break;
    }
    // .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
    case kSoftirqRaise: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.softirq_raise_);
      break;
    }
    // .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
    case kI2CRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.i2c_read_);
      break;
    }
    // .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
    case kI2CWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.i2c_write_);
      break;
    }
    // .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
    case kI2CResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.i2c_result_);
      break;
    }
    // .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
    case kI2CReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.i2c_reply_);
      break;
    }
    // .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
    case kSmbusRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.smbus_read_);
      break;
    }
    // .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
    case kSmbusWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.smbus_write_);
      break;
    }
    // .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
    case kSmbusResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.smbus_result_);
      break;
    }
    // .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
    case kSmbusReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.smbus_reply_);
      break;
    }
    // .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
    case kLowmemoryKill: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.lowmemory_kill_);
      break;
    }
    // .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
    case kIrqHandlerEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.irq_handler_entry_);
      break;
    }
    // .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
    case kIrqHandlerExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.irq_handler_exit_);
      break;
    }
    // .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
    case kSyncPt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sync_pt_);
      break;
    }
    // .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
    case kSyncTimeline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sync_timeline_);
      break;
    }
    // .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
    case kSyncWait: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sync_wait_);
      break;
    }
    // .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
    case kExt4DaWriteBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_write_begin_);
      break;
    }
    // .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
    case kExt4DaWriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_write_end_);
      break;
    }
    // .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
    case kExt4SyncFileEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_sync_file_enter_);
      break;
    }
    // .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
    case kExt4SyncFileExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_sync_file_exit_);
      break;
    }
    // .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
    case kBlockRqIssue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_rq_issue_);
      break;
    }
    // .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
    case kMmVmscanDirectReclaimBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_vmscan_direct_reclaim_begin_);
      break;
    }
    // .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
    case kMmVmscanDirectReclaimEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_vmscan_direct_reclaim_end_);
      break;
    }
    // .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
    case kMmVmscanKswapdWake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_vmscan_kswapd_wake_);
      break;
    }
    // .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
    case kMmVmscanKswapdSleep: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_vmscan_kswapd_sleep_);
      break;
    }
    // .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
    case kBinderTransaction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_transaction_);
      break;
    }
    // .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
    case kBinderTransactionReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_transaction_received_);
      break;
    }
    // .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
    case kBinderSetPriority: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_set_priority_);
      break;
    }
    // .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
    case kBinderLock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_lock_);
      break;
    }
    // .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
    case kBinderLocked: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_locked_);
      break;
    }
    // .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
    case kBinderUnlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_unlock_);
      break;
    }
    // .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
    case kWorkqueueActivateWork: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.workqueue_activate_work_);
      break;
    }
    // .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
    case kWorkqueueExecuteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.workqueue_execute_end_);
      break;
    }
    // .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
    case kWorkqueueExecuteStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.workqueue_execute_start_);
      break;
    }
    // .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
    case kWorkqueueQueueWork: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.workqueue_queue_work_);
      break;
    }
    // .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
    case kRegulatorDisable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_disable_);
      break;
    }
    // .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
    case kRegulatorDisableComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_disable_complete_);
      break;
    }
    // .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
    case kRegulatorEnable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_enable_);
      break;
    }
    // .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
    case kRegulatorEnableComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_enable_complete_);
      break;
    }
    // .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
    case kRegulatorEnableDelay: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_enable_delay_);
      break;
    }
    // .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
    case kRegulatorSetVoltage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_set_voltage_);
      break;
    }
    // .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
    case kRegulatorSetVoltageComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.regulator_set_voltage_complete_);
      break;
    }
    // .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
    case kCgroupAttachTask: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_attach_task_);
      break;
    }
    // .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
    case kCgroupMkdir: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_mkdir_);
      break;
    }
    // .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
    case kCgroupRemount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_remount_);
      break;
    }
    // .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
    case kCgroupRmdir: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_rmdir_);
      break;
    }
    // .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
    case kCgroupTransferTasks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_transfer_tasks_);
      break;
    }
    // .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
    case kCgroupDestroyRoot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_destroy_root_);
      break;
    }
    // .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
    case kCgroupRelease: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_release_);
      break;
    }
    // .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
    case kCgroupRename: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_rename_);
      break;
    }
    // .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
    case kCgroupSetupRoot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cgroup_setup_root_);
      break;
    }
    // .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
    case kMdpCmdKickoff: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_cmd_kickoff_);
      break;
    }
    // .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
    case kMdpCommit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_commit_);
      break;
    }
    // .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
    case kMdpPerfSetOt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_perf_set_ot_);
      break;
    }
    // .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
    case kMdpSsppChange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_sspp_change_);
      break;
    }
    // .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
    case kTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.tracing_mark_write_);
      break;
    }
    // .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
    case kMdpCmdPingpongDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_cmd_pingpong_done_);
      break;
    }
    // .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
    case kMdpCompareBw: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_compare_bw_);
      break;
    }
    // .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
    case kMdpPerfSetPanicLuts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_perf_set_panic_luts_);
      break;
    }
    // .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
    case kMdpSsppSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_sspp_set_);
      break;
    }
    // .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
    case kMdpCmdReadptrDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_cmd_readptr_done_);
      break;
    }
    // .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
    case kMdpMisrCrc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_misr_crc_);
      break;
    }
    // .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
    case kMdpPerfSetQosLuts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_perf_set_qos_luts_);
      break;
    }
    // .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
    case kMdpTraceCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_trace_counter_);
      break;
    }
    // .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
    case kMdpCmdReleaseBw: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_cmd_release_bw_);
      break;
    }
    // .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
    case kMdpMixerUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_mixer_update_);
      break;
    }
    // .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
    case kMdpPerfSetWmLevels: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_perf_set_wm_levels_);
      break;
    }
    // .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
    case kMdpVideoUnderrunDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_video_underrun_done_);
      break;
    }
    // .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
    case kMdpCmdWaitPingpong: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_cmd_wait_pingpong_);
      break;
    }
    // .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
    case kMdpPerfPrefillCalc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_perf_prefill_calc_);
      break;
    }
    // .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
    case kMdpPerfUpdateBus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mdp_perf_update_bus_);
      break;
    }
    // .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
    case kRotatorBwAoAsContext: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.rotator_bw_ao_as_context_);
      break;
    }
    // .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
    case kMmFilemapAddToPageCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_filemap_add_to_page_cache_);
      break;
    }
    // .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
    case kMmFilemapDeleteFromPageCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_filemap_delete_from_page_cache_);
      break;
    }
    // .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
    case kMmCompactionBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_begin_);
      break;
    }
    // .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
    case kMmCompactionDeferCompaction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_defer_compaction_);
      break;
    }
    // .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
    case kMmCompactionDeferred: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_deferred_);
      break;
    }
    // .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
    case kMmCompactionDeferReset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_defer_reset_);
      break;
    }
    // .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
    case kMmCompactionEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_end_);
      break;
    }
    // .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
    case kMmCompactionFinished: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_finished_);
      break;
    }
    // .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
    case kMmCompactionIsolateFreepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_isolate_freepages_);
      break;
    }
    // .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
    case kMmCompactionIsolateMigratepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_isolate_migratepages_);
      break;
    }
    // .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
    case kMmCompactionKcompactdSleep: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_kcompactd_sleep_);
      break;
    }
    // .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
    case kMmCompactionKcompactdWake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_kcompactd_wake_);
      break;
    }
    // .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
    case kMmCompactionMigratepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_migratepages_);
      break;
    }
    // .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
    case kMmCompactionSuitable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_suitable_);
      break;
    }
    // .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
    case kMmCompactionTryToCompactPages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_try_to_compact_pages_);
      break;
    }
    // .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
    case kMmCompactionWakeupKcompactd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_compaction_wakeup_kcompactd_);
      break;
    }
    // .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
    case kSuspendResume: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.suspend_resume_);
      break;
    }
    // .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
    case kSchedWakeupNew: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_wakeup_new_);
      break;
    }
    // .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
    case kBlockBioBackmerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_bio_backmerge_);
      break;
    }
    // .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
    case kBlockBioBounce: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_bio_bounce_);
      break;
    }
    // .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
    case kBlockBioComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_bio_complete_);
      break;
    }
    // .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
    case kBlockBioFrontmerge: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_bio_frontmerge_);
      break;
    }
    // .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
    case kBlockBioQueue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_bio_queue_);
      break;
    }
    // .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
    case kBlockBioRemap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_bio_remap_);
      break;
    }
    // .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
    case kBlockDirtyBuffer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_dirty_buffer_);
      break;
    }
    // .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
    case kBlockGetrq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_getrq_);
      break;
    }
    // .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
    case kBlockPlug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_plug_);
      break;
    }
    // .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
    case kBlockRqAbort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_rq_abort_);
      break;
    }
    // .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
    case kBlockRqComplete: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_rq_complete_);
      break;
    }
    // .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
    case kBlockRqInsert: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_rq_insert_);
      break;
    }
    // .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
    case kBlockRqRemap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_rq_remap_);
      break;
    }
    // .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
    case kBlockRqRequeue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_rq_requeue_);
      break;
    }
    // .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
    case kBlockSleeprq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_sleeprq_);
      break;
    }
    // .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
    case kBlockSplit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_split_);
      break;
    }
    // .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
    case kBlockTouchBuffer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_touch_buffer_);
      break;
    }
    // .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
    case kBlockUnplug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.block_unplug_);
      break;
    }
    // .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
    case kExt4AllocDaBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_alloc_da_blocks_);
      break;
    }
    // .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
    case kExt4AllocateBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_allocate_blocks_);
      break;
    }
    // .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
    case kExt4AllocateInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_allocate_inode_);
      break;
    }
    // .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
    case kExt4BeginOrderedTruncate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_begin_ordered_truncate_);
      break;
    }
    // .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
    case kExt4CollapseRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_collapse_range_);
      break;
    }
    // .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
    case kExt4DaReleaseSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_release_space_);
      break;
    }
    // .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
    case kExt4DaReserveSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_reserve_space_);
      break;
    }
    // .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
    case kExt4DaUpdateReserveSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_update_reserve_space_);
      break;
    }
    // .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
    case kExt4DaWritePages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_write_pages_);
      break;
    }
    // .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
    case kExt4DaWritePagesExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_da_write_pages_extent_);
      break;
    }
    // .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
    case kExt4DirectIOEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_direct_io_enter_);
      break;
    }
    // .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
    case kExt4DirectIOExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_direct_io_exit_);
      break;
    }
    // .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
    case kExt4DiscardBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_discard_blocks_);
      break;
    }
    // .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
    case kExt4DiscardPreallocations: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_discard_preallocations_);
      break;
    }
    // .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
    case kExt4DropInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_drop_inode_);
      break;
    }
    // .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
    case kExt4EsCacheExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_cache_extent_);
      break;
    }
    // .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
    case kExt4EsFindDelayedExtentRangeEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_find_delayed_extent_range_enter_);
      break;
    }
    // .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
    case kExt4EsFindDelayedExtentRangeExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_find_delayed_extent_range_exit_);
      break;
    }
    // .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
    case kExt4EsInsertExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_insert_extent_);
      break;
    }
    // .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
    case kExt4EsLookupExtentEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_lookup_extent_enter_);
      break;
    }
    // .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
    case kExt4EsLookupExtentExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_lookup_extent_exit_);
      break;
    }
    // .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
    case kExt4EsRemoveExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_remove_extent_);
      break;
    }
    // .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
    case kExt4EsShrink: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_shrink_);
      break;
    }
    // .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
    case kExt4EsShrinkCount: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_shrink_count_);
      break;
    }
    // .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
    case kExt4EsShrinkScanEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_shrink_scan_enter_);
      break;
    }
    // .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
    case kExt4EsShrinkScanExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_es_shrink_scan_exit_);
      break;
    }
    // .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
    case kExt4EvictInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_evict_inode_);
      break;
    }
    // .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
    case kExt4ExtConvertToInitializedEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_convert_to_initialized_enter_);
      break;
    }
    // .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
    case kExt4ExtConvertToInitializedFastpath: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_convert_to_initialized_fastpath_);
      break;
    }
    // .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
    case kExt4ExtHandleUnwrittenExtents: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_handle_unwritten_extents_);
      break;
    }
    // .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
    case kExt4ExtInCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_in_cache_);
      break;
    }
    // .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
    case kExt4ExtLoadExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_load_extent_);
      break;
    }
    // .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
    case kExt4ExtMapBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_map_blocks_enter_);
      break;
    }
    // .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
    case kExt4ExtMapBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_map_blocks_exit_);
      break;
    }
    // .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
    case kExt4ExtPutInCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_put_in_cache_);
      break;
    }
    // .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
    case kExt4ExtRemoveSpace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_remove_space_);
      break;
    }
    // .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
    case kExt4ExtRemoveSpaceDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_remove_space_done_);
      break;
    }
    // .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
    case kExt4ExtRmIdx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_rm_idx_);
      break;
    }
    // .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
    case kExt4ExtRmLeaf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_rm_leaf_);
      break;
    }
    // .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
    case kExt4ExtShowExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ext_show_extent_);
      break;
    }
    // .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
    case kExt4FallocateEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_fallocate_enter_);
      break;
    }
    // .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
    case kExt4FallocateExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_fallocate_exit_);
      break;
    }
    // .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
    case kExt4FindDelallocRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_find_delalloc_range_);
      break;
    }
    // .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
    case kExt4Forget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_forget_);
      break;
    }
    // .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
    case kExt4FreeBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_free_blocks_);
      break;
    }
    // .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
    case kExt4FreeInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_free_inode_);
      break;
    }
    // .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
    case kExt4GetImpliedClusterAllocExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_get_implied_cluster_alloc_exit_);
      break;
    }
    // .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
    case kExt4GetReservedClusterAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_get_reserved_cluster_alloc_);
      break;
    }
    // .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
    case kExt4IndMapBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ind_map_blocks_enter_);
      break;
    }
    // .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
    case kExt4IndMapBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_ind_map_blocks_exit_);
      break;
    }
    // .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
    case kExt4InsertRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_insert_range_);
      break;
    }
    // .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
    case kExt4Invalidatepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_invalidatepage_);
      break;
    }
    // .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
    case kExt4JournalStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_journal_start_);
      break;
    }
    // .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
    case kExt4JournalStartReserved: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_journal_start_reserved_);
      break;
    }
    // .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
    case kExt4JournalledInvalidatepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_journalled_invalidatepage_);
      break;
    }
    // .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
    case kExt4JournalledWriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_journalled_write_end_);
      break;
    }
    // .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
    case kExt4LoadInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_load_inode_);
      break;
    }
    // .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
    case kExt4LoadInodeBitmap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_load_inode_bitmap_);
      break;
    }
    // .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
    case kExt4MarkInodeDirty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mark_inode_dirty_);
      break;
    }
    // .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
    case kExt4MbBitmapLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_bitmap_load_);
      break;
    }
    // .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
    case kExt4MbBuddyBitmapLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_buddy_bitmap_load_);
      break;
    }
    // .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
    case kExt4MbDiscardPreallocations: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_discard_preallocations_);
      break;
    }
    // .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
    case kExt4MbNewGroupPa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_new_group_pa_);
      break;
    }
    // .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
    case kExt4MbNewInodePa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_new_inode_pa_);
      break;
    }
    // .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
    case kExt4MbReleaseGroupPa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_release_group_pa_);
      break;
    }
    // .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
    case kExt4MbReleaseInodePa: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mb_release_inode_pa_);
      break;
    }
    // .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
    case kExt4MballocAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mballoc_alloc_);
      break;
    }
    // .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
    case kExt4MballocDiscard: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mballoc_discard_);
      break;
    }
    // .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
    case kExt4MballocFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mballoc_free_);
      break;
    }
    // .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
    case kExt4MballocPrealloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_mballoc_prealloc_);
      break;
    }
    // .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
    case kExt4OtherInodeUpdateTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_other_inode_update_time_);
      break;
    }
    // .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
    case kExt4PunchHole: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_punch_hole_);
      break;
    }
    // .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
    case kExt4ReadBlockBitmapLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_read_block_bitmap_load_);
      break;
    }
    // .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
    case kExt4Readpage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_readpage_);
      break;
    }
    // .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
    case kExt4Releasepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_releasepage_);
      break;
    }
    // .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
    case kExt4RemoveBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_remove_blocks_);
      break;
    }
    // .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
    case kExt4RequestBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_request_blocks_);
      break;
    }
    // .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
    case kExt4RequestInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_request_inode_);
      break;
    }
    // .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
    case kExt4SyncFs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_sync_fs_);
      break;
    }
    // .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
    case kExt4TrimAllFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_trim_all_free_);
      break;
    }
    // .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
    case kExt4TrimExtent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_trim_extent_);
      break;
    }
    // .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
    case kExt4TruncateEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_truncate_enter_);
      break;
    }
    // .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
    case kExt4TruncateExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_truncate_exit_);
      break;
    }
    // .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
    case kExt4UnlinkEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_unlink_enter_);
      break;
    }
    // .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
    case kExt4UnlinkExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_unlink_exit_);
      break;
    }
    // .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
    case kExt4WriteBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_write_begin_);
      break;
    }
    // .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
    case kExt4WriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_write_end_);
      break;
    }
    // .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
    case kExt4Writepage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_writepage_);
      break;
    }
    // .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
    case kExt4Writepages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_writepages_);
      break;
    }
    // .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
    case kExt4WritepagesResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_writepages_result_);
      break;
    }
    // .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
    case kExt4ZeroRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ext4_zero_range_);
      break;
    }
    // .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
    case kTaskNewtask: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.task_newtask_);
      break;
    }
    // .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
    case kTaskRename: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.task_rename_);
      break;
    }
    // .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
    case kSchedProcessExec: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_process_exec_);
      break;
    }
    // .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
    case kSchedProcessExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_process_exit_);
      break;
    }
    // .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
    case kSchedProcessFork: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_process_fork_);
      break;
    }
    // .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
    case kSchedProcessFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_process_free_);
      break;
    }
    // .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
    case kSchedProcessHang: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_process_hang_);
      break;
    }
    // .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
    case kSchedProcessWait: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_process_wait_);
      break;
    }
    // .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
    case kF2FsDoSubmitBio: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_do_submit_bio_);
      break;
    }
    // .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
    case kF2FsEvictInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_evict_inode_);
      break;
    }
    // .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
    case kF2FsFallocate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_fallocate_);
      break;
    }
    // .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
    case kF2FsGetDataBlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_get_data_block_);
      break;
    }
    // .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
    case kF2FsGetVictim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_get_victim_);
      break;
    }
    // .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
    case kF2FsIget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_iget_);
      break;
    }
    // .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
    case kF2FsIgetExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_iget_exit_);
      break;
    }
    // .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
    case kF2FsNewInode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_new_inode_);
      break;
    }
    // .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
    case kF2FsReadpage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_readpage_);
      break;
    }
    // .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
    case kF2FsReserveNewBlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_reserve_new_block_);
      break;
    }
    // .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
    case kF2FsSetPageDirty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_set_page_dirty_);
      break;
    }
    // .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
    case kF2FsSubmitWritePage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_submit_write_page_);
      break;
    }
    // .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
    case kF2FsSyncFileEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_sync_file_enter_);
      break;
    }
    // .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
    case kF2FsSyncFileExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_sync_file_exit_);
      break;
    }
    // .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
    case kF2FsSyncFs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_sync_fs_);
      break;
    }
    // .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
    case kF2FsTruncate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_);
      break;
    }
    // .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
    case kF2FsTruncateBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_blocks_enter_);
      break;
    }
    // .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
    case kF2FsTruncateBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_blocks_exit_);
      break;
    }
    // .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
    case kF2FsTruncateDataBlocksRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_data_blocks_range_);
      break;
    }
    // .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
    case kF2FsTruncateInodeBlocksEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_inode_blocks_enter_);
      break;
    }
    // .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
    case kF2FsTruncateInodeBlocksExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_inode_blocks_exit_);
      break;
    }
    // .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
    case kF2FsTruncateNode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_node_);
      break;
    }
    // .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
    case kF2FsTruncateNodesEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_nodes_enter_);
      break;
    }
    // .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
    case kF2FsTruncateNodesExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_nodes_exit_);
      break;
    }
    // .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
    case kF2FsTruncatePartialNodes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_truncate_partial_nodes_);
      break;
    }
    // .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
    case kF2FsUnlinkEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_unlink_enter_);
      break;
    }
    // .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
    case kF2FsUnlinkExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_unlink_exit_);
      break;
    }
    // .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
    case kF2FsVmPageMkwrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_vm_page_mkwrite_);
      break;
    }
    // .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
    case kF2FsWriteBegin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_write_begin_);
      break;
    }
    // .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
    case kF2FsWriteCheckpoint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_write_checkpoint_);
      break;
    }
    // .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
    case kF2FsWriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_write_end_);
      break;
    }
    // .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
    case kAllocPagesIommuEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.alloc_pages_iommu_end_);
      break;
    }
    // .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
    case kAllocPagesIommuFail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.alloc_pages_iommu_fail_);
      break;
    }
    // .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
    case kAllocPagesIommuStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.alloc_pages_iommu_start_);
      break;
    }
    // .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
    case kAllocPagesSysEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.alloc_pages_sys_end_);
      break;
    }
    // .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
    case kAllocPagesSysFail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.alloc_pages_sys_fail_);
      break;
    }
    // .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
    case kAllocPagesSysStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.alloc_pages_sys_start_);
      break;
    }
    // .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
    case kDmaAllocContiguousRetry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_alloc_contiguous_retry_);
      break;
    }
    // .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
    case kIommuMapRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.iommu_map_range_);
      break;
    }
    // .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
    case kIommuSecPtblMapRangeEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.iommu_sec_ptbl_map_range_end_);
      break;
    }
    // .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
    case kIommuSecPtblMapRangeStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.iommu_sec_ptbl_map_range_start_);
      break;
    }
    // .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
    case kIonAllocBufferEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_alloc_buffer_end_);
      break;
    }
    // .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
    case kIonAllocBufferFail: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_alloc_buffer_fail_);
      break;
    }
    // .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
    case kIonAllocBufferFallback: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_alloc_buffer_fallback_);
      break;
    }
    // .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
    case kIonAllocBufferStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_alloc_buffer_start_);
      break;
    }
    // .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
    case kIonCpAllocRetry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_cp_alloc_retry_);
      break;
    }
    // .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
    case kIonCpSecureBufferEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_cp_secure_buffer_end_);
      break;
    }
    // .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
    case kIonCpSecureBufferStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_cp_secure_buffer_start_);
      break;
    }
    // .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
    case kIonPrefetching: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_prefetching_);
      break;
    }
    // .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
    case kIonSecureCmaAddToPoolEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_secure_cma_add_to_pool_end_);
      break;
    }
    // .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
    case kIonSecureCmaAddToPoolStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_secure_cma_add_to_pool_start_);
      break;
    }
    // .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
    case kIonSecureCmaAllocateEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_secure_cma_allocate_end_);
      break;
    }
    // .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
    case kIonSecureCmaAllocateStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_secure_cma_allocate_start_);
      break;
    }
    // .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
    case kIonSecureCmaShrinkPoolEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_secure_cma_shrink_pool_end_);
      break;
    }
    // .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
    case kIonSecureCmaShrinkPoolStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_secure_cma_shrink_pool_start_);
      break;
    }
    // .perfetto.protos.KfreeFtraceEvent kfree = 298;
    case kKfree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kfree_);
      break;
    }
    // .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
    case kKmalloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kmalloc_);
      break;
    }
    // .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
    case kKmallocNode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kmalloc_node_);
      break;
    }
    // .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
    case kKmemCacheAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kmem_cache_alloc_);
      break;
    }
    // .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
    case kKmemCacheAllocNode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kmem_cache_alloc_node_);
      break;
    }
    // .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
    case kKmemCacheFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kmem_cache_free_);
      break;
    }
    // .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
    case kMigratePagesEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.migrate_pages_end_);
      break;
    }
    // .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
    case kMigratePagesStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.migrate_pages_start_);
      break;
    }
    // .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
    case kMigrateRetry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.migrate_retry_);
      break;
    }
    // .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
    case kMmPageAlloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_page_alloc_);
      break;
    }
    // .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
    case kMmPageAllocExtfrag: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_page_alloc_extfrag_);
      break;
    }
    // .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
    case kMmPageAllocZoneLocked: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_page_alloc_zone_locked_);
      break;
    }
    // .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
    case kMmPageFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_page_free_);
      break;
    }
    // .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
    case kMmPageFreeBatched: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_page_free_batched_);
      break;
    }
    // .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
    case kMmPagePcpuDrain: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_page_pcpu_drain_);
      break;
    }
    // .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
    case kRssStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.rss_stat_);
      break;
    }
    // .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
    case kIonHeapShrink: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_heap_shrink_);
      break;
    }
    // .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
    case kIonHeapGrow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_heap_grow_);
      break;
    }
    // .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
    case kFenceInit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.fence_init_);
      break;
    }
    // .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
    case kFenceDestroy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.fence_destroy_);
      break;
    }
    // .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
    case kFenceEnableSignal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.fence_enable_signal_);
      break;
    }
    // .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
    case kFenceSignaled: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.fence_signaled_);
      break;
    }
    // .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
    case kClkEnable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.clk_enable_);
      break;
    }
    // .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
    case kClkDisable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.clk_disable_);
      break;
    }
    // .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
    case kClkSetRate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.clk_set_rate_);
      break;
    }
    // .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
    case kBinderTransactionAllocBuf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.binder_transaction_alloc_buf_);
      break;
    }
    // .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
    case kSignalDeliver: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.signal_deliver_);
      break;
    }
    // .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
    case kSignalGenerate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.signal_generate_);
      break;
    }
    // .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
    case kOomScoreAdjUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.oom_score_adj_update_);
      break;
    }
    // .perfetto.protos.GenericFtraceEvent generic = 327;
    case kGeneric: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.generic_);
      break;
    }
    // .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
    case kMmEventRecord: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_event_record_);
      break;
    }
    // .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
    case kSysEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sys_enter_);
      break;
    }
    // .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
    case kSysExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sys_exit_);
      break;
    }
    // .perfetto.protos.ZeroFtraceEvent zero = 331;
    case kZero: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.zero_);
      break;
    }
    // .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
    case kGpuFrequency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.gpu_frequency_);
      break;
    }
    // .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
    case kSdeTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sde_tracing_mark_write_);
      break;
    }
    // .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
    case kMarkVictim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mark_victim_);
      break;
    }
    // .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
    case kIonStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_stat_);
      break;
    }
    // .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
    case kIonBufferCreate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_buffer_create_);
      break;
    }
    // .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
    case kIonBufferDestroy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ion_buffer_destroy_);
      break;
    }
    // .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
    case kScmCallStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.scm_call_start_);
      break;
    }
    // .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
    case kScmCallEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.scm_call_end_);
      break;
    }
    // .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
    case kGpuMemTotal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.gpu_mem_total_);
      break;
    }
    // .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
    case kThermalTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.thermal_temperature_);
      break;
    }
    // .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
    case kCdevUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cdev_update_);
      break;
    }
    // .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
    case kCpuhpExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpuhp_exit_);
      break;
    }
    // .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
    case kCpuhpMultiEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpuhp_multi_enter_);
      break;
    }
    // .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
    case kCpuhpEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpuhp_enter_);
      break;
    }
    // .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
    case kCpuhpLatency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpuhp_latency_);
      break;
    }
    // .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
    case kFastrpcDmaStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.fastrpc_dma_stat_);
      break;
    }
    // .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
    case kDpuTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dpu_tracing_mark_write_);
      break;
    }
    // .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
    case kG2DTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.g2d_tracing_mark_write_);
      break;
    }
    // .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
    case kMaliTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_tracing_mark_write_);
      break;
    }
    // .perfetto.protos.DmaHeapStatFtraceEvent dma_heap_stat = 351;
    case kDmaHeapStat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_heap_stat_);
      break;
    }
    // .perfetto.protos.CpuhpPauseFtraceEvent cpuhp_pause = 352;
    case kCpuhpPause: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cpuhp_pause_);
      break;
    }
    // .perfetto.protos.SchedPiSetprioFtraceEvent sched_pi_setprio = 353;
    case kSchedPiSetprio: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_pi_setprio_);
      break;
    }
    // .perfetto.protos.SdeSdeEvtlogFtraceEvent sde_sde_evtlog = 354;
    case kSdeSdeEvtlog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sde_sde_evtlog_);
      break;
    }
    // .perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent sde_sde_perf_calc_crtc = 355;
    case kSdeSdePerfCalcCrtc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sde_sde_perf_calc_crtc_);
      break;
    }
    // .perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent sde_sde_perf_crtc_update = 356;
    case kSdeSdePerfCrtcUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sde_sde_perf_crtc_update_);
      break;
    }
    // .perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent sde_sde_perf_set_qos_luts = 357;
    case kSdeSdePerfSetQosLuts: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sde_sde_perf_set_qos_luts_);
      break;
    }
    // .perfetto.protos.SdeSdePerfUpdateBusFtraceEvent sde_sde_perf_update_bus = 358;
    case kSdeSdePerfUpdateBus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sde_sde_perf_update_bus_);
      break;
    }
    // .perfetto.protos.RssStatThrottledFtraceEvent rss_stat_throttled = 359;
    case kRssStatThrottled: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.rss_stat_throttled_);
      break;
    }
    // .perfetto.protos.NetifReceiveSkbFtraceEvent netif_receive_skb = 360;
    case kNetifReceiveSkb: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.netif_receive_skb_);
      break;
    }
    // .perfetto.protos.NetDevXmitFtraceEvent net_dev_xmit = 361;
    case kNetDevXmit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.net_dev_xmit_);
      break;
    }
    // .perfetto.protos.InetSockSetStateFtraceEvent inet_sock_set_state = 362;
    case kInetSockSetState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.inet_sock_set_state_);
      break;
    }
    // .perfetto.protos.TcpRetransmitSkbFtraceEvent tcp_retransmit_skb = 363;
    case kTcpRetransmitSkb: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.tcp_retransmit_skb_);
      break;
    }
    // .perfetto.protos.CrosEcSensorhubDataFtraceEvent cros_ec_sensorhub_data = 364;
    case kCrosEcSensorhubData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cros_ec_sensorhub_data_);
      break;
    }
    // .perfetto.protos.NapiGroReceiveEntryFtraceEvent napi_gro_receive_entry = 365;
    case kNapiGroReceiveEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.napi_gro_receive_entry_);
      break;
    }
    // .perfetto.protos.NapiGroReceiveExitFtraceEvent napi_gro_receive_exit = 366;
    case kNapiGroReceiveExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.napi_gro_receive_exit_);
      break;
    }
    // .perfetto.protos.KfreeSkbFtraceEvent kfree_skb = 367;
    case kKfreeSkb: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kfree_skb_);
      break;
    }
    // .perfetto.protos.KvmAccessFaultFtraceEvent kvm_access_fault = 368;
    case kKvmAccessFault: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_access_fault_);
      break;
    }
    // .perfetto.protos.KvmAckIrqFtraceEvent kvm_ack_irq = 369;
    case kKvmAckIrq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_ack_irq_);
      break;
    }
    // .perfetto.protos.KvmAgeHvaFtraceEvent kvm_age_hva = 370;
    case kKvmAgeHva: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_age_hva_);
      break;
    }
    // .perfetto.protos.KvmAgePageFtraceEvent kvm_age_page = 371;
    case kKvmAgePage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_age_page_);
      break;
    }
    // .perfetto.protos.KvmArmClearDebugFtraceEvent kvm_arm_clear_debug = 372;
    case kKvmArmClearDebug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_arm_clear_debug_);
      break;
    }
    // .perfetto.protos.KvmArmSetDreg32FtraceEvent kvm_arm_set_dreg32 = 373;
    case kKvmArmSetDreg32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_arm_set_dreg32_);
      break;
    }
    // .perfetto.protos.KvmArmSetRegsetFtraceEvent kvm_arm_set_regset = 374;
    case kKvmArmSetRegset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_arm_set_regset_);
      break;
    }
    // .perfetto.protos.KvmArmSetupDebugFtraceEvent kvm_arm_setup_debug = 375;
    case kKvmArmSetupDebug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_arm_setup_debug_);
      break;
    }
    // .perfetto.protos.KvmEntryFtraceEvent kvm_entry = 376;
    case kKvmEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_entry_);
      break;
    }
    // .perfetto.protos.KvmExitFtraceEvent kvm_exit = 377;
    case kKvmExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_exit_);
      break;
    }
    // .perfetto.protos.KvmFpuFtraceEvent kvm_fpu = 378;
    case kKvmFpu: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_fpu_);
      break;
    }
    // .perfetto.protos.KvmGetTimerMapFtraceEvent kvm_get_timer_map = 379;
    case kKvmGetTimerMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_get_timer_map_);
      break;
    }
    // .perfetto.protos.KvmGuestFaultFtraceEvent kvm_guest_fault = 380;
    case kKvmGuestFault: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_guest_fault_);
      break;
    }
    // .perfetto.protos.KvmHandleSysRegFtraceEvent kvm_handle_sys_reg = 381;
    case kKvmHandleSysReg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_handle_sys_reg_);
      break;
    }
    // .perfetto.protos.KvmHvcArm64FtraceEvent kvm_hvc_arm64 = 382;
    case kKvmHvcArm64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_hvc_arm64_);
      break;
    }
    // .perfetto.protos.KvmIrqLineFtraceEvent kvm_irq_line = 383;
    case kKvmIrqLine: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_irq_line_);
      break;
    }
    // .perfetto.protos.KvmMmioFtraceEvent kvm_mmio = 384;
    case kKvmMmio: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_mmio_);
      break;
    }
    // .perfetto.protos.KvmMmioEmulateFtraceEvent kvm_mmio_emulate = 385;
    case kKvmMmioEmulate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_mmio_emulate_);
      break;
    }
    // .perfetto.protos.KvmSetGuestDebugFtraceEvent kvm_set_guest_debug = 386;
    case kKvmSetGuestDebug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_set_guest_debug_);
      break;
    }
    // .perfetto.protos.KvmSetIrqFtraceEvent kvm_set_irq = 387;
    case kKvmSetIrq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_set_irq_);
      break;
    }
    // .perfetto.protos.KvmSetSpteHvaFtraceEvent kvm_set_spte_hva = 388;
    case kKvmSetSpteHva: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_set_spte_hva_);
      break;
    }
    // .perfetto.protos.KvmSetWayFlushFtraceEvent kvm_set_way_flush = 389;
    case kKvmSetWayFlush: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_set_way_flush_);
      break;
    }
    // .perfetto.protos.KvmSysAccessFtraceEvent kvm_sys_access = 390;
    case kKvmSysAccess: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_sys_access_);
      break;
    }
    // .perfetto.protos.KvmTestAgeHvaFtraceEvent kvm_test_age_hva = 391;
    case kKvmTestAgeHva: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_test_age_hva_);
      break;
    }
    // .perfetto.protos.KvmTimerEmulateFtraceEvent kvm_timer_emulate = 392;
    case kKvmTimerEmulate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_timer_emulate_);
      break;
    }
    // .perfetto.protos.KvmTimerHrtimerExpireFtraceEvent kvm_timer_hrtimer_expire = 393;
    case kKvmTimerHrtimerExpire: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_timer_hrtimer_expire_);
      break;
    }
    // .perfetto.protos.KvmTimerRestoreStateFtraceEvent kvm_timer_restore_state = 394;
    case kKvmTimerRestoreState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_timer_restore_state_);
      break;
    }
    // .perfetto.protos.KvmTimerSaveStateFtraceEvent kvm_timer_save_state = 395;
    case kKvmTimerSaveState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_timer_save_state_);
      break;
    }
    // .perfetto.protos.KvmTimerUpdateIrqFtraceEvent kvm_timer_update_irq = 396;
    case kKvmTimerUpdateIrq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_timer_update_irq_);
      break;
    }
    // .perfetto.protos.KvmToggleCacheFtraceEvent kvm_toggle_cache = 397;
    case kKvmToggleCache: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_toggle_cache_);
      break;
    }
    // .perfetto.protos.KvmUnmapHvaRangeFtraceEvent kvm_unmap_hva_range = 398;
    case kKvmUnmapHvaRange: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_unmap_hva_range_);
      break;
    }
    // .perfetto.protos.KvmUserspaceExitFtraceEvent kvm_userspace_exit = 399;
    case kKvmUserspaceExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_userspace_exit_);
      break;
    }
    // .perfetto.protos.KvmVcpuWakeupFtraceEvent kvm_vcpu_wakeup = 400;
    case kKvmVcpuWakeup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_vcpu_wakeup_);
      break;
    }
    // .perfetto.protos.KvmWfxArm64FtraceEvent kvm_wfx_arm64 = 401;
    case kKvmWfxArm64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kvm_wfx_arm64_);
      break;
    }
    // .perfetto.protos.TrapRegFtraceEvent trap_reg = 402;
    case kTrapReg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trap_reg_);
      break;
    }
    // .perfetto.protos.VgicUpdateIrqPendingFtraceEvent vgic_update_irq_pending = 403;
    case kVgicUpdateIrqPending: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vgic_update_irq_pending_);
      break;
    }
    // .perfetto.protos.WakeupSourceActivateFtraceEvent wakeup_source_activate = 404;
    case kWakeupSourceActivate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.wakeup_source_activate_);
      break;
    }
    // .perfetto.protos.WakeupSourceDeactivateFtraceEvent wakeup_source_deactivate = 405;
    case kWakeupSourceDeactivate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.wakeup_source_deactivate_);
      break;
    }
    // .perfetto.protos.UfshcdCommandFtraceEvent ufshcd_command = 406;
    case kUfshcdCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ufshcd_command_);
      break;
    }
    // .perfetto.protos.UfshcdClkGatingFtraceEvent ufshcd_clk_gating = 407;
    case kUfshcdClkGating: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ufshcd_clk_gating_);
      break;
    }
    // .perfetto.protos.ConsoleFtraceEvent console = 408;
    case kConsole: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.console_);
      break;
    }
    // .perfetto.protos.DrmVblankEventFtraceEvent drm_vblank_event = 409;
    case kDrmVblankEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.drm_vblank_event_);
      break;
    }
    // .perfetto.protos.DrmVblankEventDeliveredFtraceEvent drm_vblank_event_delivered = 410;
    case kDrmVblankEventDelivered: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.drm_vblank_event_delivered_);
      break;
    }
    // .perfetto.protos.DrmSchedJobFtraceEvent drm_sched_job = 411;
    case kDrmSchedJob: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.drm_sched_job_);
      break;
    }
    // .perfetto.protos.DrmRunJobFtraceEvent drm_run_job = 412;
    case kDrmRunJob: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.drm_run_job_);
      break;
    }
    // .perfetto.protos.DrmSchedProcessJobFtraceEvent drm_sched_process_job = 413;
    case kDrmSchedProcessJob: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.drm_sched_process_job_);
      break;
    }
    // .perfetto.protos.DmaFenceInitFtraceEvent dma_fence_init = 414;
    case kDmaFenceInit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_fence_init_);
      break;
    }
    // .perfetto.protos.DmaFenceEmitFtraceEvent dma_fence_emit = 415;
    case kDmaFenceEmit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_fence_emit_);
      break;
    }
    // .perfetto.protos.DmaFenceSignaledFtraceEvent dma_fence_signaled = 416;
    case kDmaFenceSignaled: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_fence_signaled_);
      break;
    }
    // .perfetto.protos.DmaFenceWaitStartFtraceEvent dma_fence_wait_start = 417;
    case kDmaFenceWaitStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_fence_wait_start_);
      break;
    }
    // .perfetto.protos.DmaFenceWaitEndFtraceEvent dma_fence_wait_end = 418;
    case kDmaFenceWaitEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dma_fence_wait_end_);
      break;
    }
    // .perfetto.protos.F2fsIostatFtraceEvent f2fs_iostat = 419;
    case kF2FsIostat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_iostat_);
      break;
    }
    // .perfetto.protos.F2fsIostatLatencyFtraceEvent f2fs_iostat_latency = 420;
    case kF2FsIostatLatency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.f2fs_iostat_latency_);
      break;
    }
    // .perfetto.protos.SchedCpuUtilCfsFtraceEvent sched_cpu_util_cfs = 421;
    case kSchedCpuUtilCfs: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.sched_cpu_util_cfs_);
      break;
    }
    // .perfetto.protos.V4l2QbufFtraceEvent v4l2_qbuf = 422;
    case kV4L2Qbuf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.v4l2_qbuf_);
      break;
    }
    // .perfetto.protos.V4l2DqbufFtraceEvent v4l2_dqbuf = 423;
    case kV4L2Dqbuf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.v4l2_dqbuf_);
      break;
    }
    // .perfetto.protos.Vb2V4l2BufQueueFtraceEvent vb2_v4l2_buf_queue = 424;
    case kVb2V4L2BufQueue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vb2_v4l2_buf_queue_);
      break;
    }
    // .perfetto.protos.Vb2V4l2BufDoneFtraceEvent vb2_v4l2_buf_done = 425;
    case kVb2V4L2BufDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vb2_v4l2_buf_done_);
      break;
    }
    // .perfetto.protos.Vb2V4l2QbufFtraceEvent vb2_v4l2_qbuf = 426;
    case kVb2V4L2Qbuf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vb2_v4l2_qbuf_);
      break;
    }
    // .perfetto.protos.Vb2V4l2DqbufFtraceEvent vb2_v4l2_dqbuf = 427;
    case kVb2V4L2Dqbuf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.vb2_v4l2_dqbuf_);
      break;
    }
    // .perfetto.protos.DsiCmdFifoStatusFtraceEvent dsi_cmd_fifo_status = 428;
    case kDsiCmdFifoStatus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dsi_cmd_fifo_status_);
      break;
    }
    // .perfetto.protos.DsiRxFtraceEvent dsi_rx = 429;
    case kDsiRx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dsi_rx_);
      break;
    }
    // .perfetto.protos.DsiTxFtraceEvent dsi_tx = 430;
    case kDsiTx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.dsi_tx_);
      break;
    }
    // .perfetto.protos.AndroidFsDatareadEndFtraceEvent android_fs_dataread_end = 431;
    case kAndroidFsDatareadEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.android_fs_dataread_end_);
      break;
    }
    // .perfetto.protos.AndroidFsDatareadStartFtraceEvent android_fs_dataread_start = 432;
    case kAndroidFsDatareadStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.android_fs_dataread_start_);
      break;
    }
    // .perfetto.protos.AndroidFsDatawriteEndFtraceEvent android_fs_datawrite_end = 433;
    case kAndroidFsDatawriteEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.android_fs_datawrite_end_);
      break;
    }
    // .perfetto.protos.AndroidFsDatawriteStartFtraceEvent android_fs_datawrite_start = 434;
    case kAndroidFsDatawriteStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.android_fs_datawrite_start_);
      break;
    }
    // .perfetto.protos.AndroidFsFsyncEndFtraceEvent android_fs_fsync_end = 435;
    case kAndroidFsFsyncEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.android_fs_fsync_end_);
      break;
    }
    // .perfetto.protos.AndroidFsFsyncStartFtraceEvent android_fs_fsync_start = 436;
    case kAndroidFsFsyncStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.android_fs_fsync_start_);
      break;
    }
    // .perfetto.protos.FuncgraphEntryFtraceEvent funcgraph_entry = 437;
    case kFuncgraphEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.funcgraph_entry_);
      break;
    }
    // .perfetto.protos.FuncgraphExitFtraceEvent funcgraph_exit = 438;
    case kFuncgraphExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.funcgraph_exit_);
      break;
    }
    // .perfetto.protos.VirtioVideoCmdFtraceEvent virtio_video_cmd = 439;
    case kVirtioVideoCmd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.virtio_video_cmd_);
      break;
    }
    // .perfetto.protos.VirtioVideoCmdDoneFtraceEvent virtio_video_cmd_done = 440;
    case kVirtioVideoCmdDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.virtio_video_cmd_done_);
      break;
    }
    // .perfetto.protos.VirtioVideoResourceQueueFtraceEvent virtio_video_resource_queue = 441;
    case kVirtioVideoResourceQueue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.virtio_video_resource_queue_);
      break;
    }
    // .perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent virtio_video_resource_queue_done = 442;
    case kVirtioVideoResourceQueueDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.virtio_video_resource_queue_done_);
      break;
    }
    // .perfetto.protos.MmShrinkSlabStartFtraceEvent mm_shrink_slab_start = 443;
    case kMmShrinkSlabStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_shrink_slab_start_);
      break;
    }
    // .perfetto.protos.MmShrinkSlabEndFtraceEvent mm_shrink_slab_end = 444;
    case kMmShrinkSlabEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mm_shrink_slab_end_);
      break;
    }
    // .perfetto.protos.TrustySmcFtraceEvent trusty_smc = 445;
    case kTrustySmc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_smc_);
      break;
    }
    // .perfetto.protos.TrustySmcDoneFtraceEvent trusty_smc_done = 446;
    case kTrustySmcDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_smc_done_);
      break;
    }
    // .perfetto.protos.TrustyStdCall32FtraceEvent trusty_std_call32 = 447;
    case kTrustyStdCall32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_std_call32_);
      break;
    }
    // .perfetto.protos.TrustyStdCall32DoneFtraceEvent trusty_std_call32_done = 448;
    case kTrustyStdCall32Done: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_std_call32_done_);
      break;
    }
    // .perfetto.protos.TrustyShareMemoryFtraceEvent trusty_share_memory = 449;
    case kTrustyShareMemory: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_share_memory_);
      break;
    }
    // .perfetto.protos.TrustyShareMemoryDoneFtraceEvent trusty_share_memory_done = 450;
    case kTrustyShareMemoryDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_share_memory_done_);
      break;
    }
    // .perfetto.protos.TrustyReclaimMemoryFtraceEvent trusty_reclaim_memory = 451;
    case kTrustyReclaimMemory: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_reclaim_memory_);
      break;
    }
    // .perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent trusty_reclaim_memory_done = 452;
    case kTrustyReclaimMemoryDone: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_reclaim_memory_done_);
      break;
    }
    // .perfetto.protos.TrustyIrqFtraceEvent trusty_irq = 453;
    case kTrustyIrq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_irq_);
      break;
    }
    // .perfetto.protos.TrustyIpcHandleEventFtraceEvent trusty_ipc_handle_event = 454;
    case kTrustyIpcHandleEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_handle_event_);
      break;
    }
    // .perfetto.protos.TrustyIpcConnectFtraceEvent trusty_ipc_connect = 455;
    case kTrustyIpcConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_connect_);
      break;
    }
    // .perfetto.protos.TrustyIpcConnectEndFtraceEvent trusty_ipc_connect_end = 456;
    case kTrustyIpcConnectEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_connect_end_);
      break;
    }
    // .perfetto.protos.TrustyIpcWriteFtraceEvent trusty_ipc_write = 457;
    case kTrustyIpcWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_write_);
      break;
    }
    // .perfetto.protos.TrustyIpcPollFtraceEvent trusty_ipc_poll = 458;
    case kTrustyIpcPoll: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_poll_);
      break;
    }
    // .perfetto.protos.TrustyIpcReadFtraceEvent trusty_ipc_read = 460;
    case kTrustyIpcRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_read_);
      break;
    }
    // .perfetto.protos.TrustyIpcReadEndFtraceEvent trusty_ipc_read_end = 461;
    case kTrustyIpcReadEnd: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_read_end_);
      break;
    }
    // .perfetto.protos.TrustyIpcRxFtraceEvent trusty_ipc_rx = 462;
    case kTrustyIpcRx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_ipc_rx_);
      break;
    }
    // .perfetto.protos.TrustyEnqueueNopFtraceEvent trusty_enqueue_nop = 464;
    case kTrustyEnqueueNop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.trusty_enqueue_nop_);
      break;
    }
    // .perfetto.protos.CmaAllocStartFtraceEvent cma_alloc_start = 465;
    case kCmaAllocStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cma_alloc_start_);
      break;
    }
    // .perfetto.protos.CmaAllocInfoFtraceEvent cma_alloc_info = 466;
    case kCmaAllocInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.cma_alloc_info_);
      break;
    }
    // .perfetto.protos.LwisTracingMarkWriteFtraceEvent lwis_tracing_mark_write = 467;
    case kLwisTracingMarkWrite: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.lwis_tracing_mark_write_);
      break;
    }
    // .perfetto.protos.VirtioGpuCmdQueueFtraceEvent virtio_gpu_cmd_queue = 468;
    case kVirtioGpuCmdQueue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.virtio_gpu_cmd_queue_);
      break;
    }
    // .perfetto.protos.VirtioGpuCmdResponseFtraceEvent virtio_gpu_cmd_response = 469;
    case kVirtioGpuCmdResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.virtio_gpu_cmd_response_);
      break;
    }
    // .perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent mali_mali_KCPU_CQS_SET = 470;
    case kMaliMaliKCPUCQSSET: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_kcpu_cqs_set_);
      break;
    }
    // .perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent mali_mali_KCPU_CQS_WAIT_START = 471;
    case kMaliMaliKCPUCQSWAITSTART: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_kcpu_cqs_wait_start_);
      break;
    }
    // .perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent mali_mali_KCPU_CQS_WAIT_END = 472;
    case kMaliMaliKCPUCQSWAITEND: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_kcpu_cqs_wait_end_);
      break;
    }
    // .perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent mali_mali_KCPU_FENCE_SIGNAL = 473;
    case kMaliMaliKCPUFENCESIGNAL: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_kcpu_fence_signal_);
      break;
    }
    // .perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent mali_mali_KCPU_FENCE_WAIT_START = 474;
    case kMaliMaliKCPUFENCEWAITSTART: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_kcpu_fence_wait_start_);
      break;
    }
    // .perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent mali_mali_KCPU_FENCE_WAIT_END = 475;
    case kMaliMaliKCPUFENCEWAITEND: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_kcpu_fence_wait_end_);
      break;
    }
    // .perfetto.protos.HypEnterFtraceEvent hyp_enter = 476;
    case kHypEnter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.hyp_enter_);
      break;
    }
    // .perfetto.protos.HypExitFtraceEvent hyp_exit = 477;
    case kHypExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.hyp_exit_);
      break;
    }
    // .perfetto.protos.HostHcallFtraceEvent host_hcall = 478;
    case kHostHcall: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.host_hcall_);
      break;
    }
    // .perfetto.protos.HostSmcFtraceEvent host_smc = 479;
    case kHostSmc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.host_smc_);
      break;
    }
    // .perfetto.protos.HostMemAbortFtraceEvent host_mem_abort = 480;
    case kHostMemAbort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.host_mem_abort_);
      break;
    }
    // .perfetto.protos.SuspendResumeMinimalFtraceEvent suspend_resume_minimal = 481;
    case kSuspendResumeMinimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.suspend_resume_minimal_);
      break;
    }
    // .perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent mali_mali_CSF_INTERRUPT_START = 482;
    case kMaliMaliCSFINTERRUPTSTART: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_csf_interrupt_start_);
      break;
    }
    // .perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent mali_mali_CSF_INTERRUPT_END = 483;
    case kMaliMaliCSFINTERRUPTEND: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.mali_mali_csf_interrupt_end_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceEvent::GetClassData() const { return &_class_data_; }


void FtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceEvent*>(&to_msg);
  auto& from = static_cast<const FtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.common_flags_ = from._impl_.common_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_case()) {
    case kPrint: {
      _this->_internal_mutable_print()->::perfetto::protos::PrintFtraceEvent::MergeFrom(
          from._internal_print());
      break;
    }
    case kSchedSwitch: {
      _this->_internal_mutable_sched_switch()->::perfetto::protos::SchedSwitchFtraceEvent::MergeFrom(
          from._internal_sched_switch());
      break;
    }
    case kCpuFrequency: {
      _this->_internal_mutable_cpu_frequency()->::perfetto::protos::CpuFrequencyFtraceEvent::MergeFrom(
          from._internal_cpu_frequency());
      break;
    }
    case kCpuFrequencyLimits: {
      _this->_internal_mutable_cpu_frequency_limits()->::perfetto::protos::CpuFrequencyLimitsFtraceEvent::MergeFrom(
          from._internal_cpu_frequency_limits());
      break;
    }
    case kCpuIdle: {
      _this->_internal_mutable_cpu_idle()->::perfetto::protos::CpuIdleFtraceEvent::MergeFrom(
          from._internal_cpu_idle());
      break;
    }
    case kClockEnable: {
      _this->_internal_mutable_clock_enable()->::perfetto::protos::ClockEnableFtraceEvent::MergeFrom(
          from._internal_clock_enable());
      break;
    }
    case kClockDisable: {
      _this->_internal_mutable_clock_disable()->::perfetto::protos::ClockDisableFtraceEvent::MergeFrom(
          from._internal_clock_disable());
      break;
    }
    case kClockSetRate: {
      _this->_internal_mutable_clock_set_rate()->::perfetto::protos::ClockSetRateFtraceEvent::MergeFrom(
          from._internal_clock_set_rate());
      break;
    }
    case kSchedWakeup: {
      _this->_internal_mutable_sched_wakeup()->::perfetto::protos::SchedWakeupFtraceEvent::MergeFrom(
          from._internal_sched_wakeup());
      break;
    }
    case kSchedBlockedReason: {
      _this->_internal_mutable_sched_blocked_reason()->::perfetto::protos::SchedBlockedReasonFtraceEvent::MergeFrom(
          from._internal_sched_blocked_reason());
      break;
    }
    case kSchedCpuHotplug: {
      _this->_internal_mutable_sched_cpu_hotplug()->::perfetto::protos::SchedCpuHotplugFtraceEvent::MergeFrom(
          from._internal_sched_cpu_hotplug());
      break;
    }
    case kSchedWaking: {
      _this->_internal_mutable_sched_waking()->::perfetto::protos::SchedWakingFtraceEvent::MergeFrom(
          from._internal_sched_waking());
      break;
    }
    case kIpiEntry: {
      _this->_internal_mutable_ipi_entry()->::perfetto::protos::IpiEntryFtraceEvent::MergeFrom(
          from._internal_ipi_entry());
      break;
    }
    case kIpiExit: {
      _this->_internal_mutable_ipi_exit()->::perfetto::protos::IpiExitFtraceEvent::MergeFrom(
          from._internal_ipi_exit());
      break;
    }
    case kIpiRaise: {
      _this->_internal_mutable_ipi_raise()->::perfetto::protos::IpiRaiseFtraceEvent::MergeFrom(
          from._internal_ipi_raise());
      break;
    }
    case kSoftirqEntry: {
      _this->_internal_mutable_softirq_entry()->::perfetto::protos::SoftirqEntryFtraceEvent::MergeFrom(
          from._internal_softirq_entry());
      break;
    }
    case kSoftirqExit: {
      _this->_internal_mutable_softirq_exit()->::perfetto::protos::SoftirqExitFtraceEvent::MergeFrom(
          from._internal_softirq_exit());
      break;
    }
    case kSoftirqRaise: {
      _this->_internal_mutable_softirq_raise()->::perfetto::protos::SoftirqRaiseFtraceEvent::MergeFrom(
          from._internal_softirq_raise());
      break;
    }
    case kI2CRead: {
      _this->_internal_mutable_i2c_read()->::perfetto::protos::I2cReadFtraceEvent::MergeFrom(
          from._internal_i2c_read());
      break;
    }
    case kI2CWrite: {
      _this->_internal_mutable_i2c_write()->::perfetto::protos::I2cWriteFtraceEvent::MergeFrom(
          from._internal_i2c_write());
      break;
    }
    case kI2CResult: {
      _this->_internal_mutable_i2c_result()->::perfetto::protos::I2cResultFtraceEvent::MergeFrom(
          from._internal_i2c_result());
      break;
    }
    case kI2CReply: {
      _this->_internal_mutable_i2c_reply()->::perfetto::protos::I2cReplyFtraceEvent::MergeFrom(
          from._internal_i2c_reply());
      break;
    }
    case kSmbusRead: {
      _this->_internal_mutable_smbus_read()->::perfetto::protos::SmbusReadFtraceEvent::MergeFrom(
          from._internal_smbus_read());
      break;
    }
    case kSmbusWrite: {
      _this->_internal_mutable_smbus_write()->::perfetto::protos::SmbusWriteFtraceEvent::MergeFrom(
          from._internal_smbus_write());
      break;
    }
    case kSmbusResult: {
      _this->_internal_mutable_smbus_result()->::perfetto::protos::SmbusResultFtraceEvent::MergeFrom(
          from._internal_smbus_result());
      break;
    }
    case kSmbusReply: {
      _this->_internal_mutable_smbus_reply()->::perfetto::protos::SmbusReplyFtraceEvent::MergeFrom(
          from._internal_smbus_reply());
      break;
    }
    case kLowmemoryKill: {
      _this->_internal_mutable_lowmemory_kill()->::perfetto::protos::LowmemoryKillFtraceEvent::MergeFrom(
          from._internal_lowmemory_kill());
      break;
    }
    case kIrqHandlerEntry: {
      _this->_internal_mutable_irq_handler_entry()->::perfetto::protos::IrqHandlerEntryFtraceEvent::MergeFrom(
          from._internal_irq_handler_entry());
      break;
    }
    case kIrqHandlerExit: {
      _this->_internal_mutable_irq_handler_exit()->::perfetto::protos::IrqHandlerExitFtraceEvent::MergeFrom(
          from._internal_irq_handler_exit());
      break;
    }
    case kSyncPt: {
      _this->_internal_mutable_sync_pt()->::perfetto::protos::SyncPtFtraceEvent::MergeFrom(
          from._internal_sync_pt());
      break;
    }
    case kSyncTimeline: {
      _this->_internal_mutable_sync_timeline()->::perfetto::protos::SyncTimelineFtraceEvent::MergeFrom(
          from._internal_sync_timeline());
      break;
    }
    case kSyncWait: {
      _this->_internal_mutable_sync_wait()->::perfetto::protos::SyncWaitFtraceEvent::MergeFrom(
          from._internal_sync_wait());
      break;
    }
    case kExt4DaWriteBegin: {
      _this->_internal_mutable_ext4_da_write_begin()->::perfetto::protos::Ext4DaWriteBeginFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_begin());
      break;
    }
    case kExt4DaWriteEnd: {
      _this->_internal_mutable_ext4_da_write_end()->::perfetto::protos::Ext4DaWriteEndFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_end());
      break;
    }
    case kExt4SyncFileEnter: {
      _this->_internal_mutable_ext4_sync_file_enter()->::perfetto::protos::Ext4SyncFileEnterFtraceEvent::MergeFrom(
          from._internal_ext4_sync_file_enter());
      break;
    }
    case kExt4SyncFileExit: {
      _this->_internal_mutable_ext4_sync_file_exit()->::perfetto::protos::Ext4SyncFileExitFtraceEvent::MergeFrom(
          from._internal_ext4_sync_file_exit());
      break;
    }
    case kBlockRqIssue: {
      _this->_internal_mutable_block_rq_issue()->::perfetto::protos::BlockRqIssueFtraceEvent::MergeFrom(
          from._internal_block_rq_issue());
      break;
    }
    case kMmVmscanDirectReclaimBegin: {
      _this->_internal_mutable_mm_vmscan_direct_reclaim_begin()->::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_direct_reclaim_begin());
      break;
    }
    case kMmVmscanDirectReclaimEnd: {
      _this->_internal_mutable_mm_vmscan_direct_reclaim_end()->::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_direct_reclaim_end());
      break;
    }
    case kMmVmscanKswapdWake: {
      _this->_internal_mutable_mm_vmscan_kswapd_wake()->::perfetto::protos::MmVmscanKswapdWakeFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_kswapd_wake());
      break;
    }
    case kMmVmscanKswapdSleep: {
      _this->_internal_mutable_mm_vmscan_kswapd_sleep()->::perfetto::protos::MmVmscanKswapdSleepFtraceEvent::MergeFrom(
          from._internal_mm_vmscan_kswapd_sleep());
      break;
    }
    case kBinderTransaction: {
      _this->_internal_mutable_binder_transaction()->::perfetto::protos::BinderTransactionFtraceEvent::MergeFrom(
          from._internal_binder_transaction());
      break;
    }
    case kBinderTransactionReceived: {
      _this->_internal_mutable_binder_transaction_received()->::perfetto::protos::BinderTransactionReceivedFtraceEvent::MergeFrom(
          from._internal_binder_transaction_received());
      break;
    }
    case kBinderSetPriority: {
      _this->_internal_mutable_binder_set_priority()->::perfetto::protos::BinderSetPriorityFtraceEvent::MergeFrom(
          from._internal_binder_set_priority());
      break;
    }
    case kBinderLock: {
      _this->_internal_mutable_binder_lock()->::perfetto::protos::BinderLockFtraceEvent::MergeFrom(
          from._internal_binder_lock());
      break;
    }
    case kBinderLocked: {
      _this->_internal_mutable_binder_locked()->::perfetto::protos::BinderLockedFtraceEvent::MergeFrom(
          from._internal_binder_locked());
      break;
    }
    case kBinderUnlock: {
      _this->_internal_mutable_binder_unlock()->::perfetto::protos::BinderUnlockFtraceEvent::MergeFrom(
          from._internal_binder_unlock());
      break;
    }
    case kWorkqueueActivateWork: {
      _this->_internal_mutable_workqueue_activate_work()->::perfetto::protos::WorkqueueActivateWorkFtraceEvent::MergeFrom(
          from._internal_workqueue_activate_work());
      break;
    }
    case kWorkqueueExecuteEnd: {
      _this->_internal_mutable_workqueue_execute_end()->::perfetto::protos::WorkqueueExecuteEndFtraceEvent::MergeFrom(
          from._internal_workqueue_execute_end());
      break;
    }
    case kWorkqueueExecuteStart: {
      _this->_internal_mutable_workqueue_execute_start()->::perfetto::protos::WorkqueueExecuteStartFtraceEvent::MergeFrom(
          from._internal_workqueue_execute_start());
      break;
    }
    case kWorkqueueQueueWork: {
      _this->_internal_mutable_workqueue_queue_work()->::perfetto::protos::WorkqueueQueueWorkFtraceEvent::MergeFrom(
          from._internal_workqueue_queue_work());
      break;
    }
    case kRegulatorDisable: {
      _this->_internal_mutable_regulator_disable()->::perfetto::protos::RegulatorDisableFtraceEvent::MergeFrom(
          from._internal_regulator_disable());
      break;
    }
    case kRegulatorDisableComplete: {
      _this->_internal_mutable_regulator_disable_complete()->::perfetto::protos::RegulatorDisableCompleteFtraceEvent::MergeFrom(
          from._internal_regulator_disable_complete());
      break;
    }
    case kRegulatorEnable: {
      _this->_internal_mutable_regulator_enable()->::perfetto::protos::RegulatorEnableFtraceEvent::MergeFrom(
          from._internal_regulator_enable());
      break;
    }
    case kRegulatorEnableComplete: {
      _this->_internal_mutable_regulator_enable_complete()->::perfetto::protos::RegulatorEnableCompleteFtraceEvent::MergeFrom(
          from._internal_regulator_enable_complete());
      break;
    }
    case kRegulatorEnableDelay: {
      _this->_internal_mutable_regulator_enable_delay()->::perfetto::protos::RegulatorEnableDelayFtraceEvent::MergeFrom(
          from._internal_regulator_enable_delay());
      break;
    }
    case kRegulatorSetVoltage: {
      _this->_internal_mutable_regulator_set_voltage()->::perfetto::protos::RegulatorSetVoltageFtraceEvent::MergeFrom(
          from._internal_regulator_set_voltage());
      break;
    }
    case kRegulatorSetVoltageComplete: {
      _this->_internal_mutable_regulator_set_voltage_complete()->::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent::MergeFrom(
          from._internal_regulator_set_voltage_complete());
      break;
    }
    case kCgroupAttachTask: {
      _this->_internal_mutable_cgroup_attach_task()->::perfetto::protos::CgroupAttachTaskFtraceEvent::MergeFrom(
          from._internal_cgroup_attach_task());
      break;
    }
    case kCgroupMkdir: {
      _this->_internal_mutable_cgroup_mkdir()->::perfetto::protos::CgroupMkdirFtraceEvent::MergeFrom(
          from._internal_cgroup_mkdir());
      break;
    }
    case kCgroupRemount: {
      _this->_internal_mutable_cgroup_remount()->::perfetto::protos::CgroupRemountFtraceEvent::MergeFrom(
          from._internal_cgroup_remount());
      break;
    }
    case kCgroupRmdir: {
      _this->_internal_mutable_cgroup_rmdir()->::perfetto::protos::CgroupRmdirFtraceEvent::MergeFrom(
          from._internal_cgroup_rmdir());
      break;
    }
    case kCgroupTransferTasks: {
      _this->_internal_mutable_cgroup_transfer_tasks()->::perfetto::protos::CgroupTransferTasksFtraceEvent::MergeFrom(
          from._internal_cgroup_transfer_tasks());
      break;
    }
    case kCgroupDestroyRoot: {
      _this->_internal_mutable_cgroup_destroy_root()->::perfetto::protos::CgroupDestroyRootFtraceEvent::MergeFrom(
          from._internal_cgroup_destroy_root());
      break;
    }
    case kCgroupRelease: {
      _this->_internal_mutable_cgroup_release()->::perfetto::protos::CgroupReleaseFtraceEvent::MergeFrom(
          from._internal_cgroup_release());
      break;
    }
    case kCgroupRename: {
      _this->_internal_mutable_cgroup_rename()->::perfetto::protos::CgroupRenameFtraceEvent::MergeFrom(
          from._internal_cgroup_rename());
      break;
    }
    case kCgroupSetupRoot: {
      _this->_internal_mutable_cgroup_setup_root()->::perfetto::protos::CgroupSetupRootFtraceEvent::MergeFrom(
          from._internal_cgroup_setup_root());
      break;
    }
    case kMdpCmdKickoff: {
      _this->_internal_mutable_mdp_cmd_kickoff()->::perfetto::protos::MdpCmdKickoffFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_kickoff());
      break;
    }
    case kMdpCommit: {
      _this->_internal_mutable_mdp_commit()->::perfetto::protos::MdpCommitFtraceEvent::MergeFrom(
          from._internal_mdp_commit());
      break;
    }
    case kMdpPerfSetOt: {
      _this->_internal_mutable_mdp_perf_set_ot()->::perfetto::protos::MdpPerfSetOtFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_ot());
      break;
    }
    case kMdpSsppChange: {
      _this->_internal_mutable_mdp_sspp_change()->::perfetto::protos::MdpSsppChangeFtraceEvent::MergeFrom(
          from._internal_mdp_sspp_change());
      break;
    }
    case kTracingMarkWrite: {
      _this->_internal_mutable_tracing_mark_write()->::perfetto::protos::TracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_tracing_mark_write());
      break;
    }
    case kMdpCmdPingpongDone: {
      _this->_internal_mutable_mdp_cmd_pingpong_done()->::perfetto::protos::MdpCmdPingpongDoneFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_pingpong_done());
      break;
    }
    case kMdpCompareBw: {
      _this->_internal_mutable_mdp_compare_bw()->::perfetto::protos::MdpCompareBwFtraceEvent::MergeFrom(
          from._internal_mdp_compare_bw());
      break;
    }
    case kMdpPerfSetPanicLuts: {
      _this->_internal_mutable_mdp_perf_set_panic_luts()->::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_panic_luts());
      break;
    }
    case kMdpSsppSet: {
      _this->_internal_mutable_mdp_sspp_set()->::perfetto::protos::MdpSsppSetFtraceEvent::MergeFrom(
          from._internal_mdp_sspp_set());
      break;
    }
    case kMdpCmdReadptrDone: {
      _this->_internal_mutable_mdp_cmd_readptr_done()->::perfetto::protos::MdpCmdReadptrDoneFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_readptr_done());
      break;
    }
    case kMdpMisrCrc: {
      _this->_internal_mutable_mdp_misr_crc()->::perfetto::protos::MdpMisrCrcFtraceEvent::MergeFrom(
          from._internal_mdp_misr_crc());
      break;
    }
    case kMdpPerfSetQosLuts: {
      _this->_internal_mutable_mdp_perf_set_qos_luts()->::perfetto::protos::MdpPerfSetQosLutsFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_qos_luts());
      break;
    }
    case kMdpTraceCounter: {
      _this->_internal_mutable_mdp_trace_counter()->::perfetto::protos::MdpTraceCounterFtraceEvent::MergeFrom(
          from._internal_mdp_trace_counter());
      break;
    }
    case kMdpCmdReleaseBw: {
      _this->_internal_mutable_mdp_cmd_release_bw()->::perfetto::protos::MdpCmdReleaseBwFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_release_bw());
      break;
    }
    case kMdpMixerUpdate: {
      _this->_internal_mutable_mdp_mixer_update()->::perfetto::protos::MdpMixerUpdateFtraceEvent::MergeFrom(
          from._internal_mdp_mixer_update());
      break;
    }
    case kMdpPerfSetWmLevels: {
      _this->_internal_mutable_mdp_perf_set_wm_levels()->::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent::MergeFrom(
          from._internal_mdp_perf_set_wm_levels());
      break;
    }
    case kMdpVideoUnderrunDone: {
      _this->_internal_mutable_mdp_video_underrun_done()->::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent::MergeFrom(
          from._internal_mdp_video_underrun_done());
      break;
    }
    case kMdpCmdWaitPingpong: {
      _this->_internal_mutable_mdp_cmd_wait_pingpong()->::perfetto::protos::MdpCmdWaitPingpongFtraceEvent::MergeFrom(
          from._internal_mdp_cmd_wait_pingpong());
      break;
    }
    case kMdpPerfPrefillCalc: {
      _this->_internal_mutable_mdp_perf_prefill_calc()->::perfetto::protos::MdpPerfPrefillCalcFtraceEvent::MergeFrom(
          from._internal_mdp_perf_prefill_calc());
      break;
    }
    case kMdpPerfUpdateBus: {
      _this->_internal_mutable_mdp_perf_update_bus()->::perfetto::protos::MdpPerfUpdateBusFtraceEvent::MergeFrom(
          from._internal_mdp_perf_update_bus());
      break;
    }
    case kRotatorBwAoAsContext: {
      _this->_internal_mutable_rotator_bw_ao_as_context()->::perfetto::protos::RotatorBwAoAsContextFtraceEvent::MergeFrom(
          from._internal_rotator_bw_ao_as_context());
      break;
    }
    case kMmFilemapAddToPageCache: {
      _this->_internal_mutable_mm_filemap_add_to_page_cache()->::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent::MergeFrom(
          from._internal_mm_filemap_add_to_page_cache());
      break;
    }
    case kMmFilemapDeleteFromPageCache: {
      _this->_internal_mutable_mm_filemap_delete_from_page_cache()->::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent::MergeFrom(
          from._internal_mm_filemap_delete_from_page_cache());
      break;
    }
    case kMmCompactionBegin: {
      _this->_internal_mutable_mm_compaction_begin()->::perfetto::protos::MmCompactionBeginFtraceEvent::MergeFrom(
          from._internal_mm_compaction_begin());
      break;
    }
    case kMmCompactionDeferCompaction: {
      _this->_internal_mutable_mm_compaction_defer_compaction()->::perfetto::protos::MmCompactionDeferCompactionFtraceEvent::MergeFrom(
          from._internal_mm_compaction_defer_compaction());
      break;
    }
    case kMmCompactionDeferred: {
      _this->_internal_mutable_mm_compaction_deferred()->::perfetto::protos::MmCompactionDeferredFtraceEvent::MergeFrom(
          from._internal_mm_compaction_deferred());
      break;
    }
    case kMmCompactionDeferReset: {
      _this->_internal_mutable_mm_compaction_defer_reset()->::perfetto::protos::MmCompactionDeferResetFtraceEvent::MergeFrom(
          from._internal_mm_compaction_defer_reset());
      break;
    }
    case kMmCompactionEnd: {
      _this->_internal_mutable_mm_compaction_end()->::perfetto::protos::MmCompactionEndFtraceEvent::MergeFrom(
          from._internal_mm_compaction_end());
      break;
    }
    case kMmCompactionFinished: {
      _this->_internal_mutable_mm_compaction_finished()->::perfetto::protos::MmCompactionFinishedFtraceEvent::MergeFrom(
          from._internal_mm_compaction_finished());
      break;
    }
    case kMmCompactionIsolateFreepages: {
      _this->_internal_mutable_mm_compaction_isolate_freepages()->::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_isolate_freepages());
      break;
    }
    case kMmCompactionIsolateMigratepages: {
      _this->_internal_mutable_mm_compaction_isolate_migratepages()->::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_isolate_migratepages());
      break;
    }
    case kMmCompactionKcompactdSleep: {
      _this->_internal_mutable_mm_compaction_kcompactd_sleep()->::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent::MergeFrom(
          from._internal_mm_compaction_kcompactd_sleep());
      break;
    }
    case kMmCompactionKcompactdWake: {
      _this->_internal_mutable_mm_compaction_kcompactd_wake()->::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent::MergeFrom(
          from._internal_mm_compaction_kcompactd_wake());
      break;
    }
    case kMmCompactionMigratepages: {
      _this->_internal_mutable_mm_compaction_migratepages()->::perfetto::protos::MmCompactionMigratepagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_migratepages());
      break;
    }
    case kMmCompactionSuitable: {
      _this->_internal_mutable_mm_compaction_suitable()->::perfetto::protos::MmCompactionSuitableFtraceEvent::MergeFrom(
          from._internal_mm_compaction_suitable());
      break;
    }
    case kMmCompactionTryToCompactPages: {
      _this->_internal_mutable_mm_compaction_try_to_compact_pages()->::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent::MergeFrom(
          from._internal_mm_compaction_try_to_compact_pages());
      break;
    }
    case kMmCompactionWakeupKcompactd: {
      _this->_internal_mutable_mm_compaction_wakeup_kcompactd()->::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent::MergeFrom(
          from._internal_mm_compaction_wakeup_kcompactd());
      break;
    }
    case kSuspendResume: {
      _this->_internal_mutable_suspend_resume()->::perfetto::protos::SuspendResumeFtraceEvent::MergeFrom(
          from._internal_suspend_resume());
      break;
    }
    case kSchedWakeupNew: {
      _this->_internal_mutable_sched_wakeup_new()->::perfetto::protos::SchedWakeupNewFtraceEvent::MergeFrom(
          from._internal_sched_wakeup_new());
      break;
    }
    case kBlockBioBackmerge: {
      _this->_internal_mutable_block_bio_backmerge()->::perfetto::protos::BlockBioBackmergeFtraceEvent::MergeFrom(
          from._internal_block_bio_backmerge());
      break;
    }
    case kBlockBioBounce: {
      _this->_internal_mutable_block_bio_bounce()->::perfetto::protos::BlockBioBounceFtraceEvent::MergeFrom(
          from._internal_block_bio_bounce());
      break;
    }
    case kBlockBioComplete: {
      _this->_internal_mutable_block_bio_complete()->::perfetto::protos::BlockBioCompleteFtraceEvent::MergeFrom(
          from._internal_block_bio_complete());
      break;
    }
    case kBlockBioFrontmerge: {
      _this->_internal_mutable_block_bio_frontmerge()->::perfetto::protos::BlockBioFrontmergeFtraceEvent::MergeFrom(
          from._internal_block_bio_frontmerge());
      break;
    }
    case kBlockBioQueue: {
      _this->_internal_mutable_block_bio_queue()->::perfetto::protos::BlockBioQueueFtraceEvent::MergeFrom(
          from._internal_block_bio_queue());
      break;
    }
    case kBlockBioRemap: {
      _this->_internal_mutable_block_bio_remap()->::perfetto::protos::BlockBioRemapFtraceEvent::MergeFrom(
          from._internal_block_bio_remap());
      break;
    }
    case kBlockDirtyBuffer: {
      _this->_internal_mutable_block_dirty_buffer()->::perfetto::protos::BlockDirtyBufferFtraceEvent::MergeFrom(
          from._internal_block_dirty_buffer());
      break;
    }
    case kBlockGetrq: {
      _this->_internal_mutable_block_getrq()->::perfetto::protos::BlockGetrqFtraceEvent::MergeFrom(
          from._internal_block_getrq());
      break;
    }
    case kBlockPlug: {
      _this->_internal_mutable_block_plug()->::perfetto::protos::BlockPlugFtraceEvent::MergeFrom(
          from._internal_block_plug());
      break;
    }
    case kBlockRqAbort: {
      _this->_internal_mutable_block_rq_abort()->::perfetto::protos::BlockRqAbortFtraceEvent::MergeFrom(
          from._internal_block_rq_abort());
      break;
    }
    case kBlockRqComplete: {
      _this->_internal_mutable_block_rq_complete()->::perfetto::protos::BlockRqCompleteFtraceEvent::MergeFrom(
          from._internal_block_rq_complete());
      break;
    }
    case kBlockRqInsert: {
      _this->_internal_mutable_block_rq_insert()->::perfetto::protos::BlockRqInsertFtraceEvent::MergeFrom(
          from._internal_block_rq_insert());
      break;
    }
    case kBlockRqRemap: {
      _this->_internal_mutable_block_rq_remap()->::perfetto::protos::BlockRqRemapFtraceEvent::MergeFrom(
          from._internal_block_rq_remap());
      break;
    }
    case kBlockRqRequeue: {
      _this->_internal_mutable_block_rq_requeue()->::perfetto::protos::BlockRqRequeueFtraceEvent::MergeFrom(
          from._internal_block_rq_requeue());
      break;
    }
    case kBlockSleeprq: {
      _this->_internal_mutable_block_sleeprq()->::perfetto::protos::BlockSleeprqFtraceEvent::MergeFrom(
          from._internal_block_sleeprq());
      break;
    }
    case kBlockSplit: {
      _this->_internal_mutable_block_split()->::perfetto::protos::BlockSplitFtraceEvent::MergeFrom(
          from._internal_block_split());
      break;
    }
    case kBlockTouchBuffer: {
      _this->_internal_mutable_block_touch_buffer()->::perfetto::protos::BlockTouchBufferFtraceEvent::MergeFrom(
          from._internal_block_touch_buffer());
      break;
    }
    case kBlockUnplug: {
      _this->_internal_mutable_block_unplug()->::perfetto::protos::BlockUnplugFtraceEvent::MergeFrom(
          from._internal_block_unplug());
      break;
    }
    case kExt4AllocDaBlocks: {
      _this->_internal_mutable_ext4_alloc_da_blocks()->::perfetto::protos::Ext4AllocDaBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_alloc_da_blocks());
      break;
    }
    case kExt4AllocateBlocks: {
      _this->_internal_mutable_ext4_allocate_blocks()->::perfetto::protos::Ext4AllocateBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_allocate_blocks());
      break;
    }
    case kExt4AllocateInode: {
      _this->_internal_mutable_ext4_allocate_inode()->::perfetto::protos::Ext4AllocateInodeFtraceEvent::MergeFrom(
          from._internal_ext4_allocate_inode());
      break;
    }
    case kExt4BeginOrderedTruncate: {
      _this->_internal_mutable_ext4_begin_ordered_truncate()->::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent::MergeFrom(
          from._internal_ext4_begin_ordered_truncate());
      break;
    }
    case kExt4CollapseRange: {
      _this->_internal_mutable_ext4_collapse_range()->::perfetto::protos::Ext4CollapseRangeFtraceEvent::MergeFrom(
          from._internal_ext4_collapse_range());
      break;
    }
    case kExt4DaReleaseSpace: {
      _this->_internal_mutable_ext4_da_release_space()->::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_da_release_space());
      break;
    }
    case kExt4DaReserveSpace: {
      _this->_internal_mutable_ext4_da_reserve_space()->::perfetto::protos::Ext4DaReserveSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_da_reserve_space());
      break;
    }
    case kExt4DaUpdateReserveSpace: {
      _this->_internal_mutable_ext4_da_update_reserve_space()->::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_da_update_reserve_space());
      break;
    }
    case kExt4DaWritePages: {
      _this->_internal_mutable_ext4_da_write_pages()->::perfetto::protos::Ext4DaWritePagesFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_pages());
      break;
    }
    case kExt4DaWritePagesExtent: {
      _this->_internal_mutable_ext4_da_write_pages_extent()->::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent::MergeFrom(
          from._internal_ext4_da_write_pages_extent());
      break;
    }
    case kExt4DirectIOEnter: {
      _this->_internal_mutable_ext4_direct_io_enter()->::perfetto::protos::Ext4DirectIOEnterFtraceEvent::MergeFrom(
          from._internal_ext4_direct_io_enter());
      break;
    }
    case kExt4DirectIOExit: {
      _this->_internal_mutable_ext4_direct_io_exit()->::perfetto::protos::Ext4DirectIOExitFtraceEvent::MergeFrom(
          from._internal_ext4_direct_io_exit());
      break;
    }
    case kExt4DiscardBlocks: {
      _this->_internal_mutable_ext4_discard_blocks()->::perfetto::protos::Ext4DiscardBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_discard_blocks());
      break;
    }
    case kExt4DiscardPreallocations: {
      _this->_internal_mutable_ext4_discard_preallocations()->::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent::MergeFrom(
          from._internal_ext4_discard_preallocations());
      break;
    }
    case kExt4DropInode: {
      _this->_internal_mutable_ext4_drop_inode()->::perfetto::protos::Ext4DropInodeFtraceEvent::MergeFrom(
          from._internal_ext4_drop_inode());
      break;
    }
    case kExt4EsCacheExtent: {
      _this->_internal_mutable_ext4_es_cache_extent()->::perfetto::protos::Ext4EsCacheExtentFtraceEvent::MergeFrom(
          from._internal_ext4_es_cache_extent());
      break;
    }
    case kExt4EsFindDelayedExtentRangeEnter: {
      _this->_internal_mutable_ext4_es_find_delayed_extent_range_enter()->::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent::MergeFrom(
          from._internal_ext4_es_find_delayed_extent_range_enter());
      break;
    }
    case kExt4EsFindDelayedExtentRangeExit: {
      _this->_internal_mutable_ext4_es_find_delayed_extent_range_exit()->::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent::MergeFrom(
          from._internal_ext4_es_find_delayed_extent_range_exit());
      break;
    }
    case kExt4EsInsertExtent: {
      _this->_internal_mutable_ext4_es_insert_extent()->::perfetto::protos::Ext4EsInsertExtentFtraceEvent::MergeFrom(
          from._internal_ext4_es_insert_extent());
      break;
    }
    case kExt4EsLookupExtentEnter: {
      _this->_internal_mutable_ext4_es_lookup_extent_enter()->::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent::MergeFrom(
          from._internal_ext4_es_lookup_extent_enter());
      break;
    }
    case kExt4EsLookupExtentExit: {
      _this->_internal_mutable_ext4_es_lookup_extent_exit()->::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent::MergeFrom(
          from._internal_ext4_es_lookup_extent_exit());
      break;
    }
    case kExt4EsRemoveExtent: {
      _this->_internal_mutable_ext4_es_remove_extent()->::perfetto::protos::Ext4EsRemoveExtentFtraceEvent::MergeFrom(
          from._internal_ext4_es_remove_extent());
      break;
    }
    case kExt4EsShrink: {
      _this->_internal_mutable_ext4_es_shrink()->::perfetto::protos::Ext4EsShrinkFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink());
      break;
    }
    case kExt4EsShrinkCount: {
      _this->_internal_mutable_ext4_es_shrink_count()->::perfetto::protos::Ext4EsShrinkCountFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink_count());
      break;
    }
    case kExt4EsShrinkScanEnter: {
      _this->_internal_mutable_ext4_es_shrink_scan_enter()->::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink_scan_enter());
      break;
    }
    case kExt4EsShrinkScanExit: {
      _this->_internal_mutable_ext4_es_shrink_scan_exit()->::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent::MergeFrom(
          from._internal_ext4_es_shrink_scan_exit());
      break;
    }
    case kExt4EvictInode: {
      _this->_internal_mutable_ext4_evict_inode()->::perfetto::protos::Ext4EvictInodeFtraceEvent::MergeFrom(
          from._internal_ext4_evict_inode());
      break;
    }
    case kExt4ExtConvertToInitializedEnter: {
      _this->_internal_mutable_ext4_ext_convert_to_initialized_enter()->::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent::MergeFrom(
          from._internal_ext4_ext_convert_to_initialized_enter());
      break;
    }
    case kExt4ExtConvertToInitializedFastpath: {
      _this->_internal_mutable_ext4_ext_convert_to_initialized_fastpath()->::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent::MergeFrom(
          from._internal_ext4_ext_convert_to_initialized_fastpath());
      break;
    }
    case kExt4ExtHandleUnwrittenExtents: {
      _this->_internal_mutable_ext4_ext_handle_unwritten_extents()->::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent::MergeFrom(
          from._internal_ext4_ext_handle_unwritten_extents());
      break;
    }
    case kExt4ExtInCache: {
      _this->_internal_mutable_ext4_ext_in_cache()->::perfetto::protos::Ext4ExtInCacheFtraceEvent::MergeFrom(
          from._internal_ext4_ext_in_cache());
      break;
    }
    case kExt4ExtLoadExtent: {
      _this->_internal_mutable_ext4_ext_load_extent()->::perfetto::protos::Ext4ExtLoadExtentFtraceEvent::MergeFrom(
          from._internal_ext4_ext_load_extent());
      break;
    }
    case kExt4ExtMapBlocksEnter: {
      _this->_internal_mutable_ext4_ext_map_blocks_enter()->::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent::MergeFrom(
          from._internal_ext4_ext_map_blocks_enter());
      break;
    }
    case kExt4ExtMapBlocksExit: {
      _this->_internal_mutable_ext4_ext_map_blocks_exit()->::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent::MergeFrom(
          from._internal_ext4_ext_map_blocks_exit());
      break;
    }
    case kExt4ExtPutInCache: {
      _this->_internal_mutable_ext4_ext_put_in_cache()->::perfetto::protos::Ext4ExtPutInCacheFtraceEvent::MergeFrom(
          from._internal_ext4_ext_put_in_cache());
      break;
    }
    case kExt4ExtRemoveSpace: {
      _this->_internal_mutable_ext4_ext_remove_space()->::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent::MergeFrom(
          from._internal_ext4_ext_remove_space());
      break;
    }
    case kExt4ExtRemoveSpaceDone: {
      _this->_internal_mutable_ext4_ext_remove_space_done()->::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent::MergeFrom(
          from._internal_ext4_ext_remove_space_done());
      break;
    }
    case kExt4ExtRmIdx: {
      _this->_internal_mutable_ext4_ext_rm_idx()->::perfetto::protos::Ext4ExtRmIdxFtraceEvent::MergeFrom(
          from._internal_ext4_ext_rm_idx());
      break;
    }
    case kExt4ExtRmLeaf: {
      _this->_internal_mutable_ext4_ext_rm_leaf()->::perfetto::protos::Ext4ExtRmLeafFtraceEvent::MergeFrom(
          from._internal_ext4_ext_rm_leaf());
      break;
    }
    case kExt4ExtShowExtent: {
      _this->_internal_mutable_ext4_ext_show_extent()->::perfetto::protos::Ext4ExtShowExtentFtraceEvent::MergeFrom(
          from._internal_ext4_ext_show_extent());
      break;
    }
    case kExt4FallocateEnter: {
      _this->_internal_mutable_ext4_fallocate_enter()->::perfetto::protos::Ext4FallocateEnterFtraceEvent::MergeFrom(
          from._internal_ext4_fallocate_enter());
      break;
    }
    case kExt4FallocateExit: {
      _this->_internal_mutable_ext4_fallocate_exit()->::perfetto::protos::Ext4FallocateExitFtraceEvent::MergeFrom(
          from._internal_ext4_fallocate_exit());
      break;
    }
    case kExt4FindDelallocRange: {
      _this->_internal_mutable_ext4_find_delalloc_range()->::perfetto::protos::Ext4FindDelallocRangeFtraceEvent::MergeFrom(
          from._internal_ext4_find_delalloc_range());
      break;
    }
    case kExt4Forget: {
      _this->_internal_mutable_ext4_forget()->::perfetto::protos::Ext4ForgetFtraceEvent::MergeFrom(
          from._internal_ext4_forget());
      break;
    }
    case kExt4FreeBlocks: {
      _this->_internal_mutable_ext4_free_blocks()->::perfetto::protos::Ext4FreeBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_free_blocks());
      break;
    }
    case kExt4FreeInode: {
      _this->_internal_mutable_ext4_free_inode()->::perfetto::protos::Ext4FreeInodeFtraceEvent::MergeFrom(
          from._internal_ext4_free_inode());
      break;
    }
    case kExt4GetImpliedClusterAllocExit: {
      _this->_internal_mutable_ext4_get_implied_cluster_alloc_exit()->::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent::MergeFrom(
          from._internal_ext4_get_implied_cluster_alloc_exit());
      break;
    }
    case kExt4GetReservedClusterAlloc: {
      _this->_internal_mutable_ext4_get_reserved_cluster_alloc()->::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent::MergeFrom(
          from._internal_ext4_get_reserved_cluster_alloc());
      break;
    }
    case kExt4IndMapBlocksEnter: {
      _this->_internal_mutable_ext4_ind_map_blocks_enter()->::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent::MergeFrom(
          from._internal_ext4_ind_map_blocks_enter());
      break;
    }
    case kExt4IndMapBlocksExit: {
      _this->_internal_mutable_ext4_ind_map_blocks_exit()->::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent::MergeFrom(
          from._internal_ext4_ind_map_blocks_exit());
      break;
    }
    case kExt4InsertRange: {
      _this->_internal_mutable_ext4_insert_range()->::perfetto::protos::Ext4InsertRangeFtraceEvent::MergeFrom(
          from._internal_ext4_insert_range());
      break;
    }
    case kExt4Invalidatepage: {
      _this->_internal_mutable_ext4_invalidatepage()->::perfetto::protos::Ext4InvalidatepageFtraceEvent::MergeFrom(
          from._internal_ext4_invalidatepage());
      break;
    }
    case kExt4JournalStart: {
      _this->_internal_mutable_ext4_journal_start()->::perfetto::protos::Ext4JournalStartFtraceEvent::MergeFrom(
          from._internal_ext4_journal_start());
      break;
    }
    case kExt4JournalStartReserved: {
      _this->_internal_mutable_ext4_journal_start_reserved()->::perfetto::protos::Ext4JournalStartReservedFtraceEvent::MergeFrom(
          from._internal_ext4_journal_start_reserved());
      break;
    }
    case kExt4JournalledInvalidatepage: {
      _this->_internal_mutable_ext4_journalled_invalidatepage()->::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent::MergeFrom(
          from._internal_ext4_journalled_invalidatepage());
      break;
    }
    case kExt4JournalledWriteEnd: {
      _this->_internal_mutable_ext4_journalled_write_end()->::perfetto::protos::Ext4JournalledWriteEndFtraceEvent::MergeFrom(
          from._internal_ext4_journalled_write_end());
      break;
    }
    case kExt4LoadInode: {
      _this->_internal_mutable_ext4_load_inode()->::perfetto::protos::Ext4LoadInodeFtraceEvent::MergeFrom(
          from._internal_ext4_load_inode());
      break;
    }
    case kExt4LoadInodeBitmap: {
      _this->_internal_mutable_ext4_load_inode_bitmap()->::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent::MergeFrom(
          from._internal_ext4_load_inode_bitmap());
      break;
    }
    case kExt4MarkInodeDirty: {
      _this->_internal_mutable_ext4_mark_inode_dirty()->::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent::MergeFrom(
          from._internal_ext4_mark_inode_dirty());
      break;
    }
    case kExt4MbBitmapLoad: {
      _this->_internal_mutable_ext4_mb_bitmap_load()->::perfetto::protos::Ext4MbBitmapLoadFtraceEvent::MergeFrom(
          from._internal_ext4_mb_bitmap_load());
      break;
    }
    case kExt4MbBuddyBitmapLoad: {
      _this->_internal_mutable_ext4_mb_buddy_bitmap_load()->::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent::MergeFrom(
          from._internal_ext4_mb_buddy_bitmap_load());
      break;
    }
    case kExt4MbDiscardPreallocations: {
      _this->_internal_mutable_ext4_mb_discard_preallocations()->::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent::MergeFrom(
          from._internal_ext4_mb_discard_preallocations());
      break;
    }
    case kExt4MbNewGroupPa: {
      _this->_internal_mutable_ext4_mb_new_group_pa()->::perfetto::protos::Ext4MbNewGroupPaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_new_group_pa());
      break;
    }
    case kExt4MbNewInodePa: {
      _this->_internal_mutable_ext4_mb_new_inode_pa()->::perfetto::protos::Ext4MbNewInodePaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_new_inode_pa());
      break;
    }
    case kExt4MbReleaseGroupPa: {
      _this->_internal_mutable_ext4_mb_release_group_pa()->::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_release_group_pa());
      break;
    }
    case kExt4MbReleaseInodePa: {
      _this->_internal_mutable_ext4_mb_release_inode_pa()->::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent::MergeFrom(
          from._internal_ext4_mb_release_inode_pa());
      break;
    }
    case kExt4MballocAlloc: {
      _this->_internal_mutable_ext4_mballoc_alloc()->::perfetto::protos::Ext4MballocAllocFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_alloc());
      break;
    }
    case kExt4MballocDiscard: {
      _this->_internal_mutable_ext4_mballoc_discard()->::perfetto::protos::Ext4MballocDiscardFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_discard());
      break;
    }
    case kExt4MballocFree: {
      _this->_internal_mutable_ext4_mballoc_free()->::perfetto::protos::Ext4MballocFreeFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_free());
      break;
    }
    case kExt4MballocPrealloc: {
      _this->_internal_mutable_ext4_mballoc_prealloc()->::perfetto::protos::Ext4MballocPreallocFtraceEvent::MergeFrom(
          from._internal_ext4_mballoc_prealloc());
      break;
    }
    case kExt4OtherInodeUpdateTime: {
      _this->_internal_mutable_ext4_other_inode_update_time()->::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent::MergeFrom(
          from._internal_ext4_other_inode_update_time());
      break;
    }
    case kExt4PunchHole: {
      _this->_internal_mutable_ext4_punch_hole()->::perfetto::protos::Ext4PunchHoleFtraceEvent::MergeFrom(
          from._internal_ext4_punch_hole());
      break;
    }
    case kExt4ReadBlockBitmapLoad: {
      _this->_internal_mutable_ext4_read_block_bitmap_load()->::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent::MergeFrom(
          from._internal_ext4_read_block_bitmap_load());
      break;
    }
    case kExt4Readpage: {
      _this->_internal_mutable_ext4_readpage()->::perfetto::protos::Ext4ReadpageFtraceEvent::MergeFrom(
          from._internal_ext4_readpage());
      break;
    }
    case kExt4Releasepage: {
      _this->_internal_mutable_ext4_releasepage()->::perfetto::protos::Ext4ReleasepageFtraceEvent::MergeFrom(
          from._internal_ext4_releasepage());
      break;
    }
    case kExt4RemoveBlocks: {
      _this->_internal_mutable_ext4_remove_blocks()->::perfetto::protos::Ext4RemoveBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_remove_blocks());
      break;
    }
    case kExt4RequestBlocks: {
      _this->_internal_mutable_ext4_request_blocks()->::perfetto::protos::Ext4RequestBlocksFtraceEvent::MergeFrom(
          from._internal_ext4_request_blocks());
      break;
    }
    case kExt4RequestInode: {
      _this->_internal_mutable_ext4_request_inode()->::perfetto::protos::Ext4RequestInodeFtraceEvent::MergeFrom(
          from._internal_ext4_request_inode());
      break;
    }
    case kExt4SyncFs: {
      _this->_internal_mutable_ext4_sync_fs()->::perfetto::protos::Ext4SyncFsFtraceEvent::MergeFrom(
          from._internal_ext4_sync_fs());
      break;
    }
    case kExt4TrimAllFree: {
      _this->_internal_mutable_ext4_trim_all_free()->::perfetto::protos::Ext4TrimAllFreeFtraceEvent::MergeFrom(
          from._internal_ext4_trim_all_free());
      break;
    }
    case kExt4TrimExtent: {
      _this->_internal_mutable_ext4_trim_extent()->::perfetto::protos::Ext4TrimExtentFtraceEvent::MergeFrom(
          from._internal_ext4_trim_extent());
      break;
    }
    case kExt4TruncateEnter: {
      _this->_internal_mutable_ext4_truncate_enter()->::perfetto::protos::Ext4TruncateEnterFtraceEvent::MergeFrom(
          from._internal_ext4_truncate_enter());
      break;
    }
    case kExt4TruncateExit: {
      _this->_internal_mutable_ext4_truncate_exit()->::perfetto::protos::Ext4TruncateExitFtraceEvent::MergeFrom(
          from._internal_ext4_truncate_exit());
      break;
    }
    case kExt4UnlinkEnter: {
      _this->_internal_mutable_ext4_unlink_enter()->::perfetto::protos::Ext4UnlinkEnterFtraceEvent::MergeFrom(
          from._internal_ext4_unlink_enter());
      break;
    }
    case kExt4UnlinkExit: {
      _this->_internal_mutable_ext4_unlink_exit()->::perfetto::protos::Ext4UnlinkExitFtraceEvent::MergeFrom(
          from._internal_ext4_unlink_exit());
      break;
    }
    case kExt4WriteBegin: {
      _this->_internal_mutable_ext4_write_begin()->::perfetto::protos::Ext4WriteBeginFtraceEvent::MergeFrom(
          from._internal_ext4_write_begin());
      break;
    }
    case kExt4WriteEnd: {
      _this->_internal_mutable_ext4_write_end()->::perfetto::protos::Ext4WriteEndFtraceEvent::MergeFrom(
          from._internal_ext4_write_end());
      break;
    }
    case kExt4Writepage: {
      _this->_internal_mutable_ext4_writepage()->::perfetto::protos::Ext4WritepageFtraceEvent::MergeFrom(
          from._internal_ext4_writepage());
      break;
    }
    case kExt4Writepages: {
      _this->_internal_mutable_ext4_writepages()->::perfetto::protos::Ext4WritepagesFtraceEvent::MergeFrom(
          from._internal_ext4_writepages());
      break;
    }
    case kExt4WritepagesResult: {
      _this->_internal_mutable_ext4_writepages_result()->::perfetto::protos::Ext4WritepagesResultFtraceEvent::MergeFrom(
          from._internal_ext4_writepages_result());
      break;
    }
    case kExt4ZeroRange: {
      _this->_internal_mutable_ext4_zero_range()->::perfetto::protos::Ext4ZeroRangeFtraceEvent::MergeFrom(
          from._internal_ext4_zero_range());
      break;
    }
    case kTaskNewtask: {
      _this->_internal_mutable_task_newtask()->::perfetto::protos::TaskNewtaskFtraceEvent::MergeFrom(
          from._internal_task_newtask());
      break;
    }
    case kTaskRename: {
      _this->_internal_mutable_task_rename()->::perfetto::protos::TaskRenameFtraceEvent::MergeFrom(
          from._internal_task_rename());
      break;
    }
    case kSchedProcessExec: {
      _this->_internal_mutable_sched_process_exec()->::perfetto::protos::SchedProcessExecFtraceEvent::MergeFrom(
          from._internal_sched_process_exec());
      break;
    }
    case kSchedProcessExit: {
      _this->_internal_mutable_sched_process_exit()->::perfetto::protos::SchedProcessExitFtraceEvent::MergeFrom(
          from._internal_sched_process_exit());
      break;
    }
    case kSchedProcessFork: {
      _this->_internal_mutable_sched_process_fork()->::perfetto::protos::SchedProcessForkFtraceEvent::MergeFrom(
          from._internal_sched_process_fork());
      break;
    }
    case kSchedProcessFree: {
      _this->_internal_mutable_sched_process_free()->::perfetto::protos::SchedProcessFreeFtraceEvent::MergeFrom(
          from._internal_sched_process_free());
      break;
    }
    case kSchedProcessHang: {
      _this->_internal_mutable_sched_process_hang()->::perfetto::protos::SchedProcessHangFtraceEvent::MergeFrom(
          from._internal_sched_process_hang());
      break;
    }
    case kSchedProcessWait: {
      _this->_internal_mutable_sched_process_wait()->::perfetto::protos::SchedProcessWaitFtraceEvent::MergeFrom(
          from._internal_sched_process_wait());
      break;
    }
    case kF2FsDoSubmitBio: {
      _this->_internal_mutable_f2fs_do_submit_bio()->::perfetto::protos::F2fsDoSubmitBioFtraceEvent::MergeFrom(
          from._internal_f2fs_do_submit_bio());
      break;
    }
    case kF2FsEvictInode: {
      _this->_internal_mutable_f2fs_evict_inode()->::perfetto::protos::F2fsEvictInodeFtraceEvent::MergeFrom(
          from._internal_f2fs_evict_inode());
      break;
    }
    case kF2FsFallocate: {
      _this->_internal_mutable_f2fs_fallocate()->::perfetto::protos::F2fsFallocateFtraceEvent::MergeFrom(
          from._internal_f2fs_fallocate());
      break;
    }
    case kF2FsGetDataBlock: {
      _this->_internal_mutable_f2fs_get_data_block()->::perfetto::protos::F2fsGetDataBlockFtraceEvent::MergeFrom(
          from._internal_f2fs_get_data_block());
      break;
    }
    case kF2FsGetVictim: {
      _this->_internal_mutable_f2fs_get_victim()->::perfetto::protos::F2fsGetVictimFtraceEvent::MergeFrom(
          from._internal_f2fs_get_victim());
      break;
    }
    case kF2FsIget: {
      _this->_internal_mutable_f2fs_iget()->::perfetto::protos::F2fsIgetFtraceEvent::MergeFrom(
          from._internal_f2fs_iget());
      break;
    }
    case kF2FsIgetExit: {
      _this->_internal_mutable_f2fs_iget_exit()->::perfetto::protos::F2fsIgetExitFtraceEvent::MergeFrom(
          from._internal_f2fs_iget_exit());
      break;
    }
    case kF2FsNewInode: {
      _this->_internal_mutable_f2fs_new_inode()->::perfetto::protos::F2fsNewInodeFtraceEvent::MergeFrom(
          from._internal_f2fs_new_inode());
      break;
    }
    case kF2FsReadpage: {
      _this->_internal_mutable_f2fs_readpage()->::perfetto::protos::F2fsReadpageFtraceEvent::MergeFrom(
          from._internal_f2fs_readpage());
      break;
    }
    case kF2FsReserveNewBlock: {
      _this->_internal_mutable_f2fs_reserve_new_block()->::perfetto::protos::F2fsReserveNewBlockFtraceEvent::MergeFrom(
          from._internal_f2fs_reserve_new_block());
      break;
    }
    case kF2FsSetPageDirty: {
      _this->_internal_mutable_f2fs_set_page_dirty()->::perfetto::protos::F2fsSetPageDirtyFtraceEvent::MergeFrom(
          from._internal_f2fs_set_page_dirty());
      break;
    }
    case kF2FsSubmitWritePage: {
      _this->_internal_mutable_f2fs_submit_write_page()->::perfetto::protos::F2fsSubmitWritePageFtraceEvent::MergeFrom(
          from._internal_f2fs_submit_write_page());
      break;
    }
    case kF2FsSyncFileEnter: {
      _this->_internal_mutable_f2fs_sync_file_enter()->::perfetto::protos::F2fsSyncFileEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_sync_file_enter());
      break;
    }
    case kF2FsSyncFileExit: {
      _this->_internal_mutable_f2fs_sync_file_exit()->::perfetto::protos::F2fsSyncFileExitFtraceEvent::MergeFrom(
          from._internal_f2fs_sync_file_exit());
      break;
    }
    case kF2FsSyncFs: {
      _this->_internal_mutable_f2fs_sync_fs()->::perfetto::protos::F2fsSyncFsFtraceEvent::MergeFrom(
          from._internal_f2fs_sync_fs());
      break;
    }
    case kF2FsTruncate: {
      _this->_internal_mutable_f2fs_truncate()->::perfetto::protos::F2fsTruncateFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate());
      break;
    }
    case kF2FsTruncateBlocksEnter: {
      _this->_internal_mutable_f2fs_truncate_blocks_enter()->::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_blocks_enter());
      break;
    }
    case kF2FsTruncateBlocksExit: {
      _this->_internal_mutable_f2fs_truncate_blocks_exit()->::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_blocks_exit());
      break;
    }
    case kF2FsTruncateDataBlocksRange: {
      _this->_internal_mutable_f2fs_truncate_data_blocks_range()->::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_data_blocks_range());
      break;
    }
    case kF2FsTruncateInodeBlocksEnter: {
      _this->_internal_mutable_f2fs_truncate_inode_blocks_enter()->::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_inode_blocks_enter());
      break;
    }
    case kF2FsTruncateInodeBlocksExit: {
      _this->_internal_mutable_f2fs_truncate_inode_blocks_exit()->::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_inode_blocks_exit());
      break;
    }
    case kF2FsTruncateNode: {
      _this->_internal_mutable_f2fs_truncate_node()->::perfetto::protos::F2fsTruncateNodeFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_node());
      break;
    }
    case kF2FsTruncateNodesEnter: {
      _this->_internal_mutable_f2fs_truncate_nodes_enter()->::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_nodes_enter());
      break;
    }
    case kF2FsTruncateNodesExit: {
      _this->_internal_mutable_f2fs_truncate_nodes_exit()->::perfetto::protos::F2fsTruncateNodesExitFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_nodes_exit());
      break;
    }
    case kF2FsTruncatePartialNodes: {
      _this->_internal_mutable_f2fs_truncate_partial_nodes()->::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent::MergeFrom(
          from._internal_f2fs_truncate_partial_nodes());
      break;
    }
    case kF2FsUnlinkEnter: {
      _this->_internal_mutable_f2fs_unlink_enter()->::perfetto::protos::F2fsUnlinkEnterFtraceEvent::MergeFrom(
          from._internal_f2fs_unlink_enter());
      break;
    }
    case kF2FsUnlinkExit: {
      _this->_internal_mutable_f2fs_unlink_exit()->::perfetto::protos::F2fsUnlinkExitFtraceEvent::MergeFrom(
          from._internal_f2fs_unlink_exit());
      break;
    }
    case kF2FsVmPageMkwrite: {
      _this->_internal_mutable_f2fs_vm_page_mkwrite()->::perfetto::protos::F2fsVmPageMkwriteFtraceEvent::MergeFrom(
          from._internal_f2fs_vm_page_mkwrite());
      break;
    }
    case kF2FsWriteBegin: {
      _this->_internal_mutable_f2fs_write_begin()->::perfetto::protos::F2fsWriteBeginFtraceEvent::MergeFrom(
          from._internal_f2fs_write_begin());
      break;
    }
    case kF2FsWriteCheckpoint: {
      _this->_internal_mutable_f2fs_write_checkpoint()->::perfetto::protos::F2fsWriteCheckpointFtraceEvent::MergeFrom(
          from._internal_f2fs_write_checkpoint());
      break;
    }
    case kF2FsWriteEnd: {
      _this->_internal_mutable_f2fs_write_end()->::perfetto::protos::F2fsWriteEndFtraceEvent::MergeFrom(
          from._internal_f2fs_write_end());
      break;
    }
    case kAllocPagesIommuEnd: {
      _this->_internal_mutable_alloc_pages_iommu_end()->::perfetto::protos::AllocPagesIommuEndFtraceEvent::MergeFrom(
          from._internal_alloc_pages_iommu_end());
      break;
    }
    case kAllocPagesIommuFail: {
      _this->_internal_mutable_alloc_pages_iommu_fail()->::perfetto::protos::AllocPagesIommuFailFtraceEvent::MergeFrom(
          from._internal_alloc_pages_iommu_fail());
      break;
    }
    case kAllocPagesIommuStart: {
      _this->_internal_mutable_alloc_pages_iommu_start()->::perfetto::protos::AllocPagesIommuStartFtraceEvent::MergeFrom(
          from._internal_alloc_pages_iommu_start());
      break;
    }
    case kAllocPagesSysEnd: {
      _this->_internal_mutable_alloc_pages_sys_end()->::perfetto::protos::AllocPagesSysEndFtraceEvent::MergeFrom(
          from._internal_alloc_pages_sys_end());
      break;
    }
    case kAllocPagesSysFail: {
      _this->_internal_mutable_alloc_pages_sys_fail()->::perfetto::protos::AllocPagesSysFailFtraceEvent::MergeFrom(
          from._internal_alloc_pages_sys_fail());
      break;
    }
    case kAllocPagesSysStart: {
      _this->_internal_mutable_alloc_pages_sys_start()->::perfetto::protos::AllocPagesSysStartFtraceEvent::MergeFrom(
          from._internal_alloc_pages_sys_start());
      break;
    }
    case kDmaAllocContiguousRetry: {
      _this->_internal_mutable_dma_alloc_contiguous_retry()->::perfetto::protos::DmaAllocContiguousRetryFtraceEvent::MergeFrom(
          from._internal_dma_alloc_contiguous_retry());
      break;
    }
    case kIommuMapRange: {
      _this->_internal_mutable_iommu_map_range()->::perfetto::protos::IommuMapRangeFtraceEvent::MergeFrom(
          from._internal_iommu_map_range());
      break;
    }
    case kIommuSecPtblMapRangeEnd: {
      _this->_internal_mutable_iommu_sec_ptbl_map_range_end()->::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent::MergeFrom(
          from._internal_iommu_sec_ptbl_map_range_end());
      break;
    }
    case kIommuSecPtblMapRangeStart: {
      _this->_internal_mutable_iommu_sec_ptbl_map_range_start()->::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent::MergeFrom(
          from._internal_iommu_sec_ptbl_map_range_start());
      break;
    }
    case kIonAllocBufferEnd: {
      _this->_internal_mutable_ion_alloc_buffer_end()->::perfetto::protos::IonAllocBufferEndFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_end());
      break;
    }
    case kIonAllocBufferFail: {
      _this->_internal_mutable_ion_alloc_buffer_fail()->::perfetto::protos::IonAllocBufferFailFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_fail());
      break;
    }
    case kIonAllocBufferFallback: {
      _this->_internal_mutable_ion_alloc_buffer_fallback()->::perfetto::protos::IonAllocBufferFallbackFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_fallback());
      break;
    }
    case kIonAllocBufferStart: {
      _this->_internal_mutable_ion_alloc_buffer_start()->::perfetto::protos::IonAllocBufferStartFtraceEvent::MergeFrom(
          from._internal_ion_alloc_buffer_start());
      break;
    }
    case kIonCpAllocRetry: {
      _this->_internal_mutable_ion_cp_alloc_retry()->::perfetto::protos::IonCpAllocRetryFtraceEvent::MergeFrom(
          from._internal_ion_cp_alloc_retry());
      break;
    }
    case kIonCpSecureBufferEnd: {
      _this->_internal_mutable_ion_cp_secure_buffer_end()->::perfetto::protos::IonCpSecureBufferEndFtraceEvent::MergeFrom(
          from._internal_ion_cp_secure_buffer_end());
      break;
    }
    case kIonCpSecureBufferStart: {
      _this->_internal_mutable_ion_cp_secure_buffer_start()->::perfetto::protos::IonCpSecureBufferStartFtraceEvent::MergeFrom(
          from._internal_ion_cp_secure_buffer_start());
      break;
    }
    case kIonPrefetching: {
      _this->_internal_mutable_ion_prefetching()->::perfetto::protos::IonPrefetchingFtraceEvent::MergeFrom(
          from._internal_ion_prefetching());
      break;
    }
    case kIonSecureCmaAddToPoolEnd: {
      _this->_internal_mutable_ion_secure_cma_add_to_pool_end()->::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_add_to_pool_end());
      break;
    }
    case kIonSecureCmaAddToPoolStart: {
      _this->_internal_mutable_ion_secure_cma_add_to_pool_start()->::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_add_to_pool_start());
      break;
    }
    case kIonSecureCmaAllocateEnd: {
      _this->_internal_mutable_ion_secure_cma_allocate_end()->::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_allocate_end());
      break;
    }
    case kIonSecureCmaAllocateStart: {
      _this->_internal_mutable_ion_secure_cma_allocate_start()->::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_allocate_start());
      break;
    }
    case kIonSecureCmaShrinkPoolEnd: {
      _this->_internal_mutable_ion_secure_cma_shrink_pool_end()->::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_shrink_pool_end());
      break;
    }
    case kIonSecureCmaShrinkPoolStart: {
      _this->_internal_mutable_ion_secure_cma_shrink_pool_start()->::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent::MergeFrom(
          from._internal_ion_secure_cma_shrink_pool_start());
      break;
    }
    case kKfree: {
      _this->_internal_mutable_kfree()->::perfetto::protos::KfreeFtraceEvent::MergeFrom(
          from._internal_kfree());
      break;
    }
    case kKmalloc: {
      _this->_internal_mutable_kmalloc()->::perfetto::protos::KmallocFtraceEvent::MergeFrom(
          from._internal_kmalloc());
      break;
    }
    case kKmallocNode: {
      _this->_internal_mutable_kmalloc_node()->::perfetto::protos::KmallocNodeFtraceEvent::MergeFrom(
          from._internal_kmalloc_node());
      break;
    }
    case kKmemCacheAlloc: {
      _this->_internal_mutable_kmem_cache_alloc()->::perfetto::protos::KmemCacheAllocFtraceEvent::MergeFrom(
          from._internal_kmem_cache_alloc());
      break;
    }
    case kKmemCacheAllocNode: {
      _this->_internal_mutable_kmem_cache_alloc_node()->::perfetto::protos::KmemCacheAllocNodeFtraceEvent::MergeFrom(
          from._internal_kmem_cache_alloc_node());
      break;
    }
    case kKmemCacheFree: {
      _this->_internal_mutable_kmem_cache_free()->::perfetto::protos::KmemCacheFreeFtraceEvent::MergeFrom(
          from._internal_kmem_cache_free());
      break;
    }
    case kMigratePagesEnd: {
      _this->_internal_mutable_migrate_pages_end()->::perfetto::protos::MigratePagesEndFtraceEvent::MergeFrom(
          from._internal_migrate_pages_end());
      break;
    }
    case kMigratePagesStart: {
      _this->_internal_mutable_migrate_pages_start()->::perfetto::protos::MigratePagesStartFtraceEvent::MergeFrom(
          from._internal_migrate_pages_start());
      break;
    }
    case kMigrateRetry: {
      _this->_internal_mutable_migrate_retry()->::perfetto::protos::MigrateRetryFtraceEvent::MergeFrom(
          from._internal_migrate_retry());
      break;
    }
    case kMmPageAlloc: {
      _this->_internal_mutable_mm_page_alloc()->::perfetto::protos::MmPageAllocFtraceEvent::MergeFrom(
          from._internal_mm_page_alloc());
      break;
    }
    case kMmPageAllocExtfrag: {
      _this->_internal_mutable_mm_page_alloc_extfrag()->::perfetto::protos::MmPageAllocExtfragFtraceEvent::MergeFrom(
          from._internal_mm_page_alloc_extfrag());
      break;
    }
    case kMmPageAllocZoneLocked: {
      _this->_internal_mutable_mm_page_alloc_zone_locked()->::perfetto::protos::MmPageAllocZoneLockedFtraceEvent::MergeFrom(
          from._internal_mm_page_alloc_zone_locked());
      break;
    }
    case kMmPageFree: {
      _this->_internal_mutable_mm_page_free()->::perfetto::protos::MmPageFreeFtraceEvent::MergeFrom(
          from._internal_mm_page_free());
      break;
    }
    case kMmPageFreeBatched: {
      _this->_internal_mutable_mm_page_free_batched()->::perfetto::protos::MmPageFreeBatchedFtraceEvent::MergeFrom(
          from._internal_mm_page_free_batched());
      break;
    }
    case kMmPagePcpuDrain: {
      _this->_internal_mutable_mm_page_pcpu_drain()->::perfetto::protos::MmPagePcpuDrainFtraceEvent::MergeFrom(
          from._internal_mm_page_pcpu_drain());
      break;
    }
    case kRssStat: {
      _this->_internal_mutable_rss_stat()->::perfetto::protos::RssStatFtraceEvent::MergeFrom(
          from._internal_rss_stat());
      break;
    }
    case kIonHeapShrink: {
      _this->_internal_mutable_ion_heap_shrink()->::perfetto::protos::IonHeapShrinkFtraceEvent::MergeFrom(
          from._internal_ion_heap_shrink());
      break;
    }
    case kIonHeapGrow: {
      _this->_internal_mutable_ion_heap_grow()->::perfetto::protos::IonHeapGrowFtraceEvent::MergeFrom(
          from._internal_ion_heap_grow());
      break;
    }
    case kFenceInit: {
      _this->_internal_mutable_fence_init()->::perfetto::protos::FenceInitFtraceEvent::MergeFrom(
          from._internal_fence_init());
      break;
    }
    case kFenceDestroy: {
      _this->_internal_mutable_fence_destroy()->::perfetto::protos::FenceDestroyFtraceEvent::MergeFrom(
          from._internal_fence_destroy());
      break;
    }
    case kFenceEnableSignal: {
      _this->_internal_mutable_fence_enable_signal()->::perfetto::protos::FenceEnableSignalFtraceEvent::MergeFrom(
          from._internal_fence_enable_signal());
      break;
    }
    case kFenceSignaled: {
      _this->_internal_mutable_fence_signaled()->::perfetto::protos::FenceSignaledFtraceEvent::MergeFrom(
          from._internal_fence_signaled());
      break;
    }
    case kClkEnable: {
      _this->_internal_mutable_clk_enable()->::perfetto::protos::ClkEnableFtraceEvent::MergeFrom(
          from._internal_clk_enable());
      break;
    }
    case kClkDisable: {
      _this->_internal_mutable_clk_disable()->::perfetto::protos::ClkDisableFtraceEvent::MergeFrom(
          from._internal_clk_disable());
      break;
    }
    case kClkSetRate: {
      _this->_internal_mutable_clk_set_rate()->::perfetto::protos::ClkSetRateFtraceEvent::MergeFrom(
          from._internal_clk_set_rate());
      break;
    }
    case kBinderTransactionAllocBuf: {
      _this->_internal_mutable_binder_transaction_alloc_buf()->::perfetto::protos::BinderTransactionAllocBufFtraceEvent::MergeFrom(
          from._internal_binder_transaction_alloc_buf());
      break;
    }
    case kSignalDeliver: {
      _this->_internal_mutable_signal_deliver()->::perfetto::protos::SignalDeliverFtraceEvent::MergeFrom(
          from._internal_signal_deliver());
      break;
    }
    case kSignalGenerate: {
      _this->_internal_mutable_signal_generate()->::perfetto::protos::SignalGenerateFtraceEvent::MergeFrom(
          from._internal_signal_generate());
      break;
    }
    case kOomScoreAdjUpdate: {
      _this->_internal_mutable_oom_score_adj_update()->::perfetto::protos::OomScoreAdjUpdateFtraceEvent::MergeFrom(
          from._internal_oom_score_adj_update());
      break;
    }
    case kGeneric: {
      _this->_internal_mutable_generic()->::perfetto::protos::GenericFtraceEvent::MergeFrom(
          from._internal_generic());
      break;
    }
    case kMmEventRecord: {
      _this->_internal_mutable_mm_event_record()->::perfetto::protos::MmEventRecordFtraceEvent::MergeFrom(
          from._internal_mm_event_record());
      break;
    }
    case kSysEnter: {
      _this->_internal_mutable_sys_enter()->::perfetto::protos::SysEnterFtraceEvent::MergeFrom(
          from._internal_sys_enter());
      break;
    }
    case kSysExit: {
      _this->_internal_mutable_sys_exit()->::perfetto::protos::SysExitFtraceEvent::MergeFrom(
          from._internal_sys_exit());
      break;
    }
    case kZero: {
      _this->_internal_mutable_zero()->::perfetto::protos::ZeroFtraceEvent::MergeFrom(
          from._internal_zero());
      break;
    }
    case kGpuFrequency: {
      _this->_internal_mutable_gpu_frequency()->::perfetto::protos::GpuFrequencyFtraceEvent::MergeFrom(
          from._internal_gpu_frequency());
      break;
    }
    case kSdeTracingMarkWrite: {
      _this->_internal_mutable_sde_tracing_mark_write()->::perfetto::protos::SdeTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_sde_tracing_mark_write());
      break;
    }
    case kMarkVictim: {
      _this->_internal_mutable_mark_victim()->::perfetto::protos::MarkVictimFtraceEvent::MergeFrom(
          from._internal_mark_victim());
      break;
    }
    case kIonStat: {
      _this->_internal_mutable_ion_stat()->::perfetto::protos::IonStatFtraceEvent::MergeFrom(
          from._internal_ion_stat());
      break;
    }
    case kIonBufferCreate: {
      _this->_internal_mutable_ion_buffer_create()->::perfetto::protos::IonBufferCreateFtraceEvent::MergeFrom(
          from._internal_ion_buffer_create());
      break;
    }
    case kIonBufferDestroy: {
      _this->_internal_mutable_ion_buffer_destroy()->::perfetto::protos::IonBufferDestroyFtraceEvent::MergeFrom(
          from._internal_ion_buffer_destroy());
      break;
    }
    case kScmCallStart: {
      _this->_internal_mutable_scm_call_start()->::perfetto::protos::ScmCallStartFtraceEvent::MergeFrom(
          from._internal_scm_call_start());
      break;
    }
    case kScmCallEnd: {
      _this->_internal_mutable_scm_call_end()->::perfetto::protos::ScmCallEndFtraceEvent::MergeFrom(
          from._internal_scm_call_end());
      break;
    }
    case kGpuMemTotal: {
      _this->_internal_mutable_gpu_mem_total()->::perfetto::protos::GpuMemTotalFtraceEvent::MergeFrom(
          from._internal_gpu_mem_total());
      break;
    }
    case kThermalTemperature: {
      _this->_internal_mutable_thermal_temperature()->::perfetto::protos::ThermalTemperatureFtraceEvent::MergeFrom(
          from._internal_thermal_temperature());
      break;
    }
    case kCdevUpdate: {
      _this->_internal_mutable_cdev_update()->::perfetto::protos::CdevUpdateFtraceEvent::MergeFrom(
          from._internal_cdev_update());
      break;
    }
    case kCpuhpExit: {
      _this->_internal_mutable_cpuhp_exit()->::perfetto::protos::CpuhpExitFtraceEvent::MergeFrom(
          from._internal_cpuhp_exit());
      break;
    }
    case kCpuhpMultiEnter: {
      _this->_internal_mutable_cpuhp_multi_enter()->::perfetto::protos::CpuhpMultiEnterFtraceEvent::MergeFrom(
          from._internal_cpuhp_multi_enter());
      break;
    }
    case kCpuhpEnter: {
      _this->_internal_mutable_cpuhp_enter()->::perfetto::protos::CpuhpEnterFtraceEvent::MergeFrom(
          from._internal_cpuhp_enter());
      break;
    }
    case kCpuhpLatency: {
      _this->_internal_mutable_cpuhp_latency()->::perfetto::protos::CpuhpLatencyFtraceEvent::MergeFrom(
          from._internal_cpuhp_latency());
      break;
    }
    case kFastrpcDmaStat: {
      _this->_internal_mutable_fastrpc_dma_stat()->::perfetto::protos::FastrpcDmaStatFtraceEvent::MergeFrom(
          from._internal_fastrpc_dma_stat());
      break;
    }
    case kDpuTracingMarkWrite: {
      _this->_internal_mutable_dpu_tracing_mark_write()->::perfetto::protos::DpuTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_dpu_tracing_mark_write());
      break;
    }
    case kG2DTracingMarkWrite: {
      _this->_internal_mutable_g2d_tracing_mark_write()->::perfetto::protos::G2dTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_g2d_tracing_mark_write());
      break;
    }
    case kMaliTracingMarkWrite: {
      _this->_internal_mutable_mali_tracing_mark_write()->::perfetto::protos::MaliTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_mali_tracing_mark_write());
      break;
    }
    case kDmaHeapStat: {
      _this->_internal_mutable_dma_heap_stat()->::perfetto::protos::DmaHeapStatFtraceEvent::MergeFrom(
          from._internal_dma_heap_stat());
      break;
    }
    case kCpuhpPause: {
      _this->_internal_mutable_cpuhp_pause()->::perfetto::protos::CpuhpPauseFtraceEvent::MergeFrom(
          from._internal_cpuhp_pause());
      break;
    }
    case kSchedPiSetprio: {
      _this->_internal_mutable_sched_pi_setprio()->::perfetto::protos::SchedPiSetprioFtraceEvent::MergeFrom(
          from._internal_sched_pi_setprio());
      break;
    }
    case kSdeSdeEvtlog: {
      _this->_internal_mutable_sde_sde_evtlog()->::perfetto::protos::SdeSdeEvtlogFtraceEvent::MergeFrom(
          from._internal_sde_sde_evtlog());
      break;
    }
    case kSdeSdePerfCalcCrtc: {
      _this->_internal_mutable_sde_sde_perf_calc_crtc()->::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_calc_crtc());
      break;
    }
    case kSdeSdePerfCrtcUpdate: {
      _this->_internal_mutable_sde_sde_perf_crtc_update()->::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_crtc_update());
      break;
    }
    case kSdeSdePerfSetQosLuts: {
      _this->_internal_mutable_sde_sde_perf_set_qos_luts()->::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_set_qos_luts());
      break;
    }
    case kSdeSdePerfUpdateBus: {
      _this->_internal_mutable_sde_sde_perf_update_bus()->::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent::MergeFrom(
          from._internal_sde_sde_perf_update_bus());
      break;
    }
    case kRssStatThrottled: {
      _this->_internal_mutable_rss_stat_throttled()->::perfetto::protos::RssStatThrottledFtraceEvent::MergeFrom(
          from._internal_rss_stat_throttled());
      break;
    }
    case kNetifReceiveSkb: {
      _this->_internal_mutable_netif_receive_skb()->::perfetto::protos::NetifReceiveSkbFtraceEvent::MergeFrom(
          from._internal_netif_receive_skb());
      break;
    }
    case kNetDevXmit: {
      _this->_internal_mutable_net_dev_xmit()->::perfetto::protos::NetDevXmitFtraceEvent::MergeFrom(
          from._internal_net_dev_xmit());
      break;
    }
    case kInetSockSetState: {
      _this->_internal_mutable_inet_sock_set_state()->::perfetto::protos::InetSockSetStateFtraceEvent::MergeFrom(
          from._internal_inet_sock_set_state());
      break;
    }
    case kTcpRetransmitSkb: {
      _this->_internal_mutable_tcp_retransmit_skb()->::perfetto::protos::TcpRetransmitSkbFtraceEvent::MergeFrom(
          from._internal_tcp_retransmit_skb());
      break;
    }
    case kCrosEcSensorhubData: {
      _this->_internal_mutable_cros_ec_sensorhub_data()->::perfetto::protos::CrosEcSensorhubDataFtraceEvent::MergeFrom(
          from._internal_cros_ec_sensorhub_data());
      break;
    }
    case kNapiGroReceiveEntry: {
      _this->_internal_mutable_napi_gro_receive_entry()->::perfetto::protos::NapiGroReceiveEntryFtraceEvent::MergeFrom(
          from._internal_napi_gro_receive_entry());
      break;
    }
    case kNapiGroReceiveExit: {
      _this->_internal_mutable_napi_gro_receive_exit()->::perfetto::protos::NapiGroReceiveExitFtraceEvent::MergeFrom(
          from._internal_napi_gro_receive_exit());
      break;
    }
    case kKfreeSkb: {
      _this->_internal_mutable_kfree_skb()->::perfetto::protos::KfreeSkbFtraceEvent::MergeFrom(
          from._internal_kfree_skb());
      break;
    }
    case kKvmAccessFault: {
      _this->_internal_mutable_kvm_access_fault()->::perfetto::protos::KvmAccessFaultFtraceEvent::MergeFrom(
          from._internal_kvm_access_fault());
      break;
    }
    case kKvmAckIrq: {
      _this->_internal_mutable_kvm_ack_irq()->::perfetto::protos::KvmAckIrqFtraceEvent::MergeFrom(
          from._internal_kvm_ack_irq());
      break;
    }
    case kKvmAgeHva: {
      _this->_internal_mutable_kvm_age_hva()->::perfetto::protos::KvmAgeHvaFtraceEvent::MergeFrom(
          from._internal_kvm_age_hva());
      break;
    }
    case kKvmAgePage: {
      _this->_internal_mutable_kvm_age_page()->::perfetto::protos::KvmAgePageFtraceEvent::MergeFrom(
          from._internal_kvm_age_page());
      break;
    }
    case kKvmArmClearDebug: {
      _this->_internal_mutable_kvm_arm_clear_debug()->::perfetto::protos::KvmArmClearDebugFtraceEvent::MergeFrom(
          from._internal_kvm_arm_clear_debug());
      break;
    }
    case kKvmArmSetDreg32: {
      _this->_internal_mutable_kvm_arm_set_dreg32()->::perfetto::protos::KvmArmSetDreg32FtraceEvent::MergeFrom(
          from._internal_kvm_arm_set_dreg32());
      break;
    }
    case kKvmArmSetRegset: {
      _this->_internal_mutable_kvm_arm_set_regset()->::perfetto::protos::KvmArmSetRegsetFtraceEvent::MergeFrom(
          from._internal_kvm_arm_set_regset());
      break;
    }
    case kKvmArmSetupDebug: {
      _this->_internal_mutable_kvm_arm_setup_debug()->::perfetto::protos::KvmArmSetupDebugFtraceEvent::MergeFrom(
          from._internal_kvm_arm_setup_debug());
      break;
    }
    case kKvmEntry: {
      _this->_internal_mutable_kvm_entry()->::perfetto::protos::KvmEntryFtraceEvent::MergeFrom(
          from._internal_kvm_entry());
      break;
    }
    case kKvmExit: {
      _this->_internal_mutable_kvm_exit()->::perfetto::protos::KvmExitFtraceEvent::MergeFrom(
          from._internal_kvm_exit());
      break;
    }
    case kKvmFpu: {
      _this->_internal_mutable_kvm_fpu()->::perfetto::protos::KvmFpuFtraceEvent::MergeFrom(
          from._internal_kvm_fpu());
      break;
    }
    case kKvmGetTimerMap: {
      _this->_internal_mutable_kvm_get_timer_map()->::perfetto::protos::KvmGetTimerMapFtraceEvent::MergeFrom(
          from._internal_kvm_get_timer_map());
      break;
    }
    case kKvmGuestFault: {
      _this->_internal_mutable_kvm_guest_fault()->::perfetto::protos::KvmGuestFaultFtraceEvent::MergeFrom(
          from._internal_kvm_guest_fault());
      break;
    }
    case kKvmHandleSysReg: {
      _this->_internal_mutable_kvm_handle_sys_reg()->::perfetto::protos::KvmHandleSysRegFtraceEvent::MergeFrom(
          from._internal_kvm_handle_sys_reg());
      break;
    }
    case kKvmHvcArm64: {
      _this->_internal_mutable_kvm_hvc_arm64()->::perfetto::protos::KvmHvcArm64FtraceEvent::MergeFrom(
          from._internal_kvm_hvc_arm64());
      break;
    }
    case kKvmIrqLine: {
      _this->_internal_mutable_kvm_irq_line()->::perfetto::protos::KvmIrqLineFtraceEvent::MergeFrom(
          from._internal_kvm_irq_line());
      break;
    }
    case kKvmMmio: {
      _this->_internal_mutable_kvm_mmio()->::perfetto::protos::KvmMmioFtraceEvent::MergeFrom(
          from._internal_kvm_mmio());
      break;
    }
    case kKvmMmioEmulate: {
      _this->_internal_mutable_kvm_mmio_emulate()->::perfetto::protos::KvmMmioEmulateFtraceEvent::MergeFrom(
          from._internal_kvm_mmio_emulate());
      break;
    }
    case kKvmSetGuestDebug: {
      _this->_internal_mutable_kvm_set_guest_debug()->::perfetto::protos::KvmSetGuestDebugFtraceEvent::MergeFrom(
          from._internal_kvm_set_guest_debug());
      break;
    }
    case kKvmSetIrq: {
      _this->_internal_mutable_kvm_set_irq()->::perfetto::protos::KvmSetIrqFtraceEvent::MergeFrom(
          from._internal_kvm_set_irq());
      break;
    }
    case kKvmSetSpteHva: {
      _this->_internal_mutable_kvm_set_spte_hva()->::perfetto::protos::KvmSetSpteHvaFtraceEvent::MergeFrom(
          from._internal_kvm_set_spte_hva());
      break;
    }
    case kKvmSetWayFlush: {
      _this->_internal_mutable_kvm_set_way_flush()->::perfetto::protos::KvmSetWayFlushFtraceEvent::MergeFrom(
          from._internal_kvm_set_way_flush());
      break;
    }
    case kKvmSysAccess: {
      _this->_internal_mutable_kvm_sys_access()->::perfetto::protos::KvmSysAccessFtraceEvent::MergeFrom(
          from._internal_kvm_sys_access());
      break;
    }
    case kKvmTestAgeHva: {
      _this->_internal_mutable_kvm_test_age_hva()->::perfetto::protos::KvmTestAgeHvaFtraceEvent::MergeFrom(
          from._internal_kvm_test_age_hva());
      break;
    }
    case kKvmTimerEmulate: {
      _this->_internal_mutable_kvm_timer_emulate()->::perfetto::protos::KvmTimerEmulateFtraceEvent::MergeFrom(
          from._internal_kvm_timer_emulate());
      break;
    }
    case kKvmTimerHrtimerExpire: {
      _this->_internal_mutable_kvm_timer_hrtimer_expire()->::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent::MergeFrom(
          from._internal_kvm_timer_hrtimer_expire());
      break;
    }
    case kKvmTimerRestoreState: {
      _this->_internal_mutable_kvm_timer_restore_state()->::perfetto::protos::KvmTimerRestoreStateFtraceEvent::MergeFrom(
          from._internal_kvm_timer_restore_state());
      break;
    }
    case kKvmTimerSaveState: {
      _this->_internal_mutable_kvm_timer_save_state()->::perfetto::protos::KvmTimerSaveStateFtraceEvent::MergeFrom(
          from._internal_kvm_timer_save_state());
      break;
    }
    case kKvmTimerUpdateIrq: {
      _this->_internal_mutable_kvm_timer_update_irq()->::perfetto::protos::KvmTimerUpdateIrqFtraceEvent::MergeFrom(
          from._internal_kvm_timer_update_irq());
      break;
    }
    case kKvmToggleCache: {
      _this->_internal_mutable_kvm_toggle_cache()->::perfetto::protos::KvmToggleCacheFtraceEvent::MergeFrom(
          from._internal_kvm_toggle_cache());
      break;
    }
    case kKvmUnmapHvaRange: {
      _this->_internal_mutable_kvm_unmap_hva_range()->::perfetto::protos::KvmUnmapHvaRangeFtraceEvent::MergeFrom(
          from._internal_kvm_unmap_hva_range());
      break;
    }
    case kKvmUserspaceExit: {
      _this->_internal_mutable_kvm_userspace_exit()->::perfetto::protos::KvmUserspaceExitFtraceEvent::MergeFrom(
          from._internal_kvm_userspace_exit());
      break;
    }
    case kKvmVcpuWakeup: {
      _this->_internal_mutable_kvm_vcpu_wakeup()->::perfetto::protos::KvmVcpuWakeupFtraceEvent::MergeFrom(
          from._internal_kvm_vcpu_wakeup());
      break;
    }
    case kKvmWfxArm64: {
      _this->_internal_mutable_kvm_wfx_arm64()->::perfetto::protos::KvmWfxArm64FtraceEvent::MergeFrom(
          from._internal_kvm_wfx_arm64());
      break;
    }
    case kTrapReg: {
      _this->_internal_mutable_trap_reg()->::perfetto::protos::TrapRegFtraceEvent::MergeFrom(
          from._internal_trap_reg());
      break;
    }
    case kVgicUpdateIrqPending: {
      _this->_internal_mutable_vgic_update_irq_pending()->::perfetto::protos::VgicUpdateIrqPendingFtraceEvent::MergeFrom(
          from._internal_vgic_update_irq_pending());
      break;
    }
    case kWakeupSourceActivate: {
      _this->_internal_mutable_wakeup_source_activate()->::perfetto::protos::WakeupSourceActivateFtraceEvent::MergeFrom(
          from._internal_wakeup_source_activate());
      break;
    }
    case kWakeupSourceDeactivate: {
      _this->_internal_mutable_wakeup_source_deactivate()->::perfetto::protos::WakeupSourceDeactivateFtraceEvent::MergeFrom(
          from._internal_wakeup_source_deactivate());
      break;
    }
    case kUfshcdCommand: {
      _this->_internal_mutable_ufshcd_command()->::perfetto::protos::UfshcdCommandFtraceEvent::MergeFrom(
          from._internal_ufshcd_command());
      break;
    }
    case kUfshcdClkGating: {
      _this->_internal_mutable_ufshcd_clk_gating()->::perfetto::protos::UfshcdClkGatingFtraceEvent::MergeFrom(
          from._internal_ufshcd_clk_gating());
      break;
    }
    case kConsole: {
      _this->_internal_mutable_console()->::perfetto::protos::ConsoleFtraceEvent::MergeFrom(
          from._internal_console());
      break;
    }
    case kDrmVblankEvent: {
      _this->_internal_mutable_drm_vblank_event()->::perfetto::protos::DrmVblankEventFtraceEvent::MergeFrom(
          from._internal_drm_vblank_event());
      break;
    }
    case kDrmVblankEventDelivered: {
      _this->_internal_mutable_drm_vblank_event_delivered()->::perfetto::protos::DrmVblankEventDeliveredFtraceEvent::MergeFrom(
          from._internal_drm_vblank_event_delivered());
      break;
    }
    case kDrmSchedJob: {
      _this->_internal_mutable_drm_sched_job()->::perfetto::protos::DrmSchedJobFtraceEvent::MergeFrom(
          from._internal_drm_sched_job());
      break;
    }
    case kDrmRunJob: {
      _this->_internal_mutable_drm_run_job()->::perfetto::protos::DrmRunJobFtraceEvent::MergeFrom(
          from._internal_drm_run_job());
      break;
    }
    case kDrmSchedProcessJob: {
      _this->_internal_mutable_drm_sched_process_job()->::perfetto::protos::DrmSchedProcessJobFtraceEvent::MergeFrom(
          from._internal_drm_sched_process_job());
      break;
    }
    case kDmaFenceInit: {
      _this->_internal_mutable_dma_fence_init()->::perfetto::protos::DmaFenceInitFtraceEvent::MergeFrom(
          from._internal_dma_fence_init());
      break;
    }
    case kDmaFenceEmit: {
      _this->_internal_mutable_dma_fence_emit()->::perfetto::protos::DmaFenceEmitFtraceEvent::MergeFrom(
          from._internal_dma_fence_emit());
      break;
    }
    case kDmaFenceSignaled: {
      _this->_internal_mutable_dma_fence_signaled()->::perfetto::protos::DmaFenceSignaledFtraceEvent::MergeFrom(
          from._internal_dma_fence_signaled());
      break;
    }
    case kDmaFenceWaitStart: {
      _this->_internal_mutable_dma_fence_wait_start()->::perfetto::protos::DmaFenceWaitStartFtraceEvent::MergeFrom(
          from._internal_dma_fence_wait_start());
      break;
    }
    case kDmaFenceWaitEnd: {
      _this->_internal_mutable_dma_fence_wait_end()->::perfetto::protos::DmaFenceWaitEndFtraceEvent::MergeFrom(
          from._internal_dma_fence_wait_end());
      break;
    }
    case kF2FsIostat: {
      _this->_internal_mutable_f2fs_iostat()->::perfetto::protos::F2fsIostatFtraceEvent::MergeFrom(
          from._internal_f2fs_iostat());
      break;
    }
    case kF2FsIostatLatency: {
      _this->_internal_mutable_f2fs_iostat_latency()->::perfetto::protos::F2fsIostatLatencyFtraceEvent::MergeFrom(
          from._internal_f2fs_iostat_latency());
      break;
    }
    case kSchedCpuUtilCfs: {
      _this->_internal_mutable_sched_cpu_util_cfs()->::perfetto::protos::SchedCpuUtilCfsFtraceEvent::MergeFrom(
          from._internal_sched_cpu_util_cfs());
      break;
    }
    case kV4L2Qbuf: {
      _this->_internal_mutable_v4l2_qbuf()->::perfetto::protos::V4l2QbufFtraceEvent::MergeFrom(
          from._internal_v4l2_qbuf());
      break;
    }
    case kV4L2Dqbuf: {
      _this->_internal_mutable_v4l2_dqbuf()->::perfetto::protos::V4l2DqbufFtraceEvent::MergeFrom(
          from._internal_v4l2_dqbuf());
      break;
    }
    case kVb2V4L2BufQueue: {
      _this->_internal_mutable_vb2_v4l2_buf_queue()->::perfetto::protos::Vb2V4l2BufQueueFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_buf_queue());
      break;
    }
    case kVb2V4L2BufDone: {
      _this->_internal_mutable_vb2_v4l2_buf_done()->::perfetto::protos::Vb2V4l2BufDoneFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_buf_done());
      break;
    }
    case kVb2V4L2Qbuf: {
      _this->_internal_mutable_vb2_v4l2_qbuf()->::perfetto::protos::Vb2V4l2QbufFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_qbuf());
      break;
    }
    case kVb2V4L2Dqbuf: {
      _this->_internal_mutable_vb2_v4l2_dqbuf()->::perfetto::protos::Vb2V4l2DqbufFtraceEvent::MergeFrom(
          from._internal_vb2_v4l2_dqbuf());
      break;
    }
    case kDsiCmdFifoStatus: {
      _this->_internal_mutable_dsi_cmd_fifo_status()->::perfetto::protos::DsiCmdFifoStatusFtraceEvent::MergeFrom(
          from._internal_dsi_cmd_fifo_status());
      break;
    }
    case kDsiRx: {
      _this->_internal_mutable_dsi_rx()->::perfetto::protos::DsiRxFtraceEvent::MergeFrom(
          from._internal_dsi_rx());
      break;
    }
    case kDsiTx: {
      _this->_internal_mutable_dsi_tx()->::perfetto::protos::DsiTxFtraceEvent::MergeFrom(
          from._internal_dsi_tx());
      break;
    }
    case kAndroidFsDatareadEnd: {
      _this->_internal_mutable_android_fs_dataread_end()->::perfetto::protos::AndroidFsDatareadEndFtraceEvent::MergeFrom(
          from._internal_android_fs_dataread_end());
      break;
    }
    case kAndroidFsDatareadStart: {
      _this->_internal_mutable_android_fs_dataread_start()->::perfetto::protos::AndroidFsDatareadStartFtraceEvent::MergeFrom(
          from._internal_android_fs_dataread_start());
      break;
    }
    case kAndroidFsDatawriteEnd: {
      _this->_internal_mutable_android_fs_datawrite_end()->::perfetto::protos::AndroidFsDatawriteEndFtraceEvent::MergeFrom(
          from._internal_android_fs_datawrite_end());
      break;
    }
    case kAndroidFsDatawriteStart: {
      _this->_internal_mutable_android_fs_datawrite_start()->::perfetto::protos::AndroidFsDatawriteStartFtraceEvent::MergeFrom(
          from._internal_android_fs_datawrite_start());
      break;
    }
    case kAndroidFsFsyncEnd: {
      _this->_internal_mutable_android_fs_fsync_end()->::perfetto::protos::AndroidFsFsyncEndFtraceEvent::MergeFrom(
          from._internal_android_fs_fsync_end());
      break;
    }
    case kAndroidFsFsyncStart: {
      _this->_internal_mutable_android_fs_fsync_start()->::perfetto::protos::AndroidFsFsyncStartFtraceEvent::MergeFrom(
          from._internal_android_fs_fsync_start());
      break;
    }
    case kFuncgraphEntry: {
      _this->_internal_mutable_funcgraph_entry()->::perfetto::protos::FuncgraphEntryFtraceEvent::MergeFrom(
          from._internal_funcgraph_entry());
      break;
    }
    case kFuncgraphExit: {
      _this->_internal_mutable_funcgraph_exit()->::perfetto::protos::FuncgraphExitFtraceEvent::MergeFrom(
          from._internal_funcgraph_exit());
      break;
    }
    case kVirtioVideoCmd: {
      _this->_internal_mutable_virtio_video_cmd()->::perfetto::protos::VirtioVideoCmdFtraceEvent::MergeFrom(
          from._internal_virtio_video_cmd());
      break;
    }
    case kVirtioVideoCmdDone: {
      _this->_internal_mutable_virtio_video_cmd_done()->::perfetto::protos::VirtioVideoCmdDoneFtraceEvent::MergeFrom(
          from._internal_virtio_video_cmd_done());
      break;
    }
    case kVirtioVideoResourceQueue: {
      _this->_internal_mutable_virtio_video_resource_queue()->::perfetto::protos::VirtioVideoResourceQueueFtraceEvent::MergeFrom(
          from._internal_virtio_video_resource_queue());
      break;
    }
    case kVirtioVideoResourceQueueDone: {
      _this->_internal_mutable_virtio_video_resource_queue_done()->::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent::MergeFrom(
          from._internal_virtio_video_resource_queue_done());
      break;
    }
    case kMmShrinkSlabStart: {
      _this->_internal_mutable_mm_shrink_slab_start()->::perfetto::protos::MmShrinkSlabStartFtraceEvent::MergeFrom(
          from._internal_mm_shrink_slab_start());
      break;
    }
    case kMmShrinkSlabEnd: {
      _this->_internal_mutable_mm_shrink_slab_end()->::perfetto::protos::MmShrinkSlabEndFtraceEvent::MergeFrom(
          from._internal_mm_shrink_slab_end());
      break;
    }
    case kTrustySmc: {
      _this->_internal_mutable_trusty_smc()->::perfetto::protos::TrustySmcFtraceEvent::MergeFrom(
          from._internal_trusty_smc());
      break;
    }
    case kTrustySmcDone: {
      _this->_internal_mutable_trusty_smc_done()->::perfetto::protos::TrustySmcDoneFtraceEvent::MergeFrom(
          from._internal_trusty_smc_done());
      break;
    }
    case kTrustyStdCall32: {
      _this->_internal_mutable_trusty_std_call32()->::perfetto::protos::TrustyStdCall32FtraceEvent::MergeFrom(
          from._internal_trusty_std_call32());
      break;
    }
    case kTrustyStdCall32Done: {
      _this->_internal_mutable_trusty_std_call32_done()->::perfetto::protos::TrustyStdCall32DoneFtraceEvent::MergeFrom(
          from._internal_trusty_std_call32_done());
      break;
    }
    case kTrustyShareMemory: {
      _this->_internal_mutable_trusty_share_memory()->::perfetto::protos::TrustyShareMemoryFtraceEvent::MergeFrom(
          from._internal_trusty_share_memory());
      break;
    }
    case kTrustyShareMemoryDone: {
      _this->_internal_mutable_trusty_share_memory_done()->::perfetto::protos::TrustyShareMemoryDoneFtraceEvent::MergeFrom(
          from._internal_trusty_share_memory_done());
      break;
    }
    case kTrustyReclaimMemory: {
      _this->_internal_mutable_trusty_reclaim_memory()->::perfetto::protos::TrustyReclaimMemoryFtraceEvent::MergeFrom(
          from._internal_trusty_reclaim_memory());
      break;
    }
    case kTrustyReclaimMemoryDone: {
      _this->_internal_mutable_trusty_reclaim_memory_done()->::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent::MergeFrom(
          from._internal_trusty_reclaim_memory_done());
      break;
    }
    case kTrustyIrq: {
      _this->_internal_mutable_trusty_irq()->::perfetto::protos::TrustyIrqFtraceEvent::MergeFrom(
          from._internal_trusty_irq());
      break;
    }
    case kTrustyIpcHandleEvent: {
      _this->_internal_mutable_trusty_ipc_handle_event()->::perfetto::protos::TrustyIpcHandleEventFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_handle_event());
      break;
    }
    case kTrustyIpcConnect: {
      _this->_internal_mutable_trusty_ipc_connect()->::perfetto::protos::TrustyIpcConnectFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_connect());
      break;
    }
    case kTrustyIpcConnectEnd: {
      _this->_internal_mutable_trusty_ipc_connect_end()->::perfetto::protos::TrustyIpcConnectEndFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_connect_end());
      break;
    }
    case kTrustyIpcWrite: {
      _this->_internal_mutable_trusty_ipc_write()->::perfetto::protos::TrustyIpcWriteFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_write());
      break;
    }
    case kTrustyIpcPoll: {
      _this->_internal_mutable_trusty_ipc_poll()->::perfetto::protos::TrustyIpcPollFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_poll());
      break;
    }
    case kTrustyIpcRead: {
      _this->_internal_mutable_trusty_ipc_read()->::perfetto::protos::TrustyIpcReadFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_read());
      break;
    }
    case kTrustyIpcReadEnd: {
      _this->_internal_mutable_trusty_ipc_read_end()->::perfetto::protos::TrustyIpcReadEndFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_read_end());
      break;
    }
    case kTrustyIpcRx: {
      _this->_internal_mutable_trusty_ipc_rx()->::perfetto::protos::TrustyIpcRxFtraceEvent::MergeFrom(
          from._internal_trusty_ipc_rx());
      break;
    }
    case kTrustyEnqueueNop: {
      _this->_internal_mutable_trusty_enqueue_nop()->::perfetto::protos::TrustyEnqueueNopFtraceEvent::MergeFrom(
          from._internal_trusty_enqueue_nop());
      break;
    }
    case kCmaAllocStart: {
      _this->_internal_mutable_cma_alloc_start()->::perfetto::protos::CmaAllocStartFtraceEvent::MergeFrom(
          from._internal_cma_alloc_start());
      break;
    }
    case kCmaAllocInfo: {
      _this->_internal_mutable_cma_alloc_info()->::perfetto::protos::CmaAllocInfoFtraceEvent::MergeFrom(
          from._internal_cma_alloc_info());
      break;
    }
    case kLwisTracingMarkWrite: {
      _this->_internal_mutable_lwis_tracing_mark_write()->::perfetto::protos::LwisTracingMarkWriteFtraceEvent::MergeFrom(
          from._internal_lwis_tracing_mark_write());
      break;
    }
    case kVirtioGpuCmdQueue: {
      _this->_internal_mutable_virtio_gpu_cmd_queue()->::perfetto::protos::VirtioGpuCmdQueueFtraceEvent::MergeFrom(
          from._internal_virtio_gpu_cmd_queue());
      break;
    }
    case kVirtioGpuCmdResponse: {
      _this->_internal_mutable_virtio_gpu_cmd_response()->::perfetto::protos::VirtioGpuCmdResponseFtraceEvent::MergeFrom(
          from._internal_virtio_gpu_cmd_response());
      break;
    }
    case kMaliMaliKCPUCQSSET: {
      _this->_internal_mutable_mali_mali_kcpu_cqs_set()->::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_cqs_set());
      break;
    }
    case kMaliMaliKCPUCQSWAITSTART: {
      _this->_internal_mutable_mali_mali_kcpu_cqs_wait_start()->::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_cqs_wait_start());
      break;
    }
    case kMaliMaliKCPUCQSWAITEND: {
      _this->_internal_mutable_mali_mali_kcpu_cqs_wait_end()->::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_cqs_wait_end());
      break;
    }
    case kMaliMaliKCPUFENCESIGNAL: {
      _this->_internal_mutable_mali_mali_kcpu_fence_signal()->::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_fence_signal());
      break;
    }
    case kMaliMaliKCPUFENCEWAITSTART: {
      _this->_internal_mutable_mali_mali_kcpu_fence_wait_start()->::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_fence_wait_start());
      break;
    }
    case kMaliMaliKCPUFENCEWAITEND: {
      _this->_internal_mutable_mali_mali_kcpu_fence_wait_end()->::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent::MergeFrom(
          from._internal_mali_mali_kcpu_fence_wait_end());
      break;
    }
    case kHypEnter: {
      _this->_internal_mutable_hyp_enter()->::perfetto::protos::HypEnterFtraceEvent::MergeFrom(
          from._internal_hyp_enter());
      break;
    }
    case kHypExit: {
      _this->_internal_mutable_hyp_exit()->::perfetto::protos::HypExitFtraceEvent::MergeFrom(
          from._internal_hyp_exit());
      break;
    }
    case kHostHcall: {
      _this->_internal_mutable_host_hcall()->::perfetto::protos::HostHcallFtraceEvent::MergeFrom(
          from._internal_host_hcall());
      break;
    }
    case kHostSmc: {
      _this->_internal_mutable_host_smc()->::perfetto::protos::HostSmcFtraceEvent::MergeFrom(
          from._internal_host_smc());
      break;
    }
    case kHostMemAbort: {
      _this->_internal_mutable_host_mem_abort()->::perfetto::protos::HostMemAbortFtraceEvent::MergeFrom(
          from._internal_host_mem_abort());
      break;
    }
    case kSuspendResumeMinimal: {
      _this->_internal_mutable_suspend_resume_minimal()->::perfetto::protos::SuspendResumeMinimalFtraceEvent::MergeFrom(
          from._internal_suspend_resume_minimal());
      break;
    }
    case kMaliMaliCSFINTERRUPTSTART: {
      _this->_internal_mutable_mali_mali_csf_interrupt_start()->::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent::MergeFrom(
          from._internal_mali_mali_csf_interrupt_start());
      break;
    }
    case kMaliMaliCSFINTERRUPTEND: {
      _this->_internal_mutable_mali_mali_csf_interrupt_end()->::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent::MergeFrom(
          from._internal_mali_mali_csf_interrupt_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceEvent::CopyFrom(const FtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEvent::IsInitialized() const {
  return true;
}

void FtraceEvent::InternalSwap(FtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceEvent, _impl_.common_flags_)
      + sizeof(FtraceEvent::_impl_.common_flags_)
      - PROTOBUF_FIELD_OFFSET(FtraceEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
