// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto;
namespace perfetto {
namespace protos {
class NapiGroReceiveEntryFtraceEvent;
struct NapiGroReceiveEntryFtraceEventDefaultTypeInternal;
extern NapiGroReceiveEntryFtraceEventDefaultTypeInternal _NapiGroReceiveEntryFtraceEvent_default_instance_;
class NapiGroReceiveExitFtraceEvent;
struct NapiGroReceiveExitFtraceEventDefaultTypeInternal;
extern NapiGroReceiveExitFtraceEventDefaultTypeInternal _NapiGroReceiveExitFtraceEvent_default_instance_;
class NetDevXmitFtraceEvent;
struct NetDevXmitFtraceEventDefaultTypeInternal;
extern NetDevXmitFtraceEventDefaultTypeInternal _NetDevXmitFtraceEvent_default_instance_;
class NetifReceiveSkbFtraceEvent;
struct NetifReceiveSkbFtraceEventDefaultTypeInternal;
extern NetifReceiveSkbFtraceEventDefaultTypeInternal _NetifReceiveSkbFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::NapiGroReceiveEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::NapiGroReceiveEntryFtraceEvent>(Arena*);
template <>
::perfetto::protos::NapiGroReceiveExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::NapiGroReceiveExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::NetDevXmitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::NetDevXmitFtraceEvent>(Arena*);
template <>
::perfetto::protos::NetifReceiveSkbFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::NetifReceiveSkbFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class NetifReceiveSkbFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NetifReceiveSkbFtraceEvent) */ {
 public:
  inline NetifReceiveSkbFtraceEvent() : NetifReceiveSkbFtraceEvent(nullptr) {}
  ~NetifReceiveSkbFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetifReceiveSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifReceiveSkbFtraceEvent(const NetifReceiveSkbFtraceEvent& from);
  NetifReceiveSkbFtraceEvent(NetifReceiveSkbFtraceEvent&& from) noexcept
    : NetifReceiveSkbFtraceEvent() {
    *this = ::std::move(from);
  }

  inline NetifReceiveSkbFtraceEvent& operator=(const NetifReceiveSkbFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifReceiveSkbFtraceEvent& operator=(NetifReceiveSkbFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifReceiveSkbFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifReceiveSkbFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const NetifReceiveSkbFtraceEvent*>(
               &_NetifReceiveSkbFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetifReceiveSkbFtraceEvent& a, NetifReceiveSkbFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifReceiveSkbFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifReceiveSkbFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifReceiveSkbFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifReceiveSkbFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifReceiveSkbFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifReceiveSkbFtraceEvent& from) {
    NetifReceiveSkbFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifReceiveSkbFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NetifReceiveSkbFtraceEvent";
  }
  protected:
  explicit NetifReceiveSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSkbaddrFieldNumber = 3,
    kLenFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 skbaddr = 3;
  bool has_skbaddr() const;
  void clear_skbaddr() ;
  ::uint64_t skbaddr() const;
  void set_skbaddr(::uint64_t value);

  private:
  ::uint64_t _internal_skbaddr() const;
  void _internal_set_skbaddr(::uint64_t value);

  public:
  // optional uint32 len = 1;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.NetifReceiveSkbFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t skbaddr_;
    ::uint32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto;
};// -------------------------------------------------------------------

class NetDevXmitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NetDevXmitFtraceEvent) */ {
 public:
  inline NetDevXmitFtraceEvent() : NetDevXmitFtraceEvent(nullptr) {}
  ~NetDevXmitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetDevXmitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetDevXmitFtraceEvent(const NetDevXmitFtraceEvent& from);
  NetDevXmitFtraceEvent(NetDevXmitFtraceEvent&& from) noexcept
    : NetDevXmitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline NetDevXmitFtraceEvent& operator=(const NetDevXmitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetDevXmitFtraceEvent& operator=(NetDevXmitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetDevXmitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetDevXmitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const NetDevXmitFtraceEvent*>(
               &_NetDevXmitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetDevXmitFtraceEvent& a, NetDevXmitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NetDevXmitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetDevXmitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetDevXmitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetDevXmitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetDevXmitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetDevXmitFtraceEvent& from) {
    NetDevXmitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetDevXmitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NetDevXmitFtraceEvent";
  }
  protected:
  explicit NetDevXmitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLenFieldNumber = 1,
    kRcFieldNumber = 3,
    kSkbaddrFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 len = 1;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional int32 rc = 3;
  bool has_rc() const;
  void clear_rc() ;
  ::int32_t rc() const;
  void set_rc(::int32_t value);

  private:
  ::int32_t _internal_rc() const;
  void _internal_set_rc(::int32_t value);

  public:
  // optional uint64 skbaddr = 4;
  bool has_skbaddr() const;
  void clear_skbaddr() ;
  ::uint64_t skbaddr() const;
  void set_skbaddr(::uint64_t value);

  private:
  ::uint64_t _internal_skbaddr() const;
  void _internal_set_skbaddr(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.NetDevXmitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t len_;
    ::int32_t rc_;
    ::uint64_t skbaddr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto;
};// -------------------------------------------------------------------

class NapiGroReceiveEntryFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NapiGroReceiveEntryFtraceEvent) */ {
 public:
  inline NapiGroReceiveEntryFtraceEvent() : NapiGroReceiveEntryFtraceEvent(nullptr) {}
  ~NapiGroReceiveEntryFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NapiGroReceiveEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NapiGroReceiveEntryFtraceEvent(const NapiGroReceiveEntryFtraceEvent& from);
  NapiGroReceiveEntryFtraceEvent(NapiGroReceiveEntryFtraceEvent&& from) noexcept
    : NapiGroReceiveEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline NapiGroReceiveEntryFtraceEvent& operator=(const NapiGroReceiveEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NapiGroReceiveEntryFtraceEvent& operator=(NapiGroReceiveEntryFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NapiGroReceiveEntryFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NapiGroReceiveEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const NapiGroReceiveEntryFtraceEvent*>(
               &_NapiGroReceiveEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NapiGroReceiveEntryFtraceEvent& a, NapiGroReceiveEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NapiGroReceiveEntryFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NapiGroReceiveEntryFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NapiGroReceiveEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NapiGroReceiveEntryFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NapiGroReceiveEntryFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NapiGroReceiveEntryFtraceEvent& from) {
    NapiGroReceiveEntryFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NapiGroReceiveEntryFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NapiGroReceiveEntryFtraceEvent";
  }
  protected:
  explicit NapiGroReceiveEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 10,
    kDataLenFieldNumber = 1,
    kGsoSizeFieldNumber = 2,
    kGsoTypeFieldNumber = 3,
    kHashFieldNumber = 4,
    kIpSummedFieldNumber = 5,
    kL4HashFieldNumber = 6,
    kLenFieldNumber = 7,
    kMacHeaderFieldNumber = 8,
    kMacHeaderValidFieldNumber = 9,
    kNapiIdFieldNumber = 11,
    kNrFragsFieldNumber = 12,
    kProtocolFieldNumber = 13,
    kSkbaddrFieldNumber = 15,
    kQueueMappingFieldNumber = 14,
    kTruesizeFieldNumber = 16,
    kVlanProtoFieldNumber = 17,
    kVlanTaggedFieldNumber = 18,
    kVlanTciFieldNumber = 19,
  };
  // optional string name = 10;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 data_len = 1;
  bool has_data_len() const;
  void clear_data_len() ;
  ::uint32_t data_len() const;
  void set_data_len(::uint32_t value);

  private:
  ::uint32_t _internal_data_len() const;
  void _internal_set_data_len(::uint32_t value);

  public:
  // optional uint32 gso_size = 2;
  bool has_gso_size() const;
  void clear_gso_size() ;
  ::uint32_t gso_size() const;
  void set_gso_size(::uint32_t value);

  private:
  ::uint32_t _internal_gso_size() const;
  void _internal_set_gso_size(::uint32_t value);

  public:
  // optional uint32 gso_type = 3;
  bool has_gso_type() const;
  void clear_gso_type() ;
  ::uint32_t gso_type() const;
  void set_gso_type(::uint32_t value);

  private:
  ::uint32_t _internal_gso_type() const;
  void _internal_set_gso_type(::uint32_t value);

  public:
  // optional uint32 hash = 4;
  bool has_hash() const;
  void clear_hash() ;
  ::uint32_t hash() const;
  void set_hash(::uint32_t value);

  private:
  ::uint32_t _internal_hash() const;
  void _internal_set_hash(::uint32_t value);

  public:
  // optional uint32 ip_summed = 5;
  bool has_ip_summed() const;
  void clear_ip_summed() ;
  ::uint32_t ip_summed() const;
  void set_ip_summed(::uint32_t value);

  private:
  ::uint32_t _internal_ip_summed() const;
  void _internal_set_ip_summed(::uint32_t value);

  public:
  // optional uint32 l4_hash = 6;
  bool has_l4_hash() const;
  void clear_l4_hash() ;
  ::uint32_t l4_hash() const;
  void set_l4_hash(::uint32_t value);

  private:
  ::uint32_t _internal_l4_hash() const;
  void _internal_set_l4_hash(::uint32_t value);

  public:
  // optional uint32 len = 7;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional int32 mac_header = 8;
  bool has_mac_header() const;
  void clear_mac_header() ;
  ::int32_t mac_header() const;
  void set_mac_header(::int32_t value);

  private:
  ::int32_t _internal_mac_header() const;
  void _internal_set_mac_header(::int32_t value);

  public:
  // optional uint32 mac_header_valid = 9;
  bool has_mac_header_valid() const;
  void clear_mac_header_valid() ;
  ::uint32_t mac_header_valid() const;
  void set_mac_header_valid(::uint32_t value);

  private:
  ::uint32_t _internal_mac_header_valid() const;
  void _internal_set_mac_header_valid(::uint32_t value);

  public:
  // optional uint32 napi_id = 11;
  bool has_napi_id() const;
  void clear_napi_id() ;
  ::uint32_t napi_id() const;
  void set_napi_id(::uint32_t value);

  private:
  ::uint32_t _internal_napi_id() const;
  void _internal_set_napi_id(::uint32_t value);

  public:
  // optional uint32 nr_frags = 12;
  bool has_nr_frags() const;
  void clear_nr_frags() ;
  ::uint32_t nr_frags() const;
  void set_nr_frags(::uint32_t value);

  private:
  ::uint32_t _internal_nr_frags() const;
  void _internal_set_nr_frags(::uint32_t value);

  public:
  // optional uint32 protocol = 13;
  bool has_protocol() const;
  void clear_protocol() ;
  ::uint32_t protocol() const;
  void set_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_protocol() const;
  void _internal_set_protocol(::uint32_t value);

  public:
  // optional uint64 skbaddr = 15;
  bool has_skbaddr() const;
  void clear_skbaddr() ;
  ::uint64_t skbaddr() const;
  void set_skbaddr(::uint64_t value);

  private:
  ::uint64_t _internal_skbaddr() const;
  void _internal_set_skbaddr(::uint64_t value);

  public:
  // optional uint32 queue_mapping = 14;
  bool has_queue_mapping() const;
  void clear_queue_mapping() ;
  ::uint32_t queue_mapping() const;
  void set_queue_mapping(::uint32_t value);

  private:
  ::uint32_t _internal_queue_mapping() const;
  void _internal_set_queue_mapping(::uint32_t value);

  public:
  // optional uint32 truesize = 16;
  bool has_truesize() const;
  void clear_truesize() ;
  ::uint32_t truesize() const;
  void set_truesize(::uint32_t value);

  private:
  ::uint32_t _internal_truesize() const;
  void _internal_set_truesize(::uint32_t value);

  public:
  // optional uint32 vlan_proto = 17;
  bool has_vlan_proto() const;
  void clear_vlan_proto() ;
  ::uint32_t vlan_proto() const;
  void set_vlan_proto(::uint32_t value);

  private:
  ::uint32_t _internal_vlan_proto() const;
  void _internal_set_vlan_proto(::uint32_t value);

  public:
  // optional uint32 vlan_tagged = 18;
  bool has_vlan_tagged() const;
  void clear_vlan_tagged() ;
  ::uint32_t vlan_tagged() const;
  void set_vlan_tagged(::uint32_t value);

  private:
  ::uint32_t _internal_vlan_tagged() const;
  void _internal_set_vlan_tagged(::uint32_t value);

  public:
  // optional uint32 vlan_tci = 19;
  bool has_vlan_tci() const;
  void clear_vlan_tci() ;
  ::uint32_t vlan_tci() const;
  void set_vlan_tci(::uint32_t value);

  private:
  ::uint32_t _internal_vlan_tci() const;
  void _internal_set_vlan_tci(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t data_len_;
    ::uint32_t gso_size_;
    ::uint32_t gso_type_;
    ::uint32_t hash_;
    ::uint32_t ip_summed_;
    ::uint32_t l4_hash_;
    ::uint32_t len_;
    ::int32_t mac_header_;
    ::uint32_t mac_header_valid_;
    ::uint32_t napi_id_;
    ::uint32_t nr_frags_;
    ::uint32_t protocol_;
    ::uint64_t skbaddr_;
    ::uint32_t queue_mapping_;
    ::uint32_t truesize_;
    ::uint32_t vlan_proto_;
    ::uint32_t vlan_tagged_;
    ::uint32_t vlan_tci_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto;
};// -------------------------------------------------------------------

class NapiGroReceiveExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NapiGroReceiveExitFtraceEvent) */ {
 public:
  inline NapiGroReceiveExitFtraceEvent() : NapiGroReceiveExitFtraceEvent(nullptr) {}
  ~NapiGroReceiveExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NapiGroReceiveExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NapiGroReceiveExitFtraceEvent(const NapiGroReceiveExitFtraceEvent& from);
  NapiGroReceiveExitFtraceEvent(NapiGroReceiveExitFtraceEvent&& from) noexcept
    : NapiGroReceiveExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline NapiGroReceiveExitFtraceEvent& operator=(const NapiGroReceiveExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NapiGroReceiveExitFtraceEvent& operator=(NapiGroReceiveExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NapiGroReceiveExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NapiGroReceiveExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const NapiGroReceiveExitFtraceEvent*>(
               &_NapiGroReceiveExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NapiGroReceiveExitFtraceEvent& a, NapiGroReceiveExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NapiGroReceiveExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NapiGroReceiveExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NapiGroReceiveExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NapiGroReceiveExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NapiGroReceiveExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NapiGroReceiveExitFtraceEvent& from) {
    NapiGroReceiveExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NapiGroReceiveExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NapiGroReceiveExitFtraceEvent";
  }
  protected:
  explicit NapiGroReceiveExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // optional int32 ret = 1;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.NapiGroReceiveExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetifReceiveSkbFtraceEvent

// optional uint32 len = 1;
inline bool NetifReceiveSkbFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetifReceiveSkbFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t NetifReceiveSkbFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetifReceiveSkbFtraceEvent.len)
  return _internal_len();
}
inline void NetifReceiveSkbFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetifReceiveSkbFtraceEvent.len)
}
inline ::uint32_t NetifReceiveSkbFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void NetifReceiveSkbFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.len_ = value;
}

// optional string name = 2;
inline bool NetifReceiveSkbFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetifReceiveSkbFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetifReceiveSkbFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetifReceiveSkbFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetifReceiveSkbFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.NetifReceiveSkbFtraceEvent.name)
}
inline std::string* NetifReceiveSkbFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NetifReceiveSkbFtraceEvent.name)
  return _s;
}
inline const std::string& NetifReceiveSkbFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NetifReceiveSkbFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifReceiveSkbFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* NetifReceiveSkbFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NetifReceiveSkbFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NetifReceiveSkbFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NetifReceiveSkbFtraceEvent.name)
}

// optional uint64 skbaddr = 3;
inline bool NetifReceiveSkbFtraceEvent::has_skbaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetifReceiveSkbFtraceEvent::clear_skbaddr() {
  _impl_.skbaddr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t NetifReceiveSkbFtraceEvent::skbaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetifReceiveSkbFtraceEvent.skbaddr)
  return _internal_skbaddr();
}
inline void NetifReceiveSkbFtraceEvent::set_skbaddr(::uint64_t value) {
  _internal_set_skbaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetifReceiveSkbFtraceEvent.skbaddr)
}
inline ::uint64_t NetifReceiveSkbFtraceEvent::_internal_skbaddr() const {
  return _impl_.skbaddr_;
}
inline void NetifReceiveSkbFtraceEvent::_internal_set_skbaddr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.skbaddr_ = value;
}

// -------------------------------------------------------------------

// NetDevXmitFtraceEvent

// optional uint32 len = 1;
inline bool NetDevXmitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetDevXmitFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t NetDevXmitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetDevXmitFtraceEvent.len)
  return _internal_len();
}
inline void NetDevXmitFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetDevXmitFtraceEvent.len)
}
inline ::uint32_t NetDevXmitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void NetDevXmitFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.len_ = value;
}

// optional string name = 2;
inline bool NetDevXmitFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetDevXmitFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetDevXmitFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetDevXmitFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetDevXmitFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.NetDevXmitFtraceEvent.name)
}
inline std::string* NetDevXmitFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NetDevXmitFtraceEvent.name)
  return _s;
}
inline const std::string& NetDevXmitFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NetDevXmitFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetDevXmitFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* NetDevXmitFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NetDevXmitFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NetDevXmitFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NetDevXmitFtraceEvent.name)
}

// optional int32 rc = 3;
inline bool NetDevXmitFtraceEvent::has_rc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetDevXmitFtraceEvent::clear_rc() {
  _impl_.rc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t NetDevXmitFtraceEvent::rc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetDevXmitFtraceEvent.rc)
  return _internal_rc();
}
inline void NetDevXmitFtraceEvent::set_rc(::int32_t value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetDevXmitFtraceEvent.rc)
}
inline ::int32_t NetDevXmitFtraceEvent::_internal_rc() const {
  return _impl_.rc_;
}
inline void NetDevXmitFtraceEvent::_internal_set_rc(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rc_ = value;
}

// optional uint64 skbaddr = 4;
inline bool NetDevXmitFtraceEvent::has_skbaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetDevXmitFtraceEvent::clear_skbaddr() {
  _impl_.skbaddr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t NetDevXmitFtraceEvent::skbaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetDevXmitFtraceEvent.skbaddr)
  return _internal_skbaddr();
}
inline void NetDevXmitFtraceEvent::set_skbaddr(::uint64_t value) {
  _internal_set_skbaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetDevXmitFtraceEvent.skbaddr)
}
inline ::uint64_t NetDevXmitFtraceEvent::_internal_skbaddr() const {
  return _impl_.skbaddr_;
}
inline void NetDevXmitFtraceEvent::_internal_set_skbaddr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skbaddr_ = value;
}

// -------------------------------------------------------------------

// NapiGroReceiveEntryFtraceEvent

// optional uint32 data_len = 1;
inline bool NapiGroReceiveEntryFtraceEvent::has_data_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_data_len() {
  _impl_.data_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::data_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.data_len)
  return _internal_data_len();
}
inline void NapiGroReceiveEntryFtraceEvent::set_data_len(::uint32_t value) {
  _internal_set_data_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.data_len)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_data_len() const {
  return _impl_.data_len_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_data_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_len_ = value;
}

// optional uint32 gso_size = 2;
inline bool NapiGroReceiveEntryFtraceEvent::has_gso_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_gso_size() {
  _impl_.gso_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::gso_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.gso_size)
  return _internal_gso_size();
}
inline void NapiGroReceiveEntryFtraceEvent::set_gso_size(::uint32_t value) {
  _internal_set_gso_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.gso_size)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_gso_size() const {
  return _impl_.gso_size_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_gso_size(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gso_size_ = value;
}

// optional uint32 gso_type = 3;
inline bool NapiGroReceiveEntryFtraceEvent::has_gso_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_gso_type() {
  _impl_.gso_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::gso_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.gso_type)
  return _internal_gso_type();
}
inline void NapiGroReceiveEntryFtraceEvent::set_gso_type(::uint32_t value) {
  _internal_set_gso_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.gso_type)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_gso_type() const {
  return _impl_.gso_type_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_gso_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gso_type_ = value;
}

// optional uint32 hash = 4;
inline bool NapiGroReceiveEntryFtraceEvent::has_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_hash() {
  _impl_.hash_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.hash)
  return _internal_hash();
}
inline void NapiGroReceiveEntryFtraceEvent::set_hash(::uint32_t value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.hash)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_hash() const {
  return _impl_.hash_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_hash(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.hash_ = value;
}

// optional uint32 ip_summed = 5;
inline bool NapiGroReceiveEntryFtraceEvent::has_ip_summed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_ip_summed() {
  _impl_.ip_summed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::ip_summed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.ip_summed)
  return _internal_ip_summed();
}
inline void NapiGroReceiveEntryFtraceEvent::set_ip_summed(::uint32_t value) {
  _internal_set_ip_summed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.ip_summed)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_ip_summed() const {
  return _impl_.ip_summed_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_ip_summed(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ip_summed_ = value;
}

// optional uint32 l4_hash = 6;
inline bool NapiGroReceiveEntryFtraceEvent::has_l4_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_l4_hash() {
  _impl_.l4_hash_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::l4_hash() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.l4_hash)
  return _internal_l4_hash();
}
inline void NapiGroReceiveEntryFtraceEvent::set_l4_hash(::uint32_t value) {
  _internal_set_l4_hash(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.l4_hash)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_l4_hash() const {
  return _impl_.l4_hash_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_l4_hash(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.l4_hash_ = value;
}

// optional uint32 len = 7;
inline bool NapiGroReceiveEntryFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.len)
  return _internal_len();
}
inline void NapiGroReceiveEntryFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.len)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.len_ = value;
}

// optional int32 mac_header = 8;
inline bool NapiGroReceiveEntryFtraceEvent::has_mac_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_mac_header() {
  _impl_.mac_header_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t NapiGroReceiveEntryFtraceEvent::mac_header() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.mac_header)
  return _internal_mac_header();
}
inline void NapiGroReceiveEntryFtraceEvent::set_mac_header(::int32_t value) {
  _internal_set_mac_header(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.mac_header)
}
inline ::int32_t NapiGroReceiveEntryFtraceEvent::_internal_mac_header() const {
  return _impl_.mac_header_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_mac_header(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.mac_header_ = value;
}

// optional uint32 mac_header_valid = 9;
inline bool NapiGroReceiveEntryFtraceEvent::has_mac_header_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_mac_header_valid() {
  _impl_.mac_header_valid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::mac_header_valid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.mac_header_valid)
  return _internal_mac_header_valid();
}
inline void NapiGroReceiveEntryFtraceEvent::set_mac_header_valid(::uint32_t value) {
  _internal_set_mac_header_valid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.mac_header_valid)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_mac_header_valid() const {
  return _impl_.mac_header_valid_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_mac_header_valid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.mac_header_valid_ = value;
}

// optional string name = 10;
inline bool NapiGroReceiveEntryFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NapiGroReceiveEntryFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NapiGroReceiveEntryFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.name)
}
inline std::string* NapiGroReceiveEntryFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NapiGroReceiveEntryFtraceEvent.name)
  return _s;
}
inline const std::string& NapiGroReceiveEntryFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NapiGroReceiveEntryFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* NapiGroReceiveEntryFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NapiGroReceiveEntryFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NapiGroReceiveEntryFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NapiGroReceiveEntryFtraceEvent.name)
}

// optional uint32 napi_id = 11;
inline bool NapiGroReceiveEntryFtraceEvent::has_napi_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_napi_id() {
  _impl_.napi_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::napi_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.napi_id)
  return _internal_napi_id();
}
inline void NapiGroReceiveEntryFtraceEvent::set_napi_id(::uint32_t value) {
  _internal_set_napi_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.napi_id)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_napi_id() const {
  return _impl_.napi_id_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_napi_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.napi_id_ = value;
}

// optional uint32 nr_frags = 12;
inline bool NapiGroReceiveEntryFtraceEvent::has_nr_frags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_nr_frags() {
  _impl_.nr_frags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::nr_frags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.nr_frags)
  return _internal_nr_frags();
}
inline void NapiGroReceiveEntryFtraceEvent::set_nr_frags(::uint32_t value) {
  _internal_set_nr_frags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.nr_frags)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_nr_frags() const {
  return _impl_.nr_frags_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_nr_frags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.nr_frags_ = value;
}

// optional uint32 protocol = 13;
inline bool NapiGroReceiveEntryFtraceEvent::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_protocol() {
  _impl_.protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.protocol)
  return _internal_protocol();
}
inline void NapiGroReceiveEntryFtraceEvent::set_protocol(::uint32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.protocol)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_protocol() const {
  return _impl_.protocol_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_protocol(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.protocol_ = value;
}

// optional uint32 queue_mapping = 14;
inline bool NapiGroReceiveEntryFtraceEvent::has_queue_mapping() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_queue_mapping() {
  _impl_.queue_mapping_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::queue_mapping() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.queue_mapping)
  return _internal_queue_mapping();
}
inline void NapiGroReceiveEntryFtraceEvent::set_queue_mapping(::uint32_t value) {
  _internal_set_queue_mapping(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.queue_mapping)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_queue_mapping() const {
  return _impl_.queue_mapping_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_queue_mapping(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.queue_mapping_ = value;
}

// optional uint64 skbaddr = 15;
inline bool NapiGroReceiveEntryFtraceEvent::has_skbaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_skbaddr() {
  _impl_.skbaddr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint64_t NapiGroReceiveEntryFtraceEvent::skbaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.skbaddr)
  return _internal_skbaddr();
}
inline void NapiGroReceiveEntryFtraceEvent::set_skbaddr(::uint64_t value) {
  _internal_set_skbaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.skbaddr)
}
inline ::uint64_t NapiGroReceiveEntryFtraceEvent::_internal_skbaddr() const {
  return _impl_.skbaddr_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_skbaddr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.skbaddr_ = value;
}

// optional uint32 truesize = 16;
inline bool NapiGroReceiveEntryFtraceEvent::has_truesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_truesize() {
  _impl_.truesize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::truesize() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.truesize)
  return _internal_truesize();
}
inline void NapiGroReceiveEntryFtraceEvent::set_truesize(::uint32_t value) {
  _internal_set_truesize(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.truesize)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_truesize() const {
  return _impl_.truesize_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_truesize(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.truesize_ = value;
}

// optional uint32 vlan_proto = 17;
inline bool NapiGroReceiveEntryFtraceEvent::has_vlan_proto() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_vlan_proto() {
  _impl_.vlan_proto_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::vlan_proto() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.vlan_proto)
  return _internal_vlan_proto();
}
inline void NapiGroReceiveEntryFtraceEvent::set_vlan_proto(::uint32_t value) {
  _internal_set_vlan_proto(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.vlan_proto)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_vlan_proto() const {
  return _impl_.vlan_proto_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_vlan_proto(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.vlan_proto_ = value;
}

// optional uint32 vlan_tagged = 18;
inline bool NapiGroReceiveEntryFtraceEvent::has_vlan_tagged() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_vlan_tagged() {
  _impl_.vlan_tagged_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::vlan_tagged() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.vlan_tagged)
  return _internal_vlan_tagged();
}
inline void NapiGroReceiveEntryFtraceEvent::set_vlan_tagged(::uint32_t value) {
  _internal_set_vlan_tagged(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.vlan_tagged)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_vlan_tagged() const {
  return _impl_.vlan_tagged_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_vlan_tagged(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.vlan_tagged_ = value;
}

// optional uint32 vlan_tci = 19;
inline bool NapiGroReceiveEntryFtraceEvent::has_vlan_tci() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void NapiGroReceiveEntryFtraceEvent::clear_vlan_tci() {
  _impl_.vlan_tci_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::vlan_tci() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveEntryFtraceEvent.vlan_tci)
  return _internal_vlan_tci();
}
inline void NapiGroReceiveEntryFtraceEvent::set_vlan_tci(::uint32_t value) {
  _internal_set_vlan_tci(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveEntryFtraceEvent.vlan_tci)
}
inline ::uint32_t NapiGroReceiveEntryFtraceEvent::_internal_vlan_tci() const {
  return _impl_.vlan_tci_;
}
inline void NapiGroReceiveEntryFtraceEvent::_internal_set_vlan_tci(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.vlan_tci_ = value;
}

// -------------------------------------------------------------------

// NapiGroReceiveExitFtraceEvent

// optional int32 ret = 1;
inline bool NapiGroReceiveExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NapiGroReceiveExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NapiGroReceiveExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NapiGroReceiveExitFtraceEvent.ret)
  return _internal_ret();
}
inline void NapiGroReceiveExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NapiGroReceiveExitFtraceEvent.ret)
}
inline ::int32_t NapiGroReceiveExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void NapiGroReceiveExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ret_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_2epb_2eh
