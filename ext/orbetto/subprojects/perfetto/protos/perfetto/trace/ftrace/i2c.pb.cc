// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/i2c.proto

#include "protos/perfetto/trace/ftrace/i2c.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR I2cReadFtraceEvent::I2cReadFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.msg_nr_)*/ 0u

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.len_)*/ 0u
} {}
struct I2cReadFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR I2cReadFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~I2cReadFtraceEventDefaultTypeInternal() {}
  union {
    I2cReadFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 I2cReadFtraceEventDefaultTypeInternal _I2cReadFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR I2cWriteFtraceEvent::I2cWriteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.msg_nr_)*/ 0u

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.len_)*/ 0u

  , /*decltype(_impl_.buf_)*/ 0u
} {}
struct I2cWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR I2cWriteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~I2cWriteFtraceEventDefaultTypeInternal() {}
  union {
    I2cWriteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 I2cWriteFtraceEventDefaultTypeInternal _I2cWriteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR I2cResultFtraceEvent::I2cResultFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.nr_msgs_)*/ 0u

  , /*decltype(_impl_.ret_)*/ 0
} {}
struct I2cResultFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR I2cResultFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~I2cResultFtraceEventDefaultTypeInternal() {}
  union {
    I2cResultFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 I2cResultFtraceEventDefaultTypeInternal _I2cResultFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR I2cReplyFtraceEvent::I2cReplyFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.msg_nr_)*/ 0u

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.len_)*/ 0u

  , /*decltype(_impl_.buf_)*/ 0u
} {}
struct I2cReplyFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR I2cReplyFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~I2cReplyFtraceEventDefaultTypeInternal() {}
  union {
    I2cReplyFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 I2cReplyFtraceEventDefaultTypeInternal _I2cReplyFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmbusReadFtraceEvent::SmbusReadFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.command_)*/ 0u

  , /*decltype(_impl_.protocol_)*/ 0u
} {}
struct SmbusReadFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmbusReadFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmbusReadFtraceEventDefaultTypeInternal() {}
  union {
    SmbusReadFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmbusReadFtraceEventDefaultTypeInternal _SmbusReadFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmbusWriteFtraceEvent::SmbusWriteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.command_)*/ 0u

  , /*decltype(_impl_.len_)*/ 0u

  , /*decltype(_impl_.protocol_)*/ 0u
} {}
struct SmbusWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmbusWriteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmbusWriteFtraceEventDefaultTypeInternal() {}
  union {
    SmbusWriteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmbusWriteFtraceEventDefaultTypeInternal _SmbusWriteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmbusResultFtraceEvent::SmbusResultFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.read_write_)*/ 0u

  , /*decltype(_impl_.command_)*/ 0u

  , /*decltype(_impl_.res_)*/ 0

  , /*decltype(_impl_.protocol_)*/ 0u
} {}
struct SmbusResultFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmbusResultFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmbusResultFtraceEventDefaultTypeInternal() {}
  union {
    SmbusResultFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmbusResultFtraceEventDefaultTypeInternal _SmbusResultFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmbusReplyFtraceEvent::SmbusReplyFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adapter_nr_)*/ 0

  , /*decltype(_impl_.addr_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.command_)*/ 0u

  , /*decltype(_impl_.len_)*/ 0u

  , /*decltype(_impl_.protocol_)*/ 0u
} {}
struct SmbusReplyFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmbusReplyFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmbusReplyFtraceEventDefaultTypeInternal() {}
  union {
    SmbusReplyFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmbusReplyFtraceEventDefaultTypeInternal _SmbusReplyFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _impl_.msg_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReadFtraceEvent, _impl_.len_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_.msg_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cWriteFtraceEvent, _impl_.buf_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cResultFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cResultFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cResultFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cResultFtraceEvent, _impl_.nr_msgs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cResultFtraceEvent, _impl_.ret_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_.msg_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::I2cReplyFtraceEvent, _impl_.buf_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReadFtraceEvent, _impl_.protocol_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusWriteFtraceEvent, _impl_.protocol_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.read_write_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.res_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusResultFtraceEvent, _impl_.protocol_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_.adapter_nr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_.addr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_.command_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmbusReplyFtraceEvent, _impl_.protocol_),
    0,
    1,
    2,
    3,
    4,
    5,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::I2cReadFtraceEvent)},
        { 18, 32, -1, sizeof(::perfetto::protos::I2cWriteFtraceEvent)},
        { 38, 49, -1, sizeof(::perfetto::protos::I2cResultFtraceEvent)},
        { 52, 66, -1, sizeof(::perfetto::protos::I2cReplyFtraceEvent)},
        { 72, 85, -1, sizeof(::perfetto::protos::SmbusReadFtraceEvent)},
        { 90, 104, -1, sizeof(::perfetto::protos::SmbusWriteFtraceEvent)},
        { 110, 125, -1, sizeof(::perfetto::protos::SmbusResultFtraceEvent)},
        { 132, 146, -1, sizeof(::perfetto::protos::SmbusReplyFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_I2cReadFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_I2cWriteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_I2cResultFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_I2cReplyFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SmbusReadFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SmbusWriteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SmbusResultFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_SmbusReplyFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/ftrace/i2c.proto"
    "\022\017perfetto.protos\"b\n\022I2cReadFtraceEvent\022"
    "\022\n\nadapter_nr\030\001 \001(\005\022\016\n\006msg_nr\030\002 \001(\r\022\014\n\004a"
    "ddr\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\022\013\n\003len\030\005 \001(\r\"p\n"
    "\023I2cWriteFtraceEvent\022\022\n\nadapter_nr\030\001 \001(\005"
    "\022\016\n\006msg_nr\030\002 \001(\r\022\014\n\004addr\030\003 \001(\r\022\r\n\005flags\030"
    "\004 \001(\r\022\013\n\003len\030\005 \001(\r\022\013\n\003buf\030\006 \001(\r\"H\n\024I2cRe"
    "sultFtraceEvent\022\022\n\nadapter_nr\030\001 \001(\005\022\017\n\007n"
    "r_msgs\030\002 \001(\r\022\013\n\003ret\030\003 \001(\005\"p\n\023I2cReplyFtr"
    "aceEvent\022\022\n\nadapter_nr\030\001 \001(\005\022\016\n\006msg_nr\030\002"
    " \001(\r\022\014\n\004addr\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\022\013\n\003len"
    "\030\005 \001(\r\022\013\n\003buf\030\006 \001(\r\"j\n\024SmbusReadFtraceEv"
    "ent\022\022\n\nadapter_nr\030\001 \001(\005\022\r\n\005flags\030\002 \001(\r\022\014"
    "\n\004addr\030\003 \001(\r\022\017\n\007command\030\004 \001(\r\022\020\n\010protoco"
    "l\030\005 \001(\r\"x\n\025SmbusWriteFtraceEvent\022\022\n\nadap"
    "ter_nr\030\001 \001(\005\022\014\n\004addr\030\002 \001(\r\022\r\n\005flags\030\003 \001("
    "\r\022\017\n\007command\030\004 \001(\r\022\013\n\003len\030\005 \001(\r\022\020\n\010proto"
    "col\030\006 \001(\r\"\215\001\n\026SmbusResultFtraceEvent\022\022\n\n"
    "adapter_nr\030\001 \001(\005\022\014\n\004addr\030\002 \001(\r\022\r\n\005flags\030"
    "\003 \001(\r\022\022\n\nread_write\030\004 \001(\r\022\017\n\007command\030\005 \001"
    "(\r\022\013\n\003res\030\006 \001(\005\022\020\n\010protocol\030\007 \001(\r\"x\n\025Smb"
    "usReplyFtraceEvent\022\022\n\nadapter_nr\030\001 \001(\005\022\014"
    "\n\004addr\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\017\n\007command\030\004"
    " \001(\r\022\013\n\003len\030\005 \001(\r\022\020\n\010protocol\030\006 \001(\r"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto = {
    false,
    false,
    955,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto,
    "protos/perfetto/trace/ftrace/i2c.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class I2cReadFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<I2cReadFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(I2cReadFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

I2cReadFtraceEvent::I2cReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.I2cReadFtraceEvent)
}
I2cReadFtraceEvent::I2cReadFtraceEvent(const I2cReadFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.I2cReadFtraceEvent)
}

inline void I2cReadFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.msg_nr_) { 0u }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.len_) { 0u }

  };
}

I2cReadFtraceEvent::~I2cReadFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.I2cReadFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void I2cReadFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void I2cReadFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void I2cReadFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.I2cReadFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.len_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.len_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* I2cReadFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 msg_nr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_msg_nr(&has_bits);
          _impl_.msg_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* I2cReadFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.I2cReadFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 msg_nr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_msg_nr(), target);
  }

  // optional uint32 addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_addr(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_flags(), target);
  }

  // optional uint32 len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.I2cReadFtraceEvent)
  return target;
}

::size_t I2cReadFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.I2cReadFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 msg_nr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_msg_nr());
    }

    // optional uint32 addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData I2cReadFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    I2cReadFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*I2cReadFtraceEvent::GetClassData() const { return &_class_data_; }


void I2cReadFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<I2cReadFtraceEvent*>(&to_msg);
  auto& from = static_cast<const I2cReadFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.I2cReadFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msg_nr_ = from._impl_.msg_nr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void I2cReadFtraceEvent::CopyFrom(const I2cReadFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.I2cReadFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I2cReadFtraceEvent::IsInitialized() const {
  return true;
}

void I2cReadFtraceEvent::InternalSwap(I2cReadFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(I2cReadFtraceEvent, _impl_.len_)
      + sizeof(I2cReadFtraceEvent::_impl_.len_)
      - PROTOBUF_FIELD_OFFSET(I2cReadFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata I2cReadFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[0]);
}
// ===================================================================

class I2cWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<I2cWriteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(I2cWriteFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

I2cWriteFtraceEvent::I2cWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.I2cWriteFtraceEvent)
}
I2cWriteFtraceEvent::I2cWriteFtraceEvent(const I2cWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.I2cWriteFtraceEvent)
}

inline void I2cWriteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.msg_nr_) { 0u }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.len_) { 0u }

    , decltype(_impl_.buf_) { 0u }

  };
}

I2cWriteFtraceEvent::~I2cWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.I2cWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void I2cWriteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void I2cWriteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void I2cWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.I2cWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buf_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.buf_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* I2cWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 msg_nr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_msg_nr(&has_bits);
          _impl_.msg_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 buf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_buf(&has_bits);
          _impl_.buf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* I2cWriteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.I2cWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 msg_nr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_msg_nr(), target);
  }

  // optional uint32 addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_addr(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_flags(), target);
  }

  // optional uint32 len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_len(), target);
  }

  // optional uint32 buf = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_buf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.I2cWriteFtraceEvent)
  return target;
}

::size_t I2cWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.I2cWriteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 msg_nr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_msg_nr());
    }

    // optional uint32 addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

    // optional uint32 buf = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_buf());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData I2cWriteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    I2cWriteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*I2cWriteFtraceEvent::GetClassData() const { return &_class_data_; }


void I2cWriteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<I2cWriteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const I2cWriteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.I2cWriteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msg_nr_ = from._impl_.msg_nr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.buf_ = from._impl_.buf_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void I2cWriteFtraceEvent::CopyFrom(const I2cWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.I2cWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I2cWriteFtraceEvent::IsInitialized() const {
  return true;
}

void I2cWriteFtraceEvent::InternalSwap(I2cWriteFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(I2cWriteFtraceEvent, _impl_.buf_)
      + sizeof(I2cWriteFtraceEvent::_impl_.buf_)
      - PROTOBUF_FIELD_OFFSET(I2cWriteFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata I2cWriteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[1]);
}
// ===================================================================

class I2cResultFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<I2cResultFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(I2cResultFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nr_msgs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

I2cResultFtraceEvent::I2cResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.I2cResultFtraceEvent)
}
I2cResultFtraceEvent::I2cResultFtraceEvent(const I2cResultFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.I2cResultFtraceEvent)
}

inline void I2cResultFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.nr_msgs_) { 0u }

    , decltype(_impl_.ret_) { 0 }

  };
}

I2cResultFtraceEvent::~I2cResultFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.I2cResultFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void I2cResultFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void I2cResultFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void I2cResultFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.I2cResultFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ret_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.ret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* I2cResultFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_nr_msgs(&has_bits);
          _impl_.nr_msgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* I2cResultFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.I2cResultFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 nr_msgs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_nr_msgs(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.I2cResultFtraceEvent)
  return target;
}

::size_t I2cResultFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.I2cResultFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 nr_msgs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_msgs());
    }

    // optional int32 ret = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData I2cResultFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    I2cResultFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*I2cResultFtraceEvent::GetClassData() const { return &_class_data_; }


void I2cResultFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<I2cResultFtraceEvent*>(&to_msg);
  auto& from = static_cast<const I2cResultFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.I2cResultFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nr_msgs_ = from._impl_.nr_msgs_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void I2cResultFtraceEvent::CopyFrom(const I2cResultFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.I2cResultFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I2cResultFtraceEvent::IsInitialized() const {
  return true;
}

void I2cResultFtraceEvent::InternalSwap(I2cResultFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(I2cResultFtraceEvent, _impl_.ret_)
      + sizeof(I2cResultFtraceEvent::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(I2cResultFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata I2cResultFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[2]);
}
// ===================================================================

class I2cReplyFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<I2cReplyFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(I2cReplyFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

I2cReplyFtraceEvent::I2cReplyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.I2cReplyFtraceEvent)
}
I2cReplyFtraceEvent::I2cReplyFtraceEvent(const I2cReplyFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.I2cReplyFtraceEvent)
}

inline void I2cReplyFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.msg_nr_) { 0u }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.len_) { 0u }

    , decltype(_impl_.buf_) { 0u }

  };
}

I2cReplyFtraceEvent::~I2cReplyFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.I2cReplyFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void I2cReplyFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void I2cReplyFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void I2cReplyFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.I2cReplyFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buf_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.buf_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* I2cReplyFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 msg_nr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_msg_nr(&has_bits);
          _impl_.msg_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 buf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_buf(&has_bits);
          _impl_.buf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* I2cReplyFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.I2cReplyFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 msg_nr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_msg_nr(), target);
  }

  // optional uint32 addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_addr(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_flags(), target);
  }

  // optional uint32 len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_len(), target);
  }

  // optional uint32 buf = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_buf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.I2cReplyFtraceEvent)
  return target;
}

::size_t I2cReplyFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.I2cReplyFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 msg_nr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_msg_nr());
    }

    // optional uint32 addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

    // optional uint32 buf = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_buf());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData I2cReplyFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    I2cReplyFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*I2cReplyFtraceEvent::GetClassData() const { return &_class_data_; }


void I2cReplyFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<I2cReplyFtraceEvent*>(&to_msg);
  auto& from = static_cast<const I2cReplyFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.I2cReplyFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msg_nr_ = from._impl_.msg_nr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.buf_ = from._impl_.buf_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void I2cReplyFtraceEvent::CopyFrom(const I2cReplyFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.I2cReplyFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I2cReplyFtraceEvent::IsInitialized() const {
  return true;
}

void I2cReplyFtraceEvent::InternalSwap(I2cReplyFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(I2cReplyFtraceEvent, _impl_.buf_)
      + sizeof(I2cReplyFtraceEvent::_impl_.buf_)
      - PROTOBUF_FIELD_OFFSET(I2cReplyFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata I2cReplyFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[3]);
}
// ===================================================================

class SmbusReadFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SmbusReadFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SmbusReadFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SmbusReadFtraceEvent::SmbusReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SmbusReadFtraceEvent)
}
SmbusReadFtraceEvent::SmbusReadFtraceEvent(const SmbusReadFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SmbusReadFtraceEvent)
}

inline void SmbusReadFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.command_) { 0u }

    , decltype(_impl_.protocol_) { 0u }

  };
}

SmbusReadFtraceEvent::~SmbusReadFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SmbusReadFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmbusReadFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SmbusReadFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmbusReadFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SmbusReadFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmbusReadFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_command(&has_bits);
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmbusReadFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SmbusReadFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_flags(), target);
  }

  // optional uint32 addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_addr(), target);
  }

  // optional uint32 command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_command(), target);
  }

  // optional uint32 protocol = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SmbusReadFtraceEvent)
  return target;
}

::size_t SmbusReadFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SmbusReadFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_command());
    }

    // optional uint32 protocol = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmbusReadFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmbusReadFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmbusReadFtraceEvent::GetClassData() const { return &_class_data_; }


void SmbusReadFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmbusReadFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SmbusReadFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SmbusReadFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmbusReadFtraceEvent::CopyFrom(const SmbusReadFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SmbusReadFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmbusReadFtraceEvent::IsInitialized() const {
  return true;
}

void SmbusReadFtraceEvent::InternalSwap(SmbusReadFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmbusReadFtraceEvent, _impl_.protocol_)
      + sizeof(SmbusReadFtraceEvent::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(SmbusReadFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmbusReadFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[4]);
}
// ===================================================================

class SmbusWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SmbusWriteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SmbusWriteFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SmbusWriteFtraceEvent::SmbusWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SmbusWriteFtraceEvent)
}
SmbusWriteFtraceEvent::SmbusWriteFtraceEvent(const SmbusWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SmbusWriteFtraceEvent)
}

inline void SmbusWriteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.command_) { 0u }

    , decltype(_impl_.len_) { 0u }

    , decltype(_impl_.protocol_) { 0u }

  };
}

SmbusWriteFtraceEvent::~SmbusWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SmbusWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmbusWriteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SmbusWriteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmbusWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SmbusWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmbusWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_command(&has_bits);
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmbusWriteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SmbusWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_addr(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_flags(), target);
  }

  // optional uint32 command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_command(), target);
  }

  // optional uint32 len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_len(), target);
  }

  // optional uint32 protocol = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SmbusWriteFtraceEvent)
  return target;
}

::size_t SmbusWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SmbusWriteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_command());
    }

    // optional uint32 len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

    // optional uint32 protocol = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmbusWriteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmbusWriteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmbusWriteFtraceEvent::GetClassData() const { return &_class_data_; }


void SmbusWriteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmbusWriteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SmbusWriteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SmbusWriteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmbusWriteFtraceEvent::CopyFrom(const SmbusWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SmbusWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmbusWriteFtraceEvent::IsInitialized() const {
  return true;
}

void SmbusWriteFtraceEvent::InternalSwap(SmbusWriteFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmbusWriteFtraceEvent, _impl_.protocol_)
      + sizeof(SmbusWriteFtraceEvent::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(SmbusWriteFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmbusWriteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[5]);
}
// ===================================================================

class SmbusResultFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SmbusResultFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SmbusResultFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_read_write(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SmbusResultFtraceEvent::SmbusResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SmbusResultFtraceEvent)
}
SmbusResultFtraceEvent::SmbusResultFtraceEvent(const SmbusResultFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SmbusResultFtraceEvent)
}

inline void SmbusResultFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.read_write_) { 0u }

    , decltype(_impl_.command_) { 0u }

    , decltype(_impl_.res_) { 0 }

    , decltype(_impl_.protocol_) { 0u }

  };
}

SmbusResultFtraceEvent::~SmbusResultFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SmbusResultFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmbusResultFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SmbusResultFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmbusResultFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SmbusResultFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmbusResultFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 read_write = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_read_write(&has_bits);
          _impl_.read_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 command = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_command(&has_bits);
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_res(&has_bits);
          _impl_.res_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmbusResultFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SmbusResultFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_addr(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_flags(), target);
  }

  // optional uint32 read_write = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_read_write(), target);
  }

  // optional uint32 command = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_command(), target);
  }

  // optional int32 res = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_res(), target);
  }

  // optional uint32 protocol = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SmbusResultFtraceEvent)
  return target;
}

::size_t SmbusResultFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SmbusResultFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 read_write = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_read_write());
    }

    // optional uint32 command = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_command());
    }

    // optional int32 res = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_res());
    }

    // optional uint32 protocol = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmbusResultFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmbusResultFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmbusResultFtraceEvent::GetClassData() const { return &_class_data_; }


void SmbusResultFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmbusResultFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SmbusResultFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SmbusResultFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.read_write_ = from._impl_.read_write_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.res_ = from._impl_.res_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmbusResultFtraceEvent::CopyFrom(const SmbusResultFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SmbusResultFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmbusResultFtraceEvent::IsInitialized() const {
  return true;
}

void SmbusResultFtraceEvent::InternalSwap(SmbusResultFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmbusResultFtraceEvent, _impl_.protocol_)
      + sizeof(SmbusResultFtraceEvent::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(SmbusResultFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmbusResultFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[6]);
}
// ===================================================================

class SmbusReplyFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SmbusReplyFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SmbusReplyFtraceEvent, _impl_._has_bits_);
  static void set_has_adapter_nr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SmbusReplyFtraceEvent::SmbusReplyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SmbusReplyFtraceEvent)
}
SmbusReplyFtraceEvent::SmbusReplyFtraceEvent(const SmbusReplyFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SmbusReplyFtraceEvent)
}

inline void SmbusReplyFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adapter_nr_) { 0 }

    , decltype(_impl_.addr_) { 0u }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.command_) { 0u }

    , decltype(_impl_.len_) { 0u }

    , decltype(_impl_.protocol_) { 0u }

  };
}

SmbusReplyFtraceEvent::~SmbusReplyFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SmbusReplyFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmbusReplyFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SmbusReplyFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmbusReplyFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SmbusReplyFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.adapter_nr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.adapter_nr_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmbusReplyFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 adapter_nr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_adapter_nr(&has_bits);
          _impl_.adapter_nr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_command(&has_bits);
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmbusReplyFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SmbusReplyFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 adapter_nr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_adapter_nr(), target);
  }

  // optional uint32 addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_addr(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_flags(), target);
  }

  // optional uint32 command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_command(), target);
  }

  // optional uint32 len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_len(), target);
  }

  // optional uint32 protocol = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SmbusReplyFtraceEvent)
  return target;
}

::size_t SmbusReplyFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SmbusReplyFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 adapter_nr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_adapter_nr());
    }

    // optional uint32 addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_addr());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional uint32 command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_command());
    }

    // optional uint32 len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

    // optional uint32 protocol = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmbusReplyFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmbusReplyFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmbusReplyFtraceEvent::GetClassData() const { return &_class_data_; }


void SmbusReplyFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmbusReplyFtraceEvent*>(&to_msg);
  auto& from = static_cast<const SmbusReplyFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SmbusReplyFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.adapter_nr_ = from._impl_.adapter_nr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmbusReplyFtraceEvent::CopyFrom(const SmbusReplyFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SmbusReplyFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmbusReplyFtraceEvent::IsInitialized() const {
  return true;
}

void SmbusReplyFtraceEvent::InternalSwap(SmbusReplyFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmbusReplyFtraceEvent, _impl_.protocol_)
      + sizeof(SmbusReplyFtraceEvent::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(SmbusReplyFtraceEvent, _impl_.adapter_nr_)>(
          reinterpret_cast<char*>(&_impl_.adapter_nr_),
          reinterpret_cast<char*>(&other->_impl_.adapter_nr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmbusReplyFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::I2cReadFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::I2cReadFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::I2cReadFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::I2cWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::I2cWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::I2cWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::I2cResultFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::I2cResultFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::I2cResultFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::I2cReplyFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::I2cReplyFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::I2cReplyFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SmbusReadFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SmbusReadFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SmbusReadFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SmbusWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SmbusWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SmbusWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SmbusResultFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SmbusResultFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SmbusResultFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SmbusReplyFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::SmbusReplyFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SmbusReplyFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
