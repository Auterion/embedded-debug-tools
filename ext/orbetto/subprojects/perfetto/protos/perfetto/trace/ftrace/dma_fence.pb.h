// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/dma_fence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto;
namespace perfetto {
namespace protos {
class DmaFenceEmitFtraceEvent;
struct DmaFenceEmitFtraceEventDefaultTypeInternal;
extern DmaFenceEmitFtraceEventDefaultTypeInternal _DmaFenceEmitFtraceEvent_default_instance_;
class DmaFenceInitFtraceEvent;
struct DmaFenceInitFtraceEventDefaultTypeInternal;
extern DmaFenceInitFtraceEventDefaultTypeInternal _DmaFenceInitFtraceEvent_default_instance_;
class DmaFenceSignaledFtraceEvent;
struct DmaFenceSignaledFtraceEventDefaultTypeInternal;
extern DmaFenceSignaledFtraceEventDefaultTypeInternal _DmaFenceSignaledFtraceEvent_default_instance_;
class DmaFenceWaitEndFtraceEvent;
struct DmaFenceWaitEndFtraceEventDefaultTypeInternal;
extern DmaFenceWaitEndFtraceEventDefaultTypeInternal _DmaFenceWaitEndFtraceEvent_default_instance_;
class DmaFenceWaitStartFtraceEvent;
struct DmaFenceWaitStartFtraceEventDefaultTypeInternal;
extern DmaFenceWaitStartFtraceEventDefaultTypeInternal _DmaFenceWaitStartFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::DmaFenceEmitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DmaFenceEmitFtraceEvent>(Arena*);
template <>
::perfetto::protos::DmaFenceInitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DmaFenceInitFtraceEvent>(Arena*);
template <>
::perfetto::protos::DmaFenceSignaledFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DmaFenceSignaledFtraceEvent>(Arena*);
template <>
::perfetto::protos::DmaFenceWaitEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DmaFenceWaitEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::DmaFenceWaitStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DmaFenceWaitStartFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class DmaFenceInitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DmaFenceInitFtraceEvent) */ {
 public:
  inline DmaFenceInitFtraceEvent() : DmaFenceInitFtraceEvent(nullptr) {}
  ~DmaFenceInitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DmaFenceInitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmaFenceInitFtraceEvent(const DmaFenceInitFtraceEvent& from);
  DmaFenceInitFtraceEvent(DmaFenceInitFtraceEvent&& from) noexcept
    : DmaFenceInitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DmaFenceInitFtraceEvent& operator=(const DmaFenceInitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmaFenceInitFtraceEvent& operator=(DmaFenceInitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmaFenceInitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmaFenceInitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DmaFenceInitFtraceEvent*>(
               &_DmaFenceInitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DmaFenceInitFtraceEvent& a, DmaFenceInitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DmaFenceInitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmaFenceInitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmaFenceInitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmaFenceInitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmaFenceInitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmaFenceInitFtraceEvent& from) {
    DmaFenceInitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmaFenceInitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DmaFenceInitFtraceEvent";
  }
  protected:
  explicit DmaFenceInitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DmaFenceInitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto;
};// -------------------------------------------------------------------

class DmaFenceEmitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DmaFenceEmitFtraceEvent) */ {
 public:
  inline DmaFenceEmitFtraceEvent() : DmaFenceEmitFtraceEvent(nullptr) {}
  ~DmaFenceEmitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DmaFenceEmitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmaFenceEmitFtraceEvent(const DmaFenceEmitFtraceEvent& from);
  DmaFenceEmitFtraceEvent(DmaFenceEmitFtraceEvent&& from) noexcept
    : DmaFenceEmitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DmaFenceEmitFtraceEvent& operator=(const DmaFenceEmitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmaFenceEmitFtraceEvent& operator=(DmaFenceEmitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmaFenceEmitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmaFenceEmitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DmaFenceEmitFtraceEvent*>(
               &_DmaFenceEmitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DmaFenceEmitFtraceEvent& a, DmaFenceEmitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DmaFenceEmitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmaFenceEmitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmaFenceEmitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmaFenceEmitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmaFenceEmitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmaFenceEmitFtraceEvent& from) {
    DmaFenceEmitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmaFenceEmitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DmaFenceEmitFtraceEvent";
  }
  protected:
  explicit DmaFenceEmitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DmaFenceEmitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto;
};// -------------------------------------------------------------------

class DmaFenceSignaledFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DmaFenceSignaledFtraceEvent) */ {
 public:
  inline DmaFenceSignaledFtraceEvent() : DmaFenceSignaledFtraceEvent(nullptr) {}
  ~DmaFenceSignaledFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DmaFenceSignaledFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmaFenceSignaledFtraceEvent(const DmaFenceSignaledFtraceEvent& from);
  DmaFenceSignaledFtraceEvent(DmaFenceSignaledFtraceEvent&& from) noexcept
    : DmaFenceSignaledFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DmaFenceSignaledFtraceEvent& operator=(const DmaFenceSignaledFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmaFenceSignaledFtraceEvent& operator=(DmaFenceSignaledFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmaFenceSignaledFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmaFenceSignaledFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DmaFenceSignaledFtraceEvent*>(
               &_DmaFenceSignaledFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DmaFenceSignaledFtraceEvent& a, DmaFenceSignaledFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DmaFenceSignaledFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmaFenceSignaledFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmaFenceSignaledFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmaFenceSignaledFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmaFenceSignaledFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmaFenceSignaledFtraceEvent& from) {
    DmaFenceSignaledFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmaFenceSignaledFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DmaFenceSignaledFtraceEvent";
  }
  protected:
  explicit DmaFenceSignaledFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DmaFenceSignaledFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto;
};// -------------------------------------------------------------------

class DmaFenceWaitStartFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DmaFenceWaitStartFtraceEvent) */ {
 public:
  inline DmaFenceWaitStartFtraceEvent() : DmaFenceWaitStartFtraceEvent(nullptr) {}
  ~DmaFenceWaitStartFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DmaFenceWaitStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmaFenceWaitStartFtraceEvent(const DmaFenceWaitStartFtraceEvent& from);
  DmaFenceWaitStartFtraceEvent(DmaFenceWaitStartFtraceEvent&& from) noexcept
    : DmaFenceWaitStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DmaFenceWaitStartFtraceEvent& operator=(const DmaFenceWaitStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmaFenceWaitStartFtraceEvent& operator=(DmaFenceWaitStartFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmaFenceWaitStartFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmaFenceWaitStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DmaFenceWaitStartFtraceEvent*>(
               &_DmaFenceWaitStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DmaFenceWaitStartFtraceEvent& a, DmaFenceWaitStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DmaFenceWaitStartFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmaFenceWaitStartFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmaFenceWaitStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmaFenceWaitStartFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmaFenceWaitStartFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmaFenceWaitStartFtraceEvent& from) {
    DmaFenceWaitStartFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmaFenceWaitStartFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DmaFenceWaitStartFtraceEvent";
  }
  protected:
  explicit DmaFenceWaitStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DmaFenceWaitStartFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto;
};// -------------------------------------------------------------------

class DmaFenceWaitEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DmaFenceWaitEndFtraceEvent) */ {
 public:
  inline DmaFenceWaitEndFtraceEvent() : DmaFenceWaitEndFtraceEvent(nullptr) {}
  ~DmaFenceWaitEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DmaFenceWaitEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmaFenceWaitEndFtraceEvent(const DmaFenceWaitEndFtraceEvent& from);
  DmaFenceWaitEndFtraceEvent(DmaFenceWaitEndFtraceEvent&& from) noexcept
    : DmaFenceWaitEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DmaFenceWaitEndFtraceEvent& operator=(const DmaFenceWaitEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmaFenceWaitEndFtraceEvent& operator=(DmaFenceWaitEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmaFenceWaitEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmaFenceWaitEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DmaFenceWaitEndFtraceEvent*>(
               &_DmaFenceWaitEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DmaFenceWaitEndFtraceEvent& a, DmaFenceWaitEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DmaFenceWaitEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmaFenceWaitEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmaFenceWaitEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmaFenceWaitEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmaFenceWaitEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmaFenceWaitEndFtraceEvent& from) {
    DmaFenceWaitEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmaFenceWaitEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DmaFenceWaitEndFtraceEvent";
  }
  protected:
  explicit DmaFenceWaitEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DmaFenceWaitEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DmaFenceInitFtraceEvent

// optional uint32 context = 1;
inline bool DmaFenceInitFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DmaFenceInitFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DmaFenceInitFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceInitFtraceEvent.context)
  return _internal_context();
}
inline void DmaFenceInitFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceInitFtraceEvent.context)
}
inline ::uint32_t DmaFenceInitFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void DmaFenceInitFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool DmaFenceInitFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DmaFenceInitFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmaFenceInitFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceInitFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceInitFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceInitFtraceEvent.driver)
}
inline std::string* DmaFenceInitFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceInitFtraceEvent.driver)
  return _s;
}
inline const std::string& DmaFenceInitFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void DmaFenceInitFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceInitFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceInitFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceInitFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceInitFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceInitFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool DmaFenceInitFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DmaFenceInitFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DmaFenceInitFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceInitFtraceEvent.seqno)
  return _internal_seqno();
}
inline void DmaFenceInitFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceInitFtraceEvent.seqno)
}
inline ::uint32_t DmaFenceInitFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void DmaFenceInitFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool DmaFenceInitFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DmaFenceInitFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmaFenceInitFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceInitFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceInitFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceInitFtraceEvent.timeline)
}
inline std::string* DmaFenceInitFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceInitFtraceEvent.timeline)
  return _s;
}
inline const std::string& DmaFenceInitFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void DmaFenceInitFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceInitFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceInitFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceInitFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceInitFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceInitFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// DmaFenceEmitFtraceEvent

// optional uint32 context = 1;
inline bool DmaFenceEmitFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DmaFenceEmitFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DmaFenceEmitFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceEmitFtraceEvent.context)
  return _internal_context();
}
inline void DmaFenceEmitFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceEmitFtraceEvent.context)
}
inline ::uint32_t DmaFenceEmitFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void DmaFenceEmitFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool DmaFenceEmitFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DmaFenceEmitFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmaFenceEmitFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceEmitFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceEmitFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceEmitFtraceEvent.driver)
}
inline std::string* DmaFenceEmitFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceEmitFtraceEvent.driver)
  return _s;
}
inline const std::string& DmaFenceEmitFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void DmaFenceEmitFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceEmitFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceEmitFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceEmitFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceEmitFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceEmitFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool DmaFenceEmitFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DmaFenceEmitFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DmaFenceEmitFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceEmitFtraceEvent.seqno)
  return _internal_seqno();
}
inline void DmaFenceEmitFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceEmitFtraceEvent.seqno)
}
inline ::uint32_t DmaFenceEmitFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void DmaFenceEmitFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool DmaFenceEmitFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DmaFenceEmitFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmaFenceEmitFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceEmitFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceEmitFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceEmitFtraceEvent.timeline)
}
inline std::string* DmaFenceEmitFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceEmitFtraceEvent.timeline)
  return _s;
}
inline const std::string& DmaFenceEmitFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void DmaFenceEmitFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceEmitFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceEmitFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceEmitFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceEmitFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceEmitFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// DmaFenceSignaledFtraceEvent

// optional uint32 context = 1;
inline bool DmaFenceSignaledFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DmaFenceSignaledFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DmaFenceSignaledFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceSignaledFtraceEvent.context)
  return _internal_context();
}
inline void DmaFenceSignaledFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceSignaledFtraceEvent.context)
}
inline ::uint32_t DmaFenceSignaledFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void DmaFenceSignaledFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool DmaFenceSignaledFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DmaFenceSignaledFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmaFenceSignaledFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceSignaledFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceSignaledFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceSignaledFtraceEvent.driver)
}
inline std::string* DmaFenceSignaledFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceSignaledFtraceEvent.driver)
  return _s;
}
inline const std::string& DmaFenceSignaledFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void DmaFenceSignaledFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceSignaledFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceSignaledFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceSignaledFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceSignaledFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceSignaledFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool DmaFenceSignaledFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DmaFenceSignaledFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DmaFenceSignaledFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceSignaledFtraceEvent.seqno)
  return _internal_seqno();
}
inline void DmaFenceSignaledFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceSignaledFtraceEvent.seqno)
}
inline ::uint32_t DmaFenceSignaledFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void DmaFenceSignaledFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool DmaFenceSignaledFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DmaFenceSignaledFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmaFenceSignaledFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceSignaledFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceSignaledFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceSignaledFtraceEvent.timeline)
}
inline std::string* DmaFenceSignaledFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceSignaledFtraceEvent.timeline)
  return _s;
}
inline const std::string& DmaFenceSignaledFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void DmaFenceSignaledFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceSignaledFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceSignaledFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceSignaledFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceSignaledFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceSignaledFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// DmaFenceWaitStartFtraceEvent

// optional uint32 context = 1;
inline bool DmaFenceWaitStartFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DmaFenceWaitStartFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DmaFenceWaitStartFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitStartFtraceEvent.context)
  return _internal_context();
}
inline void DmaFenceWaitStartFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitStartFtraceEvent.context)
}
inline ::uint32_t DmaFenceWaitStartFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void DmaFenceWaitStartFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool DmaFenceWaitStartFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DmaFenceWaitStartFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmaFenceWaitStartFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitStartFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceWaitStartFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitStartFtraceEvent.driver)
}
inline std::string* DmaFenceWaitStartFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceWaitStartFtraceEvent.driver)
  return _s;
}
inline const std::string& DmaFenceWaitStartFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void DmaFenceWaitStartFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceWaitStartFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceWaitStartFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceWaitStartFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceWaitStartFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceWaitStartFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool DmaFenceWaitStartFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DmaFenceWaitStartFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DmaFenceWaitStartFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitStartFtraceEvent.seqno)
  return _internal_seqno();
}
inline void DmaFenceWaitStartFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitStartFtraceEvent.seqno)
}
inline ::uint32_t DmaFenceWaitStartFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void DmaFenceWaitStartFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool DmaFenceWaitStartFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DmaFenceWaitStartFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmaFenceWaitStartFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitStartFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceWaitStartFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitStartFtraceEvent.timeline)
}
inline std::string* DmaFenceWaitStartFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceWaitStartFtraceEvent.timeline)
  return _s;
}
inline const std::string& DmaFenceWaitStartFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void DmaFenceWaitStartFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceWaitStartFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceWaitStartFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceWaitStartFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceWaitStartFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceWaitStartFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// DmaFenceWaitEndFtraceEvent

// optional uint32 context = 1;
inline bool DmaFenceWaitEndFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DmaFenceWaitEndFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DmaFenceWaitEndFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitEndFtraceEvent.context)
  return _internal_context();
}
inline void DmaFenceWaitEndFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitEndFtraceEvent.context)
}
inline ::uint32_t DmaFenceWaitEndFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void DmaFenceWaitEndFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool DmaFenceWaitEndFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DmaFenceWaitEndFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmaFenceWaitEndFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitEndFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceWaitEndFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitEndFtraceEvent.driver)
}
inline std::string* DmaFenceWaitEndFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceWaitEndFtraceEvent.driver)
  return _s;
}
inline const std::string& DmaFenceWaitEndFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void DmaFenceWaitEndFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceWaitEndFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceWaitEndFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceWaitEndFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceWaitEndFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceWaitEndFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool DmaFenceWaitEndFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DmaFenceWaitEndFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DmaFenceWaitEndFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitEndFtraceEvent.seqno)
  return _internal_seqno();
}
inline void DmaFenceWaitEndFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitEndFtraceEvent.seqno)
}
inline ::uint32_t DmaFenceWaitEndFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void DmaFenceWaitEndFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool DmaFenceWaitEndFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DmaFenceWaitEndFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmaFenceWaitEndFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DmaFenceWaitEndFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DmaFenceWaitEndFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DmaFenceWaitEndFtraceEvent.timeline)
}
inline std::string* DmaFenceWaitEndFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DmaFenceWaitEndFtraceEvent.timeline)
  return _s;
}
inline const std::string& DmaFenceWaitEndFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void DmaFenceWaitEndFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* DmaFenceWaitEndFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* DmaFenceWaitEndFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DmaFenceWaitEndFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DmaFenceWaitEndFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DmaFenceWaitEndFtraceEvent.timeline)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fdma_5ffence_2eproto_2epb_2eh
