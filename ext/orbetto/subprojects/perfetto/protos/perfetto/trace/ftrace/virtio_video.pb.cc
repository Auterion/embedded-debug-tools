// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/virtio_video.proto

#include "protos/perfetto/trace/ftrace/virtio_video.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR VirtioVideoCmdFtraceEvent::VirtioVideoCmdFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/ 0u

  , /*decltype(_impl_.type_)*/ 0u
} {}
struct VirtioVideoCmdFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoCmdFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoCmdFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoCmdFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoCmdFtraceEventDefaultTypeInternal _VirtioVideoCmdFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VirtioVideoCmdDoneFtraceEvent::VirtioVideoCmdDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/ 0u

  , /*decltype(_impl_.type_)*/ 0u
} {}
struct VirtioVideoCmdDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoCmdDoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoCmdDoneFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoCmdDoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoCmdDoneFtraceEventDefaultTypeInternal _VirtioVideoCmdDoneFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VirtioVideoResourceQueueFtraceEvent::VirtioVideoResourceQueueFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_size0_)*/ 0u

  , /*decltype(_impl_.data_size1_)*/ 0u

  , /*decltype(_impl_.data_size2_)*/ 0u

  , /*decltype(_impl_.data_size3_)*/ 0u

  , /*decltype(_impl_.queue_type_)*/ 0u

  , /*decltype(_impl_.resource_id_)*/ 0

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.stream_id_)*/ 0
} {}
struct VirtioVideoResourceQueueFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoResourceQueueFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoResourceQueueFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoResourceQueueFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoResourceQueueFtraceEventDefaultTypeInternal _VirtioVideoResourceQueueFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VirtioVideoResourceQueueDoneFtraceEvent::VirtioVideoResourceQueueDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_size0_)*/ 0u

  , /*decltype(_impl_.data_size1_)*/ 0u

  , /*decltype(_impl_.data_size2_)*/ 0u

  , /*decltype(_impl_.data_size3_)*/ 0u

  , /*decltype(_impl_.queue_type_)*/ 0u

  , /*decltype(_impl_.resource_id_)*/ 0

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.stream_id_)*/ 0
} {}
struct VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal() {}
  union {
    VirtioVideoResourceQueueDoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal _VirtioVideoResourceQueueDoneFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdFtraceEvent, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdFtraceEvent, _impl_.type_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent, _impl_.type_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.data_size0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.data_size1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.data_size2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.data_size3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.queue_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.resource_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent, _impl_.timestamp_),
    0,
    1,
    2,
    3,
    4,
    5,
    7,
    6,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.data_size0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.data_size1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.data_size2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.data_size3_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.queue_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.resource_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.stream_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent, _impl_.timestamp_),
    0,
    1,
    2,
    3,
    4,
    5,
    7,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::VirtioVideoCmdFtraceEvent)},
        { 12, 22, -1, sizeof(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent)},
        { 24, 40, -1, sizeof(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent)},
        { 48, 64, -1, sizeof(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_VirtioVideoCmdFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_VirtioVideoCmdDoneFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_VirtioVideoResourceQueueFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_VirtioVideoResourceQueueDoneFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/protos/perfetto/trace/ftrace/virtio_vi"
    "deo.proto\022\017perfetto.protos\"<\n\031VirtioVide"
    "oCmdFtraceEvent\022\021\n\tstream_id\030\001 \001(\r\022\014\n\004ty"
    "pe\030\002 \001(\r\"@\n\035VirtioVideoCmdDoneFtraceEven"
    "t\022\021\n\tstream_id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\"\304\001\n#V"
    "irtioVideoResourceQueueFtraceEvent\022\022\n\nda"
    "ta_size0\030\001 \001(\r\022\022\n\ndata_size1\030\002 \001(\r\022\022\n\nda"
    "ta_size2\030\003 \001(\r\022\022\n\ndata_size3\030\004 \001(\r\022\022\n\nqu"
    "eue_type\030\005 \001(\r\022\023\n\013resource_id\030\006 \001(\005\022\021\n\ts"
    "tream_id\030\007 \001(\005\022\021\n\ttimestamp\030\010 \001(\004\"\310\001\n\'Vi"
    "rtioVideoResourceQueueDoneFtraceEvent\022\022\n"
    "\ndata_size0\030\001 \001(\r\022\022\n\ndata_size1\030\002 \001(\r\022\022\n"
    "\ndata_size2\030\003 \001(\r\022\022\n\ndata_size3\030\004 \001(\r\022\022\n"
    "\nqueue_type\030\005 \001(\r\022\023\n\013resource_id\030\006 \001(\005\022\021"
    "\n\tstream_id\030\007 \001(\005\022\021\n\ttimestamp\030\010 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto = {
    false,
    false,
    596,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto,
    "protos/perfetto/trace/ftrace/virtio_video.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class VirtioVideoCmdFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoCmdFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VirtioVideoCmdFtraceEvent, _impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VirtioVideoCmdFtraceEvent::VirtioVideoCmdFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoCmdFtraceEvent)
}
VirtioVideoCmdFtraceEvent::VirtioVideoCmdFtraceEvent(const VirtioVideoCmdFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoCmdFtraceEvent)
}

inline void VirtioVideoCmdFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_) { 0u }

    , decltype(_impl_.type_) { 0u }

  };
}

VirtioVideoCmdFtraceEvent::~VirtioVideoCmdFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoCmdFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoCmdFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoCmdFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoCmdFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stream_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioVideoCmdFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VirtioVideoCmdFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_stream_id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoCmdFtraceEvent)
  return target;
}

::size_t VirtioVideoCmdFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_stream_id());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioVideoCmdFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtioVideoCmdFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioVideoCmdFtraceEvent::GetClassData() const { return &_class_data_; }


void VirtioVideoCmdFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtioVideoCmdFtraceEvent*>(&to_msg);
  auto& from = static_cast<const VirtioVideoCmdFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioVideoCmdFtraceEvent::CopyFrom(const VirtioVideoCmdFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoCmdFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoCmdFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoCmdFtraceEvent::InternalSwap(VirtioVideoCmdFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoCmdFtraceEvent, _impl_.type_)
      + sizeof(VirtioVideoCmdFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoCmdFtraceEvent, _impl_.stream_id_)>(
          reinterpret_cast<char*>(&_impl_.stream_id_),
          reinterpret_cast<char*>(&other->_impl_.stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioVideoCmdFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto[0]);
}
// ===================================================================

class VirtioVideoCmdDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoCmdDoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VirtioVideoCmdDoneFtraceEvent, _impl_._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VirtioVideoCmdDoneFtraceEvent::VirtioVideoCmdDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
}
VirtioVideoCmdDoneFtraceEvent::VirtioVideoCmdDoneFtraceEvent(const VirtioVideoCmdDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
}

inline void VirtioVideoCmdDoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_) { 0u }

    , decltype(_impl_.type_) { 0u }

  };
}

VirtioVideoCmdDoneFtraceEvent::~VirtioVideoCmdDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoCmdDoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoCmdDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoCmdDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.stream_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.stream_id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioVideoCmdDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VirtioVideoCmdDoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_stream_id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  return target;
}

::size_t VirtioVideoCmdDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stream_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_stream_id());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioVideoCmdDoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtioVideoCmdDoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioVideoCmdDoneFtraceEvent::GetClassData() const { return &_class_data_; }


void VirtioVideoCmdDoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtioVideoCmdDoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const VirtioVideoCmdDoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioVideoCmdDoneFtraceEvent::CopyFrom(const VirtioVideoCmdDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoCmdDoneFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoCmdDoneFtraceEvent::InternalSwap(VirtioVideoCmdDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoCmdDoneFtraceEvent, _impl_.type_)
      + sizeof(VirtioVideoCmdDoneFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoCmdDoneFtraceEvent, _impl_.stream_id_)>(
          reinterpret_cast<char*>(&_impl_.stream_id_),
          reinterpret_cast<char*>(&other->_impl_.stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioVideoCmdDoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto[1]);
}
// ===================================================================

class VirtioVideoResourceQueueFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoResourceQueueFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueFtraceEvent, _impl_._has_bits_);
  static void set_has_data_size0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_size1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VirtioVideoResourceQueueFtraceEvent::VirtioVideoResourceQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
}
VirtioVideoResourceQueueFtraceEvent::VirtioVideoResourceQueueFtraceEvent(const VirtioVideoResourceQueueFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
}

inline void VirtioVideoResourceQueueFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size0_) { 0u }

    , decltype(_impl_.data_size1_) { 0u }

    , decltype(_impl_.data_size2_) { 0u }

    , decltype(_impl_.data_size3_) { 0u }

    , decltype(_impl_.queue_type_) { 0u }

    , decltype(_impl_.resource_id_) { 0 }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.stream_id_) { 0 }

  };
}

VirtioVideoResourceQueueFtraceEvent::~VirtioVideoResourceQueueFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoResourceQueueFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoResourceQueueFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoResourceQueueFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.data_size0_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.stream_id_) -
        reinterpret_cast<char*>(&_impl_.data_size0_)) + sizeof(_impl_.stream_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioVideoResourceQueueFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 data_size0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_size0(&has_bits);
          _impl_.data_size0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_size1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_data_size1(&has_bits);
          _impl_.data_size1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_size2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_data_size2(&has_bits);
          _impl_.data_size2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_size3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size3(&has_bits);
          _impl_.data_size3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 queue_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_queue_type(&has_bits);
          _impl_.queue_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 resource_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_resource_id(&has_bits);
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 stream_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VirtioVideoResourceQueueFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 data_size0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_data_size0(), target);
  }

  // optional uint32 data_size1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_data_size1(), target);
  }

  // optional uint32 data_size2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_data_size2(), target);
  }

  // optional uint32 data_size3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_data_size3(), target);
  }

  // optional uint32 queue_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_queue_type(), target);
  }

  // optional int32 resource_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_resource_id(), target);
  }

  // optional int32 stream_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_stream_id(), target);
  }

  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  return target;
}

::size_t VirtioVideoResourceQueueFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 data_size0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size0());
    }

    // optional uint32 data_size1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size1());
    }

    // optional uint32 data_size2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size2());
    }

    // optional uint32 data_size3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size3());
    }

    // optional uint32 queue_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_queue_type());
    }

    // optional int32 resource_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_resource_id());
    }

    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional int32 stream_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_stream_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioVideoResourceQueueFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtioVideoResourceQueueFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioVideoResourceQueueFtraceEvent::GetClassData() const { return &_class_data_; }


void VirtioVideoResourceQueueFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtioVideoResourceQueueFtraceEvent*>(&to_msg);
  auto& from = static_cast<const VirtioVideoResourceQueueFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_size0_ = from._impl_.data_size0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_size1_ = from._impl_.data_size1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_size2_ = from._impl_.data_size2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_size3_ = from._impl_.data_size3_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.queue_type_ = from._impl_.queue_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.resource_id_ = from._impl_.resource_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioVideoResourceQueueFtraceEvent::CopyFrom(const VirtioVideoResourceQueueFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoResourceQueueFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoResourceQueueFtraceEvent::InternalSwap(VirtioVideoResourceQueueFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueFtraceEvent, _impl_.stream_id_)
      + sizeof(VirtioVideoResourceQueueFtraceEvent::_impl_.stream_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueFtraceEvent, _impl_.data_size0_)>(
          reinterpret_cast<char*>(&_impl_.data_size0_),
          reinterpret_cast<char*>(&other->_impl_.data_size0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioVideoResourceQueueFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto[2]);
}
// ===================================================================

class VirtioVideoResourceQueueDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtioVideoResourceQueueDoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueDoneFtraceEvent, _impl_._has_bits_);
  static void set_has_data_size0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_size1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_size3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_queue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VirtioVideoResourceQueueDoneFtraceEvent::VirtioVideoResourceQueueDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
}
VirtioVideoResourceQueueDoneFtraceEvent::VirtioVideoResourceQueueDoneFtraceEvent(const VirtioVideoResourceQueueDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
}

inline void VirtioVideoResourceQueueDoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size0_) { 0u }

    , decltype(_impl_.data_size1_) { 0u }

    , decltype(_impl_.data_size2_) { 0u }

    , decltype(_impl_.data_size3_) { 0u }

    , decltype(_impl_.queue_type_) { 0u }

    , decltype(_impl_.resource_id_) { 0 }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.stream_id_) { 0 }

  };
}

VirtioVideoResourceQueueDoneFtraceEvent::~VirtioVideoResourceQueueDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtioVideoResourceQueueDoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtioVideoResourceQueueDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtioVideoResourceQueueDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.data_size0_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.stream_id_) -
        reinterpret_cast<char*>(&_impl_.data_size0_)) + sizeof(_impl_.stream_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtioVideoResourceQueueDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 data_size0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_size0(&has_bits);
          _impl_.data_size0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_size1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_data_size1(&has_bits);
          _impl_.data_size1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_size2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_data_size2(&has_bits);
          _impl_.data_size2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_size3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_data_size3(&has_bits);
          _impl_.data_size3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 queue_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_queue_type(&has_bits);
          _impl_.queue_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 resource_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_resource_id(&has_bits);
          _impl_.resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 stream_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_stream_id(&has_bits);
          _impl_.stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VirtioVideoResourceQueueDoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 data_size0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_data_size0(), target);
  }

  // optional uint32 data_size1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_data_size1(), target);
  }

  // optional uint32 data_size2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_data_size2(), target);
  }

  // optional uint32 data_size3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_data_size3(), target);
  }

  // optional uint32 queue_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_queue_type(), target);
  }

  // optional int32 resource_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_resource_id(), target);
  }

  // optional int32 stream_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_stream_id(), target);
  }

  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  return target;
}

::size_t VirtioVideoResourceQueueDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 data_size0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size0());
    }

    // optional uint32 data_size1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size1());
    }

    // optional uint32 data_size2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size2());
    }

    // optional uint32 data_size3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_size3());
    }

    // optional uint32 queue_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_queue_type());
    }

    // optional int32 resource_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_resource_id());
    }

    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional int32 stream_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_stream_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtioVideoResourceQueueDoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtioVideoResourceQueueDoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtioVideoResourceQueueDoneFtraceEvent::GetClassData() const { return &_class_data_; }


void VirtioVideoResourceQueueDoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtioVideoResourceQueueDoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const VirtioVideoResourceQueueDoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_size0_ = from._impl_.data_size0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_size1_ = from._impl_.data_size1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_size2_ = from._impl_.data_size2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_size3_ = from._impl_.data_size3_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.queue_type_ = from._impl_.queue_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.resource_id_ = from._impl_.resource_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.stream_id_ = from._impl_.stream_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtioVideoResourceQueueDoneFtraceEvent::CopyFrom(const VirtioVideoResourceQueueDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtioVideoResourceQueueDoneFtraceEvent::IsInitialized() const {
  return true;
}

void VirtioVideoResourceQueueDoneFtraceEvent::InternalSwap(VirtioVideoResourceQueueDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueDoneFtraceEvent, _impl_.stream_id_)
      + sizeof(VirtioVideoResourceQueueDoneFtraceEvent::_impl_.stream_id_)
      - PROTOBUF_FIELD_OFFSET(VirtioVideoResourceQueueDoneFtraceEvent, _impl_.data_size0_)>(
          reinterpret_cast<char*>(&_impl_.data_size0_),
          reinterpret_cast<char*>(&other->_impl_.data_size0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtioVideoResourceQueueDoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoCmdFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoCmdFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoCmdFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
