// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/hyp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
namespace perfetto {
namespace protos {
class HostHcallFtraceEvent;
struct HostHcallFtraceEventDefaultTypeInternal;
extern HostHcallFtraceEventDefaultTypeInternal _HostHcallFtraceEvent_default_instance_;
class HostMemAbortFtraceEvent;
struct HostMemAbortFtraceEventDefaultTypeInternal;
extern HostMemAbortFtraceEventDefaultTypeInternal _HostMemAbortFtraceEvent_default_instance_;
class HostSmcFtraceEvent;
struct HostSmcFtraceEventDefaultTypeInternal;
extern HostSmcFtraceEventDefaultTypeInternal _HostSmcFtraceEvent_default_instance_;
class HypEnterFtraceEvent;
struct HypEnterFtraceEventDefaultTypeInternal;
extern HypEnterFtraceEventDefaultTypeInternal _HypEnterFtraceEvent_default_instance_;
class HypExitFtraceEvent;
struct HypExitFtraceEventDefaultTypeInternal;
extern HypExitFtraceEventDefaultTypeInternal _HypExitFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::HostHcallFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::HostHcallFtraceEvent>(Arena*);
template <>
::perfetto::protos::HostMemAbortFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::HostMemAbortFtraceEvent>(Arena*);
template <>
::perfetto::protos::HostSmcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::HostSmcFtraceEvent>(Arena*);
template <>
::perfetto::protos::HypEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::HypEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::HypExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::HypExitFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class HypEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:perfetto.protos.HypEnterFtraceEvent) */ {
 public:
  inline HypEnterFtraceEvent() : HypEnterFtraceEvent(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HypEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HypEnterFtraceEvent(const HypEnterFtraceEvent& from);
  HypEnterFtraceEvent(HypEnterFtraceEvent&& from) noexcept
    : HypEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline HypEnterFtraceEvent& operator=(const HypEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HypEnterFtraceEvent& operator=(HypEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HypEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HypEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const HypEnterFtraceEvent*>(
               &_HypEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HypEnterFtraceEvent& a, HypEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HypEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HypEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HypEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HypEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HypEnterFtraceEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HypEnterFtraceEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.HypEnterFtraceEvent";
  }
  protected:
  explicit HypEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.HypEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
};// -------------------------------------------------------------------

class HypExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:perfetto.protos.HypExitFtraceEvent) */ {
 public:
  inline HypExitFtraceEvent() : HypExitFtraceEvent(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HypExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HypExitFtraceEvent(const HypExitFtraceEvent& from);
  HypExitFtraceEvent(HypExitFtraceEvent&& from) noexcept
    : HypExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline HypExitFtraceEvent& operator=(const HypExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HypExitFtraceEvent& operator=(HypExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HypExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HypExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const HypExitFtraceEvent*>(
               &_HypExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HypExitFtraceEvent& a, HypExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HypExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HypExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HypExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HypExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HypExitFtraceEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HypExitFtraceEvent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.HypExitFtraceEvent";
  }
  protected:
  explicit HypExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.HypExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
};// -------------------------------------------------------------------

class HostHcallFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.HostHcallFtraceEvent) */ {
 public:
  inline HostHcallFtraceEvent() : HostHcallFtraceEvent(nullptr) {}
  ~HostHcallFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HostHcallFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostHcallFtraceEvent(const HostHcallFtraceEvent& from);
  HostHcallFtraceEvent(HostHcallFtraceEvent&& from) noexcept
    : HostHcallFtraceEvent() {
    *this = ::std::move(from);
  }

  inline HostHcallFtraceEvent& operator=(const HostHcallFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostHcallFtraceEvent& operator=(HostHcallFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostHcallFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostHcallFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const HostHcallFtraceEvent*>(
               &_HostHcallFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostHcallFtraceEvent& a, HostHcallFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HostHcallFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostHcallFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostHcallFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostHcallFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostHcallFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostHcallFtraceEvent& from) {
    HostHcallFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostHcallFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.HostHcallFtraceEvent";
  }
  protected:
  explicit HostHcallFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInvalidFieldNumber = 2,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 invalid = 2;
  bool has_invalid() const;
  void clear_invalid() ;
  ::uint32_t invalid() const;
  void set_invalid(::uint32_t value);

  private:
  ::uint32_t _internal_invalid() const;
  void _internal_set_invalid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.HostHcallFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    ::uint32_t invalid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
};// -------------------------------------------------------------------

class HostSmcFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.HostSmcFtraceEvent) */ {
 public:
  inline HostSmcFtraceEvent() : HostSmcFtraceEvent(nullptr) {}
  ~HostSmcFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HostSmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostSmcFtraceEvent(const HostSmcFtraceEvent& from);
  HostSmcFtraceEvent(HostSmcFtraceEvent&& from) noexcept
    : HostSmcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline HostSmcFtraceEvent& operator=(const HostSmcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostSmcFtraceEvent& operator=(HostSmcFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostSmcFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostSmcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const HostSmcFtraceEvent*>(
               &_HostSmcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostSmcFtraceEvent& a, HostSmcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HostSmcFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostSmcFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostSmcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostSmcFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostSmcFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostSmcFtraceEvent& from) {
    HostSmcFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostSmcFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.HostSmcFtraceEvent";
  }
  protected:
  explicit HostSmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kForwardedFieldNumber = 2,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // optional uint32 forwarded = 2;
  bool has_forwarded() const;
  void clear_forwarded() ;
  ::uint32_t forwarded() const;
  void set_forwarded(::uint32_t value);

  private:
  ::uint32_t _internal_forwarded() const;
  void _internal_set_forwarded(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.HostSmcFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t id_;
    ::uint32_t forwarded_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
};// -------------------------------------------------------------------

class HostMemAbortFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.HostMemAbortFtraceEvent) */ {
 public:
  inline HostMemAbortFtraceEvent() : HostMemAbortFtraceEvent(nullptr) {}
  ~HostMemAbortFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HostMemAbortFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostMemAbortFtraceEvent(const HostMemAbortFtraceEvent& from);
  HostMemAbortFtraceEvent(HostMemAbortFtraceEvent&& from) noexcept
    : HostMemAbortFtraceEvent() {
    *this = ::std::move(from);
  }

  inline HostMemAbortFtraceEvent& operator=(const HostMemAbortFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostMemAbortFtraceEvent& operator=(HostMemAbortFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostMemAbortFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostMemAbortFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const HostMemAbortFtraceEvent*>(
               &_HostMemAbortFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HostMemAbortFtraceEvent& a, HostMemAbortFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HostMemAbortFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostMemAbortFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostMemAbortFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostMemAbortFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostMemAbortFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostMemAbortFtraceEvent& from) {
    HostMemAbortFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostMemAbortFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.HostMemAbortFtraceEvent";
  }
  protected:
  explicit HostMemAbortFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEsrFieldNumber = 1,
    kAddrFieldNumber = 2,
  };
  // optional uint64 esr = 1;
  bool has_esr() const;
  void clear_esr() ;
  ::uint64_t esr() const;
  void set_esr(::uint64_t value);

  private:
  ::uint64_t _internal_esr() const;
  void _internal_set_esr(::uint64_t value);

  public:
  // optional uint64 addr = 2;
  bool has_addr() const;
  void clear_addr() ;
  ::uint64_t addr() const;
  void set_addr(::uint64_t value);

  private:
  ::uint64_t _internal_addr() const;
  void _internal_set_addr(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.HostMemAbortFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t esr_;
    ::uint64_t addr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HypEnterFtraceEvent

// -------------------------------------------------------------------

// HypExitFtraceEvent

// -------------------------------------------------------------------

// HostHcallFtraceEvent

// optional uint32 id = 1;
inline bool HostHcallFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HostHcallFtraceEvent::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t HostHcallFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HostHcallFtraceEvent.id)
  return _internal_id();
}
inline void HostHcallFtraceEvent::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HostHcallFtraceEvent.id)
}
inline ::uint32_t HostHcallFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void HostHcallFtraceEvent::_internal_set_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// optional uint32 invalid = 2;
inline bool HostHcallFtraceEvent::has_invalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HostHcallFtraceEvent::clear_invalid() {
  _impl_.invalid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t HostHcallFtraceEvent::invalid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HostHcallFtraceEvent.invalid)
  return _internal_invalid();
}
inline void HostHcallFtraceEvent::set_invalid(::uint32_t value) {
  _internal_set_invalid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HostHcallFtraceEvent.invalid)
}
inline ::uint32_t HostHcallFtraceEvent::_internal_invalid() const {
  return _impl_.invalid_;
}
inline void HostHcallFtraceEvent::_internal_set_invalid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.invalid_ = value;
}

// -------------------------------------------------------------------

// HostSmcFtraceEvent

// optional uint64 id = 1;
inline bool HostSmcFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HostSmcFtraceEvent::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t HostSmcFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HostSmcFtraceEvent.id)
  return _internal_id();
}
inline void HostSmcFtraceEvent::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HostSmcFtraceEvent.id)
}
inline ::uint64_t HostSmcFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void HostSmcFtraceEvent::_internal_set_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// optional uint32 forwarded = 2;
inline bool HostSmcFtraceEvent::has_forwarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HostSmcFtraceEvent::clear_forwarded() {
  _impl_.forwarded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t HostSmcFtraceEvent::forwarded() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HostSmcFtraceEvent.forwarded)
  return _internal_forwarded();
}
inline void HostSmcFtraceEvent::set_forwarded(::uint32_t value) {
  _internal_set_forwarded(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HostSmcFtraceEvent.forwarded)
}
inline ::uint32_t HostSmcFtraceEvent::_internal_forwarded() const {
  return _impl_.forwarded_;
}
inline void HostSmcFtraceEvent::_internal_set_forwarded(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.forwarded_ = value;
}

// -------------------------------------------------------------------

// HostMemAbortFtraceEvent

// optional uint64 esr = 1;
inline bool HostMemAbortFtraceEvent::has_esr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HostMemAbortFtraceEvent::clear_esr() {
  _impl_.esr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t HostMemAbortFtraceEvent::esr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HostMemAbortFtraceEvent.esr)
  return _internal_esr();
}
inline void HostMemAbortFtraceEvent::set_esr(::uint64_t value) {
  _internal_set_esr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HostMemAbortFtraceEvent.esr)
}
inline ::uint64_t HostMemAbortFtraceEvent::_internal_esr() const {
  return _impl_.esr_;
}
inline void HostMemAbortFtraceEvent::_internal_set_esr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.esr_ = value;
}

// optional uint64 addr = 2;
inline bool HostMemAbortFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HostMemAbortFtraceEvent::clear_addr() {
  _impl_.addr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t HostMemAbortFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.HostMemAbortFtraceEvent.addr)
  return _internal_addr();
}
inline void HostMemAbortFtraceEvent::set_addr(::uint64_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.HostMemAbortFtraceEvent.addr)
}
inline ::uint64_t HostMemAbortFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void HostMemAbortFtraceEvent::_internal_set_addr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.addr_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_2epb_2eh
