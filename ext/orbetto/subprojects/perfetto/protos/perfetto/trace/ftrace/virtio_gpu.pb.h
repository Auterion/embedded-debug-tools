// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/virtio_gpu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto;
namespace perfetto {
namespace protos {
class VirtioGpuCmdQueueFtraceEvent;
struct VirtioGpuCmdQueueFtraceEventDefaultTypeInternal;
extern VirtioGpuCmdQueueFtraceEventDefaultTypeInternal _VirtioGpuCmdQueueFtraceEvent_default_instance_;
class VirtioGpuCmdResponseFtraceEvent;
struct VirtioGpuCmdResponseFtraceEventDefaultTypeInternal;
extern VirtioGpuCmdResponseFtraceEventDefaultTypeInternal _VirtioGpuCmdResponseFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VirtioGpuCmdQueueFtraceEvent>(Arena*);
template <>
::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VirtioGpuCmdResponseFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class VirtioGpuCmdQueueFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VirtioGpuCmdQueueFtraceEvent) */ {
 public:
  inline VirtioGpuCmdQueueFtraceEvent() : VirtioGpuCmdQueueFtraceEvent(nullptr) {}
  ~VirtioGpuCmdQueueFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtioGpuCmdQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioGpuCmdQueueFtraceEvent(const VirtioGpuCmdQueueFtraceEvent& from);
  VirtioGpuCmdQueueFtraceEvent(VirtioGpuCmdQueueFtraceEvent&& from) noexcept
    : VirtioGpuCmdQueueFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VirtioGpuCmdQueueFtraceEvent& operator=(const VirtioGpuCmdQueueFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioGpuCmdQueueFtraceEvent& operator=(VirtioGpuCmdQueueFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioGpuCmdQueueFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioGpuCmdQueueFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VirtioGpuCmdQueueFtraceEvent*>(
               &_VirtioGpuCmdQueueFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioGpuCmdQueueFtraceEvent& a, VirtioGpuCmdQueueFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioGpuCmdQueueFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioGpuCmdQueueFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioGpuCmdQueueFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioGpuCmdQueueFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioGpuCmdQueueFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioGpuCmdQueueFtraceEvent& from) {
    VirtioGpuCmdQueueFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioGpuCmdQueueFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VirtioGpuCmdQueueFtraceEvent";
  }
  protected:
  explicit VirtioGpuCmdQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kCtxIdFieldNumber = 1,
    kDevFieldNumber = 2,
    kFenceIdFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kNumFreeFieldNumber = 6,
    kSeqnoFieldNumber = 7,
    kTypeFieldNumber = 8,
    kVqFieldNumber = 9,
  };
  // optional string name = 5;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 ctx_id = 1;
  bool has_ctx_id() const;
  void clear_ctx_id() ;
  ::uint32_t ctx_id() const;
  void set_ctx_id(::uint32_t value);

  private:
  ::uint32_t _internal_ctx_id() const;
  void _internal_set_ctx_id(::uint32_t value);

  public:
  // optional int32 dev = 2;
  bool has_dev() const;
  void clear_dev() ;
  ::int32_t dev() const;
  void set_dev(::int32_t value);

  private:
  ::int32_t _internal_dev() const;
  void _internal_set_dev(::int32_t value);

  public:
  // optional uint64 fence_id = 3;
  bool has_fence_id() const;
  void clear_fence_id() ;
  ::uint64_t fence_id() const;
  void set_fence_id(::uint64_t value);

  private:
  ::uint64_t _internal_fence_id() const;
  void _internal_set_fence_id(::uint64_t value);

  public:
  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 num_free = 6;
  bool has_num_free() const;
  void clear_num_free() ;
  ::uint32_t num_free() const;
  void set_num_free(::uint32_t value);

  private:
  ::uint32_t _internal_num_free() const;
  void _internal_set_num_free(::uint32_t value);

  public:
  // optional uint32 seqno = 7;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // optional uint32 type = 8;
  bool has_type() const;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // optional uint32 vq = 9;
  bool has_vq() const;
  void clear_vq() ;
  ::uint32_t vq() const;
  void set_vq(::uint32_t value);

  private:
  ::uint32_t _internal_vq() const;
  void _internal_set_vq(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VirtioGpuCmdQueueFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t ctx_id_;
    ::int32_t dev_;
    ::uint64_t fence_id_;
    ::uint32_t flags_;
    ::uint32_t num_free_;
    ::uint32_t seqno_;
    ::uint32_t type_;
    ::uint32_t vq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto;
};// -------------------------------------------------------------------

class VirtioGpuCmdResponseFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VirtioGpuCmdResponseFtraceEvent) */ {
 public:
  inline VirtioGpuCmdResponseFtraceEvent() : VirtioGpuCmdResponseFtraceEvent(nullptr) {}
  ~VirtioGpuCmdResponseFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtioGpuCmdResponseFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioGpuCmdResponseFtraceEvent(const VirtioGpuCmdResponseFtraceEvent& from);
  VirtioGpuCmdResponseFtraceEvent(VirtioGpuCmdResponseFtraceEvent&& from) noexcept
    : VirtioGpuCmdResponseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VirtioGpuCmdResponseFtraceEvent& operator=(const VirtioGpuCmdResponseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioGpuCmdResponseFtraceEvent& operator=(VirtioGpuCmdResponseFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioGpuCmdResponseFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioGpuCmdResponseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VirtioGpuCmdResponseFtraceEvent*>(
               &_VirtioGpuCmdResponseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioGpuCmdResponseFtraceEvent& a, VirtioGpuCmdResponseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioGpuCmdResponseFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioGpuCmdResponseFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioGpuCmdResponseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioGpuCmdResponseFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioGpuCmdResponseFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioGpuCmdResponseFtraceEvent& from) {
    VirtioGpuCmdResponseFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioGpuCmdResponseFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VirtioGpuCmdResponseFtraceEvent";
  }
  protected:
  explicit VirtioGpuCmdResponseFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kCtxIdFieldNumber = 1,
    kDevFieldNumber = 2,
    kFenceIdFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kNumFreeFieldNumber = 6,
    kSeqnoFieldNumber = 7,
    kTypeFieldNumber = 8,
    kVqFieldNumber = 9,
  };
  // optional string name = 5;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 ctx_id = 1;
  bool has_ctx_id() const;
  void clear_ctx_id() ;
  ::uint32_t ctx_id() const;
  void set_ctx_id(::uint32_t value);

  private:
  ::uint32_t _internal_ctx_id() const;
  void _internal_set_ctx_id(::uint32_t value);

  public:
  // optional int32 dev = 2;
  bool has_dev() const;
  void clear_dev() ;
  ::int32_t dev() const;
  void set_dev(::int32_t value);

  private:
  ::int32_t _internal_dev() const;
  void _internal_set_dev(::int32_t value);

  public:
  // optional uint64 fence_id = 3;
  bool has_fence_id() const;
  void clear_fence_id() ;
  ::uint64_t fence_id() const;
  void set_fence_id(::uint64_t value);

  private:
  ::uint64_t _internal_fence_id() const;
  void _internal_set_fence_id(::uint64_t value);

  public:
  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 num_free = 6;
  bool has_num_free() const;
  void clear_num_free() ;
  ::uint32_t num_free() const;
  void set_num_free(::uint32_t value);

  private:
  ::uint32_t _internal_num_free() const;
  void _internal_set_num_free(::uint32_t value);

  public:
  // optional uint32 seqno = 7;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // optional uint32 type = 8;
  bool has_type() const;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // optional uint32 vq = 9;
  bool has_vq() const;
  void clear_vq() ;
  ::uint32_t vq() const;
  void set_vq(::uint32_t value);

  private:
  ::uint32_t _internal_vq() const;
  void _internal_set_vq(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VirtioGpuCmdResponseFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t ctx_id_;
    ::int32_t dev_;
    ::uint64_t fence_id_;
    ::uint32_t flags_;
    ::uint32_t num_free_;
    ::uint32_t seqno_;
    ::uint32_t type_;
    ::uint32_t vq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VirtioGpuCmdQueueFtraceEvent

// optional uint32 ctx_id = 1;
inline bool VirtioGpuCmdQueueFtraceEvent::has_ctx_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_ctx_id() {
  _impl_.ctx_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::ctx_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.ctx_id)
  return _internal_ctx_id();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_ctx_id(::uint32_t value) {
  _internal_set_ctx_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.ctx_id)
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::_internal_ctx_id() const {
  return _impl_.ctx_id_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_ctx_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ctx_id_ = value;
}

// optional int32 dev = 2;
inline bool VirtioGpuCmdQueueFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_dev() {
  _impl_.dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t VirtioGpuCmdQueueFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.dev)
  return _internal_dev();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_dev(::int32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.dev)
}
inline ::int32_t VirtioGpuCmdQueueFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_dev(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dev_ = value;
}

// optional uint64 fence_id = 3;
inline bool VirtioGpuCmdQueueFtraceEvent::has_fence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_fence_id() {
  _impl_.fence_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t VirtioGpuCmdQueueFtraceEvent::fence_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.fence_id)
  return _internal_fence_id();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_fence_id(::uint64_t value) {
  _internal_set_fence_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.fence_id)
}
inline ::uint64_t VirtioGpuCmdQueueFtraceEvent::_internal_fence_id() const {
  return _impl_.fence_id_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_fence_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fence_id_ = value;
}

// optional uint32 flags = 4;
inline bool VirtioGpuCmdQueueFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.flags)
  return _internal_flags();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.flags)
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// optional string name = 5;
inline bool VirtioGpuCmdQueueFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VirtioGpuCmdQueueFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtioGpuCmdQueueFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.name)
}
inline std::string* VirtioGpuCmdQueueFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.name)
  return _s;
}
inline const std::string& VirtioGpuCmdQueueFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioGpuCmdQueueFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* VirtioGpuCmdQueueFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VirtioGpuCmdQueueFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.name)
}

// optional uint32 num_free = 6;
inline bool VirtioGpuCmdQueueFtraceEvent::has_num_free() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_num_free() {
  _impl_.num_free_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::num_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.num_free)
  return _internal_num_free();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_num_free(::uint32_t value) {
  _internal_set_num_free(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.num_free)
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::_internal_num_free() const {
  return _impl_.num_free_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_num_free(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_free_ = value;
}

// optional uint32 seqno = 7;
inline bool VirtioGpuCmdQueueFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.seqno)
  return _internal_seqno();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.seqno)
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.seqno_ = value;
}

// optional uint32 type = 8;
inline bool VirtioGpuCmdQueueFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.type)
  return _internal_type();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.type)
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.type_ = value;
}

// optional uint32 vq = 9;
inline bool VirtioGpuCmdQueueFtraceEvent::has_vq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VirtioGpuCmdQueueFtraceEvent::clear_vq() {
  _impl_.vq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::vq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.vq)
  return _internal_vq();
}
inline void VirtioGpuCmdQueueFtraceEvent::set_vq(::uint32_t value) {
  _internal_set_vq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdQueueFtraceEvent.vq)
}
inline ::uint32_t VirtioGpuCmdQueueFtraceEvent::_internal_vq() const {
  return _impl_.vq_;
}
inline void VirtioGpuCmdQueueFtraceEvent::_internal_set_vq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vq_ = value;
}

// -------------------------------------------------------------------

// VirtioGpuCmdResponseFtraceEvent

// optional uint32 ctx_id = 1;
inline bool VirtioGpuCmdResponseFtraceEvent::has_ctx_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_ctx_id() {
  _impl_.ctx_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::ctx_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.ctx_id)
  return _internal_ctx_id();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_ctx_id(::uint32_t value) {
  _internal_set_ctx_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.ctx_id)
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::_internal_ctx_id() const {
  return _impl_.ctx_id_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_ctx_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ctx_id_ = value;
}

// optional int32 dev = 2;
inline bool VirtioGpuCmdResponseFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_dev() {
  _impl_.dev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t VirtioGpuCmdResponseFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.dev)
  return _internal_dev();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_dev(::int32_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.dev)
}
inline ::int32_t VirtioGpuCmdResponseFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_dev(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dev_ = value;
}

// optional uint64 fence_id = 3;
inline bool VirtioGpuCmdResponseFtraceEvent::has_fence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_fence_id() {
  _impl_.fence_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t VirtioGpuCmdResponseFtraceEvent::fence_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.fence_id)
  return _internal_fence_id();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_fence_id(::uint64_t value) {
  _internal_set_fence_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.fence_id)
}
inline ::uint64_t VirtioGpuCmdResponseFtraceEvent::_internal_fence_id() const {
  return _impl_.fence_id_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_fence_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fence_id_ = value;
}

// optional uint32 flags = 4;
inline bool VirtioGpuCmdResponseFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.flags)
  return _internal_flags();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.flags)
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// optional string name = 5;
inline bool VirtioGpuCmdResponseFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VirtioGpuCmdResponseFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtioGpuCmdResponseFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.name)
}
inline std::string* VirtioGpuCmdResponseFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.name)
  return _s;
}
inline const std::string& VirtioGpuCmdResponseFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtioGpuCmdResponseFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* VirtioGpuCmdResponseFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VirtioGpuCmdResponseFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.name)
}

// optional uint32 num_free = 6;
inline bool VirtioGpuCmdResponseFtraceEvent::has_num_free() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_num_free() {
  _impl_.num_free_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::num_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.num_free)
  return _internal_num_free();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_num_free(::uint32_t value) {
  _internal_set_num_free(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.num_free)
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::_internal_num_free() const {
  return _impl_.num_free_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_num_free(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_free_ = value;
}

// optional uint32 seqno = 7;
inline bool VirtioGpuCmdResponseFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.seqno)
  return _internal_seqno();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.seqno)
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.seqno_ = value;
}

// optional uint32 type = 8;
inline bool VirtioGpuCmdResponseFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.type)
  return _internal_type();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.type)
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.type_ = value;
}

// optional uint32 vq = 9;
inline bool VirtioGpuCmdResponseFtraceEvent::has_vq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VirtioGpuCmdResponseFtraceEvent::clear_vq() {
  _impl_.vq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::vq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.vq)
  return _internal_vq();
}
inline void VirtioGpuCmdResponseFtraceEvent::set_vq(::uint32_t value) {
  _internal_set_vq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioGpuCmdResponseFtraceEvent.vq)
}
inline ::uint32_t VirtioGpuCmdResponseFtraceEvent::_internal_vq() const {
  return _impl_.vq_;
}
inline void VirtioGpuCmdResponseFtraceEvent::_internal_set_vq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.vq_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fgpu_2eproto_2epb_2eh
