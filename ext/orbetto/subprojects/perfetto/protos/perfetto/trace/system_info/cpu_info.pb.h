// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/system_info/cpu_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
namespace perfetto {
namespace protos {
class CpuInfo;
struct CpuInfoDefaultTypeInternal;
extern CpuInfoDefaultTypeInternal _CpuInfo_default_instance_;
class CpuInfo_Cpu;
struct CpuInfo_CpuDefaultTypeInternal;
extern CpuInfo_CpuDefaultTypeInternal _CpuInfo_Cpu_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::CpuInfo* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo>(Arena*);
template <>
::perfetto::protos::CpuInfo_Cpu* Arena::CreateMaybeMessage<::perfetto::protos::CpuInfo_Cpu>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class CpuInfo_Cpu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo.Cpu) */ {
 public:
  inline CpuInfo_Cpu() : CpuInfo_Cpu(nullptr) {}
  ~CpuInfo_Cpu() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuInfo_Cpu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuInfo_Cpu(const CpuInfo_Cpu& from);
  CpuInfo_Cpu(CpuInfo_Cpu&& from) noexcept
    : CpuInfo_Cpu() {
    *this = ::std::move(from);
  }

  inline CpuInfo_Cpu& operator=(const CpuInfo_Cpu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo_Cpu& operator=(CpuInfo_Cpu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuInfo_Cpu& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuInfo_Cpu* internal_default_instance() {
    return reinterpret_cast<const CpuInfo_Cpu*>(
               &_CpuInfo_Cpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuInfo_Cpu& a, CpuInfo_Cpu& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo_Cpu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuInfo_Cpu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuInfo_Cpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuInfo_Cpu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuInfo_Cpu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuInfo_Cpu& from) {
    CpuInfo_Cpu::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfo_Cpu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuInfo.Cpu";
  }
  protected:
  explicit CpuInfo_Cpu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequenciesFieldNumber = 2,
    kProcessorFieldNumber = 1,
  };
  // repeated uint32 frequencies = 2;
  int frequencies_size() const;
  private:
  int _internal_frequencies_size() const;

  public:
  void clear_frequencies() ;
  ::uint32_t frequencies(int index) const;
  void set_frequencies(int index, ::uint32_t value);
  void add_frequencies(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_frequencies();

  private:
  ::uint32_t _internal_frequencies(int index) const;
  void _internal_add_frequencies(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_frequencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_frequencies();

  public:
  // optional string processor = 1;
  bool has_processor() const;
  void clear_processor() ;
  const std::string& processor() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_processor(Arg_&& arg, Args_... args);
  std::string* mutable_processor();
  PROTOBUF_NODISCARD std::string* release_processor();
  void set_allocated_processor(std::string* ptr);

  private:
  const std::string& _internal_processor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processor(
      const std::string& value);
  std::string* _internal_mutable_processor();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo.Cpu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> frequencies_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};// -------------------------------------------------------------------

class CpuInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuInfo) */ {
 public:
  inline CpuInfo() : CpuInfo(nullptr) {}
  ~CpuInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuInfo(const CpuInfo& from);
  CpuInfo(CpuInfo&& from) noexcept
    : CpuInfo() {
    *this = ::std::move(from);
  }

  inline CpuInfo& operator=(const CpuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuInfo& operator=(CpuInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuInfo* internal_default_instance() {
    return reinterpret_cast<const CpuInfo*>(
               &_CpuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuInfo& a, CpuInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuInfo& from) {
    CpuInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuInfo";
  }
  protected:
  explicit CpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CpuInfo_Cpu Cpu;

  // accessors -------------------------------------------------------

  enum : int {
    kCpusFieldNumber = 1,
  };
  // repeated .perfetto.protos.CpuInfo.Cpu cpus = 1;
  int cpus_size() const;
  private:
  int _internal_cpus_size() const;

  public:
  void clear_cpus() ;
  ::perfetto::protos::CpuInfo_Cpu* mutable_cpus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >*
      mutable_cpus();
  private:
  const ::perfetto::protos::CpuInfo_Cpu& _internal_cpus(int index) const;
  ::perfetto::protos::CpuInfo_Cpu* _internal_add_cpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::CpuInfo_Cpu>& _internal_cpus() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::CpuInfo_Cpu>* _internal_mutable_cpus();
  public:
  const ::perfetto::protos::CpuInfo_Cpu& cpus(int index) const;
  ::perfetto::protos::CpuInfo_Cpu* add_cpus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >&
      cpus() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu > cpus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CpuInfo_Cpu

// optional string processor = 1;
inline bool CpuInfo_Cpu::has_processor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuInfo_Cpu::clear_processor() {
  _impl_.processor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CpuInfo_Cpu::processor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.processor)
  return _internal_processor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CpuInfo_Cpu::set_processor(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.processor_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.processor)
}
inline std::string* CpuInfo_Cpu::mutable_processor() {
  std::string* _s = _internal_mutable_processor();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.Cpu.processor)
  return _s;
}
inline const std::string& CpuInfo_Cpu::_internal_processor() const {
  return _impl_.processor_.Get();
}
inline void CpuInfo_Cpu::_internal_set_processor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.processor_.Set(value, GetArenaForAllocation());
}
inline std::string* CpuInfo_Cpu::_internal_mutable_processor() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.processor_.Mutable( GetArenaForAllocation());
}
inline std::string* CpuInfo_Cpu::release_processor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CpuInfo.Cpu.processor)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.processor_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CpuInfo_Cpu::set_allocated_processor(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.processor_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.processor_.IsDefault()) {
          _impl_.processor_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CpuInfo.Cpu.processor)
}

// repeated uint32 frequencies = 2;
inline int CpuInfo_Cpu::_internal_frequencies_size() const {
  return _impl_.frequencies_.size();
}
inline int CpuInfo_Cpu::frequencies_size() const {
  return _internal_frequencies_size();
}
inline void CpuInfo_Cpu::clear_frequencies() {
  _internal_mutable_frequencies()->Clear();
}
inline ::uint32_t CpuInfo_Cpu::frequencies(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.Cpu.frequencies)
  return _internal_frequencies(index);
}
inline void CpuInfo_Cpu::set_frequencies(int index, ::uint32_t value) {
  _internal_mutable_frequencies()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuInfo.Cpu.frequencies)
}
inline void CpuInfo_Cpu::add_frequencies(::uint32_t value) {
  _internal_add_frequencies(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.CpuInfo.Cpu.frequencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& CpuInfo_Cpu::frequencies() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CpuInfo.Cpu.frequencies)
  return _internal_frequencies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* CpuInfo_Cpu::mutable_frequencies() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CpuInfo.Cpu.frequencies)
  return _internal_mutable_frequencies();
}

inline ::uint32_t CpuInfo_Cpu::_internal_frequencies(int index) const {
  return _internal_frequencies().Get(index);
}
inline void CpuInfo_Cpu::_internal_add_frequencies(::uint32_t value) {
  _internal_mutable_frequencies()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& CpuInfo_Cpu::_internal_frequencies() const {
  return _impl_.frequencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* CpuInfo_Cpu::_internal_mutable_frequencies() {
  return &_impl_.frequencies_;
}

// -------------------------------------------------------------------

// CpuInfo

// repeated .perfetto.protos.CpuInfo.Cpu cpus = 1;
inline int CpuInfo::_internal_cpus_size() const {
  return _impl_.cpus_.size();
}
inline int CpuInfo::cpus_size() const {
  return _internal_cpus_size();
}
inline void CpuInfo::clear_cpus() {
  _internal_mutable_cpus()->Clear();
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CpuInfo.cpus)
  return _internal_mutable_cpus()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >*
CpuInfo::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.CpuInfo.cpus)
  return _internal_mutable_cpus();
}
inline const ::perfetto::protos::CpuInfo_Cpu& CpuInfo::_internal_cpus(int index) const {
  return _internal_cpus().Get(index);
}
inline const ::perfetto::protos::CpuInfo_Cpu& CpuInfo::cpus(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuInfo.cpus)
  return _internal_cpus(index);
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::_internal_add_cpus() {
  return _internal_mutable_cpus()->Add();
}
inline ::perfetto::protos::CpuInfo_Cpu* CpuInfo::add_cpus() {
  ::perfetto::protos::CpuInfo_Cpu* _add = _internal_add_cpus();
  // @@protoc_insertion_point(field_add:perfetto.protos.CpuInfo.cpus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::CpuInfo_Cpu >&
CpuInfo::cpus() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.CpuInfo.cpus)
  return _internal_cpus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::CpuInfo_Cpu>&
CpuInfo::_internal_cpus() const {
  return _impl_.cpus_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::CpuInfo_Cpu>*
CpuInfo::_internal_mutable_cpus() {
  return &_impl_.cpus_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto_2epb_2eh
