// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/test_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/trace/track_event/debug_annotation.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto;
namespace perfetto {
namespace protos {
class TestEvent;
struct TestEventDefaultTypeInternal;
extern TestEventDefaultTypeInternal _TestEvent_default_instance_;
class TestEvent_TestPayload;
struct TestEvent_TestPayloadDefaultTypeInternal;
extern TestEvent_TestPayloadDefaultTypeInternal _TestEvent_TestPayload_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::TestEvent* Arena::CreateMaybeMessage<::perfetto::protos::TestEvent>(Arena*);
template <>
::perfetto::protos::TestEvent_TestPayload* Arena::CreateMaybeMessage<::perfetto::protos::TestEvent_TestPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class TestEvent_TestPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TestEvent.TestPayload) */ {
 public:
  inline TestEvent_TestPayload() : TestEvent_TestPayload(nullptr) {}
  ~TestEvent_TestPayload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestEvent_TestPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEvent_TestPayload(const TestEvent_TestPayload& from);
  TestEvent_TestPayload(TestEvent_TestPayload&& from) noexcept
    : TestEvent_TestPayload() {
    *this = ::std::move(from);
  }

  inline TestEvent_TestPayload& operator=(const TestEvent_TestPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEvent_TestPayload& operator=(TestEvent_TestPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEvent_TestPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEvent_TestPayload* internal_default_instance() {
    return reinterpret_cast<const TestEvent_TestPayload*>(
               &_TestEvent_TestPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestEvent_TestPayload& a, TestEvent_TestPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEvent_TestPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEvent_TestPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEvent_TestPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEvent_TestPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestEvent_TestPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestEvent_TestPayload& from) {
    TestEvent_TestPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEvent_TestPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TestEvent.TestPayload";
  }
  protected:
  explicit TestEvent_TestPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kNestedFieldNumber = 2,
    kRepeatedIntsFieldNumber = 6,
    kDebugAnnotationsFieldNumber = 7,
    kSingleStringFieldNumber = 4,
    kRemainingNestingDepthFieldNumber = 3,
    kSingleIntFieldNumber = 5,
  };
  // repeated string str = 1;
  int str_size() const;
  private:
  int _internal_str_size() const;

  public:
  void clear_str() ;
  const std::string& str(int index) const;
  std::string* mutable_str(int index);
  void set_str(int index, const std::string& value);
  void set_str(int index, std::string&& value);
  void set_str(int index, const char* value);
  void set_str(int index, const char* value, std::size_t size);
  void set_str(int index, absl::string_view value);
  std::string* add_str();
  void add_str(const std::string& value);
  void add_str(std::string&& value);
  void add_str(const char* value);
  void add_str(const char* value, std::size_t size);
  void add_str(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str();

  private:
  const std::string& _internal_str(int index) const;
  std::string* _internal_add_str();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_str();

  public:
  // repeated .perfetto.protos.TestEvent.TestPayload nested = 2;
  int nested_size() const;
  private:
  int _internal_nested_size() const;

  public:
  void clear_nested() ;
  ::perfetto::protos::TestEvent_TestPayload* mutable_nested(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TestEvent_TestPayload >*
      mutable_nested();
  private:
  const ::perfetto::protos::TestEvent_TestPayload& _internal_nested(int index) const;
  ::perfetto::protos::TestEvent_TestPayload* _internal_add_nested();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TestEvent_TestPayload>& _internal_nested() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TestEvent_TestPayload>* _internal_mutable_nested();
  public:
  const ::perfetto::protos::TestEvent_TestPayload& nested(int index) const;
  ::perfetto::protos::TestEvent_TestPayload* add_nested();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TestEvent_TestPayload >&
      nested() const;
  // repeated int32 repeated_ints = 6;
  int repeated_ints_size() const;
  private:
  int _internal_repeated_ints_size() const;

  public:
  void clear_repeated_ints() ;
  ::int32_t repeated_ints(int index) const;
  void set_repeated_ints(int index, ::int32_t value);
  void add_repeated_ints(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& repeated_ints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_repeated_ints();

  private:
  ::int32_t _internal_repeated_ints(int index) const;
  void _internal_add_repeated_ints(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_repeated_ints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_repeated_ints();

  public:
  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 7;
  int debug_annotations_size() const;
  private:
  int _internal_debug_annotations_size() const;

  public:
  void clear_debug_annotations() ;
  ::perfetto::protos::DebugAnnotation* mutable_debug_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
      mutable_debug_annotations();
  private:
  const ::perfetto::protos::DebugAnnotation& _internal_debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* _internal_add_debug_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>& _internal_debug_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>* _internal_mutable_debug_annotations();
  public:
  const ::perfetto::protos::DebugAnnotation& debug_annotations(int index) const;
  ::perfetto::protos::DebugAnnotation* add_debug_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
      debug_annotations() const;
  // optional string single_string = 4;
  bool has_single_string() const;
  void clear_single_string() ;
  const std::string& single_string() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_single_string(Arg_&& arg, Args_... args);
  std::string* mutable_single_string();
  PROTOBUF_NODISCARD std::string* release_single_string();
  void set_allocated_single_string(std::string* ptr);

  private:
  const std::string& _internal_single_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_single_string(
      const std::string& value);
  std::string* _internal_mutable_single_string();

  public:
  // optional uint32 remaining_nesting_depth = 3;
  bool has_remaining_nesting_depth() const;
  void clear_remaining_nesting_depth() ;
  ::uint32_t remaining_nesting_depth() const;
  void set_remaining_nesting_depth(::uint32_t value);

  private:
  ::uint32_t _internal_remaining_nesting_depth() const;
  void _internal_set_remaining_nesting_depth(::uint32_t value);

  public:
  // optional int32 single_int = 5;
  bool has_single_int() const;
  void clear_single_int() ;
  ::int32_t single_int() const;
  void set_single_int(::int32_t value);

  private:
  ::int32_t _internal_single_int() const;
  void _internal_set_single_int(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TestEvent.TestPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TestEvent_TestPayload > nested_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> repeated_ints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation > debug_annotations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_string_;
    ::uint32_t remaining_nesting_depth_;
    ::int32_t single_int_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto;
};// -------------------------------------------------------------------

class TestEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TestEvent) */ {
 public:
  inline TestEvent() : TestEvent(nullptr) {}
  ~TestEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TestEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEvent(const TestEvent& from);
  TestEvent(TestEvent&& from) noexcept
    : TestEvent() {
    *this = ::std::move(from);
  }

  inline TestEvent& operator=(const TestEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEvent& operator=(TestEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEvent* internal_default_instance() {
    return reinterpret_cast<const TestEvent*>(
               &_TestEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestEvent& a, TestEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestEvent& from) {
    TestEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TestEvent";
  }
  protected:
  explicit TestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestEvent_TestPayload TestPayload;

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kPayloadFieldNumber = 5,
    kCounterFieldNumber = 3,
    kSeqValueFieldNumber = 2,
    kIsLastFieldNumber = 4,
  };
  // optional string str = 1;
  bool has_str() const;
  void clear_str() ;
  const std::string& str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* ptr);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  // optional .perfetto.protos.TestEvent.TestPayload payload = 5;
  bool has_payload() const;
  void clear_payload() ;
  const ::perfetto::protos::TestEvent_TestPayload& payload() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TestEvent_TestPayload* release_payload();
  ::perfetto::protos::TestEvent_TestPayload* mutable_payload();
  void set_allocated_payload(::perfetto::protos::TestEvent_TestPayload* payload);
  private:
  const ::perfetto::protos::TestEvent_TestPayload& _internal_payload() const;
  ::perfetto::protos::TestEvent_TestPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::perfetto::protos::TestEvent_TestPayload* payload);
  ::perfetto::protos::TestEvent_TestPayload* unsafe_arena_release_payload();
  // optional uint64 counter = 3;
  bool has_counter() const;
  void clear_counter() ;
  ::uint64_t counter() const;
  void set_counter(::uint64_t value);

  private:
  ::uint64_t _internal_counter() const;
  void _internal_set_counter(::uint64_t value);

  public:
  // optional uint32 seq_value = 2;
  bool has_seq_value() const;
  void clear_seq_value() ;
  ::uint32_t seq_value() const;
  void set_seq_value(::uint32_t value);

  private:
  ::uint32_t _internal_seq_value() const;
  void _internal_set_seq_value(::uint32_t value);

  public:
  // optional bool is_last = 4;
  bool has_is_last() const;
  void clear_is_last() ;
  bool is_last() const;
  void set_is_last(bool value);

  private:
  bool _internal_is_last() const;
  void _internal_set_is_last(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TestEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    ::perfetto::protos::TestEvent_TestPayload* payload_;
    ::uint64_t counter_;
    ::uint32_t seq_value_;
    bool is_last_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestEvent_TestPayload

// repeated string str = 1;
inline int TestEvent_TestPayload::_internal_str_size() const {
  return _impl_.str_.size();
}
inline int TestEvent_TestPayload::str_size() const {
  return _internal_str_size();
}
inline void TestEvent_TestPayload::clear_str() {
  _internal_mutable_str()->Clear();
}
inline std::string* TestEvent_TestPayload::add_str() {
  std::string* _s = _internal_add_str();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TestEvent.TestPayload.str)
  return _s;
}
inline const std::string& TestEvent_TestPayload::str(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.str)
  return _internal_str(index);
}
inline std::string* TestEvent_TestPayload::mutable_str(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestEvent.TestPayload.str)
  return _internal_mutable_str()->Mutable(index);
}
inline void TestEvent_TestPayload::set_str(int index, const std::string& value) {
  _internal_mutable_str()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::set_str(int index, std::string&& value) {
  _internal_mutable_str()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::set_str(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_str()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::set_str(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_str()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::set_str(int index, absl::string_view value) {
  _internal_mutable_str()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::add_str(const std::string& value) {
  _internal_mutable_str()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::add_str(std::string&& value) {
  _internal_mutable_str()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::add_str(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_str()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::add_str(const char* value, std::size_t size) {
  _internal_mutable_str()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TestEvent.TestPayload.str)
}
inline void TestEvent_TestPayload::add_str(absl::string_view value) {
  _internal_mutable_str()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.TestEvent.TestPayload.str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestEvent_TestPayload::str() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TestEvent.TestPayload.str)
  return _internal_str();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TestEvent_TestPayload::mutable_str() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TestEvent.TestPayload.str)
  return _internal_mutable_str();
}
inline const std::string& TestEvent_TestPayload::_internal_str(int index) const {
  return _internal_str().Get(index);
}
inline std::string* TestEvent_TestPayload::_internal_add_str() {
  return _internal_mutable_str()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestEvent_TestPayload::_internal_str() const {
  return _impl_.str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestEvent_TestPayload::_internal_mutable_str() {
  return &_impl_.str_;
}

// repeated .perfetto.protos.TestEvent.TestPayload nested = 2;
inline int TestEvent_TestPayload::_internal_nested_size() const {
  return _impl_.nested_.size();
}
inline int TestEvent_TestPayload::nested_size() const {
  return _internal_nested_size();
}
inline void TestEvent_TestPayload::clear_nested() {
  _internal_mutable_nested()->Clear();
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent_TestPayload::mutable_nested(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestEvent.TestPayload.nested)
  return _internal_mutable_nested()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TestEvent_TestPayload >*
TestEvent_TestPayload::mutable_nested() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TestEvent.TestPayload.nested)
  return _internal_mutable_nested();
}
inline const ::perfetto::protos::TestEvent_TestPayload& TestEvent_TestPayload::_internal_nested(int index) const {
  return _internal_nested().Get(index);
}
inline const ::perfetto::protos::TestEvent_TestPayload& TestEvent_TestPayload::nested(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.nested)
  return _internal_nested(index);
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent_TestPayload::_internal_add_nested() {
  return _internal_mutable_nested()->Add();
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent_TestPayload::add_nested() {
  ::perfetto::protos::TestEvent_TestPayload* _add = _internal_add_nested();
  // @@protoc_insertion_point(field_add:perfetto.protos.TestEvent.TestPayload.nested)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TestEvent_TestPayload >&
TestEvent_TestPayload::nested() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TestEvent.TestPayload.nested)
  return _internal_nested();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TestEvent_TestPayload>&
TestEvent_TestPayload::_internal_nested() const {
  return _impl_.nested_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TestEvent_TestPayload>*
TestEvent_TestPayload::_internal_mutable_nested() {
  return &_impl_.nested_;
}

// optional string single_string = 4;
inline bool TestEvent_TestPayload::has_single_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestEvent_TestPayload::clear_single_string() {
  _impl_.single_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestEvent_TestPayload::single_string() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.single_string)
  return _internal_single_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestEvent_TestPayload::set_single_string(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.single_string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.TestPayload.single_string)
}
inline std::string* TestEvent_TestPayload::mutable_single_string() {
  std::string* _s = _internal_mutable_single_string();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestEvent.TestPayload.single_string)
  return _s;
}
inline const std::string& TestEvent_TestPayload::_internal_single_string() const {
  return _impl_.single_string_.Get();
}
inline void TestEvent_TestPayload::_internal_set_single_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.single_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestEvent_TestPayload::_internal_mutable_single_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.single_string_.Mutable( GetArenaForAllocation());
}
inline std::string* TestEvent_TestPayload::release_single_string() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestEvent.TestPayload.single_string)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.single_string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.single_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestEvent_TestPayload::set_allocated_single_string(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.single_string_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.single_string_.IsDefault()) {
          _impl_.single_string_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestEvent.TestPayload.single_string)
}

// optional int32 single_int = 5;
inline bool TestEvent_TestPayload::has_single_int() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestEvent_TestPayload::clear_single_int() {
  _impl_.single_int_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TestEvent_TestPayload::single_int() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.single_int)
  return _internal_single_int();
}
inline void TestEvent_TestPayload::set_single_int(::int32_t value) {
  _internal_set_single_int(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.TestPayload.single_int)
}
inline ::int32_t TestEvent_TestPayload::_internal_single_int() const {
  return _impl_.single_int_;
}
inline void TestEvent_TestPayload::_internal_set_single_int(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.single_int_ = value;
}

// repeated int32 repeated_ints = 6;
inline int TestEvent_TestPayload::_internal_repeated_ints_size() const {
  return _impl_.repeated_ints_.size();
}
inline int TestEvent_TestPayload::repeated_ints_size() const {
  return _internal_repeated_ints_size();
}
inline void TestEvent_TestPayload::clear_repeated_ints() {
  _internal_mutable_repeated_ints()->Clear();
}
inline ::int32_t TestEvent_TestPayload::repeated_ints(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.repeated_ints)
  return _internal_repeated_ints(index);
}
inline void TestEvent_TestPayload::set_repeated_ints(int index, ::int32_t value) {
  _internal_mutable_repeated_ints()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.TestPayload.repeated_ints)
}
inline void TestEvent_TestPayload::add_repeated_ints(::int32_t value) {
  _internal_add_repeated_ints(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TestEvent.TestPayload.repeated_ints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& TestEvent_TestPayload::repeated_ints() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TestEvent.TestPayload.repeated_ints)
  return _internal_repeated_ints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* TestEvent_TestPayload::mutable_repeated_ints() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TestEvent.TestPayload.repeated_ints)
  return _internal_mutable_repeated_ints();
}

inline ::int32_t TestEvent_TestPayload::_internal_repeated_ints(int index) const {
  return _internal_repeated_ints().Get(index);
}
inline void TestEvent_TestPayload::_internal_add_repeated_ints(::int32_t value) {
  _internal_mutable_repeated_ints()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& TestEvent_TestPayload::_internal_repeated_ints() const {
  return _impl_.repeated_ints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* TestEvent_TestPayload::_internal_mutable_repeated_ints() {
  return &_impl_.repeated_ints_;
}

// optional uint32 remaining_nesting_depth = 3;
inline bool TestEvent_TestPayload::has_remaining_nesting_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TestEvent_TestPayload::clear_remaining_nesting_depth() {
  _impl_.remaining_nesting_depth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TestEvent_TestPayload::remaining_nesting_depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.remaining_nesting_depth)
  return _internal_remaining_nesting_depth();
}
inline void TestEvent_TestPayload::set_remaining_nesting_depth(::uint32_t value) {
  _internal_set_remaining_nesting_depth(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.TestPayload.remaining_nesting_depth)
}
inline ::uint32_t TestEvent_TestPayload::_internal_remaining_nesting_depth() const {
  return _impl_.remaining_nesting_depth_;
}
inline void TestEvent_TestPayload::_internal_set_remaining_nesting_depth(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remaining_nesting_depth_ = value;
}

// repeated .perfetto.protos.DebugAnnotation debug_annotations = 7;
inline int TestEvent_TestPayload::_internal_debug_annotations_size() const {
  return _impl_.debug_annotations_.size();
}
inline int TestEvent_TestPayload::debug_annotations_size() const {
  return _internal_debug_annotations_size();
}
inline ::perfetto::protos::DebugAnnotation* TestEvent_TestPayload::mutable_debug_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestEvent.TestPayload.debug_annotations)
  return _internal_mutable_debug_annotations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
TestEvent_TestPayload::mutable_debug_annotations() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TestEvent.TestPayload.debug_annotations)
  return _internal_mutable_debug_annotations();
}
inline const ::perfetto::protos::DebugAnnotation& TestEvent_TestPayload::_internal_debug_annotations(int index) const {
  return _internal_debug_annotations().Get(index);
}
inline const ::perfetto::protos::DebugAnnotation& TestEvent_TestPayload::debug_annotations(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.TestPayload.debug_annotations)
  return _internal_debug_annotations(index);
}
inline ::perfetto::protos::DebugAnnotation* TestEvent_TestPayload::_internal_add_debug_annotations() {
  return _internal_mutable_debug_annotations()->Add();
}
inline ::perfetto::protos::DebugAnnotation* TestEvent_TestPayload::add_debug_annotations() {
  ::perfetto::protos::DebugAnnotation* _add = _internal_add_debug_annotations();
  // @@protoc_insertion_point(field_add:perfetto.protos.TestEvent.TestPayload.debug_annotations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
TestEvent_TestPayload::debug_annotations() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TestEvent.TestPayload.debug_annotations)
  return _internal_debug_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>&
TestEvent_TestPayload::_internal_debug_annotations() const {
  return _impl_.debug_annotations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>*
TestEvent_TestPayload::_internal_mutable_debug_annotations() {
  return &_impl_.debug_annotations_;
}

// -------------------------------------------------------------------

// TestEvent

// optional string str = 1;
inline bool TestEvent::has_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TestEvent::clear_str() {
  _impl_.str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestEvent::str() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestEvent::set_str(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.str)
}
inline std::string* TestEvent::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestEvent.str)
  return _s;
}
inline const std::string& TestEvent::_internal_str() const {
  return _impl_.str_.Get();
}
inline void TestEvent::_internal_set_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* TestEvent::_internal_mutable_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.str_.Mutable( GetArenaForAllocation());
}
inline std::string* TestEvent::release_str() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestEvent.str)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.str_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TestEvent::set_allocated_str(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.str_.IsDefault()) {
          _impl_.str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestEvent.str)
}

// optional uint32 seq_value = 2;
inline bool TestEvent::has_seq_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TestEvent::clear_seq_value() {
  _impl_.seq_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t TestEvent::seq_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.seq_value)
  return _internal_seq_value();
}
inline void TestEvent::set_seq_value(::uint32_t value) {
  _internal_set_seq_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.seq_value)
}
inline ::uint32_t TestEvent::_internal_seq_value() const {
  return _impl_.seq_value_;
}
inline void TestEvent::_internal_set_seq_value(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seq_value_ = value;
}

// optional uint64 counter = 3;
inline bool TestEvent::has_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TestEvent::clear_counter() {
  _impl_.counter_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t TestEvent::counter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.counter)
  return _internal_counter();
}
inline void TestEvent::set_counter(::uint64_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.counter)
}
inline ::uint64_t TestEvent::_internal_counter() const {
  return _impl_.counter_;
}
inline void TestEvent::_internal_set_counter(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.counter_ = value;
}

// optional bool is_last = 4;
inline bool TestEvent::has_is_last() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TestEvent::clear_is_last() {
  _impl_.is_last_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TestEvent::is_last() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.is_last)
  return _internal_is_last();
}
inline void TestEvent::set_is_last(bool value) {
  _internal_set_is_last(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TestEvent.is_last)
}
inline bool TestEvent::_internal_is_last() const {
  return _impl_.is_last_;
}
inline void TestEvent::_internal_set_is_last(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_last_ = value;
}

// optional .perfetto.protos.TestEvent.TestPayload payload = 5;
inline bool TestEvent::has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.payload_ != nullptr);
  return value;
}
inline void TestEvent::clear_payload() {
  if (_impl_.payload_ != nullptr) _impl_.payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::TestEvent_TestPayload& TestEvent::_internal_payload() const {
  const ::perfetto::protos::TestEvent_TestPayload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TestEvent_TestPayload&>(
      ::perfetto::protos::_TestEvent_TestPayload_default_instance_);
}
inline const ::perfetto::protos::TestEvent_TestPayload& TestEvent::payload() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TestEvent.payload)
  return _internal_payload();
}
inline void TestEvent::unsafe_arena_set_allocated_payload(
    ::perfetto::protos::TestEvent_TestPayload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TestEvent.payload)
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent::release_payload() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TestEvent_TestPayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TestEvent.payload)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TestEvent_TestPayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TestEvent_TestPayload>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::perfetto::protos::TestEvent_TestPayload* TestEvent::mutable_payload() {
  ::perfetto::protos::TestEvent_TestPayload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TestEvent.payload)
  return _msg;
}
inline void TestEvent::set_allocated_payload(::perfetto::protos::TestEvent_TestPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TestEvent.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_2epb_2eh
