// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_trace_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
namespace perfetto {
namespace protos {
class ChromeEventBundle;
struct ChromeEventBundleDefaultTypeInternal;
extern ChromeEventBundleDefaultTypeInternal _ChromeEventBundle_default_instance_;
class ChromeLegacyJsonTrace;
struct ChromeLegacyJsonTraceDefaultTypeInternal;
extern ChromeLegacyJsonTraceDefaultTypeInternal _ChromeLegacyJsonTrace_default_instance_;
class ChromeMetadata;
struct ChromeMetadataDefaultTypeInternal;
extern ChromeMetadataDefaultTypeInternal _ChromeMetadata_default_instance_;
class ChromeStringTableEntry;
struct ChromeStringTableEntryDefaultTypeInternal;
extern ChromeStringTableEntryDefaultTypeInternal _ChromeStringTableEntry_default_instance_;
class ChromeTraceEvent;
struct ChromeTraceEventDefaultTypeInternal;
extern ChromeTraceEventDefaultTypeInternal _ChromeTraceEvent_default_instance_;
class ChromeTraceEvent_Arg;
struct ChromeTraceEvent_ArgDefaultTypeInternal;
extern ChromeTraceEvent_ArgDefaultTypeInternal _ChromeTraceEvent_Arg_default_instance_;
class ChromeTracedValue;
struct ChromeTracedValueDefaultTypeInternal;
extern ChromeTracedValueDefaultTypeInternal _ChromeTracedValue_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ChromeEventBundle* Arena::CreateMaybeMessage<::perfetto::protos::ChromeEventBundle>(Arena*);
template <>
::perfetto::protos::ChromeLegacyJsonTrace* Arena::CreateMaybeMessage<::perfetto::protos::ChromeLegacyJsonTrace>(Arena*);
template <>
::perfetto::protos::ChromeMetadata* Arena::CreateMaybeMessage<::perfetto::protos::ChromeMetadata>(Arena*);
template <>
::perfetto::protos::ChromeStringTableEntry* Arena::CreateMaybeMessage<::perfetto::protos::ChromeStringTableEntry>(Arena*);
template <>
::perfetto::protos::ChromeTraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTraceEvent>(Arena*);
template <>
::perfetto::protos::ChromeTraceEvent_Arg* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTraceEvent_Arg>(Arena*);
template <>
::perfetto::protos::ChromeTracedValue* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTracedValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ChromeTracedValue_NestedType : int {
  ChromeTracedValue_NestedType_DICT = 0,
  ChromeTracedValue_NestedType_ARRAY = 1,
};

bool ChromeTracedValue_NestedType_IsValid(int value);
constexpr ChromeTracedValue_NestedType ChromeTracedValue_NestedType_NestedType_MIN = static_cast<ChromeTracedValue_NestedType>(0);
constexpr ChromeTracedValue_NestedType ChromeTracedValue_NestedType_NestedType_MAX = static_cast<ChromeTracedValue_NestedType>(1);
constexpr int ChromeTracedValue_NestedType_NestedType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeTracedValue_NestedType_descriptor();
template <typename T>
const std::string& ChromeTracedValue_NestedType_Name(T value) {
  static_assert(std::is_same<T, ChromeTracedValue_NestedType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NestedType_Name().");
  return ChromeTracedValue_NestedType_Name(static_cast<ChromeTracedValue_NestedType>(value));
}
template <>
inline const std::string& ChromeTracedValue_NestedType_Name(ChromeTracedValue_NestedType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeTracedValue_NestedType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ChromeTracedValue_NestedType_Parse(absl::string_view name, ChromeTracedValue_NestedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeTracedValue_NestedType>(
      ChromeTracedValue_NestedType_descriptor(), name, value);
}
enum ChromeLegacyJsonTrace_TraceType : int {
  ChromeLegacyJsonTrace_TraceType_USER_TRACE = 0,
  ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE = 1,
};

bool ChromeLegacyJsonTrace_TraceType_IsValid(int value);
constexpr ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace_TraceType_TraceType_MIN = static_cast<ChromeLegacyJsonTrace_TraceType>(0);
constexpr ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace_TraceType_TraceType_MAX = static_cast<ChromeLegacyJsonTrace_TraceType>(1);
constexpr int ChromeLegacyJsonTrace_TraceType_TraceType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeLegacyJsonTrace_TraceType_descriptor();
template <typename T>
const std::string& ChromeLegacyJsonTrace_TraceType_Name(T value) {
  static_assert(std::is_same<T, ChromeLegacyJsonTrace_TraceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TraceType_Name().");
  return ChromeLegacyJsonTrace_TraceType_Name(static_cast<ChromeLegacyJsonTrace_TraceType>(value));
}
template <>
inline const std::string& ChromeLegacyJsonTrace_TraceType_Name(ChromeLegacyJsonTrace_TraceType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeLegacyJsonTrace_TraceType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ChromeLegacyJsonTrace_TraceType_Parse(absl::string_view name, ChromeLegacyJsonTrace_TraceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeLegacyJsonTrace_TraceType>(
      ChromeLegacyJsonTrace_TraceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChromeTracedValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTracedValue) */ {
 public:
  inline ChromeTracedValue() : ChromeTracedValue(nullptr) {}
  ~ChromeTracedValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeTracedValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeTracedValue(const ChromeTracedValue& from);
  ChromeTracedValue(ChromeTracedValue&& from) noexcept
    : ChromeTracedValue() {
    *this = ::std::move(from);
  }

  inline ChromeTracedValue& operator=(const ChromeTracedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeTracedValue& operator=(ChromeTracedValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeTracedValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeTracedValue* internal_default_instance() {
    return reinterpret_cast<const ChromeTracedValue*>(
               &_ChromeTracedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeTracedValue& a, ChromeTracedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeTracedValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeTracedValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeTracedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeTracedValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeTracedValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeTracedValue& from) {
    ChromeTracedValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeTracedValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeTracedValue";
  }
  protected:
  explicit ChromeTracedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using NestedType = ChromeTracedValue_NestedType;
  static constexpr NestedType DICT = ChromeTracedValue_NestedType_DICT;
  static constexpr NestedType ARRAY = ChromeTracedValue_NestedType_ARRAY;
  static inline bool NestedType_IsValid(int value) {
    return ChromeTracedValue_NestedType_IsValid(value);
  }
  static constexpr NestedType NestedType_MIN = ChromeTracedValue_NestedType_NestedType_MIN;
  static constexpr NestedType NestedType_MAX = ChromeTracedValue_NestedType_NestedType_MAX;
  static constexpr int NestedType_ARRAYSIZE = ChromeTracedValue_NestedType_NestedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NestedType_descriptor() {
    return ChromeTracedValue_NestedType_descriptor();
  }
  template <typename T>
  static inline const std::string& NestedType_Name(T value) {
    return ChromeTracedValue_NestedType_Name(value);
  }
  static inline bool NestedType_Parse(absl::string_view name, NestedType* value) {
    return ChromeTracedValue_NestedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDictKeysFieldNumber = 2,
    kDictValuesFieldNumber = 3,
    kArrayValuesFieldNumber = 4,
    kStringValueFieldNumber = 8,
    kNestedTypeFieldNumber = 1,
    kIntValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
    kBoolValueFieldNumber = 7,
  };
  // repeated string dict_keys = 2;
  int dict_keys_size() const;
  private:
  int _internal_dict_keys_size() const;

  public:
  void clear_dict_keys() ;
  const std::string& dict_keys(int index) const;
  std::string* mutable_dict_keys(int index);
  void set_dict_keys(int index, const std::string& value);
  void set_dict_keys(int index, std::string&& value);
  void set_dict_keys(int index, const char* value);
  void set_dict_keys(int index, const char* value, std::size_t size);
  void set_dict_keys(int index, absl::string_view value);
  std::string* add_dict_keys();
  void add_dict_keys(const std::string& value);
  void add_dict_keys(std::string&& value);
  void add_dict_keys(const char* value);
  void add_dict_keys(const char* value, std::size_t size);
  void add_dict_keys(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dict_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dict_keys();

  private:
  const std::string& _internal_dict_keys(int index) const;
  std::string* _internal_add_dict_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_dict_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_dict_keys();

  public:
  // repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
  int dict_values_size() const;
  private:
  int _internal_dict_values_size() const;

  public:
  void clear_dict_values() ;
  ::perfetto::protos::ChromeTracedValue* mutable_dict_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
      mutable_dict_values();
  private:
  const ::perfetto::protos::ChromeTracedValue& _internal_dict_values(int index) const;
  ::perfetto::protos::ChromeTracedValue* _internal_add_dict_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>& _internal_dict_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>* _internal_mutable_dict_values();
  public:
  const ::perfetto::protos::ChromeTracedValue& dict_values(int index) const;
  ::perfetto::protos::ChromeTracedValue* add_dict_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
      dict_values() const;
  // repeated .perfetto.protos.ChromeTracedValue array_values = 4;
  int array_values_size() const;
  private:
  int _internal_array_values_size() const;

  public:
  void clear_array_values() ;
  ::perfetto::protos::ChromeTracedValue* mutable_array_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
      mutable_array_values();
  private:
  const ::perfetto::protos::ChromeTracedValue& _internal_array_values(int index) const;
  ::perfetto::protos::ChromeTracedValue* _internal_add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>& _internal_array_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>* _internal_mutable_array_values();
  public:
  const ::perfetto::protos::ChromeTracedValue& array_values(int index) const;
  ::perfetto::protos::ChromeTracedValue* add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
      array_values() const;
  // optional string string_value = 8;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* ptr);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
  bool has_nested_type() const;
  void clear_nested_type() ;
  ::perfetto::protos::ChromeTracedValue_NestedType nested_type() const;
  void set_nested_type(::perfetto::protos::ChromeTracedValue_NestedType value);

  private:
  ::perfetto::protos::ChromeTracedValue_NestedType _internal_nested_type() const;
  void _internal_set_nested_type(::perfetto::protos::ChromeTracedValue_NestedType value);

  public:
  // optional int32 int_value = 5;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int32_t int_value() const;
  void set_int_value(::int32_t value);

  private:
  ::int32_t _internal_int_value() const;
  void _internal_set_int_value(::int32_t value);

  public:
  // optional double double_value = 6;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // optional bool bool_value = 7;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTracedValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dict_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue > dict_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue > array_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    int nested_type_;
    ::int32_t int_value_;
    double double_value_;
    bool bool_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};// -------------------------------------------------------------------

class ChromeStringTableEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeStringTableEntry) */ {
 public:
  inline ChromeStringTableEntry() : ChromeStringTableEntry(nullptr) {}
  ~ChromeStringTableEntry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeStringTableEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeStringTableEntry(const ChromeStringTableEntry& from);
  ChromeStringTableEntry(ChromeStringTableEntry&& from) noexcept
    : ChromeStringTableEntry() {
    *this = ::std::move(from);
  }

  inline ChromeStringTableEntry& operator=(const ChromeStringTableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeStringTableEntry& operator=(ChromeStringTableEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeStringTableEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeStringTableEntry* internal_default_instance() {
    return reinterpret_cast<const ChromeStringTableEntry*>(
               &_ChromeStringTableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeStringTableEntry& a, ChromeStringTableEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeStringTableEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeStringTableEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeStringTableEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeStringTableEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeStringTableEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeStringTableEntry& from) {
    ChromeStringTableEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeStringTableEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeStringTableEntry";
  }
  protected:
  explicit ChromeStringTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // optional string value = 1;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // optional int32 index = 2;
  bool has_index() const;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeStringTableEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::int32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};// -------------------------------------------------------------------

class ChromeTraceEvent_Arg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTraceEvent.Arg) */ {
 public:
  inline ChromeTraceEvent_Arg() : ChromeTraceEvent_Arg(nullptr) {}
  ~ChromeTraceEvent_Arg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeTraceEvent_Arg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeTraceEvent_Arg(const ChromeTraceEvent_Arg& from);
  ChromeTraceEvent_Arg(ChromeTraceEvent_Arg&& from) noexcept
    : ChromeTraceEvent_Arg() {
    *this = ::std::move(from);
  }

  inline ChromeTraceEvent_Arg& operator=(const ChromeTraceEvent_Arg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeTraceEvent_Arg& operator=(ChromeTraceEvent_Arg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeTraceEvent_Arg& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 2,
    kUintValue = 3,
    kIntValue = 4,
    kDoubleValue = 5,
    kStringValue = 6,
    kPointerValue = 7,
    kJsonValue = 8,
    kTracedValue = 10,
    VALUE_NOT_SET = 0,
  };

  static inline const ChromeTraceEvent_Arg* internal_default_instance() {
    return reinterpret_cast<const ChromeTraceEvent_Arg*>(
               &_ChromeTraceEvent_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChromeTraceEvent_Arg& a, ChromeTraceEvent_Arg& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeTraceEvent_Arg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeTraceEvent_Arg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeTraceEvent_Arg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeTraceEvent_Arg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeTraceEvent_Arg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeTraceEvent_Arg& from) {
    ChromeTraceEvent_Arg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeTraceEvent_Arg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeTraceEvent.Arg";
  }
  protected:
  explicit ChromeTraceEvent_Arg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNameIndexFieldNumber = 9,
    kBoolValueFieldNumber = 2,
    kUintValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kPointerValueFieldNumber = 7,
    kJsonValueFieldNumber = 8,
    kTracedValueFieldNumber = 10,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 name_index = 9;
  bool has_name_index() const;
  void clear_name_index() ;
  ::uint32_t name_index() const;
  void set_name_index(::uint32_t value);

  private:
  ::uint32_t _internal_name_index() const;
  void _internal_set_name_index(::uint32_t value);

  public:
  // bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // uint64 uint_value = 3;
  bool has_uint_value() const;
  void clear_uint_value() ;
  ::uint64_t uint_value() const;
  void set_uint_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint_value() const;
  void _internal_set_uint_value(::uint64_t value);

  public:
  // int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // double double_value = 5;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // string string_value = 6;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* ptr);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // uint64 pointer_value = 7;
  bool has_pointer_value() const;
  void clear_pointer_value() ;
  ::uint64_t pointer_value() const;
  void set_pointer_value(::uint64_t value);

  private:
  ::uint64_t _internal_pointer_value() const;
  void _internal_set_pointer_value(::uint64_t value);

  public:
  // string json_value = 8;
  bool has_json_value() const;
  void clear_json_value() ;
  const std::string& json_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_json_value(Arg_&& arg, Args_... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* ptr);

  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(
      const std::string& value);
  std::string* _internal_mutable_json_value();

  public:
  // .perfetto.protos.ChromeTracedValue traced_value = 10;
  bool has_traced_value() const;
  private:
  bool _internal_has_traced_value() const;

  public:
  void clear_traced_value() ;
  const ::perfetto::protos::ChromeTracedValue& traced_value() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeTracedValue* release_traced_value();
  ::perfetto::protos::ChromeTracedValue* mutable_traced_value();
  void set_allocated_traced_value(::perfetto::protos::ChromeTracedValue* traced_value);
  private:
  const ::perfetto::protos::ChromeTracedValue& _internal_traced_value() const;
  ::perfetto::protos::ChromeTracedValue* _internal_mutable_traced_value();
  public:
  void unsafe_arena_set_allocated_traced_value(
      ::perfetto::protos::ChromeTracedValue* traced_value);
  ::perfetto::protos::ChromeTracedValue* unsafe_arena_release_traced_value();
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTraceEvent.Arg)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_uint_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_pointer_value();
  void set_has_json_value();
  void set_has_traced_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t name_index_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_value_;
      ::uint64_t uint_value_;
      ::int64_t int_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::uint64_t pointer_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
      ::perfetto::protos::ChromeTracedValue* traced_value_;
    } value_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};// -------------------------------------------------------------------

class ChromeTraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTraceEvent) */ {
 public:
  inline ChromeTraceEvent() : ChromeTraceEvent(nullptr) {}
  ~ChromeTraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeTraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeTraceEvent(const ChromeTraceEvent& from);
  ChromeTraceEvent(ChromeTraceEvent&& from) noexcept
    : ChromeTraceEvent() {
    *this = ::std::move(from);
  }

  inline ChromeTraceEvent& operator=(const ChromeTraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeTraceEvent& operator=(ChromeTraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeTraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeTraceEvent* internal_default_instance() {
    return reinterpret_cast<const ChromeTraceEvent*>(
               &_ChromeTraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChromeTraceEvent& a, ChromeTraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeTraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeTraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeTraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeTraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeTraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeTraceEvent& from) {
    ChromeTraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeTraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeTraceEvent";
  }
  protected:
  explicit ChromeTraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChromeTraceEvent_Arg Arg;

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 14,
    kNameFieldNumber = 1,
    kScopeFieldNumber = 7,
    kCategoryGroupNameFieldNumber = 10,
    kTimestampFieldNumber = 2,
    kPhaseFieldNumber = 3,
    kThreadIdFieldNumber = 4,
    kDurationFieldNumber = 5,
    kThreadDurationFieldNumber = 6,
    kIdFieldNumber = 8,
    kFlagsFieldNumber = 9,
    kProcessIdFieldNumber = 11,
    kThreadTimestampFieldNumber = 12,
    kBindIdFieldNumber = 13,
    kNameIndexFieldNumber = 15,
    kCategoryGroupNameIndexFieldNumber = 16,
  };
  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  int args_size() const;
  private:
  int _internal_args_size() const;

  public:
  void clear_args() ;
  ::perfetto::protos::ChromeTraceEvent_Arg* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
      mutable_args();
  private:
  const ::perfetto::protos::ChromeTraceEvent_Arg& _internal_args(int index) const;
  ::perfetto::protos::ChromeTraceEvent_Arg* _internal_add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent_Arg>& _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent_Arg>* _internal_mutable_args();
  public:
  const ::perfetto::protos::ChromeTraceEvent_Arg& args(int index) const;
  ::perfetto::protos::ChromeTraceEvent_Arg* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
      args() const;
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string scope = 7;
  bool has_scope() const;
  void clear_scope() ;
  const std::string& scope() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scope(Arg_&& arg, Args_... args);
  std::string* mutable_scope();
  PROTOBUF_NODISCARD std::string* release_scope();
  void set_allocated_scope(std::string* ptr);

  private:
  const std::string& _internal_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scope(
      const std::string& value);
  std::string* _internal_mutable_scope();

  public:
  // optional string category_group_name = 10;
  bool has_category_group_name() const;
  void clear_category_group_name() ;
  const std::string& category_group_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_category_group_name(Arg_&& arg, Args_... args);
  std::string* mutable_category_group_name();
  PROTOBUF_NODISCARD std::string* release_category_group_name();
  void set_allocated_category_group_name(std::string* ptr);

  private:
  const std::string& _internal_category_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category_group_name(
      const std::string& value);
  std::string* _internal_mutable_category_group_name();

  public:
  // optional int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional int32 phase = 3;
  bool has_phase() const;
  void clear_phase() ;
  ::int32_t phase() const;
  void set_phase(::int32_t value);

  private:
  ::int32_t _internal_phase() const;
  void _internal_set_phase(::int32_t value);

  public:
  // optional int32 thread_id = 4;
  bool has_thread_id() const;
  void clear_thread_id() ;
  ::int32_t thread_id() const;
  void set_thread_id(::int32_t value);

  private:
  ::int32_t _internal_thread_id() const;
  void _internal_set_thread_id(::int32_t value);

  public:
  // optional int64 duration = 5;
  bool has_duration() const;
  void clear_duration() ;
  ::int64_t duration() const;
  void set_duration(::int64_t value);

  private:
  ::int64_t _internal_duration() const;
  void _internal_set_duration(::int64_t value);

  public:
  // optional int64 thread_duration = 6;
  bool has_thread_duration() const;
  void clear_thread_duration() ;
  ::int64_t thread_duration() const;
  void set_thread_duration(::int64_t value);

  private:
  ::int64_t _internal_thread_duration() const;
  void _internal_set_thread_duration(::int64_t value);

  public:
  // optional uint64 id = 8;
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // optional uint32 flags = 9;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional int32 process_id = 11;
  bool has_process_id() const;
  void clear_process_id() ;
  ::int32_t process_id() const;
  void set_process_id(::int32_t value);

  private:
  ::int32_t _internal_process_id() const;
  void _internal_set_process_id(::int32_t value);

  public:
  // optional int64 thread_timestamp = 12;
  bool has_thread_timestamp() const;
  void clear_thread_timestamp() ;
  ::int64_t thread_timestamp() const;
  void set_thread_timestamp(::int64_t value);

  private:
  ::int64_t _internal_thread_timestamp() const;
  void _internal_set_thread_timestamp(::int64_t value);

  public:
  // optional uint64 bind_id = 13;
  bool has_bind_id() const;
  void clear_bind_id() ;
  ::uint64_t bind_id() const;
  void set_bind_id(::uint64_t value);

  private:
  ::uint64_t _internal_bind_id() const;
  void _internal_set_bind_id(::uint64_t value);

  public:
  // optional uint32 name_index = 15;
  bool has_name_index() const;
  void clear_name_index() ;
  ::uint32_t name_index() const;
  void set_name_index(::uint32_t value);

  private:
  ::uint32_t _internal_name_index() const;
  void _internal_set_name_index(::uint32_t value);

  public:
  // optional uint32 category_group_name_index = 16;
  bool has_category_group_name_index() const;
  void clear_category_group_name_index() ;
  ::uint32_t category_group_name_index() const;
  void set_category_group_name_index(::uint32_t value);

  private:
  ::uint32_t _internal_category_group_name_index() const;
  void _internal_set_category_group_name_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg > args_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_group_name_;
    ::int64_t timestamp_;
    ::int32_t phase_;
    ::int32_t thread_id_;
    ::int64_t duration_;
    ::int64_t thread_duration_;
    ::uint64_t id_;
    ::uint32_t flags_;
    ::int32_t process_id_;
    ::int64_t thread_timestamp_;
    ::uint64_t bind_id_;
    ::uint32_t name_index_;
    ::uint32_t category_group_name_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};// -------------------------------------------------------------------

class ChromeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeMetadata) */ {
 public:
  inline ChromeMetadata() : ChromeMetadata(nullptr) {}
  ~ChromeMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeMetadata(const ChromeMetadata& from);
  ChromeMetadata(ChromeMetadata&& from) noexcept
    : ChromeMetadata() {
    *this = ::std::move(from);
  }

  inline ChromeMetadata& operator=(const ChromeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeMetadata& operator=(ChromeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 2,
    kBoolValue = 3,
    kIntValue = 4,
    kJsonValue = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const ChromeMetadata* internal_default_instance() {
    return reinterpret_cast<const ChromeMetadata*>(
               &_ChromeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChromeMetadata& a, ChromeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeMetadata& from) {
    ChromeMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeMetadata";
  }
  protected:
  explicit ChromeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringValueFieldNumber = 2,
    kBoolValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kJsonValueFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string string_value = 2;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* ptr);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bool bool_value = 3;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // string json_value = 5;
  bool has_json_value() const;
  void clear_json_value() ;
  const std::string& json_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_json_value(Arg_&& arg, Args_... args);
  std::string* mutable_json_value();
  PROTOBUF_NODISCARD std::string* release_json_value();
  void set_allocated_json_value(std::string* ptr);

  private:
  const std::string& _internal_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_value(
      const std::string& value);
  std::string* _internal_mutable_json_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeMetadata)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_json_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      ::int64_t int_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_value_;
    } value_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};// -------------------------------------------------------------------

class ChromeLegacyJsonTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeLegacyJsonTrace) */ {
 public:
  inline ChromeLegacyJsonTrace() : ChromeLegacyJsonTrace(nullptr) {}
  ~ChromeLegacyJsonTrace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeLegacyJsonTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeLegacyJsonTrace(const ChromeLegacyJsonTrace& from);
  ChromeLegacyJsonTrace(ChromeLegacyJsonTrace&& from) noexcept
    : ChromeLegacyJsonTrace() {
    *this = ::std::move(from);
  }

  inline ChromeLegacyJsonTrace& operator=(const ChromeLegacyJsonTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeLegacyJsonTrace& operator=(ChromeLegacyJsonTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeLegacyJsonTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeLegacyJsonTrace* internal_default_instance() {
    return reinterpret_cast<const ChromeLegacyJsonTrace*>(
               &_ChromeLegacyJsonTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChromeLegacyJsonTrace& a, ChromeLegacyJsonTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeLegacyJsonTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeLegacyJsonTrace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeLegacyJsonTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeLegacyJsonTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeLegacyJsonTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeLegacyJsonTrace& from) {
    ChromeLegacyJsonTrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeLegacyJsonTrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeLegacyJsonTrace";
  }
  protected:
  explicit ChromeLegacyJsonTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TraceType = ChromeLegacyJsonTrace_TraceType;
  static constexpr TraceType USER_TRACE = ChromeLegacyJsonTrace_TraceType_USER_TRACE;
  static constexpr TraceType SYSTEM_TRACE = ChromeLegacyJsonTrace_TraceType_SYSTEM_TRACE;
  static inline bool TraceType_IsValid(int value) {
    return ChromeLegacyJsonTrace_TraceType_IsValid(value);
  }
  static constexpr TraceType TraceType_MIN = ChromeLegacyJsonTrace_TraceType_TraceType_MIN;
  static constexpr TraceType TraceType_MAX = ChromeLegacyJsonTrace_TraceType_TraceType_MAX;
  static constexpr int TraceType_ARRAYSIZE = ChromeLegacyJsonTrace_TraceType_TraceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceType_descriptor() {
    return ChromeLegacyJsonTrace_TraceType_descriptor();
  }
  template <typename T>
  static inline const std::string& TraceType_Name(T value) {
    return ChromeLegacyJsonTrace_TraceType_Name(value);
  }
  static inline bool TraceType_Parse(absl::string_view name, TraceType* value) {
    return ChromeLegacyJsonTrace_TraceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string data = 2;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::perfetto::protos::ChromeLegacyJsonTrace_TraceType type() const;
  void set_type(::perfetto::protos::ChromeLegacyJsonTrace_TraceType value);

  private:
  ::perfetto::protos::ChromeLegacyJsonTrace_TraceType _internal_type() const;
  void _internal_set_type(::perfetto::protos::ChromeLegacyJsonTrace_TraceType value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeLegacyJsonTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};// -------------------------------------------------------------------

class ChromeEventBundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeEventBundle) */ {
 public:
  inline ChromeEventBundle() : ChromeEventBundle(nullptr) {}
  ~ChromeEventBundle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeEventBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeEventBundle(const ChromeEventBundle& from);
  ChromeEventBundle(ChromeEventBundle&& from) noexcept
    : ChromeEventBundle() {
    *this = ::std::move(from);
  }

  inline ChromeEventBundle& operator=(const ChromeEventBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeEventBundle& operator=(ChromeEventBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeEventBundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeEventBundle* internal_default_instance() {
    return reinterpret_cast<const ChromeEventBundle*>(
               &_ChromeEventBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChromeEventBundle& a, ChromeEventBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeEventBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeEventBundle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeEventBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeEventBundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeEventBundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeEventBundle& from) {
    ChromeEventBundle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeEventBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeEventBundle";
  }
  protected:
  explicit ChromeEventBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceEventsFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kStringTableFieldNumber = 3,
    kLegacyFtraceOutputFieldNumber = 4,
    kLegacyJsonTraceFieldNumber = 5,
  };
  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
  [[deprecated]]  int trace_events_size() const;
  private:
  int _internal_trace_events_size() const;

  public:
  [[deprecated]]  void clear_trace_events() ;
  [[deprecated]] ::perfetto::protos::ChromeTraceEvent* mutable_trace_events(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
      mutable_trace_events();
  private:
  const ::perfetto::protos::ChromeTraceEvent& _internal_trace_events(int index) const;
  ::perfetto::protos::ChromeTraceEvent* _internal_add_trace_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent>& _internal_trace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent>* _internal_mutable_trace_events();
  public:
  [[deprecated]] const ::perfetto::protos::ChromeTraceEvent& trace_events(int index) const;
  [[deprecated]] ::perfetto::protos::ChromeTraceEvent* add_trace_events();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
      trace_events() const;
  // repeated .perfetto.protos.ChromeMetadata metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::perfetto::protos::ChromeMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >*
      mutable_metadata();
  private:
  const ::perfetto::protos::ChromeMetadata& _internal_metadata(int index) const;
  ::perfetto::protos::ChromeMetadata* _internal_add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeMetadata>& _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeMetadata>* _internal_mutable_metadata();
  public:
  const ::perfetto::protos::ChromeMetadata& metadata(int index) const;
  ::perfetto::protos::ChromeMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >&
      metadata() const;
  // repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
  [[deprecated]]  int string_table_size() const;
  private:
  int _internal_string_table_size() const;

  public:
  [[deprecated]]  void clear_string_table() ;
  [[deprecated]] ::perfetto::protos::ChromeStringTableEntry* mutable_string_table(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >*
      mutable_string_table();
  private:
  const ::perfetto::protos::ChromeStringTableEntry& _internal_string_table(int index) const;
  ::perfetto::protos::ChromeStringTableEntry* _internal_add_string_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeStringTableEntry>& _internal_string_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeStringTableEntry>* _internal_mutable_string_table();
  public:
  [[deprecated]] const ::perfetto::protos::ChromeStringTableEntry& string_table(int index) const;
  [[deprecated]] ::perfetto::protos::ChromeStringTableEntry* add_string_table();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >&
      string_table() const;
  // repeated string legacy_ftrace_output = 4;
  int legacy_ftrace_output_size() const;
  private:
  int _internal_legacy_ftrace_output_size() const;

  public:
  void clear_legacy_ftrace_output() ;
  const std::string& legacy_ftrace_output(int index) const;
  std::string* mutable_legacy_ftrace_output(int index);
  void set_legacy_ftrace_output(int index, const std::string& value);
  void set_legacy_ftrace_output(int index, std::string&& value);
  void set_legacy_ftrace_output(int index, const char* value);
  void set_legacy_ftrace_output(int index, const char* value, std::size_t size);
  void set_legacy_ftrace_output(int index, absl::string_view value);
  std::string* add_legacy_ftrace_output();
  void add_legacy_ftrace_output(const std::string& value);
  void add_legacy_ftrace_output(std::string&& value);
  void add_legacy_ftrace_output(const char* value);
  void add_legacy_ftrace_output(const char* value, std::size_t size);
  void add_legacy_ftrace_output(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& legacy_ftrace_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_legacy_ftrace_output();

  private:
  const std::string& _internal_legacy_ftrace_output(int index) const;
  std::string* _internal_add_legacy_ftrace_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_legacy_ftrace_output() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_legacy_ftrace_output();

  public:
  // repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
  int legacy_json_trace_size() const;
  private:
  int _internal_legacy_json_trace_size() const;

  public:
  void clear_legacy_json_trace() ;
  ::perfetto::protos::ChromeLegacyJsonTrace* mutable_legacy_json_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >*
      mutable_legacy_json_trace();
  private:
  const ::perfetto::protos::ChromeLegacyJsonTrace& _internal_legacy_json_trace(int index) const;
  ::perfetto::protos::ChromeLegacyJsonTrace* _internal_add_legacy_json_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLegacyJsonTrace>& _internal_legacy_json_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLegacyJsonTrace>* _internal_mutable_legacy_json_trace();
  public:
  const ::perfetto::protos::ChromeLegacyJsonTrace& legacy_json_trace(int index) const;
  ::perfetto::protos::ChromeLegacyJsonTrace* add_legacy_json_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >&
      legacy_json_trace() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeEventBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent > trace_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadata > metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry > string_table_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> legacy_ftrace_output_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace > legacy_json_trace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChromeTracedValue

// optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
inline bool ChromeTracedValue::has_nested_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeTracedValue::clear_nested_type() {
  _impl_.nested_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeTracedValue_NestedType ChromeTracedValue::nested_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.nested_type)
  return _internal_nested_type();
}
inline void ChromeTracedValue::set_nested_type(::perfetto::protos::ChromeTracedValue_NestedType value) {
   _internal_set_nested_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.nested_type)
}
inline ::perfetto::protos::ChromeTracedValue_NestedType ChromeTracedValue::_internal_nested_type() const {
  return static_cast<::perfetto::protos::ChromeTracedValue_NestedType>(_impl_.nested_type_);
}
inline void ChromeTracedValue::_internal_set_nested_type(::perfetto::protos::ChromeTracedValue_NestedType value) {
  assert(::perfetto::protos::ChromeTracedValue_NestedType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nested_type_ = value;
}

// repeated string dict_keys = 2;
inline int ChromeTracedValue::_internal_dict_keys_size() const {
  return _impl_.dict_keys_.size();
}
inline int ChromeTracedValue::dict_keys_size() const {
  return _internal_dict_keys_size();
}
inline void ChromeTracedValue::clear_dict_keys() {
  _internal_mutable_dict_keys()->Clear();
}
inline std::string* ChromeTracedValue::add_dict_keys() {
  std::string* _s = _internal_add_dict_keys();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ChromeTracedValue.dict_keys)
  return _s;
}
inline const std::string& ChromeTracedValue::dict_keys(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.dict_keys)
  return _internal_dict_keys(index);
}
inline std::string* ChromeTracedValue::mutable_dict_keys(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.dict_keys)
  return _internal_mutable_dict_keys()->Mutable(index);
}
inline void ChromeTracedValue::set_dict_keys(int index, const std::string& value) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::set_dict_keys(int index, std::string&& value) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::set_dict_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dict_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::set_dict_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::set_dict_keys(int index, absl::string_view value) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::add_dict_keys(const std::string& value) {
  _internal_mutable_dict_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::add_dict_keys(std::string&& value) {
  _internal_mutable_dict_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::add_dict_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dict_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::add_dict_keys(const char* value, std::size_t size) {
  _internal_mutable_dict_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline void ChromeTracedValue::add_dict_keys(absl::string_view value) {
  _internal_mutable_dict_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.ChromeTracedValue.dict_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeTracedValue::dict_keys() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTracedValue.dict_keys)
  return _internal_dict_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ChromeTracedValue::mutable_dict_keys() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTracedValue.dict_keys)
  return _internal_mutable_dict_keys();
}
inline const std::string& ChromeTracedValue::_internal_dict_keys(int index) const {
  return _internal_dict_keys().Get(index);
}
inline std::string* ChromeTracedValue::_internal_add_dict_keys() {
  return _internal_mutable_dict_keys()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeTracedValue::_internal_dict_keys() const {
  return _impl_.dict_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeTracedValue::_internal_mutable_dict_keys() {
  return &_impl_.dict_keys_;
}

// repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
inline int ChromeTracedValue::_internal_dict_values_size() const {
  return _impl_.dict_values_.size();
}
inline int ChromeTracedValue::dict_values_size() const {
  return _internal_dict_values_size();
}
inline void ChromeTracedValue::clear_dict_values() {
  _internal_mutable_dict_values()->Clear();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::mutable_dict_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.dict_values)
  return _internal_mutable_dict_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
ChromeTracedValue::mutable_dict_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTracedValue.dict_values)
  return _internal_mutable_dict_values();
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTracedValue::_internal_dict_values(int index) const {
  return _internal_dict_values().Get(index);
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTracedValue::dict_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.dict_values)
  return _internal_dict_values(index);
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::_internal_add_dict_values() {
  return _internal_mutable_dict_values()->Add();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::add_dict_values() {
  ::perfetto::protos::ChromeTracedValue* _add = _internal_add_dict_values();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.dict_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
ChromeTracedValue::dict_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTracedValue.dict_values)
  return _internal_dict_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>&
ChromeTracedValue::_internal_dict_values() const {
  return _impl_.dict_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>*
ChromeTracedValue::_internal_mutable_dict_values() {
  return &_impl_.dict_values_;
}

// repeated .perfetto.protos.ChromeTracedValue array_values = 4;
inline int ChromeTracedValue::_internal_array_values_size() const {
  return _impl_.array_values_.size();
}
inline int ChromeTracedValue::array_values_size() const {
  return _internal_array_values_size();
}
inline void ChromeTracedValue::clear_array_values() {
  _internal_mutable_array_values()->Clear();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.array_values)
  return _internal_mutable_array_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >*
ChromeTracedValue::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTracedValue.array_values)
  return _internal_mutable_array_values();
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTracedValue::_internal_array_values(int index) const {
  return _internal_array_values().Get(index);
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTracedValue::array_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.array_values)
  return _internal_array_values(index);
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::_internal_add_array_values() {
  return _internal_mutable_array_values()->Add();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTracedValue::add_array_values() {
  ::perfetto::protos::ChromeTracedValue* _add = _internal_add_array_values();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTracedValue.array_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTracedValue >&
ChromeTracedValue::array_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTracedValue.array_values)
  return _internal_array_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>&
ChromeTracedValue::_internal_array_values() const {
  return _impl_.array_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTracedValue>*
ChromeTracedValue::_internal_mutable_array_values() {
  return &_impl_.array_values_;
}

// optional int32 int_value = 5;
inline bool ChromeTracedValue::has_int_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChromeTracedValue::clear_int_value() {
  _impl_.int_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ChromeTracedValue::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.int_value)
  return _internal_int_value();
}
inline void ChromeTracedValue::set_int_value(::int32_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.int_value)
}
inline ::int32_t ChromeTracedValue::_internal_int_value() const {
  return _impl_.int_value_;
}
inline void ChromeTracedValue::_internal_set_int_value(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.int_value_ = value;
}

// optional double double_value = 6;
inline bool ChromeTracedValue::has_double_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChromeTracedValue::clear_double_value() {
  _impl_.double_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ChromeTracedValue::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.double_value)
  return _internal_double_value();
}
inline void ChromeTracedValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.double_value)
}
inline double ChromeTracedValue::_internal_double_value() const {
  return _impl_.double_value_;
}
inline void ChromeTracedValue::_internal_set_double_value(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.double_value_ = value;
}

// optional bool bool_value = 7;
inline bool ChromeTracedValue::has_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChromeTracedValue::clear_bool_value() {
  _impl_.bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ChromeTracedValue::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.bool_value)
  return _internal_bool_value();
}
inline void ChromeTracedValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.bool_value)
}
inline bool ChromeTracedValue::_internal_bool_value() const {
  return _impl_.bool_value_;
}
inline void ChromeTracedValue::_internal_set_bool_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bool_value_ = value;
}

// optional string string_value = 8;
inline bool ChromeTracedValue::has_string_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeTracedValue::clear_string_value() {
  _impl_.string_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeTracedValue::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracedValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTracedValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracedValue.string_value)
}
inline std::string* ChromeTracedValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracedValue.string_value)
  return _s;
}
inline const std::string& ChromeTracedValue::_internal_string_value() const {
  return _impl_.string_value_.Get();
}
inline void ChromeTracedValue::_internal_set_string_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTracedValue::_internal_mutable_string_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_value_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTracedValue::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracedValue.string_value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.string_value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeTracedValue::set_allocated_string_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_value_.IsDefault()) {
          _impl_.string_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracedValue.string_value)
}

// -------------------------------------------------------------------

// ChromeStringTableEntry

// optional string value = 1;
inline bool ChromeStringTableEntry::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeStringTableEntry::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeStringTableEntry::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeStringTableEntry.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeStringTableEntry::set_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeStringTableEntry.value)
}
inline std::string* ChromeStringTableEntry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeStringTableEntry.value)
  return _s;
}
inline const std::string& ChromeStringTableEntry::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ChromeStringTableEntry::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeStringTableEntry::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeStringTableEntry::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeStringTableEntry.value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeStringTableEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeStringTableEntry.value)
}

// optional int32 index = 2;
inline bool ChromeStringTableEntry::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeStringTableEntry::clear_index() {
  _impl_.index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ChromeStringTableEntry::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeStringTableEntry.index)
  return _internal_index();
}
inline void ChromeStringTableEntry::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeStringTableEntry.index)
}
inline ::int32_t ChromeStringTableEntry::_internal_index() const {
  return _impl_.index_;
}
inline void ChromeStringTableEntry::_internal_set_index(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// ChromeTraceEvent_Arg

// optional string name = 1;
inline bool ChromeTraceEvent_Arg::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeTraceEvent_Arg::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeTraceEvent_Arg::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTraceEvent_Arg::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.name)
}
inline std::string* ChromeTraceEvent_Arg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.name)
  return _s;
}
inline const std::string& ChromeTraceEvent_Arg::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChromeTraceEvent_Arg::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent_Arg::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent_Arg::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeTraceEvent_Arg::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.name)
}

// bool bool_value = 2;
inline bool ChromeTraceEvent_Arg::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ChromeTraceEvent_Arg::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ChromeTraceEvent_Arg::clear_bool_value() {
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ChromeTraceEvent_Arg::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
  return _internal_bool_value();
}
inline void ChromeTraceEvent_Arg::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.bool_value)
}
inline bool ChromeTraceEvent_Arg::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void ChromeTraceEvent_Arg::_internal_set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}

// uint64 uint_value = 3;
inline bool ChromeTraceEvent_Arg::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void ChromeTraceEvent_Arg::set_has_uint_value() {
  _impl_._oneof_case_[0] = kUintValue;
}
inline void ChromeTraceEvent_Arg::clear_uint_value() {
  if (value_case() == kUintValue) {
    _impl_.value_.uint_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t ChromeTraceEvent_Arg::uint_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
  return _internal_uint_value();
}
inline void ChromeTraceEvent_Arg::set_uint_value(::uint64_t value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.uint_value)
}
inline ::uint64_t ChromeTraceEvent_Arg::_internal_uint_value() const {
  if (value_case() == kUintValue) {
    return _impl_.value_.uint_value_;
  }
  return ::uint64_t{0u};
}
inline void ChromeTraceEvent_Arg::_internal_set_uint_value(::uint64_t value) {
  if (value_case() != kUintValue) {
    clear_value();
    set_has_uint_value();
  }
  _impl_.value_.uint_value_ = value;
}

// int64 int_value = 4;
inline bool ChromeTraceEvent_Arg::has_int_value() const {
  return value_case() == kIntValue;
}
inline void ChromeTraceEvent_Arg::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void ChromeTraceEvent_Arg::clear_int_value() {
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t ChromeTraceEvent_Arg::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.int_value)
  return _internal_int_value();
}
inline void ChromeTraceEvent_Arg::set_int_value(::int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.int_value)
}
inline ::int64_t ChromeTraceEvent_Arg::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}
inline void ChromeTraceEvent_Arg::_internal_set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}

// double double_value = 5;
inline bool ChromeTraceEvent_Arg::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void ChromeTraceEvent_Arg::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void ChromeTraceEvent_Arg::clear_double_value() {
  if (value_case() == kDoubleValue) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double ChromeTraceEvent_Arg::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.double_value)
  return _internal_double_value();
}
inline void ChromeTraceEvent_Arg::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.double_value)
}
inline double ChromeTraceEvent_Arg::_internal_double_value() const {
  if (value_case() == kDoubleValue) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void ChromeTraceEvent_Arg::_internal_set_double_value(double value) {
  if (value_case() != kDoubleValue) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}

// string string_value = 6;
inline bool ChromeTraceEvent_Arg::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ChromeTraceEvent_Arg::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ChromeTraceEvent_Arg::clear_string_value() {
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ChromeTraceEvent_Arg::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTraceEvent_Arg::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}
inline std::string* ChromeTraceEvent_Arg::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  return _s;
}
inline const std::string& ChromeTraceEvent_Arg::_internal_string_value() const {
  if (value_case() != kStringValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void ChromeTraceEvent_Arg::_internal_set_string_value(const std::string& value) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }


  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent_Arg::_internal_mutable_string_value() {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent_Arg::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void ChromeTraceEvent_Arg::set_allocated_string_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.string_value)
}

// uint64 pointer_value = 7;
inline bool ChromeTraceEvent_Arg::has_pointer_value() const {
  return value_case() == kPointerValue;
}
inline void ChromeTraceEvent_Arg::set_has_pointer_value() {
  _impl_._oneof_case_[0] = kPointerValue;
}
inline void ChromeTraceEvent_Arg::clear_pointer_value() {
  if (value_case() == kPointerValue) {
    _impl_.value_.pointer_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t ChromeTraceEvent_Arg::pointer_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
  return _internal_pointer_value();
}
inline void ChromeTraceEvent_Arg::set_pointer_value(::uint64_t value) {
  _internal_set_pointer_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.pointer_value)
}
inline ::uint64_t ChromeTraceEvent_Arg::_internal_pointer_value() const {
  if (value_case() == kPointerValue) {
    return _impl_.value_.pointer_value_;
  }
  return ::uint64_t{0u};
}
inline void ChromeTraceEvent_Arg::_internal_set_pointer_value(::uint64_t value) {
  if (value_case() != kPointerValue) {
    clear_value();
    set_has_pointer_value();
  }
  _impl_.value_.pointer_value_ = value;
}

// string json_value = 8;
inline bool ChromeTraceEvent_Arg::has_json_value() const {
  return value_case() == kJsonValue;
}
inline void ChromeTraceEvent_Arg::set_has_json_value() {
  _impl_._oneof_case_[0] = kJsonValue;
}
inline void ChromeTraceEvent_Arg::clear_json_value() {
  if (value_case() == kJsonValue) {
    _impl_.value_.json_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ChromeTraceEvent_Arg::json_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  return _internal_json_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTraceEvent_Arg::set_json_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kJsonValue) {
    clear_value();

    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  _impl_.value_.json_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}
inline std::string* ChromeTraceEvent_Arg::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  return _s;
}
inline const std::string& ChromeTraceEvent_Arg::_internal_json_value() const {
  if (value_case() != kJsonValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.json_value_.Get();
}
inline void ChromeTraceEvent_Arg::_internal_set_json_value(const std::string& value) {
  if (value_case() != kJsonValue) {
    clear_value();

    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }


  _impl_.value_.json_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent_Arg::_internal_mutable_json_value() {
  if (value_case() != kJsonValue) {
    clear_value();

    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  return _impl_.value_.json_value_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent_Arg::release_json_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.json_value)
  if (value_case() != kJsonValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.json_value_.Release();
}
inline void ChromeTraceEvent_Arg::set_allocated_json_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_json_value();
    _impl_.value_.json_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.json_value)
}

// .perfetto.protos.ChromeTracedValue traced_value = 10;
inline bool ChromeTraceEvent_Arg::has_traced_value() const {
  return value_case() == kTracedValue;
}
inline bool ChromeTraceEvent_Arg::_internal_has_traced_value() const {
  return value_case() == kTracedValue;
}
inline void ChromeTraceEvent_Arg::set_has_traced_value() {
  _impl_._oneof_case_[0] = kTracedValue;
}
inline void ChromeTraceEvent_Arg::clear_traced_value() {
  if (value_case() == kTracedValue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.traced_value_;
    }
    clear_has_value();
  }
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTraceEvent_Arg::release_traced_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  if (value_case() == kTracedValue) {
    clear_has_value();
    ::perfetto::protos::ChromeTracedValue* temp = _impl_.value_.traced_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.traced_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTraceEvent_Arg::_internal_traced_value() const {
  return value_case() == kTracedValue
      ? *_impl_.value_.traced_value_
      : reinterpret_cast<::perfetto::protos::ChromeTracedValue&>(::perfetto::protos::_ChromeTracedValue_default_instance_);
}
inline const ::perfetto::protos::ChromeTracedValue& ChromeTraceEvent_Arg::traced_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  return _internal_traced_value();
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTraceEvent_Arg::unsafe_arena_release_traced_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  if (value_case() == kTracedValue) {
    clear_has_value();
    ::perfetto::protos::ChromeTracedValue* temp = _impl_.value_.traced_value_;
    _impl_.value_.traced_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChromeTraceEvent_Arg::unsafe_arena_set_allocated_traced_value(::perfetto::protos::ChromeTracedValue* traced_value) {
  clear_value();
  if (traced_value) {
    set_has_traced_value();
    _impl_.value_.traced_value_ = traced_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTraceEvent_Arg::_internal_mutable_traced_value() {
  if (value_case() != kTracedValue) {
    clear_value();
    set_has_traced_value();
    _impl_.value_.traced_value_ = CreateMaybeMessage< ::perfetto::protos::ChromeTracedValue >(GetArenaForAllocation());
  }
  return _impl_.value_.traced_value_;
}
inline ::perfetto::protos::ChromeTracedValue* ChromeTraceEvent_Arg::mutable_traced_value() {
  ::perfetto::protos::ChromeTracedValue* _msg = _internal_mutable_traced_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
  return _msg;
}

// optional uint32 name_index = 9;
inline bool ChromeTraceEvent_Arg::has_name_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeTraceEvent_Arg::clear_name_index() {
  _impl_.name_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ChromeTraceEvent_Arg::name_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.Arg.name_index)
  return _internal_name_index();
}
inline void ChromeTraceEvent_Arg::set_name_index(::uint32_t value) {
  _internal_set_name_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.Arg.name_index)
}
inline ::uint32_t ChromeTraceEvent_Arg::_internal_name_index() const {
  return _impl_.name_index_;
}
inline void ChromeTraceEvent_Arg::_internal_set_name_index(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_index_ = value;
}

inline bool ChromeTraceEvent_Arg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ChromeTraceEvent_Arg::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ChromeTraceEvent_Arg::ValueCase ChromeTraceEvent_Arg::value_case() const {
  return ChromeTraceEvent_Arg::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChromeTraceEvent

// optional string name = 1;
inline bool ChromeTraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeTraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.name)
}
inline std::string* ChromeTraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.name)
  return _s;
}
inline const std::string& ChromeTraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChromeTraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeTraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.name)
}

// optional int64 timestamp = 2;
inline bool ChromeTraceEvent::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t ChromeTraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.timestamp)
  return _internal_timestamp();
}
inline void ChromeTraceEvent::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.timestamp)
}
inline ::int64_t ChromeTraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void ChromeTraceEvent::_internal_set_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.timestamp_ = value;
}

// optional int32 phase = 3;
inline bool ChromeTraceEvent::has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_phase() {
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ChromeTraceEvent::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.phase)
  return _internal_phase();
}
inline void ChromeTraceEvent::set_phase(::int32_t value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.phase)
}
inline ::int32_t ChromeTraceEvent::_internal_phase() const {
  return _impl_.phase_;
}
inline void ChromeTraceEvent::_internal_set_phase(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.phase_ = value;
}

// optional int32 thread_id = 4;
inline bool ChromeTraceEvent::has_thread_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_thread_id() {
  _impl_.thread_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ChromeTraceEvent::thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_id)
  return _internal_thread_id();
}
inline void ChromeTraceEvent::set_thread_id(::int32_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_id)
}
inline ::int32_t ChromeTraceEvent::_internal_thread_id() const {
  return _impl_.thread_id_;
}
inline void ChromeTraceEvent::_internal_set_thread_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.thread_id_ = value;
}

// optional int64 duration = 5;
inline bool ChromeTraceEvent::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_duration() {
  _impl_.duration_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t ChromeTraceEvent::duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.duration)
  return _internal_duration();
}
inline void ChromeTraceEvent::set_duration(::int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.duration)
}
inline ::int64_t ChromeTraceEvent::_internal_duration() const {
  return _impl_.duration_;
}
inline void ChromeTraceEvent::_internal_set_duration(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.duration_ = value;
}

// optional int64 thread_duration = 6;
inline bool ChromeTraceEvent::has_thread_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_thread_duration() {
  _impl_.thread_duration_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t ChromeTraceEvent::thread_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_duration)
  return _internal_thread_duration();
}
inline void ChromeTraceEvent::set_thread_duration(::int64_t value) {
  _internal_set_thread_duration(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_duration)
}
inline ::int64_t ChromeTraceEvent::_internal_thread_duration() const {
  return _impl_.thread_duration_;
}
inline void ChromeTraceEvent::_internal_set_thread_duration(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.thread_duration_ = value;
}

// optional string scope = 7;
inline bool ChromeTraceEvent::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_scope() {
  _impl_.scope_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeTraceEvent::scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.scope)
  return _internal_scope();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTraceEvent::set_scope(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scope_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.scope)
}
inline std::string* ChromeTraceEvent::mutable_scope() {
  std::string* _s = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.scope)
  return _s;
}
inline const std::string& ChromeTraceEvent::_internal_scope() const {
  return _impl_.scope_.Get();
}
inline void ChromeTraceEvent::_internal_set_scope(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.scope_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent::_internal_mutable_scope() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.scope_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent::release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.scope)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.scope_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scope_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeTraceEvent::set_allocated_scope(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.scope_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scope_.IsDefault()) {
          _impl_.scope_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.scope)
}

// optional uint64 id = 8;
inline bool ChromeTraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t ChromeTraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.id)
  return _internal_id();
}
inline void ChromeTraceEvent::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.id)
}
inline ::uint64_t ChromeTraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void ChromeTraceEvent::_internal_set_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.id_ = value;
}

// optional uint32 flags = 9;
inline bool ChromeTraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t ChromeTraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.flags)
  return _internal_flags();
}
inline void ChromeTraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.flags)
}
inline ::uint32_t ChromeTraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void ChromeTraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.flags_ = value;
}

// optional string category_group_name = 10;
inline bool ChromeTraceEvent::has_category_group_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_category_group_name() {
  _impl_.category_group_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChromeTraceEvent::category_group_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.category_group_name)
  return _internal_category_group_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeTraceEvent::set_category_group_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.category_group_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.category_group_name)
}
inline std::string* ChromeTraceEvent::mutable_category_group_name() {
  std::string* _s = _internal_mutable_category_group_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.category_group_name)
  return _s;
}
inline const std::string& ChromeTraceEvent::_internal_category_group_name() const {
  return _impl_.category_group_name_.Get();
}
inline void ChromeTraceEvent::_internal_set_category_group_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.category_group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent::_internal_mutable_category_group_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.category_group_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeTraceEvent::release_category_group_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTraceEvent.category_group_name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.category_group_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_group_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeTraceEvent::set_allocated_category_group_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.category_group_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.category_group_name_.IsDefault()) {
          _impl_.category_group_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.category_group_name)
}

// optional int32 process_id = 11;
inline bool ChromeTraceEvent::has_process_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_process_id() {
  _impl_.process_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t ChromeTraceEvent::process_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.process_id)
  return _internal_process_id();
}
inline void ChromeTraceEvent::set_process_id(::int32_t value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.process_id)
}
inline ::int32_t ChromeTraceEvent::_internal_process_id() const {
  return _impl_.process_id_;
}
inline void ChromeTraceEvent::_internal_set_process_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.process_id_ = value;
}

// optional int64 thread_timestamp = 12;
inline bool ChromeTraceEvent::has_thread_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_thread_timestamp() {
  _impl_.thread_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t ChromeTraceEvent::thread_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.thread_timestamp)
  return _internal_thread_timestamp();
}
inline void ChromeTraceEvent::set_thread_timestamp(::int64_t value) {
  _internal_set_thread_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.thread_timestamp)
}
inline ::int64_t ChromeTraceEvent::_internal_thread_timestamp() const {
  return _impl_.thread_timestamp_;
}
inline void ChromeTraceEvent::_internal_set_thread_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.thread_timestamp_ = value;
}

// optional uint64 bind_id = 13;
inline bool ChromeTraceEvent::has_bind_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_bind_id() {
  _impl_.bind_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t ChromeTraceEvent::bind_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.bind_id)
  return _internal_bind_id();
}
inline void ChromeTraceEvent::set_bind_id(::uint64_t value) {
  _internal_set_bind_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.bind_id)
}
inline ::uint64_t ChromeTraceEvent::_internal_bind_id() const {
  return _impl_.bind_id_;
}
inline void ChromeTraceEvent::_internal_set_bind_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bind_id_ = value;
}

// repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
inline int ChromeTraceEvent::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int ChromeTraceEvent::args_size() const {
  return _internal_args_size();
}
inline void ChromeTraceEvent::clear_args() {
  _internal_mutable_args()->Clear();
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTraceEvent.args)
  return _internal_mutable_args()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >*
ChromeTraceEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeTraceEvent.args)
  return _internal_mutable_args();
}
inline const ::perfetto::protos::ChromeTraceEvent_Arg& ChromeTraceEvent::_internal_args(int index) const {
  return _internal_args().Get(index);
}
inline const ::perfetto::protos::ChromeTraceEvent_Arg& ChromeTraceEvent::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.args)
  return _internal_args(index);
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::_internal_add_args() {
  return _internal_mutable_args()->Add();
}
inline ::perfetto::protos::ChromeTraceEvent_Arg* ChromeTraceEvent::add_args() {
  ::perfetto::protos::ChromeTraceEvent_Arg* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeTraceEvent.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent_Arg >&
ChromeTraceEvent::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeTraceEvent.args)
  return _internal_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent_Arg>&
ChromeTraceEvent::_internal_args() const {
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent_Arg>*
ChromeTraceEvent::_internal_mutable_args() {
  return &_impl_.args_;
}

// optional uint32 name_index = 15;
inline bool ChromeTraceEvent::has_name_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_name_index() {
  _impl_.name_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t ChromeTraceEvent::name_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.name_index)
  return _internal_name_index();
}
inline void ChromeTraceEvent::set_name_index(::uint32_t value) {
  _internal_set_name_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.name_index)
}
inline ::uint32_t ChromeTraceEvent::_internal_name_index() const {
  return _impl_.name_index_;
}
inline void ChromeTraceEvent::_internal_set_name_index(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.name_index_ = value;
}

// optional uint32 category_group_name_index = 16;
inline bool ChromeTraceEvent::has_category_group_name_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ChromeTraceEvent::clear_category_group_name_index() {
  _impl_.category_group_name_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t ChromeTraceEvent::category_group_name_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTraceEvent.category_group_name_index)
  return _internal_category_group_name_index();
}
inline void ChromeTraceEvent::set_category_group_name_index(::uint32_t value) {
  _internal_set_category_group_name_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTraceEvent.category_group_name_index)
}
inline ::uint32_t ChromeTraceEvent::_internal_category_group_name_index() const {
  return _impl_.category_group_name_index_;
}
inline void ChromeTraceEvent::_internal_set_category_group_name_index(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.category_group_name_index_ = value;
}

// -------------------------------------------------------------------

// ChromeMetadata

// optional string name = 1;
inline bool ChromeMetadata::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeMetadata::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeMetadata::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeMetadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.name)
}
inline std::string* ChromeMetadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadata.name)
  return _s;
}
inline const std::string& ChromeMetadata::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ChromeMetadata::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeMetadata::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadata.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeMetadata::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadata.name)
}

// string string_value = 2;
inline bool ChromeMetadata::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ChromeMetadata::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ChromeMetadata::clear_string_value() {
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ChromeMetadata::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeMetadata::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.string_value)
}
inline std::string* ChromeMetadata::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadata.string_value)
  return _s;
}
inline const std::string& ChromeMetadata::_internal_string_value() const {
  if (value_case() != kStringValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void ChromeMetadata::_internal_set_string_value(const std::string& value) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }


  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeMetadata::_internal_mutable_string_value() {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeMetadata::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadata.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void ChromeMetadata::set_allocated_string_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadata.string_value)
}

// bool bool_value = 3;
inline bool ChromeMetadata::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ChromeMetadata::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ChromeMetadata::clear_bool_value() {
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ChromeMetadata::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.bool_value)
  return _internal_bool_value();
}
inline void ChromeMetadata::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.bool_value)
}
inline bool ChromeMetadata::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void ChromeMetadata::_internal_set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}

// int64 int_value = 4;
inline bool ChromeMetadata::has_int_value() const {
  return value_case() == kIntValue;
}
inline void ChromeMetadata::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void ChromeMetadata::clear_int_value() {
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t ChromeMetadata::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.int_value)
  return _internal_int_value();
}
inline void ChromeMetadata::set_int_value(::int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.int_value)
}
inline ::int64_t ChromeMetadata::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}
inline void ChromeMetadata::_internal_set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}

// string json_value = 5;
inline bool ChromeMetadata::has_json_value() const {
  return value_case() == kJsonValue;
}
inline void ChromeMetadata::set_has_json_value() {
  _impl_._oneof_case_[0] = kJsonValue;
}
inline void ChromeMetadata::clear_json_value() {
  if (value_case() == kJsonValue) {
    _impl_.value_.json_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ChromeMetadata::json_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeMetadata.json_value)
  return _internal_json_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeMetadata::set_json_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kJsonValue) {
    clear_value();

    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  _impl_.value_.json_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeMetadata.json_value)
}
inline std::string* ChromeMetadata::mutable_json_value() {
  std::string* _s = _internal_mutable_json_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeMetadata.json_value)
  return _s;
}
inline const std::string& ChromeMetadata::_internal_json_value() const {
  if (value_case() != kJsonValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.json_value_.Get();
}
inline void ChromeMetadata::_internal_set_json_value(const std::string& value) {
  if (value_case() != kJsonValue) {
    clear_value();

    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }


  _impl_.value_.json_value_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeMetadata::_internal_mutable_json_value() {
  if (value_case() != kJsonValue) {
    clear_value();

    set_has_json_value();
    _impl_.value_.json_value_.InitDefault();
  }
  return _impl_.value_.json_value_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeMetadata::release_json_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeMetadata.json_value)
  if (value_case() != kJsonValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.json_value_.Release();
}
inline void ChromeMetadata::set_allocated_json_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_json_value();
    _impl_.value_.json_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeMetadata.json_value)
}

inline bool ChromeMetadata::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ChromeMetadata::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ChromeMetadata::ValueCase ChromeMetadata::value_case() const {
  return ChromeMetadata::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChromeLegacyJsonTrace

// optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
inline bool ChromeLegacyJsonTrace::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeLegacyJsonTrace::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLegacyJsonTrace.type)
  return _internal_type();
}
inline void ChromeLegacyJsonTrace::set_type(::perfetto::protos::ChromeLegacyJsonTrace_TraceType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLegacyJsonTrace.type)
}
inline ::perfetto::protos::ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::_internal_type() const {
  return static_cast<::perfetto::protos::ChromeLegacyJsonTrace_TraceType>(_impl_.type_);
}
inline void ChromeLegacyJsonTrace::_internal_set_type(::perfetto::protos::ChromeLegacyJsonTrace_TraceType value) {
  assert(::perfetto::protos::ChromeLegacyJsonTrace_TraceType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}

// optional string data = 2;
inline bool ChromeLegacyJsonTrace::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeLegacyJsonTrace::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeLegacyJsonTrace::data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLegacyJsonTrace.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChromeLegacyJsonTrace::set_data(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLegacyJsonTrace.data)
}
inline std::string* ChromeLegacyJsonTrace::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeLegacyJsonTrace.data)
  return _s;
}
inline const std::string& ChromeLegacyJsonTrace::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ChromeLegacyJsonTrace::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeLegacyJsonTrace::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ChromeLegacyJsonTrace::release_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeLegacyJsonTrace.data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChromeLegacyJsonTrace::set_allocated_data(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeLegacyJsonTrace.data)
}

// -------------------------------------------------------------------

// ChromeEventBundle

// repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
inline int ChromeEventBundle::_internal_trace_events_size() const {
  return _impl_.trace_events_.size();
}
inline int ChromeEventBundle::trace_events_size() const {
  return _internal_trace_events_size();
}
inline void ChromeEventBundle::clear_trace_events() {
  _internal_mutable_trace_events()->Clear();
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::mutable_trace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.trace_events)
  return _internal_mutable_trace_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >*
ChromeEventBundle::mutable_trace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.trace_events)
  return _internal_mutable_trace_events();
}
inline const ::perfetto::protos::ChromeTraceEvent& ChromeEventBundle::_internal_trace_events(int index) const {
  return _internal_trace_events().Get(index);
}
inline const ::perfetto::protos::ChromeTraceEvent& ChromeEventBundle::trace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.trace_events)
  return _internal_trace_events(index);
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::_internal_add_trace_events() {
  return _internal_mutable_trace_events()->Add();
}
inline ::perfetto::protos::ChromeTraceEvent* ChromeEventBundle::add_trace_events() {
  ::perfetto::protos::ChromeTraceEvent* _add = _internal_add_trace_events();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.trace_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeTraceEvent >&
ChromeEventBundle::trace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.trace_events)
  return _internal_trace_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent>&
ChromeEventBundle::_internal_trace_events() const {
  return _impl_.trace_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeTraceEvent>*
ChromeEventBundle::_internal_mutable_trace_events() {
  return &_impl_.trace_events_;
}

// repeated .perfetto.protos.ChromeMetadata metadata = 2;
inline int ChromeEventBundle::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int ChromeEventBundle::metadata_size() const {
  return _internal_metadata_size();
}
inline void ChromeEventBundle::clear_metadata() {
  _internal_mutable_metadata()->Clear();
}
inline ::perfetto::protos::ChromeMetadata* ChromeEventBundle::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >*
ChromeEventBundle::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.metadata)
  return _internal_mutable_metadata();
}
inline const ::perfetto::protos::ChromeMetadata& ChromeEventBundle::_internal_metadata(int index) const {
  return _internal_metadata().Get(index);
}
inline const ::perfetto::protos::ChromeMetadata& ChromeEventBundle::metadata(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.metadata)
  return _internal_metadata(index);
}
inline ::perfetto::protos::ChromeMetadata* ChromeEventBundle::_internal_add_metadata() {
  return _internal_mutable_metadata()->Add();
}
inline ::perfetto::protos::ChromeMetadata* ChromeEventBundle::add_metadata() {
  ::perfetto::protos::ChromeMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeMetadata >&
ChromeEventBundle::metadata() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.metadata)
  return _internal_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeMetadata>&
ChromeEventBundle::_internal_metadata() const {
  return _impl_.metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeMetadata>*
ChromeEventBundle::_internal_mutable_metadata() {
  return &_impl_.metadata_;
}

// repeated string legacy_ftrace_output = 4;
inline int ChromeEventBundle::_internal_legacy_ftrace_output_size() const {
  return _impl_.legacy_ftrace_output_.size();
}
inline int ChromeEventBundle::legacy_ftrace_output_size() const {
  return _internal_legacy_ftrace_output_size();
}
inline void ChromeEventBundle::clear_legacy_ftrace_output() {
  _internal_mutable_legacy_ftrace_output()->Clear();
}
inline std::string* ChromeEventBundle::add_legacy_ftrace_output() {
  std::string* _s = _internal_add_legacy_ftrace_output();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return _s;
}
inline const std::string& ChromeEventBundle::legacy_ftrace_output(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return _internal_legacy_ftrace_output(index);
}
inline std::string* ChromeEventBundle::mutable_legacy_ftrace_output(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return _internal_mutable_legacy_ftrace_output()->Mutable(index);
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, const std::string& value) {
  _internal_mutable_legacy_ftrace_output()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, std::string&& value) {
  _internal_mutable_legacy_ftrace_output()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_legacy_ftrace_output()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_legacy_ftrace_output()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::set_legacy_ftrace_output(int index, absl::string_view value) {
  _internal_mutable_legacy_ftrace_output()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::add_legacy_ftrace_output(const std::string& value) {
  _internal_mutable_legacy_ftrace_output()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::add_legacy_ftrace_output(std::string&& value) {
  _internal_mutable_legacy_ftrace_output()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::add_legacy_ftrace_output(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_legacy_ftrace_output()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::add_legacy_ftrace_output(const char* value, std::size_t size) {
  _internal_mutable_legacy_ftrace_output()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline void ChromeEventBundle::add_legacy_ftrace_output(absl::string_view value) {
  _internal_mutable_legacy_ftrace_output()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeEventBundle::legacy_ftrace_output() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return _internal_legacy_ftrace_output();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ChromeEventBundle::mutable_legacy_ftrace_output() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.legacy_ftrace_output)
  return _internal_mutable_legacy_ftrace_output();
}
inline const std::string& ChromeEventBundle::_internal_legacy_ftrace_output(int index) const {
  return _internal_legacy_ftrace_output().Get(index);
}
inline std::string* ChromeEventBundle::_internal_add_legacy_ftrace_output() {
  return _internal_mutable_legacy_ftrace_output()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeEventBundle::_internal_legacy_ftrace_output() const {
  return _impl_.legacy_ftrace_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeEventBundle::_internal_mutable_legacy_ftrace_output() {
  return &_impl_.legacy_ftrace_output_;
}

// repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
inline int ChromeEventBundle::_internal_legacy_json_trace_size() const {
  return _impl_.legacy_json_trace_.size();
}
inline int ChromeEventBundle::legacy_json_trace_size() const {
  return _internal_legacy_json_trace_size();
}
inline void ChromeEventBundle::clear_legacy_json_trace() {
  _internal_mutable_legacy_json_trace()->Clear();
}
inline ::perfetto::protos::ChromeLegacyJsonTrace* ChromeEventBundle::mutable_legacy_json_trace(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return _internal_mutable_legacy_json_trace()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >*
ChromeEventBundle::mutable_legacy_json_trace() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return _internal_mutable_legacy_json_trace();
}
inline const ::perfetto::protos::ChromeLegacyJsonTrace& ChromeEventBundle::_internal_legacy_json_trace(int index) const {
  return _internal_legacy_json_trace().Get(index);
}
inline const ::perfetto::protos::ChromeLegacyJsonTrace& ChromeEventBundle::legacy_json_trace(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return _internal_legacy_json_trace(index);
}
inline ::perfetto::protos::ChromeLegacyJsonTrace* ChromeEventBundle::_internal_add_legacy_json_trace() {
  return _internal_mutable_legacy_json_trace()->Add();
}
inline ::perfetto::protos::ChromeLegacyJsonTrace* ChromeEventBundle::add_legacy_json_trace() {
  ::perfetto::protos::ChromeLegacyJsonTrace* _add = _internal_add_legacy_json_trace();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLegacyJsonTrace >&
ChromeEventBundle::legacy_json_trace() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.legacy_json_trace)
  return _internal_legacy_json_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLegacyJsonTrace>&
ChromeEventBundle::_internal_legacy_json_trace() const {
  return _impl_.legacy_json_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLegacyJsonTrace>*
ChromeEventBundle::_internal_mutable_legacy_json_trace() {
  return &_impl_.legacy_json_trace_;
}

// repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
inline int ChromeEventBundle::_internal_string_table_size() const {
  return _impl_.string_table_.size();
}
inline int ChromeEventBundle::string_table_size() const {
  return _internal_string_table_size();
}
inline void ChromeEventBundle::clear_string_table() {
  _internal_mutable_string_table()->Clear();
}
inline ::perfetto::protos::ChromeStringTableEntry* ChromeEventBundle::mutable_string_table(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeEventBundle.string_table)
  return _internal_mutable_string_table()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >*
ChromeEventBundle::mutable_string_table() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeEventBundle.string_table)
  return _internal_mutable_string_table();
}
inline const ::perfetto::protos::ChromeStringTableEntry& ChromeEventBundle::_internal_string_table(int index) const {
  return _internal_string_table().Get(index);
}
inline const ::perfetto::protos::ChromeStringTableEntry& ChromeEventBundle::string_table(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeEventBundle.string_table)
  return _internal_string_table(index);
}
inline ::perfetto::protos::ChromeStringTableEntry* ChromeEventBundle::_internal_add_string_table() {
  return _internal_mutable_string_table()->Add();
}
inline ::perfetto::protos::ChromeStringTableEntry* ChromeEventBundle::add_string_table() {
  ::perfetto::protos::ChromeStringTableEntry* _add = _internal_add_string_table();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeEventBundle.string_table)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeStringTableEntry >&
ChromeEventBundle::string_table() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeEventBundle.string_table)
  return _internal_string_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeStringTableEntry>&
ChromeEventBundle::_internal_string_table() const {
  return _impl_.string_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeStringTableEntry>*
ChromeEventBundle::_internal_mutable_string_table() {
  return &_impl_.string_table_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ChromeTracedValue_NestedType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeTracedValue_NestedType>() {
  return ::perfetto::protos::ChromeTracedValue_NestedType_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeLegacyJsonTrace_TraceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeLegacyJsonTrace_TraceType>() {
  return ::perfetto::protos::ChromeLegacyJsonTrace_TraceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_2epb_2eh
