// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_trace_event.proto

#include "protos/perfetto/trace/chrome/chrome_trace_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ChromeTracedValue::ChromeTracedValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dict_keys_)*/{}
  , /*decltype(_impl_.dict_values_)*/{}
  , /*decltype(_impl_.array_values_)*/{}
  , /*decltype(_impl_.string_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nested_type_)*/ 0

  , /*decltype(_impl_.int_value_)*/ 0

  , /*decltype(_impl_.double_value_)*/ 0

  , /*decltype(_impl_.bool_value_)*/ false
} {}
struct ChromeTracedValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeTracedValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeTracedValueDefaultTypeInternal() {}
  union {
    ChromeTracedValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeTracedValueDefaultTypeInternal _ChromeTracedValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeStringTableEntry::ChromeStringTableEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ 0
} {}
struct ChromeStringTableEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeStringTableEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeStringTableEntryDefaultTypeInternal() {}
  union {
    ChromeStringTableEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeStringTableEntryDefaultTypeInternal _ChromeStringTableEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeTraceEvent_Arg::ChromeTraceEvent_Arg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_index_)*/ 0u

  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChromeTraceEvent_ArgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeTraceEvent_ArgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeTraceEvent_ArgDefaultTypeInternal() {}
  union {
    ChromeTraceEvent_Arg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeTraceEvent_ArgDefaultTypeInternal _ChromeTraceEvent_Arg_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeTraceEvent::ChromeTraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.scope_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.category_group_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.phase_)*/ 0

  , /*decltype(_impl_.thread_id_)*/ 0

  , /*decltype(_impl_.duration_)*/ ::int64_t{0}

  , /*decltype(_impl_.thread_duration_)*/ ::int64_t{0}

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flags_)*/ 0u

  , /*decltype(_impl_.process_id_)*/ 0

  , /*decltype(_impl_.thread_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.bind_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.name_index_)*/ 0u

  , /*decltype(_impl_.category_group_name_index_)*/ 0u
} {}
struct ChromeTraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeTraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeTraceEventDefaultTypeInternal() {}
  union {
    ChromeTraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeTraceEventDefaultTypeInternal _ChromeTraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeMetadata::ChromeMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChromeMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeMetadataDefaultTypeInternal() {}
  union {
    ChromeMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeMetadataDefaultTypeInternal _ChromeMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeLegacyJsonTrace::ChromeLegacyJsonTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0
} {}
struct ChromeLegacyJsonTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeLegacyJsonTraceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeLegacyJsonTraceDefaultTypeInternal() {}
  union {
    ChromeLegacyJsonTrace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeLegacyJsonTraceDefaultTypeInternal _ChromeLegacyJsonTrace_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeEventBundle::ChromeEventBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trace_events_)*/{}
  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_.string_table_)*/{}
  , /*decltype(_impl_.legacy_ftrace_output_)*/{}
  , /*decltype(_impl_.legacy_json_trace_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromeEventBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeEventBundleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeEventBundleDefaultTypeInternal() {}
  union {
    ChromeEventBundle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeEventBundleDefaultTypeInternal _ChromeEventBundle_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.nested_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.dict_keys_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.dict_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.array_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.int_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.double_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.bool_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTracedValue, _impl_.string_value_),
    1,
    ~0u,
    ~0u,
    ~0u,
    2,
    3,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeStringTableEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeStringTableEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeStringTableEntry, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeStringTableEntry, _impl_.index_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _impl_.name_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _impl_.name_index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _impl_.value_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.thread_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.thread_duration_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.scope_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.category_group_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.process_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.thread_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.bind_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.args_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.name_index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent, _impl_.category_group_name_index_),
    0,
    3,
    4,
    5,
    6,
    7,
    1,
    8,
    9,
    2,
    10,
    11,
    12,
    ~0u,
    13,
    14,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadata, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadata, _impl_.name_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadata, _impl_.value_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLegacyJsonTrace, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLegacyJsonTrace, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLegacyJsonTrace, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLegacyJsonTrace, _impl_.data_),
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeEventBundle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeEventBundle, _impl_.trace_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeEventBundle, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeEventBundle, _impl_.legacy_ftrace_output_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeEventBundle, _impl_.legacy_json_trace_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeEventBundle, _impl_.string_table_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::perfetto::protos::ChromeTracedValue)},
        { 24, 34, -1, sizeof(::perfetto::protos::ChromeStringTableEntry)},
        { 36, 55, -1, sizeof(::perfetto::protos::ChromeTraceEvent_Arg)},
        { 65, 89, -1, sizeof(::perfetto::protos::ChromeTraceEvent)},
        { 105, 119, -1, sizeof(::perfetto::protos::ChromeMetadata)},
        { 124, 134, -1, sizeof(::perfetto::protos::ChromeLegacyJsonTrace)},
        { 136, -1, -1, sizeof(::perfetto::protos::ChromeEventBundle)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ChromeTracedValue_default_instance_._instance,
    &::perfetto::protos::_ChromeStringTableEntry_default_instance_._instance,
    &::perfetto::protos::_ChromeTraceEvent_Arg_default_instance_._instance,
    &::perfetto::protos::_ChromeTraceEvent_default_instance_._instance,
    &::perfetto::protos::_ChromeMetadata_default_instance_._instance,
    &::perfetto::protos::_ChromeLegacyJsonTrace_default_instance_._instance,
    &::perfetto::protos::_ChromeEventBundle_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n5protos/perfetto/trace/chrome/chrome_tr"
    "ace_event.proto\022\017perfetto.protos\"\323\002\n\021Chr"
    "omeTracedValue\022B\n\013nested_type\030\001 \001(\0162-.pe"
    "rfetto.protos.ChromeTracedValue.NestedTy"
    "pe\022\021\n\tdict_keys\030\002 \003(\t\0227\n\013dict_values\030\003 \003"
    "(\0132\".perfetto.protos.ChromeTracedValue\0228"
    "\n\014array_values\030\004 \003(\0132\".perfetto.protos.C"
    "hromeTracedValue\022\021\n\tint_value\030\005 \001(\005\022\024\n\014d"
    "ouble_value\030\006 \001(\001\022\022\n\nbool_value\030\007 \001(\010\022\024\n"
    "\014string_value\030\010 \001(\t\"!\n\nNestedType\022\010\n\004DIC"
    "T\020\000\022\t\n\005ARRAY\020\001\"6\n\026ChromeStringTableEntry"
    "\022\r\n\005value\030\001 \001(\t\022\r\n\005index\030\002 \001(\005\"\201\005\n\020Chrom"
    "eTraceEvent\022\014\n\004name\030\001 \001(\t\022\021\n\ttimestamp\030\002"
    " \001(\003\022\r\n\005phase\030\003 \001(\005\022\021\n\tthread_id\030\004 \001(\005\022\020"
    "\n\010duration\030\005 \001(\003\022\027\n\017thread_duration\030\006 \001("
    "\003\022\r\n\005scope\030\007 \001(\t\022\n\n\002id\030\010 \001(\004\022\r\n\005flags\030\t "
    "\001(\r\022\033\n\023category_group_name\030\n \001(\t\022\022\n\nproc"
    "ess_id\030\013 \001(\005\022\030\n\020thread_timestamp\030\014 \001(\003\022\017"
    "\n\007bind_id\030\r \001(\004\0223\n\004args\030\016 \003(\0132%.perfetto"
    ".protos.ChromeTraceEvent.Arg\022\022\n\nname_ind"
    "ex\030\017 \001(\r\022!\n\031category_group_name_index\030\020 "
    "\001(\r\032\214\002\n\003Arg\022\014\n\004name\030\001 \001(\t\022\024\n\nbool_value\030"
    "\002 \001(\010H\000\022\024\n\nuint_value\030\003 \001(\004H\000\022\023\n\tint_val"
    "ue\030\004 \001(\003H\000\022\026\n\014double_value\030\005 \001(\001H\000\022\026\n\014st"
    "ring_value\030\006 \001(\tH\000\022\027\n\rpointer_value\030\007 \001("
    "\004H\000\022\024\n\njson_value\030\010 \001(\tH\000\022:\n\014traced_valu"
    "e\030\n \001(\0132\".perfetto.protos.ChromeTracedVa"
    "lueH\000\022\022\n\nname_index\030\t \001(\rB\007\n\005value\"\200\001\n\016C"
    "hromeMetadata\022\014\n\004name\030\001 \001(\t\022\026\n\014string_va"
    "lue\030\002 \001(\tH\000\022\024\n\nbool_value\030\003 \001(\010H\000\022\023\n\tint"
    "_value\030\004 \001(\003H\000\022\024\n\njson_value\030\005 \001(\tH\000B\007\n\005"
    "value\"\224\001\n\025ChromeLegacyJsonTrace\022>\n\004type\030"
    "\001 \001(\01620.perfetto.protos.ChromeLegacyJson"
    "Trace.TraceType\022\014\n\004data\030\002 \001(\t\"-\n\tTraceTy"
    "pe\022\016\n\nUSER_TRACE\020\000\022\020\n\014SYSTEM_TRACE\020\001\"\247\002\n"
    "\021ChromeEventBundle\022;\n\014trace_events\030\001 \003(\013"
    "2!.perfetto.protos.ChromeTraceEventB\002\030\001\022"
    "1\n\010metadata\030\002 \003(\0132\037.perfetto.protos.Chro"
    "meMetadata\022\034\n\024legacy_ftrace_output\030\004 \003(\t"
    "\022A\n\021legacy_json_trace\030\005 \003(\0132&.perfetto.p"
    "rotos.ChromeLegacyJsonTrace\022A\n\014string_ta"
    "ble\030\003 \003(\0132\'.perfetto.protos.ChromeString"
    "TableEntryB\002\030\001"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto = {
    false,
    false,
    1694,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto,
    "protos/perfetto/trace/chrome/chrome_trace_event.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeTracedValue_NestedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[0];
}
bool ChromeTracedValue_NestedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ChromeTracedValue_NestedType ChromeTracedValue::DICT;
constexpr ChromeTracedValue_NestedType ChromeTracedValue::ARRAY;
constexpr ChromeTracedValue_NestedType ChromeTracedValue::NestedType_MIN;
constexpr ChromeTracedValue_NestedType ChromeTracedValue::NestedType_MAX;
constexpr int ChromeTracedValue::NestedType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeLegacyJsonTrace_TraceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[1];
}
bool ChromeLegacyJsonTrace_TraceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::USER_TRACE;
constexpr ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::SYSTEM_TRACE;
constexpr ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::TraceType_MIN;
constexpr ChromeLegacyJsonTrace_TraceType ChromeLegacyJsonTrace::TraceType_MAX;
constexpr int ChromeLegacyJsonTrace::TraceType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ChromeTracedValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeTracedValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeTracedValue, _impl_._has_bits_);
  static void set_has_nested_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeTracedValue::ChromeTracedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeTracedValue)
}
ChromeTracedValue::ChromeTracedValue(const ChromeTracedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeTracedValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dict_keys_){from._impl_.dict_keys_}
    , decltype(_impl_.dict_values_){from._impl_.dict_values_}
    , decltype(_impl_.array_values_){from._impl_.array_values_}
    , decltype(_impl_.string_value_) {}

    , decltype(_impl_.nested_type_) {}

    , decltype(_impl_.int_value_) {}

    , decltype(_impl_.double_value_) {}

    , decltype(_impl_.bool_value_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nested_type_, &from._impl_.nested_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bool_value_) -
    reinterpret_cast<char*>(&_impl_.nested_type_)) + sizeof(_impl_.bool_value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTracedValue)
}

inline void ChromeTracedValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dict_keys_){arena}
    , decltype(_impl_.dict_values_){arena}
    , decltype(_impl_.array_values_){arena}
    , decltype(_impl_.string_value_) {}

    , decltype(_impl_.nested_type_) { 0 }

    , decltype(_impl_.int_value_) { 0 }

    , decltype(_impl_.double_value_) { 0 }

    , decltype(_impl_.bool_value_) { false }

  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeTracedValue::~ChromeTracedValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTracedValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeTracedValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_dict_keys()->~RepeatedPtrField();
  _internal_mutable_dict_values()->~RepeatedPtrField();
  _internal_mutable_array_values()->~RepeatedPtrField();
  _impl_.string_value_.Destroy();
}

void ChromeTracedValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeTracedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTracedValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dict_keys()->Clear();
  _internal_mutable_dict_values()->Clear();
  _internal_mutable_array_values()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.nested_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bool_value_) -
        reinterpret_cast<char*>(&_impl_.nested_type_)) + sizeof(_impl_.bool_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeTracedValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeTracedValue_NestedType_IsValid(static_cast<int>(val)))) {
            _internal_set_nested_type(static_cast<::perfetto::protos::ChromeTracedValue_NestedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string dict_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dict_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTracedValue.dict_keys");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dict_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeTracedValue array_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 int_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_int_value(&has_bits);
          _impl_.int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bool_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_bool_value(&has_bits);
          _impl_.bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string string_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTracedValue.string_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeTracedValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeTracedValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_nested_type(), target);
  }

  // repeated string dict_keys = 2;
  for (int i = 0, n = this->_internal_dict_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_dict_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeTracedValue.dict_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dict_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_dict_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ChromeTracedValue array_values = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 int_value = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_int_value(), target);
  }

  // optional double double_value = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_double_value(), target);
  }

  // optional bool bool_value = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_bool_value(), target);
  }

  // optional string string_value = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_string_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeTracedValue.string_value");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeTracedValue)
  return target;
}

::size_t ChromeTracedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTracedValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dict_keys = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_dict_keys().size());
  for (int i = 0, n = _internal_dict_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_dict_keys().Get(i));
  }

  // repeated .perfetto.protos.ChromeTracedValue dict_values = 3;
  total_size += 1UL * this->_internal_dict_values_size();
  for (const auto& msg : this->_internal_dict_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ChromeTracedValue array_values = 4;
  total_size += 1UL * this->_internal_array_values_size();
  for (const auto& msg : this->_internal_array_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string string_value = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string_value());
    }

    // optional .perfetto.protos.ChromeTracedValue.NestedType nested_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_type());
    }

    // optional int32 int_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_int_value());
    }

    // optional double double_value = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional bool bool_value = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeTracedValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeTracedValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeTracedValue::GetClassData() const { return &_class_data_; }


void ChromeTracedValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeTracedValue*>(&to_msg);
  auto& from = static_cast<const ChromeTracedValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTracedValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dict_keys()->MergeFrom(from._internal_dict_keys());
  _this->_internal_mutable_dict_values()->MergeFrom(from._internal_dict_values());
  _this->_internal_mutable_array_values()->MergeFrom(from._internal_array_values());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nested_type_ = from._impl_.nested_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.int_value_ = from._impl_.int_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeTracedValue::CopyFrom(const ChromeTracedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTracedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTracedValue::IsInitialized() const {
  return true;
}

void ChromeTracedValue::InternalSwap(ChromeTracedValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_dict_keys()->InternalSwap(
      other->_internal_mutable_dict_keys());
  _internal_mutable_dict_values()->InternalSwap(other->_internal_mutable_dict_values());
  _internal_mutable_array_values()->InternalSwap(other->_internal_mutable_array_values());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_value_, lhs_arena,
                                       &other->_impl_.string_value_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeTracedValue, _impl_.bool_value_)
      + sizeof(ChromeTracedValue::_impl_.bool_value_)
      - PROTOBUF_FIELD_OFFSET(ChromeTracedValue, _impl_.nested_type_)>(
          reinterpret_cast<char*>(&_impl_.nested_type_),
          reinterpret_cast<char*>(&other->_impl_.nested_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeTracedValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[0]);
}
// ===================================================================

class ChromeStringTableEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeStringTableEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeStringTableEntry, _impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeStringTableEntry::ChromeStringTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeStringTableEntry)
}
ChromeStringTableEntry::ChromeStringTableEntry(const ChromeStringTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeStringTableEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeStringTableEntry)
}

inline void ChromeStringTableEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.index_) { 0 }

  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeStringTableEntry::~ChromeStringTableEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeStringTableEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeStringTableEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void ChromeStringTableEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeStringTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeStringTableEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeStringTableEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeStringTableEntry.value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeStringTableEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeStringTableEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeStringTableEntry.value");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeStringTableEntry)
  return target;
}

::size_t ChromeStringTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeStringTableEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
    }

    // optional int32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeStringTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeStringTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeStringTableEntry::GetClassData() const { return &_class_data_; }


void ChromeStringTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeStringTableEntry*>(&to_msg);
  auto& from = static_cast<const ChromeStringTableEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeStringTableEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeStringTableEntry::CopyFrom(const ChromeStringTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeStringTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeStringTableEntry::IsInitialized() const {
  return true;
}

void ChromeStringTableEntry::InternalSwap(ChromeStringTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);

  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeStringTableEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[1]);
}
// ===================================================================

class ChromeTraceEvent_Arg::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeTraceEvent_Arg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeTraceEvent_Arg, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeTraceEvent_Arg, _impl_._oneof_case_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ChromeTracedValue& traced_value(const ChromeTraceEvent_Arg* msg);
  static void set_has_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ChromeTracedValue&
ChromeTraceEvent_Arg::_Internal::traced_value(const ChromeTraceEvent_Arg* msg) {
  return *msg->_impl_.value_.traced_value_;
}
void ChromeTraceEvent_Arg::set_allocated_traced_value(::perfetto::protos::ChromeTracedValue* traced_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (traced_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traced_value);
    if (message_arena != submessage_arena) {
      traced_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traced_value, submessage_arena);
    }
    set_has_traced_value();
    _impl_.value_.traced_value_ = traced_value;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTraceEvent.Arg.traced_value)
}
ChromeTraceEvent_Arg::ChromeTraceEvent_Arg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeTraceEvent.Arg)
}
ChromeTraceEvent_Arg::ChromeTraceEvent_Arg(const ChromeTraceEvent_Arg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeTraceEvent_Arg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.name_index_) {}

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.name_index_ = from._impl_.name_index_;
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUintValue: {
      _this->_internal_set_uint_value(from._internal_uint_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kPointerValue: {
      _this->_internal_set_pointer_value(from._internal_pointer_value());
      break;
    }
    case kJsonValue: {
      _this->_internal_set_json_value(from._internal_json_value());
      break;
    }
    case kTracedValue: {
      _this->_internal_mutable_traced_value()->::perfetto::protos::ChromeTracedValue::MergeFrom(
          from._internal_traced_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTraceEvent.Arg)
}

inline void ChromeTraceEvent_Arg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.name_index_) { 0u }

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

ChromeTraceEvent_Arg::~ChromeTraceEvent_Arg() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTraceEvent.Arg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeTraceEvent_Arg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void ChromeTraceEvent_Arg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeTraceEvent_Arg::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.ChromeTraceEvent.Arg)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kUintValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kPointerValue: {
      // No need to clear
      break;
    }
    case kJsonValue: {
      _impl_.value_.json_value_.Destroy();
      break;
    }
    case kTracedValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.traced_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void ChromeTraceEvent_Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTraceEvent.Arg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.name_index_ = 0u;
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeTraceEvent_Arg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTraceEvent.Arg.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 uint_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTraceEvent.Arg.string_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 pointer_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _internal_set_pointer_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string json_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_json_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTraceEvent.Arg.json_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 name_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_name_index(&has_bits);
          _impl_.name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ChromeTracedValue traced_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_traced_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeTraceEvent_Arg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeTraceEvent.Arg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeTraceEvent.Arg.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (value_case()) {
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this->_internal_bool_value(), target);
      break;
    }
    case kUintValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this->_internal_uint_value(), target);
      break;
    }
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          4, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this->_internal_double_value(), target);
      break;
    }
    case kStringValue: {
      const std::string& _s = this->_internal_string_value();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromeTraceEvent.Arg.string_value");
      target = stream->WriteStringMaybeAliased(6, _s, target);
      break;
    }
    case kPointerValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          7, this->_internal_pointer_value(), target);
      break;
    }
    case kJsonValue: {
      const std::string& _s = this->_internal_json_value();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromeTraceEvent.Arg.json_value");
      target = stream->WriteStringMaybeAliased(8, _s, target);
      break;
    }
    default: ;
  }
  // optional uint32 name_index = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_name_index(), target);
  }

  // .perfetto.protos.ChromeTracedValue traced_value = 10;
  if (value_case() == kTracedValue) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::traced_value(this),
        _Internal::traced_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeTraceEvent.Arg)
  return target;
}

::size_t ChromeTraceEvent_Arg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTraceEvent.Arg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint32 name_index = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_name_index());
    }

  }
  switch (value_case()) {
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 2;
      break;
    }
    // uint64 uint_value = 3;
    case kUintValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint_value());
      break;
    }
    // int64 int_value = 4;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
      break;
    }
    // double double_value = 5;
    case kDoubleValue: {
      total_size += 9;
      break;
    }
    // string string_value = 6;
    case kStringValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string_value());
      break;
    }
    // uint64 pointer_value = 7;
    case kPointerValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_pointer_value());
      break;
    }
    // string json_value = 8;
    case kJsonValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_json_value());
      break;
    }
    // .perfetto.protos.ChromeTracedValue traced_value = 10;
    case kTracedValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.traced_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeTraceEvent_Arg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeTraceEvent_Arg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeTraceEvent_Arg::GetClassData() const { return &_class_data_; }


void ChromeTraceEvent_Arg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeTraceEvent_Arg*>(&to_msg);
  auto& from = static_cast<const ChromeTraceEvent_Arg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTraceEvent.Arg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.name_index_ = from._impl_.name_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUintValue: {
      _this->_internal_set_uint_value(from._internal_uint_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kPointerValue: {
      _this->_internal_set_pointer_value(from._internal_pointer_value());
      break;
    }
    case kJsonValue: {
      _this->_internal_set_json_value(from._internal_json_value());
      break;
    }
    case kTracedValue: {
      _this->_internal_mutable_traced_value()->::perfetto::protos::ChromeTracedValue::MergeFrom(
          from._internal_traced_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeTraceEvent_Arg::CopyFrom(const ChromeTraceEvent_Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTraceEvent.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTraceEvent_Arg::IsInitialized() const {
  return true;
}

void ChromeTraceEvent_Arg::InternalSwap(ChromeTraceEvent_Arg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.name_index_, other->_impl_.name_index_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeTraceEvent_Arg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[2]);
}
// ===================================================================

class ChromeTraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeTraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeTraceEvent, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_thread_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_category_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_thread_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bind_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_category_group_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

ChromeTraceEvent::ChromeTraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeTraceEvent)
}
ChromeTraceEvent::ChromeTraceEvent(const ChromeTraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeTraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.scope_) {}

    , decltype(_impl_.category_group_name_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.phase_) {}

    , decltype(_impl_.thread_id_) {}

    , decltype(_impl_.duration_) {}

    , decltype(_impl_.thread_duration_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.flags_) {}

    , decltype(_impl_.process_id_) {}

    , decltype(_impl_.thread_timestamp_) {}

    , decltype(_impl_.bind_id_) {}

    , decltype(_impl_.name_index_) {}

    , decltype(_impl_.category_group_name_index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.scope_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.scope_.Set(from._internal_scope(), _this->GetArenaForAllocation());
  }
  _impl_.category_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.category_group_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.category_group_name_.Set(from._internal_category_group_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.category_group_name_index_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.category_group_name_index_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeTraceEvent)
}

inline void ChromeTraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.scope_) {}

    , decltype(_impl_.category_group_name_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.phase_) { 0 }

    , decltype(_impl_.thread_id_) { 0 }

    , decltype(_impl_.duration_) { ::int64_t{0} }

    , decltype(_impl_.thread_duration_) { ::int64_t{0} }

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.flags_) { 0u }

    , decltype(_impl_.process_id_) { 0 }

    , decltype(_impl_.thread_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.bind_id_) { ::uint64_t{0u} }

    , decltype(_impl_.name_index_) { 0u }

    , decltype(_impl_.category_group_name_index_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.scope_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.category_group_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeTraceEvent::~ChromeTraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeTraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeTraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_args()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.scope_.Destroy();
  _impl_.category_group_name_.Destroy();
}

void ChromeTraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeTraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeTraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_args()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.scope_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.category_group_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.thread_duration_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.thread_duration_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.category_group_name_index_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.category_group_name_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeTraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_phase(&has_bits);
          _impl_.phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 thread_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_thread_id(&has_bits);
          _impl_.thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 thread_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_thread_duration(&has_bits);
          _impl_.thread_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_scope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTraceEvent.scope");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string category_group_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_category_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeTraceEvent.category_group_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 process_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_process_id(&has_bits);
          _impl_.process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 thread_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_thread_timestamp(&has_bits);
          _impl_.thread_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bind_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_bind_id(&has_bits);
          _impl_.bind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 name_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_name_index(&has_bits);
          _impl_.name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 category_group_name_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_category_group_name_index(&has_bits);
          _impl_.category_group_name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeTraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeTraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeTraceEvent.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  // optional int32 phase = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_phase(), target);
  }

  // optional int32 thread_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_thread_id(), target);
  }

  // optional int64 duration = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_duration(), target);
  }

  // optional int64 thread_duration = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_thread_duration(), target);
  }

  // optional string scope = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_scope();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeTraceEvent.scope");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional uint64 id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_id(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_flags(), target);
  }

  // optional string category_group_name = 10;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_category_group_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeTraceEvent.category_group_name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional int32 process_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        11, this->_internal_process_id(), target);
  }

  // optional int64 thread_timestamp = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        12, this->_internal_thread_timestamp(), target);
  }

  // optional uint64 bind_id = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_bind_id(), target);
  }

  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 name_index = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_name_index(), target);
  }

  // optional uint32 category_group_name_index = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_category_group_name_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeTraceEvent)
  return target;
}

::size_t ChromeTraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeTraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeTraceEvent.Arg args = 14;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_internal_args()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string scope = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_scope());
    }

    // optional string category_group_name = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_category_group_name());
    }

    // optional int64 timestamp = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional int32 phase = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_phase());
    }

    // optional int32 thread_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_thread_id());
    }

    // optional int64 duration = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_duration());
    }

    // optional int64 thread_duration = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_thread_duration());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint64 id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

    // optional int32 process_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_process_id());
    }

    // optional int64 thread_timestamp = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_thread_timestamp());
    }

    // optional uint64 bind_id = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bind_id());
    }

    // optional uint32 name_index = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_name_index());
    }

    // optional uint32 category_group_name_index = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_category_group_name_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeTraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeTraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeTraceEvent::GetClassData() const { return &_class_data_; }


void ChromeTraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeTraceEvent*>(&to_msg);
  auto& from = static_cast<const ChromeTraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeTraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_args()->MergeFrom(from._internal_args());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_scope(from._internal_scope());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_category_group_name(from._internal_category_group_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.phase_ = from._impl_.phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.thread_id_ = from._impl_.thread_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.thread_duration_ = from._impl_.thread_duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.process_id_ = from._impl_.process_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.thread_timestamp_ = from._impl_.thread_timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.bind_id_ = from._impl_.bind_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.name_index_ = from._impl_.name_index_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.category_group_name_index_ = from._impl_.category_group_name_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeTraceEvent::CopyFrom(const ChromeTraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeTraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeTraceEvent::IsInitialized() const {
  return true;
}

void ChromeTraceEvent::InternalSwap(ChromeTraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_args()->InternalSwap(other->_internal_mutable_args());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scope_, lhs_arena,
                                       &other->_impl_.scope_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.category_group_name_, lhs_arena,
                                       &other->_impl_.category_group_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeTraceEvent, _impl_.category_group_name_index_)
      + sizeof(ChromeTraceEvent::_impl_.category_group_name_index_)
      - PROTOBUF_FIELD_OFFSET(ChromeTraceEvent, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeTraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[3]);
}
// ===================================================================

class ChromeMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeMetadata, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadata, _impl_._oneof_case_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeMetadata::ChromeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeMetadata)
}
ChromeMetadata::ChromeMetadata(const ChromeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kJsonValue: {
      _this->_internal_set_json_value(from._internal_json_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeMetadata)
}

inline void ChromeMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

ChromeMetadata::~ChromeMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void ChromeMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeMetadata::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.ChromeMetadata)
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kJsonValue: {
      _impl_.value_.json_value_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void ChromeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeMetadata.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeMetadata.string_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string json_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_json_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeMetadata.json_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeMetadata.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (value_case()) {
    case kStringValue: {
      const std::string& _s = this->_internal_string_value();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromeMetadata.string_value");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this->_internal_bool_value(), target);
      break;
    }
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          4, this->_internal_int_value(), target);
      break;
    }
    case kJsonValue: {
      const std::string& _s = this->_internal_json_value();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromeMetadata.json_value");
      target = stream->WriteStringMaybeAliased(5, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeMetadata)
  return target;
}

::size_t ChromeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  switch (value_case()) {
    // string string_value = 2;
    case kStringValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string_value());
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 2;
      break;
    }
    // int64 int_value = 4;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
      break;
    }
    // string json_value = 5;
    case kJsonValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_json_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeMetadata::GetClassData() const { return &_class_data_; }


void ChromeMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeMetadata*>(&to_msg);
  auto& from = static_cast<const ChromeMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.value_case()) {
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kJsonValue: {
      _this->_internal_set_json_value(from._internal_json_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeMetadata::CopyFrom(const ChromeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeMetadata::IsInitialized() const {
  return true;
}

void ChromeMetadata::InternalSwap(ChromeMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[4]);
}
// ===================================================================

class ChromeLegacyJsonTrace::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLegacyJsonTrace>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeLegacyJsonTrace, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeLegacyJsonTrace::ChromeLegacyJsonTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeLegacyJsonTrace)
}
ChromeLegacyJsonTrace::ChromeLegacyJsonTrace(const ChromeLegacyJsonTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeLegacyJsonTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLegacyJsonTrace)
}

inline void ChromeLegacyJsonTrace::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeLegacyJsonTrace::~ChromeLegacyJsonTrace() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLegacyJsonTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeLegacyJsonTrace::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ChromeLegacyJsonTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeLegacyJsonTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLegacyJsonTrace)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeLegacyJsonTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLegacyJsonTrace_TraceType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::perfetto::protos::ChromeLegacyJsonTrace_TraceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeLegacyJsonTrace.data");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeLegacyJsonTrace::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeLegacyJsonTrace)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string data = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeLegacyJsonTrace.data");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeLegacyJsonTrace)
  return target;
}

::size_t ChromeLegacyJsonTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLegacyJsonTrace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_data());
    }

    // optional .perfetto.protos.ChromeLegacyJsonTrace.TraceType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeLegacyJsonTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeLegacyJsonTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeLegacyJsonTrace::GetClassData() const { return &_class_data_; }


void ChromeLegacyJsonTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeLegacyJsonTrace*>(&to_msg);
  auto& from = static_cast<const ChromeLegacyJsonTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLegacyJsonTrace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeLegacyJsonTrace::CopyFrom(const ChromeLegacyJsonTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLegacyJsonTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLegacyJsonTrace::IsInitialized() const {
  return true;
}

void ChromeLegacyJsonTrace::InternalSwap(ChromeLegacyJsonTrace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeLegacyJsonTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[5]);
}
// ===================================================================

class ChromeEventBundle::_Internal {
 public:
};

ChromeEventBundle::ChromeEventBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeEventBundle)
}
ChromeEventBundle::ChromeEventBundle(const ChromeEventBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeEventBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_events_){from._impl_.trace_events_}
    , decltype(_impl_.metadata_){from._impl_.metadata_}
    , decltype(_impl_.string_table_){from._impl_.string_table_}
    , decltype(_impl_.legacy_ftrace_output_){from._impl_.legacy_ftrace_output_}
    , decltype(_impl_.legacy_json_trace_){from._impl_.legacy_json_trace_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeEventBundle)
}

inline void ChromeEventBundle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trace_events_){arena}
    , decltype(_impl_.metadata_){arena}
    , decltype(_impl_.string_table_){arena}
    , decltype(_impl_.legacy_ftrace_output_){arena}
    , decltype(_impl_.legacy_json_trace_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromeEventBundle::~ChromeEventBundle() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeEventBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeEventBundle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_trace_events()->~RepeatedPtrField();
  _internal_mutable_metadata()->~RepeatedPtrField();
  _internal_mutable_string_table()->~RepeatedPtrField();
  _internal_mutable_legacy_ftrace_output()->~RepeatedPtrField();
  _internal_mutable_legacy_json_trace()->~RepeatedPtrField();
}

void ChromeEventBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeEventBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeEventBundle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_trace_events()->Clear();
  _internal_mutable_metadata()->Clear();
  _internal_mutable_string_table()->Clear();
  _internal_mutable_legacy_ftrace_output()->Clear();
  _internal_mutable_legacy_json_trace()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeEventBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trace_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_string_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string legacy_ftrace_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_legacy_ftrace_output();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeEventBundle.legacy_ftrace_output");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legacy_json_trace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeEventBundle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeEventBundle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trace_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_trace_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ChromeMetadata metadata = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_string_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_string_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string legacy_ftrace_output = 4;
  for (int i = 0, n = this->_internal_legacy_ftrace_output_size(); i < n; ++i) {
    const auto& s = this->_internal_legacy_ftrace_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeEventBundle.legacy_ftrace_output");
    target = stream->WriteString(4, s, target);
  }

  // repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_legacy_json_trace_size()); i < n; i++) {
    const auto& repfield = this->_internal_legacy_json_trace(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeEventBundle)
  return target;
}

::size_t ChromeEventBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeEventBundle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeTraceEvent trace_events = 1 [deprecated = true];
  total_size += 1UL * this->_internal_trace_events_size();
  for (const auto& msg : this->_internal_trace_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ChromeMetadata metadata = 2;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_internal_metadata()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ChromeStringTableEntry string_table = 3 [deprecated = true];
  total_size += 1UL * this->_internal_string_table_size();
  for (const auto& msg : this->_internal_string_table()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string legacy_ftrace_output = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_legacy_ftrace_output().size());
  for (int i = 0, n = _internal_legacy_ftrace_output().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_legacy_ftrace_output().Get(i));
  }

  // repeated .perfetto.protos.ChromeLegacyJsonTrace legacy_json_trace = 5;
  total_size += 1UL * this->_internal_legacy_json_trace_size();
  for (const auto& msg : this->_internal_legacy_json_trace()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeEventBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeEventBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeEventBundle::GetClassData() const { return &_class_data_; }


void ChromeEventBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeEventBundle*>(&to_msg);
  auto& from = static_cast<const ChromeEventBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeEventBundle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trace_events()->MergeFrom(from._internal_trace_events());
  _this->_internal_mutable_metadata()->MergeFrom(from._internal_metadata());
  _this->_internal_mutable_string_table()->MergeFrom(from._internal_string_table());
  _this->_internal_mutable_legacy_ftrace_output()->MergeFrom(from._internal_legacy_ftrace_output());
  _this->_internal_mutable_legacy_json_trace()->MergeFrom(from._internal_legacy_json_trace());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeEventBundle::CopyFrom(const ChromeEventBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeEventBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeEventBundle::IsInitialized() const {
  return true;
}

void ChromeEventBundle::InternalSwap(ChromeEventBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_trace_events()->InternalSwap(other->_internal_mutable_trace_events());
  _internal_mutable_metadata()->InternalSwap(other->_internal_mutable_metadata());
  _internal_mutable_string_table()->InternalSwap(other->_internal_mutable_string_table());
  _internal_mutable_legacy_ftrace_output()->InternalSwap(
      other->_internal_mutable_legacy_ftrace_output());
  _internal_mutable_legacy_json_trace()->InternalSwap(other->_internal_mutable_legacy_json_trace());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeEventBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeTracedValue*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeTracedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeTracedValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeStringTableEntry*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeStringTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeStringTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeTraceEvent_Arg*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeTraceEvent_Arg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeTraceEvent_Arg >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeTraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeTraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeTraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeMetadata*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLegacyJsonTrace*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLegacyJsonTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeLegacyJsonTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeEventBundle*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeEventBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeEventBundle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
