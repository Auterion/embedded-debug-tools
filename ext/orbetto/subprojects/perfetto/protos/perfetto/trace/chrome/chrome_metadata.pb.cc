// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_metadata.proto

#include "protos/perfetto/trace/chrome/chrome_metadata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ChromeMetadataPacket::ChromeMetadataPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_categories_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.background_tracing_metadata_)*/nullptr
  , /*decltype(_impl_.chrome_version_code_)*/ 0
} {}
struct ChromeMetadataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeMetadataPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeMetadataPacketDefaultTypeInternal() {}
  union {
    ChromeMetadataPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeMetadataPacketDefaultTypeInternal _ChromeMetadataPacket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.histogram_name_hash_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.histogram_min_trigger_)*/ ::int64_t{0}

  , /*decltype(_impl_.histogram_max_trigger_)*/ ::int64_t{0}
} {}
struct BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata_TriggerRule_HistogramRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_trigger_name_hash_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_type_)*/ 0
} {}
struct BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata_TriggerRule_NamedRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.histogram_rule_)*/nullptr
  , /*decltype(_impl_.named_rule_)*/nullptr
  , /*decltype(_impl_.trigger_type_)*/ 0

  , /*decltype(_impl_.name_hash_)*/ 0u
} {}
struct BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata_TriggerRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal _BackgroundTracingMetadata_TriggerRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BackgroundTracingMetadata::BackgroundTracingMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_rules_)*/{}
  , /*decltype(_impl_.triggered_rule_)*/nullptr
  , /*decltype(_impl_.scenario_name_hash_)*/ 0u
} {}
struct BackgroundTracingMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundTracingMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundTracingMetadataDefaultTypeInternal() {}
  union {
    BackgroundTracingMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundTracingMetadataDefaultTypeInternal _BackgroundTracingMetadata_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadataPacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadataPacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadataPacket, _impl_.background_tracing_metadata_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadataPacket, _impl_.chrome_version_code_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeMetadataPacket, _impl_.enabled_categories_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_name_hash_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_min_trigger_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_max_trigger_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_.event_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_.content_trigger_name_hash_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule, _impl_.trigger_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule, _impl_.histogram_rule_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule, _impl_.named_rule_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata_TriggerRule, _impl_.name_hash_),
    2,
    0,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata, _impl_.triggered_rule_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata, _impl_.active_rules_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BackgroundTracingMetadata, _impl_.scenario_name_hash_),
    0,
    ~0u,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::perfetto::protos::ChromeMetadataPacket)},
        { 14, 25, -1, sizeof(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule)},
        { 28, 38, -1, sizeof(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule)},
        { 40, 52, -1, sizeof(::perfetto::protos::BackgroundTracingMetadata_TriggerRule)},
        { 56, 67, -1, sizeof(::perfetto::protos::BackgroundTracingMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ChromeMetadataPacket_default_instance_._instance,
    &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_._instance,
    &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_._instance,
    &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_default_instance_._instance,
    &::perfetto::protos::_BackgroundTracingMetadata_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n2protos/perfetto/trace/chrome/chrome_me"
    "tadata.proto\022\017perfetto.protos\"\240\001\n\024Chrome"
    "MetadataPacket\022O\n\033background_tracing_met"
    "adata\030\001 \001(\0132*.perfetto.protos.Background"
    "TracingMetadata\022\033\n\023chrome_version_code\030\002"
    " \001(\005\022\032\n\022enabled_categories\030\003 \001(\t\"\225\010\n\031Bac"
    "kgroundTracingMetadata\022N\n\016triggered_rule"
    "\030\001 \001(\01326.perfetto.protos.BackgroundTraci"
    "ngMetadata.TriggerRule\022L\n\014active_rules\030\002"
    " \003(\01326.perfetto.protos.BackgroundTracing"
    "Metadata.TriggerRule\022\032\n\022scenario_name_ha"
    "sh\030\003 \001(\007\032\275\006\n\013TriggerRule\022X\n\014trigger_type"
    "\030\001 \001(\0162B.perfetto.protos.BackgroundTraci"
    "ngMetadata.TriggerRule.TriggerType\022\\\n\016hi"
    "stogram_rule\030\002 \001(\0132D.perfetto.protos.Bac"
    "kgroundTracingMetadata.TriggerRule.Histo"
    "gramRule\022T\n\nnamed_rule\030\003 \001(\0132@.perfetto."
    "protos.BackgroundTracingMetadata.Trigger"
    "Rule.NamedRule\022\021\n\tname_hash\030\004 \001(\007\032j\n\rHis"
    "togramRule\022\033\n\023histogram_name_hash\030\001 \001(\006\022"
    "\035\n\025histogram_min_trigger\030\002 \001(\003\022\035\n\025histog"
    "ram_max_trigger\030\003 \001(\003\032\226\002\n\tNamedRule\022^\n\ne"
    "vent_type\030\001 \001(\0162J.perfetto.protos.Backgr"
    "oundTracingMetadata.TriggerRule.NamedRul"
    "e.EventType\022!\n\031content_trigger_name_hash"
    "\030\002 \001(\006\"\205\001\n\tEventType\022\017\n\013UNSPECIFIED\020\000\022\023\n"
    "\017SESSION_RESTORE\020\001\022\016\n\nNAVIGATION\020\002\022\013\n\007ST"
    "ARTUP\020\003\022\020\n\014REACHED_CODE\020\004\022\023\n\017CONTENT_TRI"
    "GGER\020\005\022\016\n\tTEST_RULE\020\350\007\"\207\001\n\013TriggerType\022\027"
    "\n\023TRIGGER_UNSPECIFIED\020\000\0226\n2MONITOR_AND_D"
    "UMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE\020\001\022"
    "\'\n#MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED\020\002"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto = {
    false,
    false,
    1280,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto,
    "protos/perfetto/trace/chrome/chrome_metadata.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[0];
}
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 1000:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::SESSION_RESTORE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::NAVIGATION;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::STARTUP;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::REACHED_CODE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::CONTENT_TRIGGER;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::TEST_RULE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_MIN;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_MAX;
constexpr int BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BackgroundTracingMetadata_TriggerRule_TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[1];
}
bool BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TRIGGER_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TriggerType_MIN;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TriggerType_MAX;
constexpr int BackgroundTracingMetadata_TriggerRule::TriggerType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ChromeMetadataPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeMetadataPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, _impl_._has_bits_);
  static const ::perfetto::protos::BackgroundTracingMetadata& background_tracing_metadata(const ChromeMetadataPacket* msg);
  static void set_has_background_tracing_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chrome_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enabled_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata&
ChromeMetadataPacket::_Internal::background_tracing_metadata(const ChromeMetadataPacket* msg) {
  return *msg->_impl_.background_tracing_metadata_;
}
ChromeMetadataPacket::ChromeMetadataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeMetadataPacket)
}
ChromeMetadataPacket::ChromeMetadataPacket(const ChromeMetadataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeMetadataPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_categories_) {}

    , decltype(_impl_.background_tracing_metadata_){nullptr}
    , decltype(_impl_.chrome_version_code_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enabled_categories_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.enabled_categories_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.enabled_categories_.Set(from._internal_enabled_categories(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.background_tracing_metadata_ = new ::perfetto::protos::BackgroundTracingMetadata(*from._impl_.background_tracing_metadata_);
  }
  _this->_impl_.chrome_version_code_ = from._impl_.chrome_version_code_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeMetadataPacket)
}

inline void ChromeMetadataPacket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_categories_) {}

    , decltype(_impl_.background_tracing_metadata_){nullptr}
    , decltype(_impl_.chrome_version_code_) { 0 }

  };
  _impl_.enabled_categories_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.enabled_categories_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeMetadataPacket::~ChromeMetadataPacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeMetadataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeMetadataPacket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enabled_categories_.Destroy();
  if (this != internal_default_instance()) delete _impl_.background_tracing_metadata_;
}

void ChromeMetadataPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeMetadataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeMetadataPacket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enabled_categories_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.background_tracing_metadata_ != nullptr);
      _impl_.background_tracing_metadata_->Clear();
    }
  }
  _impl_.chrome_version_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeMetadataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_tracing_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 chrome_version_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_chrome_version_code(&has_bits);
          _impl_.chrome_version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string enabled_categories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_enabled_categories();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeMetadataPacket.enabled_categories");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeMetadataPacket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeMetadataPacket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::background_tracing_metadata(this),
        _Internal::background_tracing_metadata(this).GetCachedSize(), target, stream);
  }

  // optional int32 chrome_version_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_chrome_version_code(), target);
  }

  // optional string enabled_categories = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_enabled_categories();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeMetadataPacket.enabled_categories");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeMetadataPacket)
  return target;
}

::size_t ChromeMetadataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeMetadataPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string enabled_categories = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_enabled_categories());
    }

    // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_tracing_metadata_);
    }

    // optional int32 chrome_version_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_chrome_version_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeMetadataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeMetadataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeMetadataPacket::GetClassData() const { return &_class_data_; }


void ChromeMetadataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeMetadataPacket*>(&to_msg);
  auto& from = static_cast<const ChromeMetadataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeMetadataPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_enabled_categories(from._internal_enabled_categories());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_background_tracing_metadata()->::perfetto::protos::BackgroundTracingMetadata::MergeFrom(
          from._internal_background_tracing_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chrome_version_code_ = from._impl_.chrome_version_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeMetadataPacket::CopyFrom(const ChromeMetadataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeMetadataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeMetadataPacket::IsInitialized() const {
  return true;
}

void ChromeMetadataPacket::InternalSwap(ChromeMetadataPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.enabled_categories_, lhs_arena,
                                       &other->_impl_.enabled_categories_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, _impl_.chrome_version_code_)
      + sizeof(ChromeMetadataPacket::_impl_.chrome_version_code_)
      - PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, _impl_.background_tracing_metadata_)>(
          reinterpret_cast<char*>(&_impl_.background_tracing_metadata_),
          reinterpret_cast<char*>(&other->_impl_.background_tracing_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeMetadataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[0]);
}
// ===================================================================

class BackgroundTracingMetadata_TriggerRule_HistogramRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule_HistogramRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_._has_bits_);
  static void set_has_histogram_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_histogram_min_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_histogram_max_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
}
BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
}

inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_name_hash_) { ::uint64_t{0u} }

    , decltype(_impl_.histogram_min_trigger_) { ::int64_t{0} }

    , decltype(_impl_.histogram_max_trigger_) { ::int64_t{0} }

  };
}

BackgroundTracingMetadata_TriggerRule_HistogramRule::~BackgroundTracingMetadata_TriggerRule_HistogramRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata_TriggerRule_HistogramRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.histogram_name_hash_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.histogram_max_trigger_) -
        reinterpret_cast<char*>(&_impl_.histogram_name_hash_)) + sizeof(_impl_.histogram_max_trigger_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackgroundTracingMetadata_TriggerRule_HistogramRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 histogram_name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _Internal::set_has_histogram_name_hash(&has_bits);
          _impl_.histogram_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 histogram_min_trigger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_histogram_min_trigger(&has_bits);
          _impl_.histogram_min_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 histogram_max_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_histogram_max_trigger(&has_bits);
          _impl_.histogram_max_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BackgroundTracingMetadata_TriggerRule_HistogramRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 histogram_name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this->_internal_histogram_name_hash(), target);
  }

  // optional int64 histogram_min_trigger = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_histogram_min_trigger(), target);
  }

  // optional int64 histogram_max_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_histogram_max_trigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  return target;
}

::size_t BackgroundTracingMetadata_TriggerRule_HistogramRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 histogram_name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional int64 histogram_min_trigger = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_histogram_min_trigger());
    }

    // optional int64 histogram_max_trigger = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_histogram_max_trigger());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackgroundTracingMetadata_TriggerRule_HistogramRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackgroundTracingMetadata_TriggerRule_HistogramRule::GetClassData() const { return &_class_data_; }


void BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackgroundTracingMetadata_TriggerRule_HistogramRule*>(&to_msg);
  auto& from = static_cast<const BackgroundTracingMetadata_TriggerRule_HistogramRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.histogram_name_hash_ = from._impl_.histogram_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.histogram_min_trigger_ = from._impl_.histogram_min_trigger_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.histogram_max_trigger_ = from._impl_.histogram_max_trigger_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule_HistogramRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::InternalSwap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_max_trigger_)
      + sizeof(BackgroundTracingMetadata_TriggerRule_HistogramRule::_impl_.histogram_max_trigger_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, _impl_.histogram_name_hash_)>(
          reinterpret_cast<char*>(&_impl_.histogram_name_hash_),
          reinterpret_cast<char*>(&other->_impl_.histogram_name_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BackgroundTracingMetadata_TriggerRule_HistogramRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[1]);
}
// ===================================================================

class BackgroundTracingMetadata_TriggerRule_NamedRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule_NamedRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content_trigger_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
}
BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(const BackgroundTracingMetadata_TriggerRule_NamedRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
}

inline void BackgroundTracingMetadata_TriggerRule_NamedRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_trigger_name_hash_) { ::uint64_t{0u} }

    , decltype(_impl_.event_type_) { 0 }

  };
}

BackgroundTracingMetadata_TriggerRule_NamedRule::~BackgroundTracingMetadata_TriggerRule_NamedRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata_TriggerRule_NamedRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.content_trigger_name_hash_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.event_type_) -
        reinterpret_cast<char*>(&_impl_.content_trigger_name_hash_)) + sizeof(_impl_.event_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackgroundTracingMetadata_TriggerRule_NamedRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(static_cast<int>(val)))) {
            _internal_set_event_type(static_cast<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed64 content_trigger_name_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _Internal::set_has_content_trigger_name_hash(&has_bits);
          _impl_.content_trigger_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BackgroundTracingMetadata_TriggerRule_NamedRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_event_type(), target);
  }

  // optional fixed64 content_trigger_name_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_content_trigger_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  return target;
}

::size_t BackgroundTracingMetadata_TriggerRule_NamedRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 content_trigger_name_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackgroundTracingMetadata_TriggerRule_NamedRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackgroundTracingMetadata_TriggerRule_NamedRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackgroundTracingMetadata_TriggerRule_NamedRule::GetClassData() const { return &_class_data_; }


void BackgroundTracingMetadata_TriggerRule_NamedRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackgroundTracingMetadata_TriggerRule_NamedRule*>(&to_msg);
  auto& from = static_cast<const BackgroundTracingMetadata_TriggerRule_NamedRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.content_trigger_name_hash_ = from._impl_.content_trigger_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule_NamedRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::InternalSwap(BackgroundTracingMetadata_TriggerRule_NamedRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_.event_type_)
      + sizeof(BackgroundTracingMetadata_TriggerRule_NamedRule::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, _impl_.content_trigger_name_hash_)>(
          reinterpret_cast<char*>(&_impl_.content_trigger_name_hash_),
          reinterpret_cast<char*>(&other->_impl_.content_trigger_name_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BackgroundTracingMetadata_TriggerRule_NamedRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[2]);
}
// ===================================================================

class BackgroundTracingMetadata_TriggerRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, _impl_._has_bits_);
  static void set_has_trigger_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& histogram_rule(const BackgroundTracingMetadata_TriggerRule* msg);
  static void set_has_histogram_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& named_rule(const BackgroundTracingMetadata_TriggerRule* msg);
  static void set_has_named_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule&
BackgroundTracingMetadata_TriggerRule::_Internal::histogram_rule(const BackgroundTracingMetadata_TriggerRule* msg) {
  return *msg->_impl_.histogram_rule_;
}
const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule&
BackgroundTracingMetadata_TriggerRule::_Internal::named_rule(const BackgroundTracingMetadata_TriggerRule* msg) {
  return *msg->_impl_.named_rule_;
}
BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
}
BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(const BackgroundTracingMetadata_TriggerRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BackgroundTracingMetadata_TriggerRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_rule_){nullptr}
    , decltype(_impl_.named_rule_){nullptr}
    , decltype(_impl_.trigger_type_) {}

    , decltype(_impl_.name_hash_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.histogram_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule(*from._impl_.histogram_rule_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.named_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule(*from._impl_.named_rule_);
  }
  ::memcpy(&_impl_.trigger_type_, &from._impl_.trigger_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.name_hash_) -
    reinterpret_cast<char*>(&_impl_.trigger_type_)) + sizeof(_impl_.name_hash_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
}

inline void BackgroundTracingMetadata_TriggerRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.histogram_rule_){nullptr}
    , decltype(_impl_.named_rule_){nullptr}
    , decltype(_impl_.trigger_type_) { 0 }

    , decltype(_impl_.name_hash_) { 0u }

  };
}

BackgroundTracingMetadata_TriggerRule::~BackgroundTracingMetadata_TriggerRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata_TriggerRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.histogram_rule_;
  if (this != internal_default_instance()) delete _impl_.named_rule_;
}

void BackgroundTracingMetadata_TriggerRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata_TriggerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.histogram_rule_ != nullptr);
      _impl_.histogram_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.named_rule_ != nullptr);
      _impl_.named_rule_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.trigger_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.name_hash_) -
        reinterpret_cast<char*>(&_impl_.trigger_type_)) + sizeof(_impl_.name_hash_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackgroundTracingMetadata_TriggerRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(static_cast<int>(val)))) {
            _internal_set_trigger_type(static_cast<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 name_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _Internal::set_has_name_hash(&has_bits);
          _impl_.name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BackgroundTracingMetadata_TriggerRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_trigger_type(), target);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::histogram_rule(this),
        _Internal::histogram_rule(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::named_rule(this),
        _Internal::named_rule(this).GetCachedSize(), target, stream);
  }

  // optional fixed32 name_hash = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this->_internal_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  return target;
}

::size_t BackgroundTracingMetadata_TriggerRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.histogram_rule_);
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.named_rule_);
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_trigger_type());
    }

    // optional fixed32 name_hash = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackgroundTracingMetadata_TriggerRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackgroundTracingMetadata_TriggerRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackgroundTracingMetadata_TriggerRule::GetClassData() const { return &_class_data_; }


void BackgroundTracingMetadata_TriggerRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackgroundTracingMetadata_TriggerRule*>(&to_msg);
  auto& from = static_cast<const BackgroundTracingMetadata_TriggerRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_histogram_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeFrom(
          from._internal_histogram_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_named_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule::MergeFrom(
          from._internal_named_rule());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.trigger_type_ = from._impl_.trigger_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.name_hash_ = from._impl_.name_hash_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackgroundTracingMetadata_TriggerRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule::InternalSwap(BackgroundTracingMetadata_TriggerRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, _impl_.name_hash_)
      + sizeof(BackgroundTracingMetadata_TriggerRule::_impl_.name_hash_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, _impl_.histogram_rule_)>(
          reinterpret_cast<char*>(&_impl_.histogram_rule_),
          reinterpret_cast<char*>(&other->_impl_.histogram_rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BackgroundTracingMetadata_TriggerRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[3]);
}
// ===================================================================

class BackgroundTracingMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata, _impl_._has_bits_);
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& triggered_rule(const BackgroundTracingMetadata* msg);
  static void set_has_triggered_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scenario_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule&
BackgroundTracingMetadata::_Internal::triggered_rule(const BackgroundTracingMetadata* msg) {
  return *msg->_impl_.triggered_rule_;
}
BackgroundTracingMetadata::BackgroundTracingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata)
}
BackgroundTracingMetadata::BackgroundTracingMetadata(const BackgroundTracingMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BackgroundTracingMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_rules_){from._impl_.active_rules_}
    , decltype(_impl_.triggered_rule_){nullptr}
    , decltype(_impl_.scenario_name_hash_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.triggered_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule(*from._impl_.triggered_rule_);
  }
  _this->_impl_.scenario_name_hash_ = from._impl_.scenario_name_hash_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata)
}

inline void BackgroundTracingMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_rules_){arena}
    , decltype(_impl_.triggered_rule_){nullptr}
    , decltype(_impl_.scenario_name_hash_) { 0u }

  };
}

BackgroundTracingMetadata::~BackgroundTracingMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundTracingMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_active_rules()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.triggered_rule_;
}

void BackgroundTracingMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackgroundTracingMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_active_rules()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.triggered_rule_ != nullptr);
    _impl_.triggered_rule_->Clear();
  }
  _impl_.scenario_name_hash_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackgroundTracingMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_triggered_rule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed32 scenario_name_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _Internal::set_has_scenario_name_hash(&has_bits);
          _impl_.scenario_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BackgroundTracingMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::triggered_rule(this),
        _Internal::triggered_rule(this).GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_active_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_active_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 scenario_name_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this->_internal_scenario_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata)
  return target;
}

::size_t BackgroundTracingMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  total_size += 1UL * this->_internal_active_rules_size();
  for (const auto& msg : this->_internal_active_rules()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.triggered_rule_);
    }

    // optional fixed32 scenario_name_hash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackgroundTracingMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackgroundTracingMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackgroundTracingMetadata::GetClassData() const { return &_class_data_; }


void BackgroundTracingMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackgroundTracingMetadata*>(&to_msg);
  auto& from = static_cast<const BackgroundTracingMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_active_rules()->MergeFrom(from._internal_active_rules());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_triggered_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule::MergeFrom(
          from._internal_triggered_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scenario_name_hash_ = from._impl_.scenario_name_hash_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackgroundTracingMetadata::CopyFrom(const BackgroundTracingMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata::InternalSwap(BackgroundTracingMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_active_rules()->InternalSwap(other->_internal_mutable_active_rules());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata, _impl_.scenario_name_hash_)
      + sizeof(BackgroundTracingMetadata::_impl_.scenario_name_hash_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata, _impl_.triggered_rule_)>(
          reinterpret_cast<char*>(&_impl_.triggered_rule_),
          reinterpret_cast<char*>(&other->_impl_.triggered_rule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BackgroundTracingMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeMetadataPacket*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeMetadataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeMetadataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata*
Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
