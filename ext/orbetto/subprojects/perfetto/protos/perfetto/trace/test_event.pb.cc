// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/test_event.proto

#include "protos/perfetto/trace/test_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TestEvent_TestPayload::TestEvent_TestPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.str_)*/{}
  , /*decltype(_impl_.nested_)*/{}
  , /*decltype(_impl_.repeated_ints_)*/ {}

  , /*decltype(_impl_.debug_annotations_)*/{}
  , /*decltype(_impl_.single_string_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.remaining_nesting_depth_)*/ 0u

  , /*decltype(_impl_.single_int_)*/ 0
} {}
struct TestEvent_TestPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEvent_TestPayloadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEvent_TestPayloadDefaultTypeInternal() {}
  union {
    TestEvent_TestPayload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEvent_TestPayloadDefaultTypeInternal _TestEvent_TestPayload_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TestEvent::TestEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.str_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.counter_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.seq_value_)*/ 0u

  , /*decltype(_impl_.is_last_)*/ false
} {}
struct TestEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEventDefaultTypeInternal() {}
  union {
    TestEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEventDefaultTypeInternal _TestEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.str_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.nested_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.single_string_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.single_int_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.repeated_ints_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.remaining_nesting_depth_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent_TestPayload, _impl_.debug_annotations_),
    ~0u,
    ~0u,
    0,
    2,
    ~0u,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _impl_.str_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _impl_.seq_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _impl_.counter_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _impl_.is_last_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TestEvent, _impl_.payload_),
    0,
    3,
    2,
    4,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::perfetto::protos::TestEvent_TestPayload)},
        { 22, 35, -1, sizeof(::perfetto::protos::TestEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TestEvent_TestPayload_default_instance_._instance,
    &::perfetto::protos::_TestEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/test_event.proto"
    "\022\017perfetto.protos\0328protos/perfetto/trace"
    "/track_event/debug_annotation.proto\"\373\002\n\t"
    "TestEvent\022\013\n\003str\030\001 \001(\t\022\021\n\tseq_value\030\002 \001("
    "\r\022\017\n\007counter\030\003 \001(\004\022\017\n\007is_last\030\004 \001(\010\0227\n\007p"
    "ayload\030\005 \001(\0132&.perfetto.protos.TestEvent"
    ".TestPayload\032\362\001\n\013TestPayload\022\013\n\003str\030\001 \003("
    "\t\0226\n\006nested\030\002 \003(\0132&.perfetto.protos.Test"
    "Event.TestPayload\022\025\n\rsingle_string\030\004 \001(\t"
    "\022\022\n\nsingle_int\030\005 \001(\005\022\025\n\rrepeated_ints\030\006 "
    "\003(\005\022\037\n\027remaining_nesting_depth\030\003 \001(\r\022;\n\021"
    "debug_annotations\030\007 \003(\0132 .perfetto.proto"
    "s.DebugAnnotation"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto = {
    false,
    false,
    497,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto,
    "protos/perfetto/trace/test_event.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class TestEvent_TestPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEvent_TestPayload>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestEvent_TestPayload, _impl_._has_bits_);
  static void set_has_single_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_single_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remaining_nesting_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void TestEvent_TestPayload::clear_debug_annotations() {
  _internal_mutable_debug_annotations()->Clear();
}
TestEvent_TestPayload::TestEvent_TestPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TestEvent.TestPayload)
}
TestEvent_TestPayload::TestEvent_TestPayload(const TestEvent_TestPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestEvent_TestPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_){from._impl_.str_}
    , decltype(_impl_.nested_){from._impl_.nested_}
    , decltype(_impl_.repeated_ints_) { from._impl_.repeated_ints_ }

    , decltype(_impl_.debug_annotations_){from._impl_.debug_annotations_}
    , decltype(_impl_.single_string_) {}

    , decltype(_impl_.remaining_nesting_depth_) {}

    , decltype(_impl_.single_int_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.single_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.single_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.single_string_.Set(from._internal_single_string(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.remaining_nesting_depth_, &from._impl_.remaining_nesting_depth_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.single_int_) -
    reinterpret_cast<char*>(&_impl_.remaining_nesting_depth_)) + sizeof(_impl_.single_int_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestEvent.TestPayload)
}

inline void TestEvent_TestPayload::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_){arena}
    , decltype(_impl_.nested_){arena}
    , decltype(_impl_.repeated_ints_) { arena }

    , decltype(_impl_.debug_annotations_){arena}
    , decltype(_impl_.single_string_) {}

    , decltype(_impl_.remaining_nesting_depth_) { 0u }

    , decltype(_impl_.single_int_) { 0 }

  };
  _impl_.single_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.single_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestEvent_TestPayload::~TestEvent_TestPayload() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestEvent.TestPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEvent_TestPayload::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_str()->~RepeatedPtrField();
  _internal_mutable_nested()->~RepeatedPtrField();
  _impl_.repeated_ints_.~RepeatedField();
  _internal_mutable_debug_annotations()->~RepeatedPtrField();
  _impl_.single_string_.Destroy();
}

void TestEvent_TestPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestEvent_TestPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestEvent.TestPayload)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_str()->Clear();
  _internal_mutable_nested()->Clear();
  _internal_mutable_repeated_ints()->Clear();
  _internal_mutable_debug_annotations()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.single_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.remaining_nesting_depth_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.single_int_) -
        reinterpret_cast<char*>(&_impl_.remaining_nesting_depth_)) + sizeof(_impl_.single_int_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEvent_TestPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.TestEvent.TestPayload.str");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.TestEvent.TestPayload nested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 remaining_nesting_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_remaining_nesting_depth(&has_bits);
          _impl_.remaining_nesting_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string single_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_single_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TestEvent.TestPayload.single_string");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 single_int = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_single_int(&has_bits);
          _impl_.single_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 repeated_ints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_ints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_ints(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.DebugAnnotation debug_annotations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestEvent_TestPayload::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TestEvent.TestPayload)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string str = 1;
  for (int i = 0, n = this->_internal_str_size(); i < n; ++i) {
    const auto& s = this->_internal_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TestEvent.TestPayload.str");
    target = stream->WriteString(1, s, target);
  }

  // repeated .perfetto.protos.TestEvent.TestPayload nested = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nested_size()); i < n; i++) {
    const auto& repfield = this->_internal_nested(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 remaining_nesting_depth = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_remaining_nesting_depth(), target);
  }

  // optional string single_string = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_single_string();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TestEvent.TestPayload.single_string");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int32 single_int = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_single_int(), target);
  }

  // repeated int32 repeated_ints = 6;
  for (int i = 0, n = this->_internal_repeated_ints_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_repeated_ints(i), target);
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TestEvent.TestPayload)
  return target;
}

::size_t TestEvent_TestPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestEvent.TestPayload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_str().size());
  for (int i = 0, n = _internal_str().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_str().Get(i));
  }

  // repeated .perfetto.protos.TestEvent.TestPayload nested = 2;
  total_size += 1UL * this->_internal_nested_size();
  for (const auto& msg : this->_internal_nested()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 repeated_ints = 6;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_repeated_ints())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_repeated_ints_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 7;
  total_size += 1UL * this->_internal_debug_annotations_size();
  for (const auto& msg : this->_internal_debug_annotations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string single_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_single_string());
    }

    // optional uint32 remaining_nesting_depth = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_remaining_nesting_depth());
    }

    // optional int32 single_int = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_single_int());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEvent_TestPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestEvent_TestPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEvent_TestPayload::GetClassData() const { return &_class_data_; }


void TestEvent_TestPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestEvent_TestPayload*>(&to_msg);
  auto& from = static_cast<const TestEvent_TestPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestEvent.TestPayload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_str()->MergeFrom(from._internal_str());
  _this->_internal_mutable_nested()->MergeFrom(from._internal_nested());
  _this->_impl_.repeated_ints_.MergeFrom(from._impl_.repeated_ints_);
  _this->_internal_mutable_debug_annotations()->MergeFrom(from._internal_debug_annotations());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_single_string(from._internal_single_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remaining_nesting_depth_ = from._impl_.remaining_nesting_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.single_int_ = from._impl_.single_int_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEvent_TestPayload::CopyFrom(const TestEvent_TestPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestEvent.TestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEvent_TestPayload::IsInitialized() const {
  return true;
}

void TestEvent_TestPayload::InternalSwap(TestEvent_TestPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_str()->InternalSwap(
      other->_internal_mutable_str());
  _internal_mutable_nested()->InternalSwap(other->_internal_mutable_nested());
  _impl_.repeated_ints_.InternalSwap(&other->_impl_.repeated_ints_);
  _internal_mutable_debug_annotations()->InternalSwap(other->_internal_mutable_debug_annotations());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.single_string_, lhs_arena,
                                       &other->_impl_.single_string_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestEvent_TestPayload, _impl_.single_int_)
      + sizeof(TestEvent_TestPayload::_impl_.single_int_)
      - PROTOBUF_FIELD_OFFSET(TestEvent_TestPayload, _impl_.remaining_nesting_depth_)>(
          reinterpret_cast<char*>(&_impl_.remaining_nesting_depth_),
          reinterpret_cast<char*>(&other->_impl_.remaining_nesting_depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEvent_TestPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto[0]);
}
// ===================================================================

class TestEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TestEvent, _impl_._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seq_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_last(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::TestEvent_TestPayload& payload(const TestEvent* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::TestEvent_TestPayload&
TestEvent::_Internal::payload(const TestEvent* msg) {
  return *msg->_impl_.payload_;
}
TestEvent::TestEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TestEvent)
}
TestEvent::TestEvent(const TestEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_) {}

    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.counter_) {}

    , decltype(_impl_.seq_value_) {}

    , decltype(_impl_.is_last_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.str_.Set(from._internal_str(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.payload_ = new ::perfetto::protos::TestEvent_TestPayload(*from._impl_.payload_);
  }
  ::memcpy(&_impl_.counter_, &from._impl_.counter_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_last_) -
    reinterpret_cast<char*>(&_impl_.counter_)) + sizeof(_impl_.is_last_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestEvent)
}

inline void TestEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_) {}

    , decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.counter_) { ::uint64_t{0u} }

    , decltype(_impl_.seq_value_) { 0u }

    , decltype(_impl_.is_last_) { false }

  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestEvent::~TestEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void TestEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.payload_ != nullptr);
      _impl_.payload_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.counter_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_last_) -
        reinterpret_cast<char*>(&_impl_.counter_)) + sizeof(_impl_.is_last_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TestEvent.str");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 seq_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_seq_value(&has_bits);
          _impl_.seq_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_counter(&has_bits);
          _impl_.counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_last = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_is_last(&has_bits);
          _impl_.is_last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TestEvent.TestPayload payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TestEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TestEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string str = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_str();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TestEvent.str");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 seq_value = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_seq_value(), target);
  }

  // optional uint64 counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_counter(), target);
  }

  // optional bool is_last = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_last(), target);
  }

  // optional .perfetto.protos.TestEvent.TestPayload payload = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TestEvent)
  return target;
}

::size_t TestEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string str = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_str());
    }

    // optional .perfetto.protos.TestEvent.TestPayload payload = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_);
    }

    // optional uint64 counter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_counter());
    }

    // optional uint32 seq_value = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_seq_value());
    }

    // optional bool is_last = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEvent::GetClassData() const { return &_class_data_; }


void TestEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestEvent*>(&to_msg);
  auto& from = static_cast<const TestEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_str(from._internal_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_payload()->::perfetto::protos::TestEvent_TestPayload::MergeFrom(
          from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.counter_ = from._impl_.counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seq_value_ = from._impl_.seq_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_last_ = from._impl_.is_last_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEvent::CopyFrom(const TestEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEvent::IsInitialized() const {
  return true;
}

void TestEvent::InternalSwap(TestEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.str_, lhs_arena,
                                       &other->_impl_.str_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestEvent, _impl_.is_last_)
      + sizeof(TestEvent::_impl_.is_last_)
      - PROTOBUF_FIELD_OFFSET(TestEvent, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestEvent_TestPayload*
Arena::CreateMaybeMessage< ::perfetto::protos::TestEvent_TestPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TestEvent_TestPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TestEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TestEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
