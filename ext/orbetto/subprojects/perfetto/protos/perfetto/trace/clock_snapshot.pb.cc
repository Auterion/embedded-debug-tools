// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/clock_snapshot.proto

#include "protos/perfetto/trace/clock_snapshot.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ClockSnapshot_Clock::ClockSnapshot_Clock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.clock_id_)*/ 0u

  , /*decltype(_impl_.is_incremental_)*/ false

  , /*decltype(_impl_.unit_multiplier_ns_)*/ ::uint64_t{0u}
} {}
struct ClockSnapshot_ClockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClockSnapshot_ClockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClockSnapshot_ClockDefaultTypeInternal() {}
  union {
    ClockSnapshot_Clock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClockSnapshot_ClockDefaultTypeInternal _ClockSnapshot_Clock_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClockSnapshot::ClockSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clocks_)*/{}
  , /*decltype(_impl_.primary_trace_clock_)*/ 0
} {}
struct ClockSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClockSnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClockSnapshotDefaultTypeInternal() {}
  union {
    ClockSnapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClockSnapshotDefaultTypeInternal _ClockSnapshot_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot_Clock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot_Clock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot_Clock, _impl_.clock_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot_Clock, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot_Clock, _impl_.is_incremental_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot_Clock, _impl_.unit_multiplier_ns_),
    1,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot, _impl_.clocks_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ClockSnapshot, _impl_.primary_trace_clock_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::perfetto::protos::ClockSnapshot_Clock)},
        { 16, 26, -1, sizeof(::perfetto::protos::ClockSnapshot)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ClockSnapshot_Clock_default_instance_._instance,
    &::perfetto::protos::_ClockSnapshot_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*protos/perfetto/trace/clock_snapshot.p"
    "roto\022\017perfetto.protos\032*protos/perfetto/c"
    "ommon/builtin_clock.proto\"\222\003\n\rClockSnaps"
    "hot\0224\n\006clocks\030\001 \003(\0132$.perfetto.protos.Cl"
    "ockSnapshot.Clock\022:\n\023primary_trace_clock"
    "\030\002 \001(\0162\035.perfetto.protos.BuiltinClock\032\216\002"
    "\n\005Clock\022\020\n\010clock_id\030\001 \001(\r\022\021\n\ttimestamp\030\002"
    " \001(\004\022\026\n\016is_incremental\030\003 \001(\010\022\032\n\022unit_mul"
    "tiplier_ns\030\004 \001(\004\"\253\001\n\rBuiltinClocks\022\013\n\007UN"
    "KNOWN\020\000\022\014\n\010REALTIME\020\001\022\023\n\017REALTIME_COARSE"
    "\020\002\022\r\n\tMONOTONIC\020\003\022\024\n\020MONOTONIC_COARSE\020\004\022"
    "\021\n\rMONOTONIC_RAW\020\005\022\014\n\010BOOTTIME\020\006\022\030\n\024BUIL"
    "TIN_CLOCK_MAX_ID\020\?\"\004\010\007\020\007\"\004\010\010\020\010"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2fbuiltin_5fclock_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto = {
    false,
    false,
    510,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto,
    "protos/perfetto/trace/clock_snapshot.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClockSnapshot_Clock_BuiltinClocks_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto[0];
}
bool ClockSnapshot_Clock_BuiltinClocks_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 63:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::UNKNOWN;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::REALTIME;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::REALTIME_COARSE;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::MONOTONIC;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::MONOTONIC_COARSE;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::MONOTONIC_RAW;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::BOOTTIME;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::BUILTIN_CLOCK_MAX_ID;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::BuiltinClocks_MIN;
constexpr ClockSnapshot_Clock_BuiltinClocks ClockSnapshot_Clock::BuiltinClocks_MAX;
constexpr int ClockSnapshot_Clock::BuiltinClocks_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ClockSnapshot_Clock::_Internal {
 public:
  using HasBits = decltype(std::declval<ClockSnapshot_Clock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClockSnapshot_Clock, _impl_._has_bits_);
  static void set_has_clock_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_incremental(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unit_multiplier_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ClockSnapshot_Clock::ClockSnapshot_Clock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ClockSnapshot.Clock)
}
ClockSnapshot_Clock::ClockSnapshot_Clock(const ClockSnapshot_Clock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ClockSnapshot.Clock)
}

inline void ClockSnapshot_Clock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.clock_id_) { 0u }

    , decltype(_impl_.is_incremental_) { false }

    , decltype(_impl_.unit_multiplier_ns_) { ::uint64_t{0u} }

  };
}

ClockSnapshot_Clock::~ClockSnapshot_Clock() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ClockSnapshot.Clock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClockSnapshot_Clock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClockSnapshot_Clock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClockSnapshot_Clock::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ClockSnapshot.Clock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.unit_multiplier_ns_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.unit_multiplier_ns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClockSnapshot_Clock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 clock_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_clock_id(&has_bits);
          _impl_.clock_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_incremental = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_is_incremental(&has_bits);
          _impl_.is_incremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 unit_multiplier_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_unit_multiplier_ns(&has_bits);
          _impl_.unit_multiplier_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClockSnapshot_Clock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ClockSnapshot.Clock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 clock_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_clock_id(), target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  // optional bool is_incremental = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_incremental(), target);
  }

  // optional uint64 unit_multiplier_ns = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_unit_multiplier_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ClockSnapshot.Clock)
  return target;
}

::size_t ClockSnapshot_Clock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ClockSnapshot.Clock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional uint32 clock_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_clock_id());
    }

    // optional bool is_incremental = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional uint64 unit_multiplier_ns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_unit_multiplier_ns());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClockSnapshot_Clock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClockSnapshot_Clock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClockSnapshot_Clock::GetClassData() const { return &_class_data_; }


void ClockSnapshot_Clock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClockSnapshot_Clock*>(&to_msg);
  auto& from = static_cast<const ClockSnapshot_Clock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ClockSnapshot.Clock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clock_id_ = from._impl_.clock_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_incremental_ = from._impl_.is_incremental_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unit_multiplier_ns_ = from._impl_.unit_multiplier_ns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClockSnapshot_Clock::CopyFrom(const ClockSnapshot_Clock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ClockSnapshot.Clock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockSnapshot_Clock::IsInitialized() const {
  return true;
}

void ClockSnapshot_Clock::InternalSwap(ClockSnapshot_Clock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClockSnapshot_Clock, _impl_.unit_multiplier_ns_)
      + sizeof(ClockSnapshot_Clock::_impl_.unit_multiplier_ns_)
      - PROTOBUF_FIELD_OFFSET(ClockSnapshot_Clock, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClockSnapshot_Clock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto[0]);
}
// ===================================================================

class ClockSnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<ClockSnapshot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClockSnapshot, _impl_._has_bits_);
  static void set_has_primary_trace_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClockSnapshot::ClockSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ClockSnapshot)
}
ClockSnapshot::ClockSnapshot(const ClockSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClockSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clocks_){from._impl_.clocks_}
    , decltype(_impl_.primary_trace_clock_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.primary_trace_clock_ = from._impl_.primary_trace_clock_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ClockSnapshot)
}

inline void ClockSnapshot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clocks_){arena}
    , decltype(_impl_.primary_trace_clock_) { 0 }

  };
}

ClockSnapshot::~ClockSnapshot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ClockSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClockSnapshot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_clocks()->~RepeatedPtrField();
}

void ClockSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClockSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ClockSnapshot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_clocks()->Clear();
  _impl_.primary_trace_clock_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClockSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BuiltinClock_IsValid(static_cast<int>(val)))) {
            _internal_set_primary_trace_clock(static_cast<::perfetto::protos::BuiltinClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClockSnapshot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ClockSnapshot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_clocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_primary_trace_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ClockSnapshot)
  return target;
}

::size_t ClockSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ClockSnapshot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ClockSnapshot.Clock clocks = 1;
  total_size += 1UL * this->_internal_clocks_size();
  for (const auto& msg : this->_internal_clocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_primary_trace_clock());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClockSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClockSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClockSnapshot::GetClassData() const { return &_class_data_; }


void ClockSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClockSnapshot*>(&to_msg);
  auto& from = static_cast<const ClockSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ClockSnapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_clocks()->MergeFrom(from._internal_clocks());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_primary_trace_clock(from._internal_primary_trace_clock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClockSnapshot::CopyFrom(const ClockSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ClockSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockSnapshot::IsInitialized() const {
  return true;
}

void ClockSnapshot::InternalSwap(ClockSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_clocks()->InternalSwap(other->_internal_mutable_clocks());
  swap(_impl_.primary_trace_clock_, other->_impl_.primary_trace_clock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClockSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ClockSnapshot_Clock*
Arena::CreateMaybeMessage< ::perfetto::protos::ClockSnapshot_Clock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ClockSnapshot_Clock >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ClockSnapshot*
Arena::CreateMaybeMessage< ::perfetto::protos::ClockSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ClockSnapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
