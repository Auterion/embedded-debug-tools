// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/frame_timeline_event.proto

#include "protos/perfetto/trace/android/frame_timeline_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layer_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cookie_)*/ ::int64_t{0}

  , /*decltype(_impl_.token_)*/ ::int64_t{0}

  , /*decltype(_impl_.display_frame_token_)*/ ::int64_t{0}

  , /*decltype(_impl_.pid_)*/ 0
} {}
struct FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ExpectedSurfaceFrameStart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.layer_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cookie_)*/ ::int64_t{0}

  , /*decltype(_impl_.token_)*/ ::int64_t{0}

  , /*decltype(_impl_.display_frame_token_)*/ ::int64_t{0}

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.present_type_)*/ 0

  , /*decltype(_impl_.on_time_finish_)*/ false

  , /*decltype(_impl_.gpu_composition_)*/ false

  , /*decltype(_impl_.is_buffer_)*/ false

  , /*decltype(_impl_.jank_type_)*/ 0

  , /*decltype(_impl_.prediction_type_)*/ 0
} {}
struct FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ActualSurfaceFrameStart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cookie_)*/ ::int64_t{0}

  , /*decltype(_impl_.token_)*/ ::int64_t{0}

  , /*decltype(_impl_.pid_)*/ 0
} {}
struct FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ExpectedDisplayFrameStart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cookie_)*/ ::int64_t{0}

  , /*decltype(_impl_.token_)*/ ::int64_t{0}

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.present_type_)*/ 0

  , /*decltype(_impl_.on_time_finish_)*/ false

  , /*decltype(_impl_.gpu_composition_)*/ false

  , /*decltype(_impl_.jank_type_)*/ 0

  , /*decltype(_impl_.prediction_type_)*/ 0
} {}
struct FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_ActualDisplayFrameStart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualDisplayFrameStart_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cookie_)*/ ::int64_t{0}
} {}
struct FrameTimelineEvent_FrameEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEvent_FrameEndDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEvent_FrameEndDefaultTypeInternal() {}
  union {
    FrameTimelineEvent_FrameEnd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEvent_FrameEndDefaultTypeInternal _FrameTimelineEvent_FrameEnd_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameTimelineEvent::FrameTimelineEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FrameTimelineEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimelineEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimelineEventDefaultTypeInternal() {}
  union {
    FrameTimelineEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimelineEventDefaultTypeInternal _FrameTimelineEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.cookie_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.display_frame_token_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.layer_name_),
    1,
    2,
    3,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.cookie_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.display_frame_token_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.layer_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.present_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.on_time_finish_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.gpu_composition_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.jank_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.prediction_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.is_buffer_),
    1,
    2,
    3,
    4,
    0,
    5,
    6,
    7,
    9,
    10,
    8,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.cookie_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.pid_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.cookie_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.present_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.on_time_finish_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.gpu_composition_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.jank_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart, _impl_.prediction_type_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_FrameEnd, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_FrameEnd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent_FrameEnd, _impl_.cookie_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent, _impl_.event_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart)},
        { 18, 37, -1, sizeof(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart)},
        { 48, 59, -1, sizeof(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart)},
        { 62, 78, -1, sizeof(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart)},
        { 86, 95, -1, sizeof(::perfetto::protos::FrameTimelineEvent_FrameEnd)},
        { 96, -1, -1, sizeof(::perfetto::protos::FrameTimelineEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_._instance,
    &::perfetto::protos::_FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_._instance,
    &::perfetto::protos::_FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_._instance,
    &::perfetto::protos::_FrameTimelineEvent_ActualDisplayFrameStart_default_instance_._instance,
    &::perfetto::protos::_FrameTimelineEvent_FrameEnd_default_instance_._instance,
    &::perfetto::protos::_FrameTimelineEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n8protos/perfetto/trace/android/frame_ti"
    "meline_event.proto\022\017perfetto.protos\"\213\017\n\022"
    "FrameTimelineEvent\022e\n\034expected_display_f"
    "rame_start\030\001 \001(\0132=.perfetto.protos.Frame"
    "TimelineEvent.ExpectedDisplayFrameStartH"
    "\000\022a\n\032actual_display_frame_start\030\002 \001(\0132;."
    "perfetto.protos.FrameTimelineEvent.Actua"
    "lDisplayFrameStartH\000\022e\n\034expected_surface"
    "_frame_start\030\003 \001(\0132=.perfetto.protos.Fra"
    "meTimelineEvent.ExpectedSurfaceFrameStar"
    "tH\000\022a\n\032actual_surface_frame_start\030\004 \001(\0132"
    ";.perfetto.protos.FrameTimelineEvent.Act"
    "ualSurfaceFrameStartH\000\022A\n\tframe_end\030\005 \001("
    "\0132,.perfetto.protos.FrameTimelineEvent.F"
    "rameEndH\000\032x\n\031ExpectedSurfaceFrameStart\022\016"
    "\n\006cookie\030\001 \001(\003\022\r\n\005token\030\002 \001(\003\022\033\n\023display"
    "_frame_token\030\003 \001(\003\022\013\n\003pid\030\004 \001(\005\022\022\n\nlayer"
    "_name\030\005 \001(\t\032\341\002\n\027ActualSurfaceFrameStart\022"
    "\016\n\006cookie\030\001 \001(\003\022\r\n\005token\030\002 \001(\003\022\033\n\023displa"
    "y_frame_token\030\003 \001(\003\022\013\n\003pid\030\004 \001(\005\022\022\n\nlaye"
    "r_name\030\005 \001(\t\022E\n\014present_type\030\006 \001(\0162/.per"
    "fetto.protos.FrameTimelineEvent.PresentT"
    "ype\022\026\n\016on_time_finish\030\007 \001(\010\022\027\n\017gpu_compo"
    "sition\030\010 \001(\010\022\021\n\tjank_type\030\t \001(\005\022K\n\017predi"
    "ction_type\030\n \001(\01622.perfetto.protos.Frame"
    "TimelineEvent.PredictionType\022\021\n\tis_buffe"
    "r\030\013 \001(\010\032G\n\031ExpectedDisplayFrameStart\022\016\n\006"
    "cookie\030\001 \001(\003\022\r\n\005token\030\002 \001(\003\022\013\n\003pid\030\003 \001(\005"
    "\032\235\002\n\027ActualDisplayFrameStart\022\016\n\006cookie\030\001"
    " \001(\003\022\r\n\005token\030\002 \001(\003\022\013\n\003pid\030\003 \001(\005\022E\n\014pres"
    "ent_type\030\004 \001(\0162/.perfetto.protos.FrameTi"
    "melineEvent.PresentType\022\026\n\016on_time_finis"
    "h\030\005 \001(\010\022\027\n\017gpu_composition\030\006 \001(\010\022\021\n\tjank"
    "_type\030\007 \001(\005\022K\n\017prediction_type\030\010 \001(\01622.p"
    "erfetto.protos.FrameTimelineEvent.Predic"
    "tionType\032\032\n\010FrameEnd\022\016\n\006cookie\030\001 \001(\003\"\260\002\n"
    "\010JankType\022\024\n\020JANK_UNSPECIFIED\020\000\022\r\n\tJANK_"
    "NONE\020\001\022\026\n\022JANK_SF_SCHEDULING\020\002\022\031\n\025JANK_P"
    "REDICTION_ERROR\020\004\022\024\n\020JANK_DISPLAY_HAL\020\010\022"
    "\037\n\033JANK_SF_CPU_DEADLINE_MISSED\020\020\022\037\n\033JANK"
    "_SF_GPU_DEADLINE_MISSED\020 \022\034\n\030JANK_APP_DE"
    "ADLINE_MISSED\020@\022\031\n\024JANK_BUFFER_STUFFING\020"
    "\200\001\022\021\n\014JANK_UNKNOWN\020\200\002\022\025\n\020JANK_SF_STUFFIN"
    "G\020\200\004\022\021\n\014JANK_DROPPED\020\200\010\"\212\001\n\013PresentType\022"
    "\027\n\023PRESENT_UNSPECIFIED\020\000\022\023\n\017PRESENT_ON_T"
    "IME\020\001\022\020\n\014PRESENT_LATE\020\002\022\021\n\rPRESENT_EARLY"
    "\020\003\022\023\n\017PRESENT_DROPPED\020\004\022\023\n\017PRESENT_UNKNO"
    "WN\020\005\"r\n\016PredictionType\022\032\n\026PREDICTION_UNS"
    "PECIFIED\020\000\022\024\n\020PREDICTION_VALID\020\001\022\026\n\022PRED"
    "ICTION_EXPIRED\020\002\022\026\n\022PREDICTION_UNKNOWN\020\003"
    "B\007\n\005event"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto = {
    false,
    false,
    2009,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto,
    "protos/perfetto/trace/android/frame_timeline_event.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameTimelineEvent_JankType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[0];
}
bool FrameTimelineEvent_JankType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_UNSPECIFIED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_NONE;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_SCHEDULING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_PREDICTION_ERROR;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_DISPLAY_HAL;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_CPU_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_GPU_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_APP_DEADLINE_MISSED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_BUFFER_STUFFING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_UNKNOWN;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_SF_STUFFING;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JANK_DROPPED;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JankType_MIN;
constexpr FrameTimelineEvent_JankType FrameTimelineEvent::JankType_MAX;
constexpr int FrameTimelineEvent::JankType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameTimelineEvent_PresentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[1];
}
bool FrameTimelineEvent_PresentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_UNSPECIFIED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_ON_TIME;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_LATE;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_EARLY;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_DROPPED;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PRESENT_UNKNOWN;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PresentType_MIN;
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent::PresentType_MAX;
constexpr int FrameTimelineEvent::PresentType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameTimelineEvent_PredictionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[2];
}
bool FrameTimelineEvent_PredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_UNSPECIFIED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_VALID;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_EXPIRED;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PREDICTION_UNKNOWN;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PredictionType_MIN;
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent::PredictionType_MAX;
constexpr int FrameTimelineEvent::PredictionType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class FrameTimelineEvent_ExpectedSurfaceFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ExpectedSurfaceFrameStart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_frame_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}
FrameTimelineEvent_ExpectedSurfaceFrameStart::FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameTimelineEvent_ExpectedSurfaceFrameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_) {}

    , decltype(_impl_.cookie_) {}

    , decltype(_impl_.token_) {}

    , decltype(_impl_.display_frame_token_) {}

    , decltype(_impl_.pid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.layer_name_.Set(from._internal_layer_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cookie_, &from._impl_.cookie_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pid_) -
    reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
}

inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_) {}

    , decltype(_impl_.cookie_) { ::int64_t{0} }

    , decltype(_impl_.token_) { ::int64_t{0} }

    , decltype(_impl_.display_frame_token_) { ::int64_t{0} }

    , decltype(_impl_.pid_) { 0 }

  };
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameTimelineEvent_ExpectedSurfaceFrameStart::~FrameTimelineEvent_ExpectedSurfaceFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_name_.Destroy();
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.layer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.cookie_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pid_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimelineEvent_ExpectedSurfaceFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 display_frame_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_display_frame_token(&has_bits);
          _impl_.display_frame_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string layer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameTimelineEvent_ExpectedSurfaceFrameStart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_token(), target);
  }

  // optional int64 display_frame_token = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_display_frame_token(), target);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_pid(), target);
  }

  // optional string layer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_layer_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  return target;
}

::size_t FrameTimelineEvent_ExpectedSurfaceFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string layer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_layer_name());
    }

    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_token());
    }

    // optional int64 display_frame_token = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_display_frame_token());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimelineEvent_ExpectedSurfaceFrameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimelineEvent_ExpectedSurfaceFrameStart::GetClassData() const { return &_class_data_; }


void FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimelineEvent_ExpectedSurfaceFrameStart*>(&to_msg);
  auto& from = static_cast<const FrameTimelineEvent_ExpectedSurfaceFrameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_layer_name(from._internal_layer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.display_frame_token_ = from._impl_.display_frame_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::CopyFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ExpectedSurfaceFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ExpectedSurfaceFrameStart::InternalSwap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layer_name_, lhs_arena,
                                       &other->_impl_.layer_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.pid_)
      + sizeof(FrameTimelineEvent_ExpectedSurfaceFrameStart::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedSurfaceFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimelineEvent_ExpectedSurfaceFrameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[0]);
}
// ===================================================================

class FrameTimelineEvent_ActualSurfaceFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ActualSurfaceFrameStart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualSurfaceFrameStart, _impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_frame_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_present_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_on_time_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gpu_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jank_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_prediction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}
FrameTimelineEvent_ActualSurfaceFrameStart::FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameTimelineEvent_ActualSurfaceFrameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_) {}

    , decltype(_impl_.cookie_) {}

    , decltype(_impl_.token_) {}

    , decltype(_impl_.display_frame_token_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.present_type_) {}

    , decltype(_impl_.on_time_finish_) {}

    , decltype(_impl_.gpu_composition_) {}

    , decltype(_impl_.is_buffer_) {}

    , decltype(_impl_.jank_type_) {}

    , decltype(_impl_.prediction_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.layer_name_.Set(from._internal_layer_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cookie_, &from._impl_.cookie_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.prediction_type_) -
    reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.prediction_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
}

inline void FrameTimelineEvent_ActualSurfaceFrameStart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.layer_name_) {}

    , decltype(_impl_.cookie_) { ::int64_t{0} }

    , decltype(_impl_.token_) { ::int64_t{0} }

    , decltype(_impl_.display_frame_token_) { ::int64_t{0} }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.present_type_) { 0 }

    , decltype(_impl_.on_time_finish_) { false }

    , decltype(_impl_.gpu_composition_) { false }

    , decltype(_impl_.is_buffer_) { false }

    , decltype(_impl_.jank_type_) { 0 }

    , decltype(_impl_.prediction_type_) { 0 }

  };
  _impl_.layer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameTimelineEvent_ActualSurfaceFrameStart::~FrameTimelineEvent_ActualSurfaceFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ActualSurfaceFrameStart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_name_.Destroy();
}

void FrameTimelineEvent_ActualSurfaceFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ActualSurfaceFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.layer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.cookie_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gpu_composition_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.gpu_composition_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.is_buffer_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.prediction_type_) -
        reinterpret_cast<char*>(&_impl_.is_buffer_)) + sizeof(_impl_.prediction_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimelineEvent_ActualSurfaceFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 display_frame_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_display_frame_token(&has_bits);
          _impl_.display_frame_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string layer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(static_cast<int>(val)))) {
            _internal_set_present_type(static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool on_time_finish = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_on_time_finish(&has_bits);
          _impl_.on_time_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool gpu_composition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_gpu_composition(&has_bits);
          _impl_.gpu_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 jank_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_jank_type(&has_bits);
          _impl_.jank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(static_cast<int>(val)))) {
            _internal_set_prediction_type(static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_buffer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_is_buffer(&has_bits);
          _impl_.is_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameTimelineEvent_ActualSurfaceFrameStart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_token(), target);
  }

  // optional int64 display_frame_token = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_display_frame_token(), target);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_pid(), target);
  }

  // optional string layer_name = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_layer_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_present_type(), target);
  }

  // optional bool on_time_finish = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_on_time_finish(), target);
  }

  // optional bool gpu_composition = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_gpu_composition(), target);
  }

  // optional int32 jank_type = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_jank_type(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_prediction_type(), target);
  }

  // optional bool is_buffer = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_is_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  return target;
}

::size_t FrameTimelineEvent_ActualSurfaceFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string layer_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_layer_name());
    }

    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_token());
    }

    // optional int64 display_frame_token = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_display_frame_token());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_present_type());
    }

    // optional bool on_time_finish = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool gpu_composition = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool is_buffer = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional int32 jank_type = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_jank_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_prediction_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimelineEvent_ActualSurfaceFrameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimelineEvent_ActualSurfaceFrameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimelineEvent_ActualSurfaceFrameStart::GetClassData() const { return &_class_data_; }


void FrameTimelineEvent_ActualSurfaceFrameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimelineEvent_ActualSurfaceFrameStart*>(&to_msg);
  auto& from = static_cast<const FrameTimelineEvent_ActualSurfaceFrameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_layer_name(from._internal_layer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.display_frame_token_ = from._impl_.display_frame_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.present_type_ = from._impl_.present_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.on_time_finish_ = from._impl_.on_time_finish_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.gpu_composition_ = from._impl_.gpu_composition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_buffer_ = from._impl_.is_buffer_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.jank_type_ = from._impl_.jank_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.prediction_type_ = from._impl_.prediction_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimelineEvent_ActualSurfaceFrameStart::CopyFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ActualSurfaceFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ActualSurfaceFrameStart::InternalSwap(FrameTimelineEvent_ActualSurfaceFrameStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layer_name_, lhs_arena,
                                       &other->_impl_.layer_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.prediction_type_)
      + sizeof(FrameTimelineEvent_ActualSurfaceFrameStart::_impl_.prediction_type_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualSurfaceFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimelineEvent_ActualSurfaceFrameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[1]);
}
// ===================================================================

class FrameTimelineEvent_ExpectedDisplayFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ExpectedDisplayFrameStart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}
FrameTimelineEvent_ExpectedDisplayFrameStart::FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
}

inline void FrameTimelineEvent_ExpectedDisplayFrameStart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_) { ::int64_t{0} }

    , decltype(_impl_.token_) { ::int64_t{0} }

    , decltype(_impl_.pid_) { 0 }

  };
}

FrameTimelineEvent_ExpectedDisplayFrameStart::~FrameTimelineEvent_ExpectedDisplayFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ExpectedDisplayFrameStart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.cookie_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pid_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.pid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimelineEvent_ExpectedDisplayFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameTimelineEvent_ExpectedDisplayFrameStart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_token(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  return target;
}

::size_t FrameTimelineEvent_ExpectedDisplayFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_token());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimelineEvent_ExpectedDisplayFrameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimelineEvent_ExpectedDisplayFrameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimelineEvent_ExpectedDisplayFrameStart::GetClassData() const { return &_class_data_; }


void FrameTimelineEvent_ExpectedDisplayFrameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimelineEvent_ExpectedDisplayFrameStart*>(&to_msg);
  auto& from = static_cast<const FrameTimelineEvent_ExpectedDisplayFrameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::CopyFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ExpectedDisplayFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ExpectedDisplayFrameStart::InternalSwap(FrameTimelineEvent_ExpectedDisplayFrameStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.pid_)
      + sizeof(FrameTimelineEvent_ExpectedDisplayFrameStart::_impl_.pid_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ExpectedDisplayFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimelineEvent_ExpectedDisplayFrameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[2]);
}
// ===================================================================

class FrameTimelineEvent_ActualDisplayFrameStart::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_ActualDisplayFrameStart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualDisplayFrameStart, _impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_present_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_on_time_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpu_composition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jank_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prediction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}
FrameTimelineEvent_ActualDisplayFrameStart::FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
}

inline void FrameTimelineEvent_ActualDisplayFrameStart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_) { ::int64_t{0} }

    , decltype(_impl_.token_) { ::int64_t{0} }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.present_type_) { 0 }

    , decltype(_impl_.on_time_finish_) { false }

    , decltype(_impl_.gpu_composition_) { false }

    , decltype(_impl_.jank_type_) { 0 }

    , decltype(_impl_.prediction_type_) { 0 }

  };
}

FrameTimelineEvent_ActualDisplayFrameStart::~FrameTimelineEvent_ActualDisplayFrameStart() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_ActualDisplayFrameStart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTimelineEvent_ActualDisplayFrameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_ActualDisplayFrameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cookie_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.prediction_type_) -
        reinterpret_cast<char*>(&_impl_.cookie_)) + sizeof(_impl_.prediction_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimelineEvent_ActualDisplayFrameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(static_cast<int>(val)))) {
            _internal_set_present_type(static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool on_time_finish = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_on_time_finish(&has_bits);
          _impl_.on_time_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool gpu_composition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_gpu_composition(&has_bits);
          _impl_.gpu_composition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 jank_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_jank_type(&has_bits);
          _impl_.jank_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(static_cast<int>(val)))) {
            _internal_set_prediction_type(static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameTimelineEvent_ActualDisplayFrameStart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cookie(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_token(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pid(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_present_type(), target);
  }

  // optional bool on_time_finish = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_on_time_finish(), target);
  }

  // optional bool gpu_composition = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_gpu_composition(), target);
  }

  // optional int32 jank_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_jank_type(), target);
  }

  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_prediction_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  return target;
}

::size_t FrameTimelineEvent_ActualDisplayFrameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 cookie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cookie());
    }

    // optional int64 token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_token());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_present_type());
    }

    // optional bool on_time_finish = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool gpu_composition = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional int32 jank_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_jank_type());
    }

    // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_prediction_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimelineEvent_ActualDisplayFrameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimelineEvent_ActualDisplayFrameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimelineEvent_ActualDisplayFrameStart::GetClassData() const { return &_class_data_; }


void FrameTimelineEvent_ActualDisplayFrameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimelineEvent_ActualDisplayFrameStart*>(&to_msg);
  auto& from = static_cast<const FrameTimelineEvent_ActualDisplayFrameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cookie_ = from._impl_.cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.present_type_ = from._impl_.present_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.on_time_finish_ = from._impl_.on_time_finish_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gpu_composition_ = from._impl_.gpu_composition_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.jank_type_ = from._impl_.jank_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.prediction_type_ = from._impl_.prediction_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimelineEvent_ActualDisplayFrameStart::CopyFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_ActualDisplayFrameStart::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_ActualDisplayFrameStart::InternalSwap(FrameTimelineEvent_ActualDisplayFrameStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualDisplayFrameStart, _impl_.prediction_type_)
      + sizeof(FrameTimelineEvent_ActualDisplayFrameStart::_impl_.prediction_type_)
      - PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_ActualDisplayFrameStart, _impl_.cookie_)>(
          reinterpret_cast<char*>(&_impl_.cookie_),
          reinterpret_cast<char*>(&other->_impl_.cookie_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimelineEvent_ActualDisplayFrameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[3]);
}
// ===================================================================

class FrameTimelineEvent_FrameEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimelineEvent_FrameEnd>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FrameTimelineEvent_FrameEnd, _impl_._has_bits_);
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
}
FrameTimelineEvent_FrameEnd::FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
}

inline void FrameTimelineEvent_FrameEnd::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cookie_) { ::int64_t{0} }

  };
}

FrameTimelineEvent_FrameEnd::~FrameTimelineEvent_FrameEnd() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent.FrameEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent_FrameEnd::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrameTimelineEvent_FrameEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent_FrameEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cookie_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimelineEvent_FrameEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cookie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameTimelineEvent_FrameEnd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent.FrameEnd)
  return target;
}

::size_t FrameTimelineEvent_FrameEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 cookie = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cookie());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimelineEvent_FrameEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimelineEvent_FrameEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimelineEvent_FrameEnd::GetClassData() const { return &_class_data_; }


void FrameTimelineEvent_FrameEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimelineEvent_FrameEnd*>(&to_msg);
  auto& from = static_cast<const FrameTimelineEvent_FrameEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_cookie(from._internal_cookie());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimelineEvent_FrameEnd::CopyFrom(const FrameTimelineEvent_FrameEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent.FrameEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent_FrameEnd::IsInitialized() const {
  return true;
}

void FrameTimelineEvent_FrameEnd::InternalSwap(FrameTimelineEvent_FrameEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.cookie_, other->_impl_.cookie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimelineEvent_FrameEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[4]);
}
// ===================================================================

class FrameTimelineEvent::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FrameTimelineEvent, _impl_._oneof_case_);
  static const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& expected_display_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& actual_display_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& expected_surface_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& actual_surface_frame_start(const FrameTimelineEvent* msg);
  static const ::perfetto::protos::FrameTimelineEvent_FrameEnd& frame_end(const FrameTimelineEvent* msg);
};

const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart&
FrameTimelineEvent::_Internal::expected_display_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.expected_display_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart&
FrameTimelineEvent::_Internal::actual_display_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.actual_display_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart&
FrameTimelineEvent::_Internal::expected_surface_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.expected_surface_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart&
FrameTimelineEvent::_Internal::actual_surface_frame_start(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.actual_surface_frame_start_;
}
const ::perfetto::protos::FrameTimelineEvent_FrameEnd&
FrameTimelineEvent::_Internal::frame_end(const FrameTimelineEvent* msg) {
  return *msg->_impl_.event_.frame_end_;
}
void FrameTimelineEvent::set_allocated_expected_display_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (expected_display_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expected_display_frame_start);
    if (message_arena != submessage_arena) {
      expected_display_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_display_frame_start, submessage_arena);
    }
    set_has_expected_display_frame_start();
    _impl_.event_.expected_display_frame_start_ = expected_display_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
}
void FrameTimelineEvent::set_allocated_actual_display_frame_start(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (actual_display_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actual_display_frame_start);
    if (message_arena != submessage_arena) {
      actual_display_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_display_frame_start, submessage_arena);
    }
    set_has_actual_display_frame_start();
    _impl_.event_.actual_display_frame_start_ = actual_display_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
}
void FrameTimelineEvent::set_allocated_expected_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (expected_surface_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expected_surface_frame_start);
    if (message_arena != submessage_arena) {
      expected_surface_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_surface_frame_start, submessage_arena);
    }
    set_has_expected_surface_frame_start();
    _impl_.event_.expected_surface_frame_start_ = expected_surface_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
}
void FrameTimelineEvent::set_allocated_actual_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (actual_surface_frame_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actual_surface_frame_start);
    if (message_arena != submessage_arena) {
      actual_surface_frame_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_surface_frame_start, submessage_arena);
    }
    set_has_actual_surface_frame_start();
    _impl_.event_.actual_surface_frame_start_ = actual_surface_frame_start;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
}
void FrameTimelineEvent::set_allocated_frame_end(::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (frame_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frame_end);
    if (message_arena != submessage_arena) {
      frame_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_end, submessage_arena);
    }
    set_has_frame_end();
    _impl_.event_.frame_end_ = frame_end;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.frame_end)
}
FrameTimelineEvent::FrameTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FrameTimelineEvent)
}
FrameTimelineEvent::FrameTimelineEvent(const FrameTimelineEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameTimelineEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kExpectedDisplayFrameStart: {
      _this->_internal_mutable_expected_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(
          from._internal_expected_display_frame_start());
      break;
    }
    case kActualDisplayFrameStart: {
      _this->_internal_mutable_actual_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(
          from._internal_actual_display_frame_start());
      break;
    }
    case kExpectedSurfaceFrameStart: {
      _this->_internal_mutable_expected_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(
          from._internal_expected_surface_frame_start());
      break;
    }
    case kActualSurfaceFrameStart: {
      _this->_internal_mutable_actual_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(
          from._internal_actual_surface_frame_start());
      break;
    }
    case kFrameEnd: {
      _this->_internal_mutable_frame_end()->::perfetto::protos::FrameTimelineEvent_FrameEnd::MergeFrom(
          from._internal_frame_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FrameTimelineEvent)
}

inline void FrameTimelineEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

FrameTimelineEvent::~FrameTimelineEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FrameTimelineEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimelineEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void FrameTimelineEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimelineEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FrameTimelineEvent)
  switch (event_case()) {
    case kExpectedDisplayFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.expected_display_frame_start_;
      }
      break;
    }
    case kActualDisplayFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.actual_display_frame_start_;
      }
      break;
    }
    case kExpectedSurfaceFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.expected_surface_frame_start_;
      }
      break;
    }
    case kActualSurfaceFrameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.actual_surface_frame_start_;
      }
      break;
    }
    case kFrameEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.frame_end_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void FrameTimelineEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FrameTimelineEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimelineEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_display_frame_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actual_display_frame_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_surface_frame_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_actual_surface_frame_start(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameTimelineEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FrameTimelineEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kExpectedDisplayFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::expected_display_frame_start(this),
          _Internal::expected_display_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kActualDisplayFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::actual_display_frame_start(this),
          _Internal::actual_display_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kExpectedSurfaceFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::expected_surface_frame_start(this),
          _Internal::expected_surface_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kActualSurfaceFrameStart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::actual_surface_frame_start(this),
          _Internal::actual_surface_frame_start(this).GetCachedSize(), target, stream);
      break;
    }
    case kFrameEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::frame_end(this),
          _Internal::frame_end(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FrameTimelineEvent)
  return target;
}

::size_t FrameTimelineEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FrameTimelineEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
    case kExpectedDisplayFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.expected_display_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
    case kActualDisplayFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.actual_display_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
    case kExpectedSurfaceFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.expected_surface_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
    case kActualSurfaceFrameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.actual_surface_frame_start_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
    case kFrameEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.frame_end_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimelineEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimelineEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimelineEvent::GetClassData() const { return &_class_data_; }


void FrameTimelineEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimelineEvent*>(&to_msg);
  auto& from = static_cast<const FrameTimelineEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FrameTimelineEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kExpectedDisplayFrameStart: {
      _this->_internal_mutable_expected_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart::MergeFrom(
          from._internal_expected_display_frame_start());
      break;
    }
    case kActualDisplayFrameStart: {
      _this->_internal_mutable_actual_display_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart::MergeFrom(
          from._internal_actual_display_frame_start());
      break;
    }
    case kExpectedSurfaceFrameStart: {
      _this->_internal_mutable_expected_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeFrom(
          from._internal_expected_surface_frame_start());
      break;
    }
    case kActualSurfaceFrameStart: {
      _this->_internal_mutable_actual_surface_frame_start()->::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart::MergeFrom(
          from._internal_actual_surface_frame_start());
      break;
    }
    case kFrameEnd: {
      _this->_internal_mutable_frame_end()->::perfetto::protos::FrameTimelineEvent_FrameEnd::MergeFrom(
          from._internal_frame_end());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimelineEvent::CopyFrom(const FrameTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FrameTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimelineEvent::IsInitialized() const {
  return true;
}

void FrameTimelineEvent::InternalSwap(FrameTimelineEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimelineEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent_FrameEnd*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FrameTimelineEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FrameTimelineEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
