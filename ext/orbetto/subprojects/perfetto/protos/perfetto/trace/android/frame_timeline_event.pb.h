// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/frame_timeline_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
namespace perfetto {
namespace protos {
class FrameTimelineEvent;
struct FrameTimelineEventDefaultTypeInternal;
extern FrameTimelineEventDefaultTypeInternal _FrameTimelineEvent_default_instance_;
class FrameTimelineEvent_ActualDisplayFrameStart;
struct FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ActualDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualDisplayFrameStart_default_instance_;
class FrameTimelineEvent_ActualSurfaceFrameStart;
struct FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ActualSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_;
class FrameTimelineEvent_ExpectedDisplayFrameStart;
struct FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ExpectedDisplayFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_;
class FrameTimelineEvent_ExpectedSurfaceFrameStart;
struct FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal;
extern FrameTimelineEvent_ExpectedSurfaceFrameStartDefaultTypeInternal _FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_;
class FrameTimelineEvent_FrameEnd;
struct FrameTimelineEvent_FrameEndDefaultTypeInternal;
extern FrameTimelineEvent_FrameEndDefaultTypeInternal _FrameTimelineEvent_FrameEnd_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::FrameTimelineEvent* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent>(Arena*);
template <>
::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart>(Arena*);
template <>
::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart>(Arena*);
template <>
::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart>(Arena*);
template <>
::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart>(Arena*);
template <>
::perfetto::protos::FrameTimelineEvent_FrameEnd* Arena::CreateMaybeMessage<::perfetto::protos::FrameTimelineEvent_FrameEnd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum FrameTimelineEvent_JankType : int {
  FrameTimelineEvent_JankType_JANK_UNSPECIFIED = 0,
  FrameTimelineEvent_JankType_JANK_NONE = 1,
  FrameTimelineEvent_JankType_JANK_SF_SCHEDULING = 2,
  FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR = 4,
  FrameTimelineEvent_JankType_JANK_DISPLAY_HAL = 8,
  FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED = 16,
  FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED = 32,
  FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED = 64,
  FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING = 128,
  FrameTimelineEvent_JankType_JANK_UNKNOWN = 256,
  FrameTimelineEvent_JankType_JANK_SF_STUFFING = 512,
  FrameTimelineEvent_JankType_JANK_DROPPED = 1024,
};

bool FrameTimelineEvent_JankType_IsValid(int value);
constexpr FrameTimelineEvent_JankType FrameTimelineEvent_JankType_JankType_MIN = static_cast<FrameTimelineEvent_JankType>(0);
constexpr FrameTimelineEvent_JankType FrameTimelineEvent_JankType_JankType_MAX = static_cast<FrameTimelineEvent_JankType>(1024);
constexpr int FrameTimelineEvent_JankType_JankType_ARRAYSIZE = 1024 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FrameTimelineEvent_JankType_descriptor();
template <typename T>
const std::string& FrameTimelineEvent_JankType_Name(T value) {
  static_assert(std::is_same<T, FrameTimelineEvent_JankType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JankType_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(FrameTimelineEvent_JankType_descriptor(), value);
}
inline bool FrameTimelineEvent_JankType_Parse(absl::string_view name, FrameTimelineEvent_JankType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameTimelineEvent_JankType>(
      FrameTimelineEvent_JankType_descriptor(), name, value);
}
enum FrameTimelineEvent_PresentType : int {
  FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED = 0,
  FrameTimelineEvent_PresentType_PRESENT_ON_TIME = 1,
  FrameTimelineEvent_PresentType_PRESENT_LATE = 2,
  FrameTimelineEvent_PresentType_PRESENT_EARLY = 3,
  FrameTimelineEvent_PresentType_PRESENT_DROPPED = 4,
  FrameTimelineEvent_PresentType_PRESENT_UNKNOWN = 5,
};

bool FrameTimelineEvent_PresentType_IsValid(int value);
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent_PresentType_PresentType_MIN = static_cast<FrameTimelineEvent_PresentType>(0);
constexpr FrameTimelineEvent_PresentType FrameTimelineEvent_PresentType_PresentType_MAX = static_cast<FrameTimelineEvent_PresentType>(5);
constexpr int FrameTimelineEvent_PresentType_PresentType_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FrameTimelineEvent_PresentType_descriptor();
template <typename T>
const std::string& FrameTimelineEvent_PresentType_Name(T value) {
  static_assert(std::is_same<T, FrameTimelineEvent_PresentType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PresentType_Name().");
  return FrameTimelineEvent_PresentType_Name(static_cast<FrameTimelineEvent_PresentType>(value));
}
template <>
inline const std::string& FrameTimelineEvent_PresentType_Name(FrameTimelineEvent_PresentType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FrameTimelineEvent_PresentType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool FrameTimelineEvent_PresentType_Parse(absl::string_view name, FrameTimelineEvent_PresentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameTimelineEvent_PresentType>(
      FrameTimelineEvent_PresentType_descriptor(), name, value);
}
enum FrameTimelineEvent_PredictionType : int {
  FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED = 0,
  FrameTimelineEvent_PredictionType_PREDICTION_VALID = 1,
  FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED = 2,
  FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN = 3,
};

bool FrameTimelineEvent_PredictionType_IsValid(int value);
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent_PredictionType_PredictionType_MIN = static_cast<FrameTimelineEvent_PredictionType>(0);
constexpr FrameTimelineEvent_PredictionType FrameTimelineEvent_PredictionType_PredictionType_MAX = static_cast<FrameTimelineEvent_PredictionType>(3);
constexpr int FrameTimelineEvent_PredictionType_PredictionType_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FrameTimelineEvent_PredictionType_descriptor();
template <typename T>
const std::string& FrameTimelineEvent_PredictionType_Name(T value) {
  static_assert(std::is_same<T, FrameTimelineEvent_PredictionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PredictionType_Name().");
  return FrameTimelineEvent_PredictionType_Name(static_cast<FrameTimelineEvent_PredictionType>(value));
}
template <>
inline const std::string& FrameTimelineEvent_PredictionType_Name(FrameTimelineEvent_PredictionType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FrameTimelineEvent_PredictionType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FrameTimelineEvent_PredictionType_Parse(absl::string_view name, FrameTimelineEvent_PredictionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrameTimelineEvent_PredictionType>(
      FrameTimelineEvent_PredictionType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FrameTimelineEvent_ExpectedSurfaceFrameStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart) */ {
 public:
  inline FrameTimelineEvent_ExpectedSurfaceFrameStart() : FrameTimelineEvent_ExpectedSurfaceFrameStart(nullptr) {}
  ~FrameTimelineEvent_ExpectedSurfaceFrameStart() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimelineEvent_ExpectedSurfaceFrameStart(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from);
  FrameTimelineEvent_ExpectedSurfaceFrameStart(FrameTimelineEvent_ExpectedSurfaceFrameStart&& from) noexcept
    : FrameTimelineEvent_ExpectedSurfaceFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ExpectedSurfaceFrameStart& operator=(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ExpectedSurfaceFrameStart& operator=(FrameTimelineEvent_ExpectedSurfaceFrameStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimelineEvent_ExpectedSurfaceFrameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimelineEvent_ExpectedSurfaceFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ExpectedSurfaceFrameStart*>(
               &_FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameTimelineEvent_ExpectedSurfaceFrameStart& a, FrameTimelineEvent_ExpectedSurfaceFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimelineEvent_ExpectedSurfaceFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ExpectedSurfaceFrameStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimelineEvent_ExpectedSurfaceFrameStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimelineEvent_ExpectedSurfaceFrameStart& from) {
    FrameTimelineEvent_ExpectedSurfaceFrameStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimelineEvent_ExpectedSurfaceFrameStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart";
  }
  protected:
  explicit FrameTimelineEvent_ExpectedSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 5,
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDisplayFrameTokenFieldNumber = 3,
    kPidFieldNumber = 4,
  };
  // optional string layer_name = 5;
  bool has_layer_name() const;
  void clear_layer_name() ;
  const std::string& layer_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_layer_name(Arg_&& arg, Args_... args);
  std::string* mutable_layer_name();
  PROTOBUF_NODISCARD std::string* release_layer_name();
  void set_allocated_layer_name(std::string* ptr);

  private:
  const std::string& _internal_layer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer_name(
      const std::string& value);
  std::string* _internal_mutable_layer_name();

  public:
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie() ;
  ::int64_t cookie() const;
  void set_cookie(::int64_t value);

  private:
  ::int64_t _internal_cookie() const;
  void _internal_set_cookie(::int64_t value);

  public:
  // optional int64 token = 2;
  bool has_token() const;
  void clear_token() ;
  ::int64_t token() const;
  void set_token(::int64_t value);

  private:
  ::int64_t _internal_token() const;
  void _internal_set_token(::int64_t value);

  public:
  // optional int64 display_frame_token = 3;
  bool has_display_frame_token() const;
  void clear_display_frame_token() ;
  ::int64_t display_frame_token() const;
  void set_display_frame_token(::int64_t value);

  private:
  ::int64_t _internal_display_frame_token() const;
  void _internal_set_display_frame_token(::int64_t value);

  public:
  // optional int32 pid = 4;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
    ::int64_t cookie_;
    ::int64_t token_;
    ::int64_t display_frame_token_;
    ::int32_t pid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};// -------------------------------------------------------------------

class FrameTimelineEvent_ActualSurfaceFrameStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart) */ {
 public:
  inline FrameTimelineEvent_ActualSurfaceFrameStart() : FrameTimelineEvent_ActualSurfaceFrameStart(nullptr) {}
  ~FrameTimelineEvent_ActualSurfaceFrameStart() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimelineEvent_ActualSurfaceFrameStart(const FrameTimelineEvent_ActualSurfaceFrameStart& from);
  FrameTimelineEvent_ActualSurfaceFrameStart(FrameTimelineEvent_ActualSurfaceFrameStart&& from) noexcept
    : FrameTimelineEvent_ActualSurfaceFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ActualSurfaceFrameStart& operator=(const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ActualSurfaceFrameStart& operator=(FrameTimelineEvent_ActualSurfaceFrameStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimelineEvent_ActualSurfaceFrameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimelineEvent_ActualSurfaceFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ActualSurfaceFrameStart*>(
               &_FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameTimelineEvent_ActualSurfaceFrameStart& a, FrameTimelineEvent_ActualSurfaceFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ActualSurfaceFrameStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimelineEvent_ActualSurfaceFrameStart* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimelineEvent_ActualSurfaceFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ActualSurfaceFrameStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimelineEvent_ActualSurfaceFrameStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimelineEvent_ActualSurfaceFrameStart& from) {
    FrameTimelineEvent_ActualSurfaceFrameStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimelineEvent_ActualSurfaceFrameStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart";
  }
  protected:
  explicit FrameTimelineEvent_ActualSurfaceFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 5,
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kDisplayFrameTokenFieldNumber = 3,
    kPidFieldNumber = 4,
    kPresentTypeFieldNumber = 6,
    kOnTimeFinishFieldNumber = 7,
    kGpuCompositionFieldNumber = 8,
    kIsBufferFieldNumber = 11,
    kJankTypeFieldNumber = 9,
    kPredictionTypeFieldNumber = 10,
  };
  // optional string layer_name = 5;
  bool has_layer_name() const;
  void clear_layer_name() ;
  const std::string& layer_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_layer_name(Arg_&& arg, Args_... args);
  std::string* mutable_layer_name();
  PROTOBUF_NODISCARD std::string* release_layer_name();
  void set_allocated_layer_name(std::string* ptr);

  private:
  const std::string& _internal_layer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer_name(
      const std::string& value);
  std::string* _internal_mutable_layer_name();

  public:
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie() ;
  ::int64_t cookie() const;
  void set_cookie(::int64_t value);

  private:
  ::int64_t _internal_cookie() const;
  void _internal_set_cookie(::int64_t value);

  public:
  // optional int64 token = 2;
  bool has_token() const;
  void clear_token() ;
  ::int64_t token() const;
  void set_token(::int64_t value);

  private:
  ::int64_t _internal_token() const;
  void _internal_set_token(::int64_t value);

  public:
  // optional int64 display_frame_token = 3;
  bool has_display_frame_token() const;
  void clear_display_frame_token() ;
  ::int64_t display_frame_token() const;
  void set_display_frame_token(::int64_t value);

  private:
  ::int64_t _internal_display_frame_token() const;
  void _internal_set_display_frame_token(::int64_t value);

  public:
  // optional int32 pid = 4;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
  bool has_present_type() const;
  void clear_present_type() ;
  ::perfetto::protos::FrameTimelineEvent_PresentType present_type() const;
  void set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value);

  private:
  ::perfetto::protos::FrameTimelineEvent_PresentType _internal_present_type() const;
  void _internal_set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value);

  public:
  // optional bool on_time_finish = 7;
  bool has_on_time_finish() const;
  void clear_on_time_finish() ;
  bool on_time_finish() const;
  void set_on_time_finish(bool value);

  private:
  bool _internal_on_time_finish() const;
  void _internal_set_on_time_finish(bool value);

  public:
  // optional bool gpu_composition = 8;
  bool has_gpu_composition() const;
  void clear_gpu_composition() ;
  bool gpu_composition() const;
  void set_gpu_composition(bool value);

  private:
  bool _internal_gpu_composition() const;
  void _internal_set_gpu_composition(bool value);

  public:
  // optional bool is_buffer = 11;
  bool has_is_buffer() const;
  void clear_is_buffer() ;
  bool is_buffer() const;
  void set_is_buffer(bool value);

  private:
  bool _internal_is_buffer() const;
  void _internal_set_is_buffer(bool value);

  public:
  // optional int32 jank_type = 9;
  bool has_jank_type() const;
  void clear_jank_type() ;
  ::int32_t jank_type() const;
  void set_jank_type(::int32_t value);

  private:
  ::int32_t _internal_jank_type() const;
  void _internal_set_jank_type(::int32_t value);

  public:
  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
  bool has_prediction_type() const;
  void clear_prediction_type() ;
  ::perfetto::protos::FrameTimelineEvent_PredictionType prediction_type() const;
  void set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value);

  private:
  ::perfetto::protos::FrameTimelineEvent_PredictionType _internal_prediction_type() const;
  void _internal_set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
    ::int64_t cookie_;
    ::int64_t token_;
    ::int64_t display_frame_token_;
    ::int32_t pid_;
    int present_type_;
    bool on_time_finish_;
    bool gpu_composition_;
    bool is_buffer_;
    ::int32_t jank_type_;
    int prediction_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};// -------------------------------------------------------------------

class FrameTimelineEvent_ExpectedDisplayFrameStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart) */ {
 public:
  inline FrameTimelineEvent_ExpectedDisplayFrameStart() : FrameTimelineEvent_ExpectedDisplayFrameStart(nullptr) {}
  ~FrameTimelineEvent_ExpectedDisplayFrameStart() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameTimelineEvent_ExpectedDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimelineEvent_ExpectedDisplayFrameStart(const FrameTimelineEvent_ExpectedDisplayFrameStart& from);
  FrameTimelineEvent_ExpectedDisplayFrameStart(FrameTimelineEvent_ExpectedDisplayFrameStart&& from) noexcept
    : FrameTimelineEvent_ExpectedDisplayFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ExpectedDisplayFrameStart& operator=(const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ExpectedDisplayFrameStart& operator=(FrameTimelineEvent_ExpectedDisplayFrameStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimelineEvent_ExpectedDisplayFrameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimelineEvent_ExpectedDisplayFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ExpectedDisplayFrameStart*>(
               &_FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameTimelineEvent_ExpectedDisplayFrameStart& a, FrameTimelineEvent_ExpectedDisplayFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ExpectedDisplayFrameStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimelineEvent_ExpectedDisplayFrameStart* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimelineEvent_ExpectedDisplayFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ExpectedDisplayFrameStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimelineEvent_ExpectedDisplayFrameStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimelineEvent_ExpectedDisplayFrameStart& from) {
    FrameTimelineEvent_ExpectedDisplayFrameStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimelineEvent_ExpectedDisplayFrameStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart";
  }
  protected:
  explicit FrameTimelineEvent_ExpectedDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie() ;
  ::int64_t cookie() const;
  void set_cookie(::int64_t value);

  private:
  ::int64_t _internal_cookie() const;
  void _internal_set_cookie(::int64_t value);

  public:
  // optional int64 token = 2;
  bool has_token() const;
  void clear_token() ;
  ::int64_t token() const;
  void set_token(::int64_t value);

  private:
  ::int64_t _internal_token() const;
  void _internal_set_token(::int64_t value);

  public:
  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t cookie_;
    ::int64_t token_;
    ::int32_t pid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};// -------------------------------------------------------------------

class FrameTimelineEvent_ActualDisplayFrameStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart) */ {
 public:
  inline FrameTimelineEvent_ActualDisplayFrameStart() : FrameTimelineEvent_ActualDisplayFrameStart(nullptr) {}
  ~FrameTimelineEvent_ActualDisplayFrameStart() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameTimelineEvent_ActualDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimelineEvent_ActualDisplayFrameStart(const FrameTimelineEvent_ActualDisplayFrameStart& from);
  FrameTimelineEvent_ActualDisplayFrameStart(FrameTimelineEvent_ActualDisplayFrameStart&& from) noexcept
    : FrameTimelineEvent_ActualDisplayFrameStart() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_ActualDisplayFrameStart& operator=(const FrameTimelineEvent_ActualDisplayFrameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_ActualDisplayFrameStart& operator=(FrameTimelineEvent_ActualDisplayFrameStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimelineEvent_ActualDisplayFrameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimelineEvent_ActualDisplayFrameStart* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_ActualDisplayFrameStart*>(
               &_FrameTimelineEvent_ActualDisplayFrameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameTimelineEvent_ActualDisplayFrameStart& a, FrameTimelineEvent_ActualDisplayFrameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_ActualDisplayFrameStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimelineEvent_ActualDisplayFrameStart* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimelineEvent_ActualDisplayFrameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimelineEvent_ActualDisplayFrameStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimelineEvent_ActualDisplayFrameStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimelineEvent_ActualDisplayFrameStart& from) {
    FrameTimelineEvent_ActualDisplayFrameStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimelineEvent_ActualDisplayFrameStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart";
  }
  protected:
  explicit FrameTimelineEvent_ActualDisplayFrameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
    kTokenFieldNumber = 2,
    kPidFieldNumber = 3,
    kPresentTypeFieldNumber = 4,
    kOnTimeFinishFieldNumber = 5,
    kGpuCompositionFieldNumber = 6,
    kJankTypeFieldNumber = 7,
    kPredictionTypeFieldNumber = 8,
  };
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie() ;
  ::int64_t cookie() const;
  void set_cookie(::int64_t value);

  private:
  ::int64_t _internal_cookie() const;
  void _internal_set_cookie(::int64_t value);

  public:
  // optional int64 token = 2;
  bool has_token() const;
  void clear_token() ;
  ::int64_t token() const;
  void set_token(::int64_t value);

  private:
  ::int64_t _internal_token() const;
  void _internal_set_token(::int64_t value);

  public:
  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
  bool has_present_type() const;
  void clear_present_type() ;
  ::perfetto::protos::FrameTimelineEvent_PresentType present_type() const;
  void set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value);

  private:
  ::perfetto::protos::FrameTimelineEvent_PresentType _internal_present_type() const;
  void _internal_set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value);

  public:
  // optional bool on_time_finish = 5;
  bool has_on_time_finish() const;
  void clear_on_time_finish() ;
  bool on_time_finish() const;
  void set_on_time_finish(bool value);

  private:
  bool _internal_on_time_finish() const;
  void _internal_set_on_time_finish(bool value);

  public:
  // optional bool gpu_composition = 6;
  bool has_gpu_composition() const;
  void clear_gpu_composition() ;
  bool gpu_composition() const;
  void set_gpu_composition(bool value);

  private:
  bool _internal_gpu_composition() const;
  void _internal_set_gpu_composition(bool value);

  public:
  // optional int32 jank_type = 7;
  bool has_jank_type() const;
  void clear_jank_type() ;
  ::int32_t jank_type() const;
  void set_jank_type(::int32_t value);

  private:
  ::int32_t _internal_jank_type() const;
  void _internal_set_jank_type(::int32_t value);

  public:
  // optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
  bool has_prediction_type() const;
  void clear_prediction_type() ;
  ::perfetto::protos::FrameTimelineEvent_PredictionType prediction_type() const;
  void set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value);

  private:
  ::perfetto::protos::FrameTimelineEvent_PredictionType _internal_prediction_type() const;
  void _internal_set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t cookie_;
    ::int64_t token_;
    ::int32_t pid_;
    int present_type_;
    bool on_time_finish_;
    bool gpu_composition_;
    ::int32_t jank_type_;
    int prediction_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};// -------------------------------------------------------------------

class FrameTimelineEvent_FrameEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent.FrameEnd) */ {
 public:
  inline FrameTimelineEvent_FrameEnd() : FrameTimelineEvent_FrameEnd(nullptr) {}
  ~FrameTimelineEvent_FrameEnd() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameTimelineEvent_FrameEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimelineEvent_FrameEnd(const FrameTimelineEvent_FrameEnd& from);
  FrameTimelineEvent_FrameEnd(FrameTimelineEvent_FrameEnd&& from) noexcept
    : FrameTimelineEvent_FrameEnd() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent_FrameEnd& operator=(const FrameTimelineEvent_FrameEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent_FrameEnd& operator=(FrameTimelineEvent_FrameEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimelineEvent_FrameEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimelineEvent_FrameEnd* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent_FrameEnd*>(
               &_FrameTimelineEvent_FrameEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrameTimelineEvent_FrameEnd& a, FrameTimelineEvent_FrameEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent_FrameEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimelineEvent_FrameEnd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimelineEvent_FrameEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimelineEvent_FrameEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimelineEvent_FrameEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimelineEvent_FrameEnd& from) {
    FrameTimelineEvent_FrameEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimelineEvent_FrameEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent.FrameEnd";
  }
  protected:
  explicit FrameTimelineEvent_FrameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
  };
  // optional int64 cookie = 1;
  bool has_cookie() const;
  void clear_cookie() ;
  ::int64_t cookie() const;
  void set_cookie(::int64_t value);

  private:
  ::int64_t _internal_cookie() const;
  void _internal_set_cookie(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent.FrameEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t cookie_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};// -------------------------------------------------------------------

class FrameTimelineEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FrameTimelineEvent) */ {
 public:
  inline FrameTimelineEvent() : FrameTimelineEvent(nullptr) {}
  ~FrameTimelineEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FrameTimelineEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimelineEvent(const FrameTimelineEvent& from);
  FrameTimelineEvent(FrameTimelineEvent&& from) noexcept
    : FrameTimelineEvent() {
    *this = ::std::move(from);
  }

  inline FrameTimelineEvent& operator=(const FrameTimelineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimelineEvent& operator=(FrameTimelineEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimelineEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kExpectedDisplayFrameStart = 1,
    kActualDisplayFrameStart = 2,
    kExpectedSurfaceFrameStart = 3,
    kActualSurfaceFrameStart = 4,
    kFrameEnd = 5,
    EVENT_NOT_SET = 0,
  };

  static inline const FrameTimelineEvent* internal_default_instance() {
    return reinterpret_cast<const FrameTimelineEvent*>(
               &_FrameTimelineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FrameTimelineEvent& a, FrameTimelineEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimelineEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimelineEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimelineEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimelineEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimelineEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimelineEvent& from) {
    FrameTimelineEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimelineEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FrameTimelineEvent";
  }
  protected:
  explicit FrameTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FrameTimelineEvent_ExpectedSurfaceFrameStart ExpectedSurfaceFrameStart;
  typedef FrameTimelineEvent_ActualSurfaceFrameStart ActualSurfaceFrameStart;
  typedef FrameTimelineEvent_ExpectedDisplayFrameStart ExpectedDisplayFrameStart;
  typedef FrameTimelineEvent_ActualDisplayFrameStart ActualDisplayFrameStart;
  typedef FrameTimelineEvent_FrameEnd FrameEnd;

  using JankType = FrameTimelineEvent_JankType;
  static constexpr JankType JANK_UNSPECIFIED = FrameTimelineEvent_JankType_JANK_UNSPECIFIED;
  static constexpr JankType JANK_NONE = FrameTimelineEvent_JankType_JANK_NONE;
  static constexpr JankType JANK_SF_SCHEDULING = FrameTimelineEvent_JankType_JANK_SF_SCHEDULING;
  static constexpr JankType JANK_PREDICTION_ERROR = FrameTimelineEvent_JankType_JANK_PREDICTION_ERROR;
  static constexpr JankType JANK_DISPLAY_HAL = FrameTimelineEvent_JankType_JANK_DISPLAY_HAL;
  static constexpr JankType JANK_SF_CPU_DEADLINE_MISSED = FrameTimelineEvent_JankType_JANK_SF_CPU_DEADLINE_MISSED;
  static constexpr JankType JANK_SF_GPU_DEADLINE_MISSED = FrameTimelineEvent_JankType_JANK_SF_GPU_DEADLINE_MISSED;
  static constexpr JankType JANK_APP_DEADLINE_MISSED = FrameTimelineEvent_JankType_JANK_APP_DEADLINE_MISSED;
  static constexpr JankType JANK_BUFFER_STUFFING = FrameTimelineEvent_JankType_JANK_BUFFER_STUFFING;
  static constexpr JankType JANK_UNKNOWN = FrameTimelineEvent_JankType_JANK_UNKNOWN;
  static constexpr JankType JANK_SF_STUFFING = FrameTimelineEvent_JankType_JANK_SF_STUFFING;
  static constexpr JankType JANK_DROPPED = FrameTimelineEvent_JankType_JANK_DROPPED;
  static inline bool JankType_IsValid(int value) {
    return FrameTimelineEvent_JankType_IsValid(value);
  }
  static constexpr JankType JankType_MIN = FrameTimelineEvent_JankType_JankType_MIN;
  static constexpr JankType JankType_MAX = FrameTimelineEvent_JankType_JankType_MAX;
  static constexpr int JankType_ARRAYSIZE = FrameTimelineEvent_JankType_JankType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JankType_descriptor() {
    return FrameTimelineEvent_JankType_descriptor();
  }
  template <typename T>
  static inline const std::string& JankType_Name(T value) {
    return FrameTimelineEvent_JankType_Name(value);
  }
  static inline bool JankType_Parse(absl::string_view name, JankType* value) {
    return FrameTimelineEvent_JankType_Parse(name, value);
  }

  using PresentType = FrameTimelineEvent_PresentType;
  static constexpr PresentType PRESENT_UNSPECIFIED = FrameTimelineEvent_PresentType_PRESENT_UNSPECIFIED;
  static constexpr PresentType PRESENT_ON_TIME = FrameTimelineEvent_PresentType_PRESENT_ON_TIME;
  static constexpr PresentType PRESENT_LATE = FrameTimelineEvent_PresentType_PRESENT_LATE;
  static constexpr PresentType PRESENT_EARLY = FrameTimelineEvent_PresentType_PRESENT_EARLY;
  static constexpr PresentType PRESENT_DROPPED = FrameTimelineEvent_PresentType_PRESENT_DROPPED;
  static constexpr PresentType PRESENT_UNKNOWN = FrameTimelineEvent_PresentType_PRESENT_UNKNOWN;
  static inline bool PresentType_IsValid(int value) {
    return FrameTimelineEvent_PresentType_IsValid(value);
  }
  static constexpr PresentType PresentType_MIN = FrameTimelineEvent_PresentType_PresentType_MIN;
  static constexpr PresentType PresentType_MAX = FrameTimelineEvent_PresentType_PresentType_MAX;
  static constexpr int PresentType_ARRAYSIZE = FrameTimelineEvent_PresentType_PresentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PresentType_descriptor() {
    return FrameTimelineEvent_PresentType_descriptor();
  }
  template <typename T>
  static inline const std::string& PresentType_Name(T value) {
    return FrameTimelineEvent_PresentType_Name(value);
  }
  static inline bool PresentType_Parse(absl::string_view name, PresentType* value) {
    return FrameTimelineEvent_PresentType_Parse(name, value);
  }

  using PredictionType = FrameTimelineEvent_PredictionType;
  static constexpr PredictionType PREDICTION_UNSPECIFIED = FrameTimelineEvent_PredictionType_PREDICTION_UNSPECIFIED;
  static constexpr PredictionType PREDICTION_VALID = FrameTimelineEvent_PredictionType_PREDICTION_VALID;
  static constexpr PredictionType PREDICTION_EXPIRED = FrameTimelineEvent_PredictionType_PREDICTION_EXPIRED;
  static constexpr PredictionType PREDICTION_UNKNOWN = FrameTimelineEvent_PredictionType_PREDICTION_UNKNOWN;
  static inline bool PredictionType_IsValid(int value) {
    return FrameTimelineEvent_PredictionType_IsValid(value);
  }
  static constexpr PredictionType PredictionType_MIN = FrameTimelineEvent_PredictionType_PredictionType_MIN;
  static constexpr PredictionType PredictionType_MAX = FrameTimelineEvent_PredictionType_PredictionType_MAX;
  static constexpr int PredictionType_ARRAYSIZE = FrameTimelineEvent_PredictionType_PredictionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PredictionType_descriptor() {
    return FrameTimelineEvent_PredictionType_descriptor();
  }
  template <typename T>
  static inline const std::string& PredictionType_Name(T value) {
    return FrameTimelineEvent_PredictionType_Name(value);
  }
  static inline bool PredictionType_Parse(absl::string_view name, PredictionType* value) {
    return FrameTimelineEvent_PredictionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExpectedDisplayFrameStartFieldNumber = 1,
    kActualDisplayFrameStartFieldNumber = 2,
    kExpectedSurfaceFrameStartFieldNumber = 3,
    kActualSurfaceFrameStartFieldNumber = 4,
    kFrameEndFieldNumber = 5,
  };
  // .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
  bool has_expected_display_frame_start() const;
  private:
  bool _internal_has_expected_display_frame_start() const;

  public:
  void clear_expected_display_frame_start() ;
  const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& expected_display_frame_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* release_expected_display_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* mutable_expected_display_frame_start();
  void set_allocated_expected_display_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start);
  private:
  const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& _internal_expected_display_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* _internal_mutable_expected_display_frame_start();
  public:
  void unsafe_arena_set_allocated_expected_display_frame_start(
      ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start);
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* unsafe_arena_release_expected_display_frame_start();
  // .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
  bool has_actual_display_frame_start() const;
  private:
  bool _internal_has_actual_display_frame_start() const;

  public:
  void clear_actual_display_frame_start() ;
  const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& actual_display_frame_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* release_actual_display_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* mutable_actual_display_frame_start();
  void set_allocated_actual_display_frame_start(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start);
  private:
  const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& _internal_actual_display_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* _internal_mutable_actual_display_frame_start();
  public:
  void unsafe_arena_set_allocated_actual_display_frame_start(
      ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start);
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* unsafe_arena_release_actual_display_frame_start();
  // .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
  bool has_expected_surface_frame_start() const;
  private:
  bool _internal_has_expected_surface_frame_start() const;

  public:
  void clear_expected_surface_frame_start() ;
  const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& expected_surface_frame_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* release_expected_surface_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* mutable_expected_surface_frame_start();
  void set_allocated_expected_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start);
  private:
  const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& _internal_expected_surface_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* _internal_mutable_expected_surface_frame_start();
  public:
  void unsafe_arena_set_allocated_expected_surface_frame_start(
      ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start);
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* unsafe_arena_release_expected_surface_frame_start();
  // .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
  bool has_actual_surface_frame_start() const;
  private:
  bool _internal_has_actual_surface_frame_start() const;

  public:
  void clear_actual_surface_frame_start() ;
  const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& actual_surface_frame_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* release_actual_surface_frame_start();
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* mutable_actual_surface_frame_start();
  void set_allocated_actual_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start);
  private:
  const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& _internal_actual_surface_frame_start() const;
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* _internal_mutable_actual_surface_frame_start();
  public:
  void unsafe_arena_set_allocated_actual_surface_frame_start(
      ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start);
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* unsafe_arena_release_actual_surface_frame_start();
  // .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
  bool has_frame_end() const;
  private:
  bool _internal_has_frame_end() const;

  public:
  void clear_frame_end() ;
  const ::perfetto::protos::FrameTimelineEvent_FrameEnd& frame_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FrameTimelineEvent_FrameEnd* release_frame_end();
  ::perfetto::protos::FrameTimelineEvent_FrameEnd* mutable_frame_end();
  void set_allocated_frame_end(::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end);
  private:
  const ::perfetto::protos::FrameTimelineEvent_FrameEnd& _internal_frame_end() const;
  ::perfetto::protos::FrameTimelineEvent_FrameEnd* _internal_mutable_frame_end();
  public:
  void unsafe_arena_set_allocated_frame_end(
      ::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end);
  ::perfetto::protos::FrameTimelineEvent_FrameEnd* unsafe_arena_release_frame_end();
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FrameTimelineEvent)
 private:
  class _Internal;
  void set_has_expected_display_frame_start();
  void set_has_actual_display_frame_start();
  void set_has_expected_surface_frame_start();
  void set_has_actual_surface_frame_start();
  void set_has_frame_end();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start_;
      ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start_;
      ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start_;
      ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start_;
      ::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end_;
    } event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FrameTimelineEvent_ExpectedSurfaceFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_cookie() {
  _impl_.cookie_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameTimelineEvent_ExpectedSurfaceFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.cookie)
  return _internal_cookie();
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_cookie(::int64_t value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.cookie)
}
inline ::int64_t FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_cookie() const {
  return _impl_.cookie_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_set_cookie(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cookie_ = value;
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_token() {
  _impl_.token_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FrameTimelineEvent_ExpectedSurfaceFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.token)
  return _internal_token();
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_token(::int64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.token)
}
inline ::int64_t FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_token() const {
  return _impl_.token_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_set_token(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.token_ = value;
}

// optional int64 display_frame_token = 3;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_display_frame_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_display_frame_token() {
  _impl_.display_frame_token_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FrameTimelineEvent_ExpectedSurfaceFrameStart::display_frame_token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.display_frame_token)
  return _internal_display_frame_token();
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_display_frame_token(::int64_t value) {
  _internal_set_display_frame_token(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.display_frame_token)
}
inline ::int64_t FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_display_frame_token() const {
  return _impl_.display_frame_token_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_set_display_frame_token(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.display_frame_token_ = value;
}

// optional int32 pid = 4;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t FrameTimelineEvent_ExpectedSurfaceFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.pid)
  return _internal_pid();
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.pid)
}
inline ::int32_t FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_pid() const {
  return _impl_.pid_;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pid_ = value;
}

// optional string layer_name = 5;
inline bool FrameTimelineEvent_ExpectedSurfaceFrameStart::has_layer_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::clear_layer_name() {
  _impl_.layer_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameTimelineEvent_ExpectedSurfaceFrameStart::layer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
  return _internal_layer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_layer_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.layer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}
inline std::string* FrameTimelineEvent_ExpectedSurfaceFrameStart::mutable_layer_name() {
  std::string* _s = _internal_mutable_layer_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
  return _s;
}
inline const std::string& FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_layer_name() const {
  return _impl_.layer_name_.Get();
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_set_layer_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.layer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameTimelineEvent_ExpectedSurfaceFrameStart::_internal_mutable_layer_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.layer_name_.Mutable( GetArenaForAllocation());
}
inline std::string* FrameTimelineEvent_ExpectedSurfaceFrameStart::release_layer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.layer_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FrameTimelineEvent_ExpectedSurfaceFrameStart::set_allocated_layer_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.layer_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.layer_name_.IsDefault()) {
          _impl_.layer_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart.layer_name)
}

// -------------------------------------------------------------------

// FrameTimelineEvent_ActualSurfaceFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_cookie() {
  _impl_.cookie_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameTimelineEvent_ActualSurfaceFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.cookie)
  return _internal_cookie();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_cookie(::int64_t value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.cookie)
}
inline ::int64_t FrameTimelineEvent_ActualSurfaceFrameStart::_internal_cookie() const {
  return _impl_.cookie_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_cookie(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cookie_ = value;
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_token() {
  _impl_.token_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FrameTimelineEvent_ActualSurfaceFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.token)
  return _internal_token();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_token(::int64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.token)
}
inline ::int64_t FrameTimelineEvent_ActualSurfaceFrameStart::_internal_token() const {
  return _impl_.token_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_token(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.token_ = value;
}

// optional int64 display_frame_token = 3;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_display_frame_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_display_frame_token() {
  _impl_.display_frame_token_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FrameTimelineEvent_ActualSurfaceFrameStart::display_frame_token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.display_frame_token)
  return _internal_display_frame_token();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_display_frame_token(::int64_t value) {
  _internal_set_display_frame_token(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.display_frame_token)
}
inline ::int64_t FrameTimelineEvent_ActualSurfaceFrameStart::_internal_display_frame_token() const {
  return _impl_.display_frame_token_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_display_frame_token(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.display_frame_token_ = value;
}

// optional int32 pid = 4;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t FrameTimelineEvent_ActualSurfaceFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.pid)
  return _internal_pid();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.pid)
}
inline ::int32_t FrameTimelineEvent_ActualSurfaceFrameStart::_internal_pid() const {
  return _impl_.pid_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pid_ = value;
}

// optional string layer_name = 5;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_layer_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_layer_name() {
  _impl_.layer_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameTimelineEvent_ActualSurfaceFrameStart::layer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
  return _internal_layer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FrameTimelineEvent_ActualSurfaceFrameStart::set_layer_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.layer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}
inline std::string* FrameTimelineEvent_ActualSurfaceFrameStart::mutable_layer_name() {
  std::string* _s = _internal_mutable_layer_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
  return _s;
}
inline const std::string& FrameTimelineEvent_ActualSurfaceFrameStart::_internal_layer_name() const {
  return _impl_.layer_name_.Get();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_layer_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.layer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameTimelineEvent_ActualSurfaceFrameStart::_internal_mutable_layer_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.layer_name_.Mutable( GetArenaForAllocation());
}
inline std::string* FrameTimelineEvent_ActualSurfaceFrameStart::release_layer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.layer_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_allocated_layer_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.layer_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.layer_name_.IsDefault()) {
          _impl_.layer_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.layer_name)
}

// optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 6;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_present_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_present_type() {
  _impl_.present_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::perfetto::protos::FrameTimelineEvent_PresentType FrameTimelineEvent_ActualSurfaceFrameStart::present_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.present_type)
  return _internal_present_type();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value) {
   _internal_set_present_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.present_type)
}
inline ::perfetto::protos::FrameTimelineEvent_PresentType FrameTimelineEvent_ActualSurfaceFrameStart::_internal_present_type() const {
  return static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(_impl_.present_type_);
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.present_type_ = value;
}

// optional bool on_time_finish = 7;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_on_time_finish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_on_time_finish() {
  _impl_.on_time_finish_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::on_time_finish() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.on_time_finish)
  return _internal_on_time_finish();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_on_time_finish(bool value) {
  _internal_set_on_time_finish(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.on_time_finish)
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::_internal_on_time_finish() const {
  return _impl_.on_time_finish_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_on_time_finish(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.on_time_finish_ = value;
}

// optional bool gpu_composition = 8;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_gpu_composition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_gpu_composition() {
  _impl_.gpu_composition_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::gpu_composition() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.gpu_composition)
  return _internal_gpu_composition();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_gpu_composition(bool value) {
  _internal_set_gpu_composition(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.gpu_composition)
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::_internal_gpu_composition() const {
  return _impl_.gpu_composition_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_gpu_composition(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gpu_composition_ = value;
}

// optional int32 jank_type = 9;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_jank_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_jank_type() {
  _impl_.jank_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t FrameTimelineEvent_ActualSurfaceFrameStart::jank_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.jank_type)
  return _internal_jank_type();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_jank_type(::int32_t value) {
  _internal_set_jank_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.jank_type)
}
inline ::int32_t FrameTimelineEvent_ActualSurfaceFrameStart::_internal_jank_type() const {
  return _impl_.jank_type_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_jank_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.jank_type_ = value;
}

// optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 10;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_prediction_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_prediction_type() {
  _impl_.prediction_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::perfetto::protos::FrameTimelineEvent_PredictionType FrameTimelineEvent_ActualSurfaceFrameStart::prediction_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.prediction_type)
  return _internal_prediction_type();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value) {
   _internal_set_prediction_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.prediction_type)
}
inline ::perfetto::protos::FrameTimelineEvent_PredictionType FrameTimelineEvent_ActualSurfaceFrameStart::_internal_prediction_type() const {
  return static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(_impl_.prediction_type_);
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.prediction_type_ = value;
}

// optional bool is_buffer = 11;
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::has_is_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::clear_is_buffer() {
  _impl_.is_buffer_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::is_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.is_buffer)
  return _internal_is_buffer();
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::set_is_buffer(bool value) {
  _internal_set_is_buffer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart.is_buffer)
}
inline bool FrameTimelineEvent_ActualSurfaceFrameStart::_internal_is_buffer() const {
  return _impl_.is_buffer_;
}
inline void FrameTimelineEvent_ActualSurfaceFrameStart::_internal_set_is_buffer(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.is_buffer_ = value;
}

// -------------------------------------------------------------------

// FrameTimelineEvent_ExpectedDisplayFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ExpectedDisplayFrameStart::has_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::clear_cookie() {
  _impl_.cookie_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FrameTimelineEvent_ExpectedDisplayFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.cookie)
  return _internal_cookie();
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::set_cookie(::int64_t value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.cookie)
}
inline ::int64_t FrameTimelineEvent_ExpectedDisplayFrameStart::_internal_cookie() const {
  return _impl_.cookie_;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::_internal_set_cookie(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cookie_ = value;
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ExpectedDisplayFrameStart::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::clear_token() {
  _impl_.token_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameTimelineEvent_ExpectedDisplayFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.token)
  return _internal_token();
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::set_token(::int64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.token)
}
inline ::int64_t FrameTimelineEvent_ExpectedDisplayFrameStart::_internal_token() const {
  return _impl_.token_;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::_internal_set_token(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_ = value;
}

// optional int32 pid = 3;
inline bool FrameTimelineEvent_ExpectedDisplayFrameStart::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t FrameTimelineEvent_ExpectedDisplayFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.pid)
  return _internal_pid();
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart.pid)
}
inline ::int32_t FrameTimelineEvent_ExpectedDisplayFrameStart::_internal_pid() const {
  return _impl_.pid_;
}
inline void FrameTimelineEvent_ExpectedDisplayFrameStart::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// FrameTimelineEvent_ActualDisplayFrameStart

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_cookie() {
  _impl_.cookie_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FrameTimelineEvent_ActualDisplayFrameStart::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.cookie)
  return _internal_cookie();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_cookie(::int64_t value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.cookie)
}
inline ::int64_t FrameTimelineEvent_ActualDisplayFrameStart::_internal_cookie() const {
  return _impl_.cookie_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_cookie(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cookie_ = value;
}

// optional int64 token = 2;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_token() {
  _impl_.token_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FrameTimelineEvent_ActualDisplayFrameStart::token() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.token)
  return _internal_token();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_token(::int64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.token)
}
inline ::int64_t FrameTimelineEvent_ActualDisplayFrameStart::_internal_token() const {
  return _impl_.token_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_token(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.token_ = value;
}

// optional int32 pid = 3;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t FrameTimelineEvent_ActualDisplayFrameStart::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.pid)
  return _internal_pid();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.pid)
}
inline ::int32_t FrameTimelineEvent_ActualDisplayFrameStart::_internal_pid() const {
  return _impl_.pid_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// optional .perfetto.protos.FrameTimelineEvent.PresentType present_type = 4;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_present_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_present_type() {
  _impl_.present_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::FrameTimelineEvent_PresentType FrameTimelineEvent_ActualDisplayFrameStart::present_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.present_type)
  return _internal_present_type();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value) {
   _internal_set_present_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.present_type)
}
inline ::perfetto::protos::FrameTimelineEvent_PresentType FrameTimelineEvent_ActualDisplayFrameStart::_internal_present_type() const {
  return static_cast<::perfetto::protos::FrameTimelineEvent_PresentType>(_impl_.present_type_);
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_present_type(::perfetto::protos::FrameTimelineEvent_PresentType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PresentType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.present_type_ = value;
}

// optional bool on_time_finish = 5;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_on_time_finish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_on_time_finish() {
  _impl_.on_time_finish_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FrameTimelineEvent_ActualDisplayFrameStart::on_time_finish() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.on_time_finish)
  return _internal_on_time_finish();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_on_time_finish(bool value) {
  _internal_set_on_time_finish(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.on_time_finish)
}
inline bool FrameTimelineEvent_ActualDisplayFrameStart::_internal_on_time_finish() const {
  return _impl_.on_time_finish_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_on_time_finish(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.on_time_finish_ = value;
}

// optional bool gpu_composition = 6;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_gpu_composition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_gpu_composition() {
  _impl_.gpu_composition_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FrameTimelineEvent_ActualDisplayFrameStart::gpu_composition() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.gpu_composition)
  return _internal_gpu_composition();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_gpu_composition(bool value) {
  _internal_set_gpu_composition(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.gpu_composition)
}
inline bool FrameTimelineEvent_ActualDisplayFrameStart::_internal_gpu_composition() const {
  return _impl_.gpu_composition_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_gpu_composition(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.gpu_composition_ = value;
}

// optional int32 jank_type = 7;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_jank_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_jank_type() {
  _impl_.jank_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t FrameTimelineEvent_ActualDisplayFrameStart::jank_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.jank_type)
  return _internal_jank_type();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_jank_type(::int32_t value) {
  _internal_set_jank_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.jank_type)
}
inline ::int32_t FrameTimelineEvent_ActualDisplayFrameStart::_internal_jank_type() const {
  return _impl_.jank_type_;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_jank_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.jank_type_ = value;
}

// optional .perfetto.protos.FrameTimelineEvent.PredictionType prediction_type = 8;
inline bool FrameTimelineEvent_ActualDisplayFrameStart::has_prediction_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::clear_prediction_type() {
  _impl_.prediction_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::perfetto::protos::FrameTimelineEvent_PredictionType FrameTimelineEvent_ActualDisplayFrameStart::prediction_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.prediction_type)
  return _internal_prediction_type();
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value) {
   _internal_set_prediction_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart.prediction_type)
}
inline ::perfetto::protos::FrameTimelineEvent_PredictionType FrameTimelineEvent_ActualDisplayFrameStart::_internal_prediction_type() const {
  return static_cast<::perfetto::protos::FrameTimelineEvent_PredictionType>(_impl_.prediction_type_);
}
inline void FrameTimelineEvent_ActualDisplayFrameStart::_internal_set_prediction_type(::perfetto::protos::FrameTimelineEvent_PredictionType value) {
  assert(::perfetto::protos::FrameTimelineEvent_PredictionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.prediction_type_ = value;
}

// -------------------------------------------------------------------

// FrameTimelineEvent_FrameEnd

// optional int64 cookie = 1;
inline bool FrameTimelineEvent_FrameEnd::has_cookie() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FrameTimelineEvent_FrameEnd::clear_cookie() {
  _impl_.cookie_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FrameTimelineEvent_FrameEnd::cookie() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.FrameEnd.cookie)
  return _internal_cookie();
}
inline void FrameTimelineEvent_FrameEnd::set_cookie(::int64_t value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FrameTimelineEvent.FrameEnd.cookie)
}
inline ::int64_t FrameTimelineEvent_FrameEnd::_internal_cookie() const {
  return _impl_.cookie_;
}
inline void FrameTimelineEvent_FrameEnd::_internal_set_cookie(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cookie_ = value;
}

// -------------------------------------------------------------------

// FrameTimelineEvent

// .perfetto.protos.FrameTimelineEvent.ExpectedDisplayFrameStart expected_display_frame_start = 1;
inline bool FrameTimelineEvent::has_expected_display_frame_start() const {
  return event_case() == kExpectedDisplayFrameStart;
}
inline bool FrameTimelineEvent::_internal_has_expected_display_frame_start() const {
  return event_case() == kExpectedDisplayFrameStart;
}
inline void FrameTimelineEvent::set_has_expected_display_frame_start() {
  _impl_._oneof_case_[0] = kExpectedDisplayFrameStart;
}
inline void FrameTimelineEvent::clear_expected_display_frame_start() {
  if (event_case() == kExpectedDisplayFrameStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.expected_display_frame_start_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* FrameTimelineEvent::release_expected_display_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  if (event_case() == kExpectedDisplayFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* temp = _impl_.event_.expected_display_frame_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.expected_display_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& FrameTimelineEvent::_internal_expected_display_frame_start() const {
  return event_case() == kExpectedDisplayFrameStart
      ? *_impl_.event_.expected_display_frame_start_
      : reinterpret_cast<::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart&>(::perfetto::protos::_FrameTimelineEvent_ExpectedDisplayFrameStart_default_instance_);
}
inline const ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart& FrameTimelineEvent::expected_display_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  return _internal_expected_display_frame_start();
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* FrameTimelineEvent::unsafe_arena_release_expected_display_frame_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  if (event_case() == kExpectedDisplayFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* temp = _impl_.event_.expected_display_frame_start_;
    _impl_.event_.expected_display_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrameTimelineEvent::unsafe_arena_set_allocated_expected_display_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* expected_display_frame_start) {
  clear_event();
  if (expected_display_frame_start) {
    set_has_expected_display_frame_start();
    _impl_.event_.expected_display_frame_start_ = expected_display_frame_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* FrameTimelineEvent::_internal_mutable_expected_display_frame_start() {
  if (event_case() != kExpectedDisplayFrameStart) {
    clear_event();
    set_has_expected_display_frame_start();
    _impl_.event_.expected_display_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart >(GetArenaForAllocation());
  }
  return _impl_.event_.expected_display_frame_start_;
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* FrameTimelineEvent::mutable_expected_display_frame_start() {
  ::perfetto::protos::FrameTimelineEvent_ExpectedDisplayFrameStart* _msg = _internal_mutable_expected_display_frame_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.expected_display_frame_start)
  return _msg;
}

// .perfetto.protos.FrameTimelineEvent.ActualDisplayFrameStart actual_display_frame_start = 2;
inline bool FrameTimelineEvent::has_actual_display_frame_start() const {
  return event_case() == kActualDisplayFrameStart;
}
inline bool FrameTimelineEvent::_internal_has_actual_display_frame_start() const {
  return event_case() == kActualDisplayFrameStart;
}
inline void FrameTimelineEvent::set_has_actual_display_frame_start() {
  _impl_._oneof_case_[0] = kActualDisplayFrameStart;
}
inline void FrameTimelineEvent::clear_actual_display_frame_start() {
  if (event_case() == kActualDisplayFrameStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.actual_display_frame_start_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* FrameTimelineEvent::release_actual_display_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  if (event_case() == kActualDisplayFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* temp = _impl_.event_.actual_display_frame_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.actual_display_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& FrameTimelineEvent::_internal_actual_display_frame_start() const {
  return event_case() == kActualDisplayFrameStart
      ? *_impl_.event_.actual_display_frame_start_
      : reinterpret_cast<::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart&>(::perfetto::protos::_FrameTimelineEvent_ActualDisplayFrameStart_default_instance_);
}
inline const ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart& FrameTimelineEvent::actual_display_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  return _internal_actual_display_frame_start();
}
inline ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* FrameTimelineEvent::unsafe_arena_release_actual_display_frame_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  if (event_case() == kActualDisplayFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* temp = _impl_.event_.actual_display_frame_start_;
    _impl_.event_.actual_display_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrameTimelineEvent::unsafe_arena_set_allocated_actual_display_frame_start(::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* actual_display_frame_start) {
  clear_event();
  if (actual_display_frame_start) {
    set_has_actual_display_frame_start();
    _impl_.event_.actual_display_frame_start_ = actual_display_frame_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
}
inline ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* FrameTimelineEvent::_internal_mutable_actual_display_frame_start() {
  if (event_case() != kActualDisplayFrameStart) {
    clear_event();
    set_has_actual_display_frame_start();
    _impl_.event_.actual_display_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart >(GetArenaForAllocation());
  }
  return _impl_.event_.actual_display_frame_start_;
}
inline ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* FrameTimelineEvent::mutable_actual_display_frame_start() {
  ::perfetto::protos::FrameTimelineEvent_ActualDisplayFrameStart* _msg = _internal_mutable_actual_display_frame_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.actual_display_frame_start)
  return _msg;
}

// .perfetto.protos.FrameTimelineEvent.ExpectedSurfaceFrameStart expected_surface_frame_start = 3;
inline bool FrameTimelineEvent::has_expected_surface_frame_start() const {
  return event_case() == kExpectedSurfaceFrameStart;
}
inline bool FrameTimelineEvent::_internal_has_expected_surface_frame_start() const {
  return event_case() == kExpectedSurfaceFrameStart;
}
inline void FrameTimelineEvent::set_has_expected_surface_frame_start() {
  _impl_._oneof_case_[0] = kExpectedSurfaceFrameStart;
}
inline void FrameTimelineEvent::clear_expected_surface_frame_start() {
  if (event_case() == kExpectedSurfaceFrameStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.expected_surface_frame_start_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* FrameTimelineEvent::release_expected_surface_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  if (event_case() == kExpectedSurfaceFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* temp = _impl_.event_.expected_surface_frame_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.expected_surface_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& FrameTimelineEvent::_internal_expected_surface_frame_start() const {
  return event_case() == kExpectedSurfaceFrameStart
      ? *_impl_.event_.expected_surface_frame_start_
      : reinterpret_cast<::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart&>(::perfetto::protos::_FrameTimelineEvent_ExpectedSurfaceFrameStart_default_instance_);
}
inline const ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart& FrameTimelineEvent::expected_surface_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  return _internal_expected_surface_frame_start();
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* FrameTimelineEvent::unsafe_arena_release_expected_surface_frame_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  if (event_case() == kExpectedSurfaceFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* temp = _impl_.event_.expected_surface_frame_start_;
    _impl_.event_.expected_surface_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrameTimelineEvent::unsafe_arena_set_allocated_expected_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* expected_surface_frame_start) {
  clear_event();
  if (expected_surface_frame_start) {
    set_has_expected_surface_frame_start();
    _impl_.event_.expected_surface_frame_start_ = expected_surface_frame_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* FrameTimelineEvent::_internal_mutable_expected_surface_frame_start() {
  if (event_case() != kExpectedSurfaceFrameStart) {
    clear_event();
    set_has_expected_surface_frame_start();
    _impl_.event_.expected_surface_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart >(GetArenaForAllocation());
  }
  return _impl_.event_.expected_surface_frame_start_;
}
inline ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* FrameTimelineEvent::mutable_expected_surface_frame_start() {
  ::perfetto::protos::FrameTimelineEvent_ExpectedSurfaceFrameStart* _msg = _internal_mutable_expected_surface_frame_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.expected_surface_frame_start)
  return _msg;
}

// .perfetto.protos.FrameTimelineEvent.ActualSurfaceFrameStart actual_surface_frame_start = 4;
inline bool FrameTimelineEvent::has_actual_surface_frame_start() const {
  return event_case() == kActualSurfaceFrameStart;
}
inline bool FrameTimelineEvent::_internal_has_actual_surface_frame_start() const {
  return event_case() == kActualSurfaceFrameStart;
}
inline void FrameTimelineEvent::set_has_actual_surface_frame_start() {
  _impl_._oneof_case_[0] = kActualSurfaceFrameStart;
}
inline void FrameTimelineEvent::clear_actual_surface_frame_start() {
  if (event_case() == kActualSurfaceFrameStart) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.actual_surface_frame_start_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* FrameTimelineEvent::release_actual_surface_frame_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  if (event_case() == kActualSurfaceFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* temp = _impl_.event_.actual_surface_frame_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.actual_surface_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& FrameTimelineEvent::_internal_actual_surface_frame_start() const {
  return event_case() == kActualSurfaceFrameStart
      ? *_impl_.event_.actual_surface_frame_start_
      : reinterpret_cast<::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart&>(::perfetto::protos::_FrameTimelineEvent_ActualSurfaceFrameStart_default_instance_);
}
inline const ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart& FrameTimelineEvent::actual_surface_frame_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  return _internal_actual_surface_frame_start();
}
inline ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* FrameTimelineEvent::unsafe_arena_release_actual_surface_frame_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  if (event_case() == kActualSurfaceFrameStart) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* temp = _impl_.event_.actual_surface_frame_start_;
    _impl_.event_.actual_surface_frame_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrameTimelineEvent::unsafe_arena_set_allocated_actual_surface_frame_start(::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* actual_surface_frame_start) {
  clear_event();
  if (actual_surface_frame_start) {
    set_has_actual_surface_frame_start();
    _impl_.event_.actual_surface_frame_start_ = actual_surface_frame_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
}
inline ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* FrameTimelineEvent::_internal_mutable_actual_surface_frame_start() {
  if (event_case() != kActualSurfaceFrameStart) {
    clear_event();
    set_has_actual_surface_frame_start();
    _impl_.event_.actual_surface_frame_start_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart >(GetArenaForAllocation());
  }
  return _impl_.event_.actual_surface_frame_start_;
}
inline ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* FrameTimelineEvent::mutable_actual_surface_frame_start() {
  ::perfetto::protos::FrameTimelineEvent_ActualSurfaceFrameStart* _msg = _internal_mutable_actual_surface_frame_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.actual_surface_frame_start)
  return _msg;
}

// .perfetto.protos.FrameTimelineEvent.FrameEnd frame_end = 5;
inline bool FrameTimelineEvent::has_frame_end() const {
  return event_case() == kFrameEnd;
}
inline bool FrameTimelineEvent::_internal_has_frame_end() const {
  return event_case() == kFrameEnd;
}
inline void FrameTimelineEvent::set_has_frame_end() {
  _impl_._oneof_case_[0] = kFrameEnd;
}
inline void FrameTimelineEvent::clear_frame_end() {
  if (event_case() == kFrameEnd) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.frame_end_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::FrameTimelineEvent_FrameEnd* FrameTimelineEvent::release_frame_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FrameTimelineEvent.frame_end)
  if (event_case() == kFrameEnd) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_FrameEnd* temp = _impl_.event_.frame_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.frame_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent_FrameEnd& FrameTimelineEvent::_internal_frame_end() const {
  return event_case() == kFrameEnd
      ? *_impl_.event_.frame_end_
      : reinterpret_cast<::perfetto::protos::FrameTimelineEvent_FrameEnd&>(::perfetto::protos::_FrameTimelineEvent_FrameEnd_default_instance_);
}
inline const ::perfetto::protos::FrameTimelineEvent_FrameEnd& FrameTimelineEvent::frame_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FrameTimelineEvent.frame_end)
  return _internal_frame_end();
}
inline ::perfetto::protos::FrameTimelineEvent_FrameEnd* FrameTimelineEvent::unsafe_arena_release_frame_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FrameTimelineEvent.frame_end)
  if (event_case() == kFrameEnd) {
    clear_has_event();
    ::perfetto::protos::FrameTimelineEvent_FrameEnd* temp = _impl_.event_.frame_end_;
    _impl_.event_.frame_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FrameTimelineEvent::unsafe_arena_set_allocated_frame_end(::perfetto::protos::FrameTimelineEvent_FrameEnd* frame_end) {
  clear_event();
  if (frame_end) {
    set_has_frame_end();
    _impl_.event_.frame_end_ = frame_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FrameTimelineEvent.frame_end)
}
inline ::perfetto::protos::FrameTimelineEvent_FrameEnd* FrameTimelineEvent::_internal_mutable_frame_end() {
  if (event_case() != kFrameEnd) {
    clear_event();
    set_has_frame_end();
    _impl_.event_.frame_end_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent_FrameEnd >(GetArenaForAllocation());
  }
  return _impl_.event_.frame_end_;
}
inline ::perfetto::protos::FrameTimelineEvent_FrameEnd* FrameTimelineEvent::mutable_frame_end() {
  ::perfetto::protos::FrameTimelineEvent_FrameEnd* _msg = _internal_mutable_frame_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FrameTimelineEvent.frame_end)
  return _msg;
}

inline bool FrameTimelineEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void FrameTimelineEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline FrameTimelineEvent::EventCase FrameTimelineEvent::event_case() const {
  return FrameTimelineEvent::EventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::FrameTimelineEvent_JankType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FrameTimelineEvent_JankType>() {
  return ::perfetto::protos::FrameTimelineEvent_JankType_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::FrameTimelineEvent_PresentType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FrameTimelineEvent_PresentType>() {
  return ::perfetto::protos::FrameTimelineEvent_PresentType_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::FrameTimelineEvent_PredictionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FrameTimelineEvent_PredictionType>() {
  return ::perfetto::protos::FrameTimelineEvent_PredictionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto_2epb_2eh
