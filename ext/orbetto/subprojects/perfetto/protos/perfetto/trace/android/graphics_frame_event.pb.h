// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/graphics_frame_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto;
namespace perfetto {
namespace protos {
class GraphicsFrameEvent;
struct GraphicsFrameEventDefaultTypeInternal;
extern GraphicsFrameEventDefaultTypeInternal _GraphicsFrameEvent_default_instance_;
class GraphicsFrameEvent_BufferEvent;
struct GraphicsFrameEvent_BufferEventDefaultTypeInternal;
extern GraphicsFrameEvent_BufferEventDefaultTypeInternal _GraphicsFrameEvent_BufferEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::GraphicsFrameEvent* Arena::CreateMaybeMessage<::perfetto::protos::GraphicsFrameEvent>(Arena*);
template <>
::perfetto::protos::GraphicsFrameEvent_BufferEvent* Arena::CreateMaybeMessage<::perfetto::protos::GraphicsFrameEvent_BufferEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum GraphicsFrameEvent_BufferEventType : int {
  GraphicsFrameEvent_BufferEventType_UNSPECIFIED = 0,
  GraphicsFrameEvent_BufferEventType_DEQUEUE = 1,
  GraphicsFrameEvent_BufferEventType_QUEUE = 2,
  GraphicsFrameEvent_BufferEventType_POST = 3,
  GraphicsFrameEvent_BufferEventType_ACQUIRE_FENCE = 4,
  GraphicsFrameEvent_BufferEventType_LATCH = 5,
  GraphicsFrameEvent_BufferEventType_HWC_COMPOSITION_QUEUED = 6,
  GraphicsFrameEvent_BufferEventType_FALLBACK_COMPOSITION = 7,
  GraphicsFrameEvent_BufferEventType_PRESENT_FENCE = 8,
  GraphicsFrameEvent_BufferEventType_RELEASE_FENCE = 9,
  GraphicsFrameEvent_BufferEventType_MODIFY = 10,
  GraphicsFrameEvent_BufferEventType_DETACH = 11,
  GraphicsFrameEvent_BufferEventType_ATTACH = 12,
  GraphicsFrameEvent_BufferEventType_CANCEL = 13,
};

bool GraphicsFrameEvent_BufferEventType_IsValid(int value);
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent_BufferEventType_BufferEventType_MIN = static_cast<GraphicsFrameEvent_BufferEventType>(0);
constexpr GraphicsFrameEvent_BufferEventType GraphicsFrameEvent_BufferEventType_BufferEventType_MAX = static_cast<GraphicsFrameEvent_BufferEventType>(13);
constexpr int GraphicsFrameEvent_BufferEventType_BufferEventType_ARRAYSIZE = 13 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GraphicsFrameEvent_BufferEventType_descriptor();
template <typename T>
const std::string& GraphicsFrameEvent_BufferEventType_Name(T value) {
  static_assert(std::is_same<T, GraphicsFrameEvent_BufferEventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BufferEventType_Name().");
  return GraphicsFrameEvent_BufferEventType_Name(static_cast<GraphicsFrameEvent_BufferEventType>(value));
}
template <>
inline const std::string& GraphicsFrameEvent_BufferEventType_Name(GraphicsFrameEvent_BufferEventType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GraphicsFrameEvent_BufferEventType_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool GraphicsFrameEvent_BufferEventType_Parse(absl::string_view name, GraphicsFrameEvent_BufferEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GraphicsFrameEvent_BufferEventType>(
      GraphicsFrameEvent_BufferEventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GraphicsFrameEvent_BufferEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.GraphicsFrameEvent.BufferEvent) */ {
 public:
  inline GraphicsFrameEvent_BufferEvent() : GraphicsFrameEvent_BufferEvent(nullptr) {}
  ~GraphicsFrameEvent_BufferEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GraphicsFrameEvent_BufferEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphicsFrameEvent_BufferEvent(const GraphicsFrameEvent_BufferEvent& from);
  GraphicsFrameEvent_BufferEvent(GraphicsFrameEvent_BufferEvent&& from) noexcept
    : GraphicsFrameEvent_BufferEvent() {
    *this = ::std::move(from);
  }

  inline GraphicsFrameEvent_BufferEvent& operator=(const GraphicsFrameEvent_BufferEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphicsFrameEvent_BufferEvent& operator=(GraphicsFrameEvent_BufferEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphicsFrameEvent_BufferEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphicsFrameEvent_BufferEvent* internal_default_instance() {
    return reinterpret_cast<const GraphicsFrameEvent_BufferEvent*>(
               &_GraphicsFrameEvent_BufferEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphicsFrameEvent_BufferEvent& a, GraphicsFrameEvent_BufferEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphicsFrameEvent_BufferEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphicsFrameEvent_BufferEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphicsFrameEvent_BufferEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphicsFrameEvent_BufferEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphicsFrameEvent_BufferEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphicsFrameEvent_BufferEvent& from) {
    GraphicsFrameEvent_BufferEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphicsFrameEvent_BufferEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.GraphicsFrameEvent.BufferEvent";
  }
  protected:
  explicit GraphicsFrameEvent_BufferEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 3,
    kFrameNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDurationNsFieldNumber = 4,
    kBufferIdFieldNumber = 5,
  };
  // optional string layer_name = 3;
  bool has_layer_name() const;
  void clear_layer_name() ;
  const std::string& layer_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_layer_name(Arg_&& arg, Args_... args);
  std::string* mutable_layer_name();
  PROTOBUF_NODISCARD std::string* release_layer_name();
  void set_allocated_layer_name(std::string* ptr);

  private:
  const std::string& _internal_layer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer_name(
      const std::string& value);
  std::string* _internal_mutable_layer_name();

  public:
  // optional uint32 frame_number = 1;
  bool has_frame_number() const;
  void clear_frame_number() ;
  ::uint32_t frame_number() const;
  void set_frame_number(::uint32_t value);

  private:
  ::uint32_t _internal_frame_number() const;
  void _internal_set_frame_number(::uint32_t value);

  public:
  // optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
  bool has_type() const;
  void clear_type() ;
  ::perfetto::protos::GraphicsFrameEvent_BufferEventType type() const;
  void set_type(::perfetto::protos::GraphicsFrameEvent_BufferEventType value);

  private:
  ::perfetto::protos::GraphicsFrameEvent_BufferEventType _internal_type() const;
  void _internal_set_type(::perfetto::protos::GraphicsFrameEvent_BufferEventType value);

  public:
  // optional uint64 duration_ns = 4;
  bool has_duration_ns() const;
  void clear_duration_ns() ;
  ::uint64_t duration_ns() const;
  void set_duration_ns(::uint64_t value);

  private:
  ::uint64_t _internal_duration_ns() const;
  void _internal_set_duration_ns(::uint64_t value);

  public:
  // optional uint32 buffer_id = 5;
  bool has_buffer_id() const;
  void clear_buffer_id() ;
  ::uint32_t buffer_id() const;
  void set_buffer_id(::uint32_t value);

  private:
  ::uint32_t _internal_buffer_id() const;
  void _internal_set_buffer_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.GraphicsFrameEvent.BufferEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
    ::uint32_t frame_number_;
    int type_;
    ::uint64_t duration_ns_;
    ::uint32_t buffer_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto;
};// -------------------------------------------------------------------

class GraphicsFrameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.GraphicsFrameEvent) */ {
 public:
  inline GraphicsFrameEvent() : GraphicsFrameEvent(nullptr) {}
  ~GraphicsFrameEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GraphicsFrameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphicsFrameEvent(const GraphicsFrameEvent& from);
  GraphicsFrameEvent(GraphicsFrameEvent&& from) noexcept
    : GraphicsFrameEvent() {
    *this = ::std::move(from);
  }

  inline GraphicsFrameEvent& operator=(const GraphicsFrameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphicsFrameEvent& operator=(GraphicsFrameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphicsFrameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphicsFrameEvent* internal_default_instance() {
    return reinterpret_cast<const GraphicsFrameEvent*>(
               &_GraphicsFrameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GraphicsFrameEvent& a, GraphicsFrameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphicsFrameEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphicsFrameEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphicsFrameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphicsFrameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphicsFrameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphicsFrameEvent& from) {
    GraphicsFrameEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphicsFrameEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.GraphicsFrameEvent";
  }
  protected:
  explicit GraphicsFrameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GraphicsFrameEvent_BufferEvent BufferEvent;

  using BufferEventType = GraphicsFrameEvent_BufferEventType;
  static constexpr BufferEventType UNSPECIFIED = GraphicsFrameEvent_BufferEventType_UNSPECIFIED;
  static constexpr BufferEventType DEQUEUE = GraphicsFrameEvent_BufferEventType_DEQUEUE;
  static constexpr BufferEventType QUEUE = GraphicsFrameEvent_BufferEventType_QUEUE;
  static constexpr BufferEventType POST = GraphicsFrameEvent_BufferEventType_POST;
  static constexpr BufferEventType ACQUIRE_FENCE = GraphicsFrameEvent_BufferEventType_ACQUIRE_FENCE;
  static constexpr BufferEventType LATCH = GraphicsFrameEvent_BufferEventType_LATCH;
  static constexpr BufferEventType HWC_COMPOSITION_QUEUED = GraphicsFrameEvent_BufferEventType_HWC_COMPOSITION_QUEUED;
  static constexpr BufferEventType FALLBACK_COMPOSITION = GraphicsFrameEvent_BufferEventType_FALLBACK_COMPOSITION;
  static constexpr BufferEventType PRESENT_FENCE = GraphicsFrameEvent_BufferEventType_PRESENT_FENCE;
  static constexpr BufferEventType RELEASE_FENCE = GraphicsFrameEvent_BufferEventType_RELEASE_FENCE;
  static constexpr BufferEventType MODIFY = GraphicsFrameEvent_BufferEventType_MODIFY;
  static constexpr BufferEventType DETACH = GraphicsFrameEvent_BufferEventType_DETACH;
  static constexpr BufferEventType ATTACH = GraphicsFrameEvent_BufferEventType_ATTACH;
  static constexpr BufferEventType CANCEL = GraphicsFrameEvent_BufferEventType_CANCEL;
  static inline bool BufferEventType_IsValid(int value) {
    return GraphicsFrameEvent_BufferEventType_IsValid(value);
  }
  static constexpr BufferEventType BufferEventType_MIN = GraphicsFrameEvent_BufferEventType_BufferEventType_MIN;
  static constexpr BufferEventType BufferEventType_MAX = GraphicsFrameEvent_BufferEventType_BufferEventType_MAX;
  static constexpr int BufferEventType_ARRAYSIZE = GraphicsFrameEvent_BufferEventType_BufferEventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BufferEventType_descriptor() {
    return GraphicsFrameEvent_BufferEventType_descriptor();
  }
  template <typename T>
  static inline const std::string& BufferEventType_Name(T value) {
    return GraphicsFrameEvent_BufferEventType_Name(value);
  }
  static inline bool BufferEventType_Parse(absl::string_view name, BufferEventType* value) {
    return GraphicsFrameEvent_BufferEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBufferEventFieldNumber = 1,
  };
  // optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
  bool has_buffer_event() const;
  void clear_buffer_event() ;
  const ::perfetto::protos::GraphicsFrameEvent_BufferEvent& buffer_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GraphicsFrameEvent_BufferEvent* release_buffer_event();
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent* mutable_buffer_event();
  void set_allocated_buffer_event(::perfetto::protos::GraphicsFrameEvent_BufferEvent* buffer_event);
  private:
  const ::perfetto::protos::GraphicsFrameEvent_BufferEvent& _internal_buffer_event() const;
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent* _internal_mutable_buffer_event();
  public:
  void unsafe_arena_set_allocated_buffer_event(
      ::perfetto::protos::GraphicsFrameEvent_BufferEvent* buffer_event);
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent* unsafe_arena_release_buffer_event();
  // @@protoc_insertion_point(class_scope:perfetto.protos.GraphicsFrameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::GraphicsFrameEvent_BufferEvent* buffer_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GraphicsFrameEvent_BufferEvent

// optional uint32 frame_number = 1;
inline bool GraphicsFrameEvent_BufferEvent::has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GraphicsFrameEvent_BufferEvent::clear_frame_number() {
  _impl_.frame_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t GraphicsFrameEvent_BufferEvent::frame_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GraphicsFrameEvent.BufferEvent.frame_number)
  return _internal_frame_number();
}
inline void GraphicsFrameEvent_BufferEvent::set_frame_number(::uint32_t value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GraphicsFrameEvent.BufferEvent.frame_number)
}
inline ::uint32_t GraphicsFrameEvent_BufferEvent::_internal_frame_number() const {
  return _impl_.frame_number_;
}
inline void GraphicsFrameEvent_BufferEvent::_internal_set_frame_number(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frame_number_ = value;
}

// optional .perfetto.protos.GraphicsFrameEvent.BufferEventType type = 2;
inline bool GraphicsFrameEvent_BufferEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GraphicsFrameEvent_BufferEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::GraphicsFrameEvent_BufferEventType GraphicsFrameEvent_BufferEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GraphicsFrameEvent.BufferEvent.type)
  return _internal_type();
}
inline void GraphicsFrameEvent_BufferEvent::set_type(::perfetto::protos::GraphicsFrameEvent_BufferEventType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GraphicsFrameEvent.BufferEvent.type)
}
inline ::perfetto::protos::GraphicsFrameEvent_BufferEventType GraphicsFrameEvent_BufferEvent::_internal_type() const {
  return static_cast<::perfetto::protos::GraphicsFrameEvent_BufferEventType>(_impl_.type_);
}
inline void GraphicsFrameEvent_BufferEvent::_internal_set_type(::perfetto::protos::GraphicsFrameEvent_BufferEventType value) {
  assert(::perfetto::protos::GraphicsFrameEvent_BufferEventType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional string layer_name = 3;
inline bool GraphicsFrameEvent_BufferEvent::has_layer_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GraphicsFrameEvent_BufferEvent::clear_layer_name() {
  _impl_.layer_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GraphicsFrameEvent_BufferEvent::layer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GraphicsFrameEvent.BufferEvent.layer_name)
  return _internal_layer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GraphicsFrameEvent_BufferEvent::set_layer_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.layer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.GraphicsFrameEvent.BufferEvent.layer_name)
}
inline std::string* GraphicsFrameEvent_BufferEvent::mutable_layer_name() {
  std::string* _s = _internal_mutable_layer_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GraphicsFrameEvent.BufferEvent.layer_name)
  return _s;
}
inline const std::string& GraphicsFrameEvent_BufferEvent::_internal_layer_name() const {
  return _impl_.layer_name_.Get();
}
inline void GraphicsFrameEvent_BufferEvent::_internal_set_layer_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.layer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GraphicsFrameEvent_BufferEvent::_internal_mutable_layer_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.layer_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GraphicsFrameEvent_BufferEvent::release_layer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GraphicsFrameEvent.BufferEvent.layer_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.layer_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GraphicsFrameEvent_BufferEvent::set_allocated_layer_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.layer_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.layer_name_.IsDefault()) {
          _impl_.layer_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GraphicsFrameEvent.BufferEvent.layer_name)
}

// optional uint64 duration_ns = 4;
inline bool GraphicsFrameEvent_BufferEvent::has_duration_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GraphicsFrameEvent_BufferEvent::clear_duration_ns() {
  _impl_.duration_ns_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t GraphicsFrameEvent_BufferEvent::duration_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GraphicsFrameEvent.BufferEvent.duration_ns)
  return _internal_duration_ns();
}
inline void GraphicsFrameEvent_BufferEvent::set_duration_ns(::uint64_t value) {
  _internal_set_duration_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GraphicsFrameEvent.BufferEvent.duration_ns)
}
inline ::uint64_t GraphicsFrameEvent_BufferEvent::_internal_duration_ns() const {
  return _impl_.duration_ns_;
}
inline void GraphicsFrameEvent_BufferEvent::_internal_set_duration_ns(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.duration_ns_ = value;
}

// optional uint32 buffer_id = 5;
inline bool GraphicsFrameEvent_BufferEvent::has_buffer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GraphicsFrameEvent_BufferEvent::clear_buffer_id() {
  _impl_.buffer_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t GraphicsFrameEvent_BufferEvent::buffer_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GraphicsFrameEvent.BufferEvent.buffer_id)
  return _internal_buffer_id();
}
inline void GraphicsFrameEvent_BufferEvent::set_buffer_id(::uint32_t value) {
  _internal_set_buffer_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GraphicsFrameEvent.BufferEvent.buffer_id)
}
inline ::uint32_t GraphicsFrameEvent_BufferEvent::_internal_buffer_id() const {
  return _impl_.buffer_id_;
}
inline void GraphicsFrameEvent_BufferEvent::_internal_set_buffer_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.buffer_id_ = value;
}

// -------------------------------------------------------------------

// GraphicsFrameEvent

// optional .perfetto.protos.GraphicsFrameEvent.BufferEvent buffer_event = 1;
inline bool GraphicsFrameEvent::has_buffer_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_event_ != nullptr);
  return value;
}
inline void GraphicsFrameEvent::clear_buffer_event() {
  if (_impl_.buffer_event_ != nullptr) _impl_.buffer_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::GraphicsFrameEvent_BufferEvent& GraphicsFrameEvent::_internal_buffer_event() const {
  const ::perfetto::protos::GraphicsFrameEvent_BufferEvent* p = _impl_.buffer_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::GraphicsFrameEvent_BufferEvent&>(
      ::perfetto::protos::_GraphicsFrameEvent_BufferEvent_default_instance_);
}
inline const ::perfetto::protos::GraphicsFrameEvent_BufferEvent& GraphicsFrameEvent::buffer_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GraphicsFrameEvent.buffer_event)
  return _internal_buffer_event();
}
inline void GraphicsFrameEvent::unsafe_arena_set_allocated_buffer_event(
    ::perfetto::protos::GraphicsFrameEvent_BufferEvent* buffer_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_event_);
  }
  _impl_.buffer_event_ = buffer_event;
  if (buffer_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.GraphicsFrameEvent.buffer_event)
}
inline ::perfetto::protos::GraphicsFrameEvent_BufferEvent* GraphicsFrameEvent::release_buffer_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent* temp = _impl_.buffer_event_;
  _impl_.buffer_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::GraphicsFrameEvent_BufferEvent* GraphicsFrameEvent::unsafe_arena_release_buffer_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GraphicsFrameEvent.buffer_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent* temp = _impl_.buffer_event_;
  _impl_.buffer_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::GraphicsFrameEvent_BufferEvent* GraphicsFrameEvent::_internal_mutable_buffer_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.buffer_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::GraphicsFrameEvent_BufferEvent>(GetArenaForAllocation());
    _impl_.buffer_event_ = p;
  }
  return _impl_.buffer_event_;
}
inline ::perfetto::protos::GraphicsFrameEvent_BufferEvent* GraphicsFrameEvent::mutable_buffer_event() {
  ::perfetto::protos::GraphicsFrameEvent_BufferEvent* _msg = _internal_mutable_buffer_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GraphicsFrameEvent.buffer_event)
  return _msg;
}
inline void GraphicsFrameEvent::set_allocated_buffer_event(::perfetto::protos::GraphicsFrameEvent_BufferEvent* buffer_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buffer_event_;
  }
  if (buffer_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buffer_event);
    if (message_arena != submessage_arena) {
      buffer_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.buffer_event_ = buffer_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GraphicsFrameEvent.buffer_event)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::GraphicsFrameEvent_BufferEventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::GraphicsFrameEvent_BufferEventType>() {
  return ::perfetto::protos::GraphicsFrameEvent_BufferEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto_2epb_2eh
