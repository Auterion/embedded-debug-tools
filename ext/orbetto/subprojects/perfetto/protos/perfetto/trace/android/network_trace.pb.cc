// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/network_trace.proto

#include "protos/perfetto/trace/android/network_trace.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR NetworkPacketEvent::NetworkPacketEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interface_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ 0

  , /*decltype(_impl_.length_)*/ 0u

  , /*decltype(_impl_.uid_)*/ 0u

  , /*decltype(_impl_.tag_)*/ 0u

  , /*decltype(_impl_.ip_proto_)*/ 0u

  , /*decltype(_impl_.tcp_flags_)*/ 0u

  , /*decltype(_impl_.local_port_)*/ 0u

  , /*decltype(_impl_.remote_port_)*/ 0u
} {}
struct NetworkPacketEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkPacketEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkPacketEventDefaultTypeInternal() {}
  union {
    NetworkPacketEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkPacketEventDefaultTypeInternal _NetworkPacketEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkPacketBundle::NetworkPacketBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_timestamps_)*/ {}
  ,/* _impl_._packet_timestamps_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.packet_lengths_)*/ {}
  ,/* _impl_._packet_lengths_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.total_duration_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.total_length_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.total_packets_)*/ 0u

  , /*decltype(_impl_.packet_context_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NetworkPacketBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkPacketBundleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkPacketBundleDefaultTypeInternal() {}
  union {
    NetworkPacketBundle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkPacketBundleDefaultTypeInternal _NetworkPacketBundle_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetworkPacketContext::NetworkPacketContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ctx_)*/nullptr
  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct NetworkPacketContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkPacketContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkPacketContextDefaultTypeInternal() {}
  union {
    NetworkPacketContext _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkPacketContextDefaultTypeInternal _NetworkPacketContext_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.interface_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.ip_proto_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.tcp_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.local_port_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketEvent, _impl_.remote_port_),
    1,
    0,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_.packet_timestamps_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_.packet_lengths_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_.total_packets_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_.total_duration_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_.total_length_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_.packet_context_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketContext, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketContext, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketContext, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketContext, _impl_.ctx_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::perfetto::protos::NetworkPacketEvent)},
        { 26, 42, -1, sizeof(::perfetto::protos::NetworkPacketBundle)},
        { 49, 59, -1, sizeof(::perfetto::protos::NetworkPacketContext)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_NetworkPacketEvent_default_instance_._instance,
    &::perfetto::protos::_NetworkPacketBundle_default_instance_._instance,
    &::perfetto::protos::_NetworkPacketContext_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1protos/perfetto/trace/android/network_"
    "trace.proto\022\017perfetto.protos\"\325\001\n\022Network"
    "PacketEvent\0224\n\tdirection\030\001 \001(\0162!.perfett"
    "o.protos.TrafficDirection\022\021\n\tinterface\030\002"
    " \001(\t\022\016\n\006length\030\003 \001(\r\022\013\n\003uid\030\004 \001(\r\022\013\n\003tag"
    "\030\005 \001(\r\022\020\n\010ip_proto\030\006 \001(\r\022\021\n\ttcp_flags\030\007 "
    "\001(\r\022\022\n\nlocal_port\030\010 \001(\r\022\023\n\013remote_port\030\t"
    " \001(\r\"\352\001\n\023NetworkPacketBundle\022\r\n\003iid\030\001 \001("
    "\004H\000\0222\n\003ctx\030\002 \001(\0132#.perfetto.protos.Netwo"
    "rkPacketEventH\000\022\035\n\021packet_timestamps\030\003 \003"
    "(\004B\002\020\001\022\032\n\016packet_lengths\030\004 \003(\rB\002\020\001\022\025\n\rto"
    "tal_packets\030\005 \001(\r\022\026\n\016total_duration\030\006 \001("
    "\004\022\024\n\014total_length\030\007 \001(\004B\020\n\016packet_contex"
    "t\"U\n\024NetworkPacketContext\022\013\n\003iid\030\001 \001(\004\0220"
    "\n\003ctx\030\002 \001(\0132#.perfetto.protos.NetworkPac"
    "ketEvent*H\n\020TrafficDirection\022\023\n\017DIR_UNSP"
    "ECIFIED\020\000\022\017\n\013DIR_INGRESS\020\001\022\016\n\nDIR_EGRESS"
    "\020\002"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto = {
    false,
    false,
    682,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto,
    "protos/perfetto/trace/android/network_trace.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[0];
}
bool TrafficDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class NetworkPacketEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkPacketEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkPacketEvent, _impl_._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interface(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ip_proto(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tcp_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_local_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_remote_port(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

NetworkPacketEvent::NetworkPacketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NetworkPacketEvent)
}
NetworkPacketEvent::NetworkPacketEvent(const NetworkPacketEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkPacketEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.length_) {}

    , decltype(_impl_.uid_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.ip_proto_) {}

    , decltype(_impl_.tcp_flags_) {}

    , decltype(_impl_.local_port_) {}

    , decltype(_impl_.remote_port_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interface_.Set(from._internal_interface(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.direction_, &from._impl_.direction_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.remote_port_) -
    reinterpret_cast<char*>(&_impl_.direction_)) + sizeof(_impl_.remote_port_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NetworkPacketEvent)
}

inline void NetworkPacketEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interface_) {}

    , decltype(_impl_.direction_) { 0 }

    , decltype(_impl_.length_) { 0u }

    , decltype(_impl_.uid_) { 0u }

    , decltype(_impl_.tag_) { 0u }

    , decltype(_impl_.ip_proto_) { 0u }

    , decltype(_impl_.tcp_flags_) { 0u }

    , decltype(_impl_.local_port_) { 0u }

    , decltype(_impl_.remote_port_) { 0u }

  };
  _impl_.interface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.interface_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkPacketEvent::~NetworkPacketEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NetworkPacketEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkPacketEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_.Destroy();
}

void NetworkPacketEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkPacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NetworkPacketEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.interface_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.direction_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.local_port_) -
        reinterpret_cast<char*>(&_impl_.direction_)) + sizeof(_impl_.local_port_));
  }
  _impl_.remote_port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkPacketEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TrafficDirection direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrafficDirection_IsValid(static_cast<int>(val)))) {
            _internal_set_direction(static_cast<::perfetto::protos::TrafficDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string interface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.NetworkPacketEvent.interface");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_tag(&has_bits);
          _impl_.tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ip_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_ip_proto(&has_bits);
          _impl_.ip_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tcp_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_tcp_flags(&has_bits);
          _impl_.tcp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 local_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_local_port(&has_bits);
          _impl_.local_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 remote_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_remote_port(&has_bits);
          _impl_.remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkPacketEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NetworkPacketEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TrafficDirection direction = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_direction(), target);
  }

  // optional string interface = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_interface();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.NetworkPacketEvent.interface");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_length(), target);
  }

  // optional uint32 uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_uid(), target);
  }

  // optional uint32 tag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_tag(), target);
  }

  // optional uint32 ip_proto = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_ip_proto(), target);
  }

  // optional uint32 tcp_flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_tcp_flags(), target);
  }

  // optional uint32 local_port = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_local_port(), target);
  }

  // optional uint32 remote_port = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_remote_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NetworkPacketEvent)
  return target;
}

::size_t NetworkPacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NetworkPacketEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string interface = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_interface());
    }

    // optional .perfetto.protos.TrafficDirection direction = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
    }

    // optional uint32 length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_length());
    }

    // optional uint32 uid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_uid());
    }

    // optional uint32 tag = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tag());
    }

    // optional uint32 ip_proto = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ip_proto());
    }

    // optional uint32 tcp_flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tcp_flags());
    }

    // optional uint32 local_port = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_local_port());
    }

  }
  // optional uint32 remote_port = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_remote_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkPacketEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkPacketEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkPacketEvent::GetClassData() const { return &_class_data_; }


void NetworkPacketEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkPacketEvent*>(&to_msg);
  auto& from = static_cast<const NetworkPacketEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NetworkPacketEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_interface(from._internal_interface());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tag_ = from._impl_.tag_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ip_proto_ = from._impl_.ip_proto_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tcp_flags_ = from._impl_.tcp_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.local_port_ = from._impl_.local_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_remote_port(from._internal_remote_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkPacketEvent::CopyFrom(const NetworkPacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NetworkPacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacketEvent::IsInitialized() const {
  return true;
}

void NetworkPacketEvent::InternalSwap(NetworkPacketEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interface_, lhs_arena,
                                       &other->_impl_.interface_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkPacketEvent, _impl_.remote_port_)
      + sizeof(NetworkPacketEvent::_impl_.remote_port_)
      - PROTOBUF_FIELD_OFFSET(NetworkPacketEvent, _impl_.direction_)>(
          reinterpret_cast<char*>(&_impl_.direction_),
          reinterpret_cast<char*>(&other->_impl_.direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkPacketEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[0]);
}
// ===================================================================

class NetworkPacketBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkPacketBundle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkPacketBundle, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetworkPacketBundle, _impl_._oneof_case_);
  static const ::perfetto::protos::NetworkPacketEvent& ctx(const NetworkPacketBundle* msg);
  static void set_has_total_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::NetworkPacketEvent&
NetworkPacketBundle::_Internal::ctx(const NetworkPacketBundle* msg) {
  return *msg->_impl_.packet_context_.ctx_;
}
void NetworkPacketBundle::set_allocated_ctx(::perfetto::protos::NetworkPacketEvent* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_packet_context();
  if (ctx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ctx);
    if (message_arena != submessage_arena) {
      ctx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    set_has_ctx();
    _impl_.packet_context_.ctx_ = ctx;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NetworkPacketBundle.ctx)
}
NetworkPacketBundle::NetworkPacketBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NetworkPacketBundle)
}
NetworkPacketBundle::NetworkPacketBundle(const NetworkPacketBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkPacketBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_timestamps_) { from._impl_.packet_timestamps_ }
    ,/* _impl_._packet_timestamps_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.packet_lengths_) { from._impl_.packet_lengths_ }
    ,/* _impl_._packet_lengths_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.total_duration_) {}

    , decltype(_impl_.total_length_) {}

    , decltype(_impl_.total_packets_) {}

    , decltype(_impl_.packet_context_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_duration_, &from._impl_.total_duration_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.total_packets_) -
    reinterpret_cast<char*>(&_impl_.total_duration_)) + sizeof(_impl_.total_packets_));
  clear_has_packet_context();
  switch (from.packet_context_case()) {
    case kIid: {
      _this->_internal_set_iid(from._internal_iid());
      break;
    }
    case kCtx: {
      _this->_internal_mutable_ctx()->::perfetto::protos::NetworkPacketEvent::MergeFrom(
          from._internal_ctx());
      break;
    }
    case PACKET_CONTEXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NetworkPacketBundle)
}

inline void NetworkPacketBundle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_timestamps_) { arena }
    ,/* _impl_._packet_timestamps_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.packet_lengths_) { arena }
    ,/* _impl_._packet_lengths_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.total_duration_) { ::uint64_t{0u} }

    , decltype(_impl_.total_length_) { ::uint64_t{0u} }

    , decltype(_impl_.total_packets_) { 0u }

    , decltype(_impl_.packet_context_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_packet_context();
}

NetworkPacketBundle::~NetworkPacketBundle() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NetworkPacketBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkPacketBundle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_timestamps_.~RepeatedField();
  _impl_.packet_lengths_.~RepeatedField();
  if (has_packet_context()) {
    clear_packet_context();
  }
}

void NetworkPacketBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkPacketBundle::clear_packet_context() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.NetworkPacketBundle)
  switch (packet_context_case()) {
    case kIid: {
      // No need to clear
      break;
    }
    case kCtx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.packet_context_.ctx_;
      }
      break;
    }
    case PACKET_CONTEXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PACKET_CONTEXT_NOT_SET;
}


void NetworkPacketBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NetworkPacketBundle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_packet_timestamps()->Clear();
  _internal_mutable_packet_lengths()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.total_duration_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_packets_) -
        reinterpret_cast<char*>(&_impl_.total_duration_)) + sizeof(_impl_.total_packets_));
  }
  clear_packet_context();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkPacketBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NetworkPacketEvent ctx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 packet_timestamps = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packet_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_packet_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 packet_lengths = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packet_lengths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_packet_lengths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 total_packets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_total_packets(&has_bits);
          _impl_.total_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 total_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_total_duration(&has_bits);
          _impl_.total_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 total_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_total_length(&has_bits);
          _impl_.total_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkPacketBundle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NetworkPacketBundle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (packet_context_case()) {
    case kIid: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          1, this->_internal_iid(), target);
      break;
    }
    case kCtx: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::ctx(this),
          _Internal::ctx(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // repeated uint64 packet_timestamps = 3 [packed = true];
  {
    int byte_size = _impl_._packet_timestamps_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_packet_timestamps(),
                                                 byte_size, target);
    }
  }

  // repeated uint32 packet_lengths = 4 [packed = true];
  {
    int byte_size = _impl_._packet_lengths_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(4, _internal_packet_lengths(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 total_packets = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_total_packets(), target);
  }

  // optional uint64 total_duration = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_total_duration(), target);
  }

  // optional uint64 total_length = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_total_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NetworkPacketBundle)
  return target;
}

::size_t NetworkPacketBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NetworkPacketBundle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 packet_timestamps = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_packet_timestamps())
    ;
    _impl_._packet_timestamps_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 packet_lengths = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_packet_lengths())
    ;
    _impl_._packet_lengths_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 total_duration = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_total_duration());
    }

    // optional uint64 total_length = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_total_length());
    }

    // optional uint32 total_packets = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_total_packets());
    }

  }
  switch (packet_context_case()) {
    // uint64 iid = 1;
    case kIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
      break;
    }
    // .perfetto.protos.NetworkPacketEvent ctx = 2;
    case kCtx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_context_.ctx_);
      break;
    }
    case PACKET_CONTEXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkPacketBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkPacketBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkPacketBundle::GetClassData() const { return &_class_data_; }


void NetworkPacketBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkPacketBundle*>(&to_msg);
  auto& from = static_cast<const NetworkPacketBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NetworkPacketBundle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packet_timestamps_.MergeFrom(from._impl_.packet_timestamps_);
  _this->_impl_.packet_lengths_.MergeFrom(from._impl_.packet_lengths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.total_duration_ = from._impl_.total_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.total_length_ = from._impl_.total_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_packets_ = from._impl_.total_packets_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.packet_context_case()) {
    case kIid: {
      _this->_internal_set_iid(from._internal_iid());
      break;
    }
    case kCtx: {
      _this->_internal_mutable_ctx()->::perfetto::protos::NetworkPacketEvent::MergeFrom(
          from._internal_ctx());
      break;
    }
    case PACKET_CONTEXT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkPacketBundle::CopyFrom(const NetworkPacketBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NetworkPacketBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacketBundle::IsInitialized() const {
  return true;
}

void NetworkPacketBundle::InternalSwap(NetworkPacketBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.packet_timestamps_.InternalSwap(&other->_impl_.packet_timestamps_);
  _impl_.packet_lengths_.InternalSwap(&other->_impl_.packet_lengths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkPacketBundle, _impl_.total_packets_)
      + sizeof(NetworkPacketBundle::_impl_.total_packets_)
      - PROTOBUF_FIELD_OFFSET(NetworkPacketBundle, _impl_.total_duration_)>(
          reinterpret_cast<char*>(&_impl_.total_duration_),
          reinterpret_cast<char*>(&other->_impl_.total_duration_));
  swap(_impl_.packet_context_, other->_impl_.packet_context_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkPacketBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[1]);
}
// ===================================================================

class NetworkPacketContext::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkPacketContext>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetworkPacketContext, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::NetworkPacketEvent& ctx(const NetworkPacketContext* msg);
  static void set_has_ctx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::NetworkPacketEvent&
NetworkPacketContext::_Internal::ctx(const NetworkPacketContext* msg) {
  return *msg->_impl_.ctx_;
}
NetworkPacketContext::NetworkPacketContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NetworkPacketContext)
}
NetworkPacketContext::NetworkPacketContext(const NetworkPacketContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkPacketContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ctx_){nullptr}
    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ctx_ = new ::perfetto::protos::NetworkPacketEvent(*from._impl_.ctx_);
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NetworkPacketContext)
}

inline void NetworkPacketContext::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ctx_){nullptr}
    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
}

NetworkPacketContext::~NetworkPacketContext() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NetworkPacketContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkPacketContext::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ctx_;
}

void NetworkPacketContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkPacketContext::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NetworkPacketContext)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ctx_ != nullptr);
    _impl_.ctx_->Clear();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkPacketContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.NetworkPacketEvent ctx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetworkPacketContext::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NetworkPacketContext)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional .perfetto.protos.NetworkPacketEvent ctx = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ctx(this),
        _Internal::ctx(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NetworkPacketContext)
  return target;
}

::size_t NetworkPacketContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NetworkPacketContext)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.NetworkPacketEvent ctx = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ctx_);
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkPacketContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkPacketContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkPacketContext::GetClassData() const { return &_class_data_; }


void NetworkPacketContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkPacketContext*>(&to_msg);
  auto& from = static_cast<const NetworkPacketContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NetworkPacketContext)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ctx()->::perfetto::protos::NetworkPacketEvent::MergeFrom(
          from._internal_ctx());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkPacketContext::CopyFrom(const NetworkPacketContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NetworkPacketContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacketContext::IsInitialized() const {
  return true;
}

void NetworkPacketContext::InternalSwap(NetworkPacketContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkPacketContext, _impl_.iid_)
      + sizeof(NetworkPacketContext::_impl_.iid_)
      - PROTOBUF_FIELD_OFFSET(NetworkPacketContext, _impl_.ctx_)>(
          reinterpret_cast<char*>(&_impl_.ctx_),
          reinterpret_cast<char*>(&other->_impl_.ctx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkPacketContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::NetworkPacketEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::NetworkPacketEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NetworkPacketEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::NetworkPacketBundle*
Arena::CreateMaybeMessage< ::perfetto::protos::NetworkPacketBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NetworkPacketBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::NetworkPacketContext*
Arena::CreateMaybeMessage< ::perfetto::protos::NetworkPacketContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NetworkPacketContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
