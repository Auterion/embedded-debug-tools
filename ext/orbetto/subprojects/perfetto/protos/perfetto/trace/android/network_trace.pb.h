// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/android/network_trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto;
namespace perfetto {
namespace protos {
class NetworkPacketBundle;
struct NetworkPacketBundleDefaultTypeInternal;
extern NetworkPacketBundleDefaultTypeInternal _NetworkPacketBundle_default_instance_;
class NetworkPacketContext;
struct NetworkPacketContextDefaultTypeInternal;
extern NetworkPacketContextDefaultTypeInternal _NetworkPacketContext_default_instance_;
class NetworkPacketEvent;
struct NetworkPacketEventDefaultTypeInternal;
extern NetworkPacketEventDefaultTypeInternal _NetworkPacketEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::NetworkPacketBundle* Arena::CreateMaybeMessage<::perfetto::protos::NetworkPacketBundle>(Arena*);
template <>
::perfetto::protos::NetworkPacketContext* Arena::CreateMaybeMessage<::perfetto::protos::NetworkPacketContext>(Arena*);
template <>
::perfetto::protos::NetworkPacketEvent* Arena::CreateMaybeMessage<::perfetto::protos::NetworkPacketEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum TrafficDirection : int {
  DIR_UNSPECIFIED = 0,
  DIR_INGRESS = 1,
  DIR_EGRESS = 2,
};

bool TrafficDirection_IsValid(int value);
constexpr TrafficDirection TrafficDirection_MIN = static_cast<TrafficDirection>(0);
constexpr TrafficDirection TrafficDirection_MAX = static_cast<TrafficDirection>(2);
constexpr int TrafficDirection_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TrafficDirection_descriptor();
template <typename T>
const std::string& TrafficDirection_Name(T value) {
  static_assert(std::is_same<T, TrafficDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrafficDirection_Name().");
  return TrafficDirection_Name(static_cast<TrafficDirection>(value));
}
template <>
inline const std::string& TrafficDirection_Name(TrafficDirection value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TrafficDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TrafficDirection_Parse(absl::string_view name, TrafficDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficDirection>(
      TrafficDirection_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class NetworkPacketEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NetworkPacketEvent) */ {
 public:
  inline NetworkPacketEvent() : NetworkPacketEvent(nullptr) {}
  ~NetworkPacketEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkPacketEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkPacketEvent(const NetworkPacketEvent& from);
  NetworkPacketEvent(NetworkPacketEvent&& from) noexcept
    : NetworkPacketEvent() {
    *this = ::std::move(from);
  }

  inline NetworkPacketEvent& operator=(const NetworkPacketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPacketEvent& operator=(NetworkPacketEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkPacketEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkPacketEvent* internal_default_instance() {
    return reinterpret_cast<const NetworkPacketEvent*>(
               &_NetworkPacketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkPacketEvent& a, NetworkPacketEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkPacketEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPacketEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPacketEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkPacketEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkPacketEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkPacketEvent& from) {
    NetworkPacketEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPacketEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NetworkPacketEvent";
  }
  protected:
  explicit NetworkPacketEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 2,
    kDirectionFieldNumber = 1,
    kLengthFieldNumber = 3,
    kUidFieldNumber = 4,
    kTagFieldNumber = 5,
    kIpProtoFieldNumber = 6,
    kTcpFlagsFieldNumber = 7,
    kLocalPortFieldNumber = 8,
    kRemotePortFieldNumber = 9,
  };
  // optional string interface = 2;
  bool has_interface() const;
  void clear_interface() ;
  const std::string& interface() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interface(Arg_&& arg, Args_... args);
  std::string* mutable_interface();
  PROTOBUF_NODISCARD std::string* release_interface();
  void set_allocated_interface(std::string* ptr);

  private:
  const std::string& _internal_interface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface(
      const std::string& value);
  std::string* _internal_mutable_interface();

  public:
  // optional .perfetto.protos.TrafficDirection direction = 1;
  bool has_direction() const;
  void clear_direction() ;
  ::perfetto::protos::TrafficDirection direction() const;
  void set_direction(::perfetto::protos::TrafficDirection value);

  private:
  ::perfetto::protos::TrafficDirection _internal_direction() const;
  void _internal_set_direction(::perfetto::protos::TrafficDirection value);

  public:
  // optional uint32 length = 3;
  bool has_length() const;
  void clear_length() ;
  ::uint32_t length() const;
  void set_length(::uint32_t value);

  private:
  ::uint32_t _internal_length() const;
  void _internal_set_length(::uint32_t value);

  public:
  // optional uint32 uid = 4;
  bool has_uid() const;
  void clear_uid() ;
  ::uint32_t uid() const;
  void set_uid(::uint32_t value);

  private:
  ::uint32_t _internal_uid() const;
  void _internal_set_uid(::uint32_t value);

  public:
  // optional uint32 tag = 5;
  bool has_tag() const;
  void clear_tag() ;
  ::uint32_t tag() const;
  void set_tag(::uint32_t value);

  private:
  ::uint32_t _internal_tag() const;
  void _internal_set_tag(::uint32_t value);

  public:
  // optional uint32 ip_proto = 6;
  bool has_ip_proto() const;
  void clear_ip_proto() ;
  ::uint32_t ip_proto() const;
  void set_ip_proto(::uint32_t value);

  private:
  ::uint32_t _internal_ip_proto() const;
  void _internal_set_ip_proto(::uint32_t value);

  public:
  // optional uint32 tcp_flags = 7;
  bool has_tcp_flags() const;
  void clear_tcp_flags() ;
  ::uint32_t tcp_flags() const;
  void set_tcp_flags(::uint32_t value);

  private:
  ::uint32_t _internal_tcp_flags() const;
  void _internal_set_tcp_flags(::uint32_t value);

  public:
  // optional uint32 local_port = 8;
  bool has_local_port() const;
  void clear_local_port() ;
  ::uint32_t local_port() const;
  void set_local_port(::uint32_t value);

  private:
  ::uint32_t _internal_local_port() const;
  void _internal_set_local_port(::uint32_t value);

  public:
  // optional uint32 remote_port = 9;
  bool has_remote_port() const;
  void clear_remote_port() ;
  ::uint32_t remote_port() const;
  void set_remote_port(::uint32_t value);

  private:
  ::uint32_t _internal_remote_port() const;
  void _internal_set_remote_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.NetworkPacketEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_;
    int direction_;
    ::uint32_t length_;
    ::uint32_t uid_;
    ::uint32_t tag_;
    ::uint32_t ip_proto_;
    ::uint32_t tcp_flags_;
    ::uint32_t local_port_;
    ::uint32_t remote_port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto;
};// -------------------------------------------------------------------

class NetworkPacketBundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NetworkPacketBundle) */ {
 public:
  inline NetworkPacketBundle() : NetworkPacketBundle(nullptr) {}
  ~NetworkPacketBundle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkPacketBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkPacketBundle(const NetworkPacketBundle& from);
  NetworkPacketBundle(NetworkPacketBundle&& from) noexcept
    : NetworkPacketBundle() {
    *this = ::std::move(from);
  }

  inline NetworkPacketBundle& operator=(const NetworkPacketBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPacketBundle& operator=(NetworkPacketBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkPacketBundle& default_instance() {
    return *internal_default_instance();
  }
  enum PacketContextCase {
    kIid = 1,
    kCtx = 2,
    PACKET_CONTEXT_NOT_SET = 0,
  };

  static inline const NetworkPacketBundle* internal_default_instance() {
    return reinterpret_cast<const NetworkPacketBundle*>(
               &_NetworkPacketBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkPacketBundle& a, NetworkPacketBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkPacketBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPacketBundle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPacketBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkPacketBundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkPacketBundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkPacketBundle& from) {
    NetworkPacketBundle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPacketBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NetworkPacketBundle";
  }
  protected:
  explicit NetworkPacketBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketTimestampsFieldNumber = 3,
    kPacketLengthsFieldNumber = 4,
    kTotalDurationFieldNumber = 6,
    kTotalLengthFieldNumber = 7,
    kTotalPacketsFieldNumber = 5,
    kIidFieldNumber = 1,
    kCtxFieldNumber = 2,
  };
  // repeated uint64 packet_timestamps = 3 [packed = true];
  int packet_timestamps_size() const;
  private:
  int _internal_packet_timestamps_size() const;

  public:
  void clear_packet_timestamps() ;
  ::uint64_t packet_timestamps(int index) const;
  void set_packet_timestamps(int index, ::uint64_t value);
  void add_packet_timestamps(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& packet_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_packet_timestamps();

  private:
  ::uint64_t _internal_packet_timestamps(int index) const;
  void _internal_add_packet_timestamps(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_packet_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_packet_timestamps();

  public:
  // repeated uint32 packet_lengths = 4 [packed = true];
  int packet_lengths_size() const;
  private:
  int _internal_packet_lengths_size() const;

  public:
  void clear_packet_lengths() ;
  ::uint32_t packet_lengths(int index) const;
  void set_packet_lengths(int index, ::uint32_t value);
  void add_packet_lengths(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& packet_lengths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_packet_lengths();

  private:
  ::uint32_t _internal_packet_lengths(int index) const;
  void _internal_add_packet_lengths(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_packet_lengths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_packet_lengths();

  public:
  // optional uint64 total_duration = 6;
  bool has_total_duration() const;
  void clear_total_duration() ;
  ::uint64_t total_duration() const;
  void set_total_duration(::uint64_t value);

  private:
  ::uint64_t _internal_total_duration() const;
  void _internal_set_total_duration(::uint64_t value);

  public:
  // optional uint64 total_length = 7;
  bool has_total_length() const;
  void clear_total_length() ;
  ::uint64_t total_length() const;
  void set_total_length(::uint64_t value);

  private:
  ::uint64_t _internal_total_length() const;
  void _internal_set_total_length(::uint64_t value);

  public:
  // optional uint32 total_packets = 5;
  bool has_total_packets() const;
  void clear_total_packets() ;
  ::uint32_t total_packets() const;
  void set_total_packets(::uint32_t value);

  private:
  ::uint32_t _internal_total_packets() const;
  void _internal_set_total_packets(::uint32_t value);

  public:
  // uint64 iid = 1;
  bool has_iid() const;
  void clear_iid() ;
  ::uint64_t iid() const;
  void set_iid(::uint64_t value);

  private:
  ::uint64_t _internal_iid() const;
  void _internal_set_iid(::uint64_t value);

  public:
  // .perfetto.protos.NetworkPacketEvent ctx = 2;
  bool has_ctx() const;
  private:
  bool _internal_has_ctx() const;

  public:
  void clear_ctx() ;
  const ::perfetto::protos::NetworkPacketEvent& ctx() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetworkPacketEvent* release_ctx();
  ::perfetto::protos::NetworkPacketEvent* mutable_ctx();
  void set_allocated_ctx(::perfetto::protos::NetworkPacketEvent* ctx);
  private:
  const ::perfetto::protos::NetworkPacketEvent& _internal_ctx() const;
  ::perfetto::protos::NetworkPacketEvent* _internal_mutable_ctx();
  public:
  void unsafe_arena_set_allocated_ctx(
      ::perfetto::protos::NetworkPacketEvent* ctx);
  ::perfetto::protos::NetworkPacketEvent* unsafe_arena_release_ctx();
  void clear_packet_context();
  PacketContextCase packet_context_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.NetworkPacketBundle)
 private:
  class _Internal;
  void set_has_iid();
  void set_has_ctx();

  inline bool has_packet_context() const;
  inline void clear_has_packet_context();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> packet_timestamps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _packet_timestamps_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> packet_lengths_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _packet_lengths_cached_byte_size_;
    ::uint64_t total_duration_;
    ::uint64_t total_length_;
    ::uint32_t total_packets_;
    union PacketContextUnion {
      constexpr PacketContextUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint64_t iid_;
      ::perfetto::protos::NetworkPacketEvent* ctx_;
    } packet_context_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto;
};// -------------------------------------------------------------------

class NetworkPacketContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.NetworkPacketContext) */ {
 public:
  inline NetworkPacketContext() : NetworkPacketContext(nullptr) {}
  ~NetworkPacketContext() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetworkPacketContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkPacketContext(const NetworkPacketContext& from);
  NetworkPacketContext(NetworkPacketContext&& from) noexcept
    : NetworkPacketContext() {
    *this = ::std::move(from);
  }

  inline NetworkPacketContext& operator=(const NetworkPacketContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkPacketContext& operator=(NetworkPacketContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkPacketContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkPacketContext* internal_default_instance() {
    return reinterpret_cast<const NetworkPacketContext*>(
               &_NetworkPacketContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkPacketContext& a, NetworkPacketContext& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkPacketContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkPacketContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkPacketContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkPacketContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkPacketContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkPacketContext& from) {
    NetworkPacketContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPacketContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.NetworkPacketContext";
  }
  protected:
  explicit NetworkPacketContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtxFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional .perfetto.protos.NetworkPacketEvent ctx = 2;
  bool has_ctx() const;
  void clear_ctx() ;
  const ::perfetto::protos::NetworkPacketEvent& ctx() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetworkPacketEvent* release_ctx();
  ::perfetto::protos::NetworkPacketEvent* mutable_ctx();
  void set_allocated_ctx(::perfetto::protos::NetworkPacketEvent* ctx);
  private:
  const ::perfetto::protos::NetworkPacketEvent& _internal_ctx() const;
  ::perfetto::protos::NetworkPacketEvent* _internal_mutable_ctx();
  public:
  void unsafe_arena_set_allocated_ctx(
      ::perfetto::protos::NetworkPacketEvent* ctx);
  ::perfetto::protos::NetworkPacketEvent* unsafe_arena_release_ctx();
  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid() ;
  ::uint64_t iid() const;
  void set_iid(::uint64_t value);

  private:
  ::uint64_t _internal_iid() const;
  void _internal_set_iid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.NetworkPacketContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::NetworkPacketEvent* ctx_;
    ::uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NetworkPacketEvent

// optional .perfetto.protos.TrafficDirection direction = 1;
inline bool NetworkPacketEvent::has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_direction() {
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::TrafficDirection NetworkPacketEvent::direction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.direction)
  return _internal_direction();
}
inline void NetworkPacketEvent::set_direction(::perfetto::protos::TrafficDirection value) {
   _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.direction)
}
inline ::perfetto::protos::TrafficDirection NetworkPacketEvent::_internal_direction() const {
  return static_cast<::perfetto::protos::TrafficDirection>(_impl_.direction_);
}
inline void NetworkPacketEvent::_internal_set_direction(::perfetto::protos::TrafficDirection value) {
  assert(::perfetto::protos::TrafficDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.direction_ = value;
}

// optional string interface = 2;
inline bool NetworkPacketEvent::has_interface() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_interface() {
  _impl_.interface_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkPacketEvent::interface() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.interface)
  return _internal_interface();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetworkPacketEvent::set_interface(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.interface_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.interface)
}
inline std::string* NetworkPacketEvent::mutable_interface() {
  std::string* _s = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NetworkPacketEvent.interface)
  return _s;
}
inline const std::string& NetworkPacketEvent::_internal_interface() const {
  return _impl_.interface_.Get();
}
inline void NetworkPacketEvent::_internal_set_interface(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.interface_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkPacketEvent::_internal_mutable_interface() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.interface_.Mutable( GetArenaForAllocation());
}
inline std::string* NetworkPacketEvent::release_interface() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NetworkPacketEvent.interface)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.interface_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interface_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NetworkPacketEvent::set_allocated_interface(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interface_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.interface_.IsDefault()) {
          _impl_.interface_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NetworkPacketEvent.interface)
}

// optional uint32 length = 3;
inline bool NetworkPacketEvent::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t NetworkPacketEvent::length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.length)
  return _internal_length();
}
inline void NetworkPacketEvent::set_length(::uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.length)
}
inline ::uint32_t NetworkPacketEvent::_internal_length() const {
  return _impl_.length_;
}
inline void NetworkPacketEvent::_internal_set_length(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}

// optional uint32 uid = 4;
inline bool NetworkPacketEvent::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_uid() {
  _impl_.uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t NetworkPacketEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.uid)
  return _internal_uid();
}
inline void NetworkPacketEvent::set_uid(::uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.uid)
}
inline ::uint32_t NetworkPacketEvent::_internal_uid() const {
  return _impl_.uid_;
}
inline void NetworkPacketEvent::_internal_set_uid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uid_ = value;
}

// optional uint32 tag = 5;
inline bool NetworkPacketEvent::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_tag() {
  _impl_.tag_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t NetworkPacketEvent::tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.tag)
  return _internal_tag();
}
inline void NetworkPacketEvent::set_tag(::uint32_t value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.tag)
}
inline ::uint32_t NetworkPacketEvent::_internal_tag() const {
  return _impl_.tag_;
}
inline void NetworkPacketEvent::_internal_set_tag(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tag_ = value;
}

// optional uint32 ip_proto = 6;
inline bool NetworkPacketEvent::has_ip_proto() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_ip_proto() {
  _impl_.ip_proto_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t NetworkPacketEvent::ip_proto() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.ip_proto)
  return _internal_ip_proto();
}
inline void NetworkPacketEvent::set_ip_proto(::uint32_t value) {
  _internal_set_ip_proto(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.ip_proto)
}
inline ::uint32_t NetworkPacketEvent::_internal_ip_proto() const {
  return _impl_.ip_proto_;
}
inline void NetworkPacketEvent::_internal_set_ip_proto(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ip_proto_ = value;
}

// optional uint32 tcp_flags = 7;
inline bool NetworkPacketEvent::has_tcp_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_tcp_flags() {
  _impl_.tcp_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t NetworkPacketEvent::tcp_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.tcp_flags)
  return _internal_tcp_flags();
}
inline void NetworkPacketEvent::set_tcp_flags(::uint32_t value) {
  _internal_set_tcp_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.tcp_flags)
}
inline ::uint32_t NetworkPacketEvent::_internal_tcp_flags() const {
  return _impl_.tcp_flags_;
}
inline void NetworkPacketEvent::_internal_set_tcp_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.tcp_flags_ = value;
}

// optional uint32 local_port = 8;
inline bool NetworkPacketEvent::has_local_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_local_port() {
  _impl_.local_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t NetworkPacketEvent::local_port() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.local_port)
  return _internal_local_port();
}
inline void NetworkPacketEvent::set_local_port(::uint32_t value) {
  _internal_set_local_port(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.local_port)
}
inline ::uint32_t NetworkPacketEvent::_internal_local_port() const {
  return _impl_.local_port_;
}
inline void NetworkPacketEvent::_internal_set_local_port(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.local_port_ = value;
}

// optional uint32 remote_port = 9;
inline bool NetworkPacketEvent::has_remote_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void NetworkPacketEvent::clear_remote_port() {
  _impl_.remote_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t NetworkPacketEvent::remote_port() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketEvent.remote_port)
  return _internal_remote_port();
}
inline void NetworkPacketEvent::set_remote_port(::uint32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketEvent.remote_port)
}
inline ::uint32_t NetworkPacketEvent::_internal_remote_port() const {
  return _impl_.remote_port_;
}
inline void NetworkPacketEvent::_internal_set_remote_port(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.remote_port_ = value;
}

// -------------------------------------------------------------------

// NetworkPacketBundle

// uint64 iid = 1;
inline bool NetworkPacketBundle::has_iid() const {
  return packet_context_case() == kIid;
}
inline void NetworkPacketBundle::set_has_iid() {
  _impl_._oneof_case_[0] = kIid;
}
inline void NetworkPacketBundle::clear_iid() {
  if (packet_context_case() == kIid) {
    _impl_.packet_context_.iid_ = ::uint64_t{0u};
    clear_has_packet_context();
  }
}
inline ::uint64_t NetworkPacketBundle::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.iid)
  return _internal_iid();
}
inline void NetworkPacketBundle::set_iid(::uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketBundle.iid)
}
inline ::uint64_t NetworkPacketBundle::_internal_iid() const {
  if (packet_context_case() == kIid) {
    return _impl_.packet_context_.iid_;
  }
  return ::uint64_t{0u};
}
inline void NetworkPacketBundle::_internal_set_iid(::uint64_t value) {
  if (packet_context_case() != kIid) {
    clear_packet_context();
    set_has_iid();
  }
  _impl_.packet_context_.iid_ = value;
}

// .perfetto.protos.NetworkPacketEvent ctx = 2;
inline bool NetworkPacketBundle::has_ctx() const {
  return packet_context_case() == kCtx;
}
inline bool NetworkPacketBundle::_internal_has_ctx() const {
  return packet_context_case() == kCtx;
}
inline void NetworkPacketBundle::set_has_ctx() {
  _impl_._oneof_case_[0] = kCtx;
}
inline void NetworkPacketBundle::clear_ctx() {
  if (packet_context_case() == kCtx) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.packet_context_.ctx_;
    }
    clear_has_packet_context();
  }
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketBundle::release_ctx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NetworkPacketBundle.ctx)
  if (packet_context_case() == kCtx) {
    clear_has_packet_context();
    ::perfetto::protos::NetworkPacketEvent* temp = _impl_.packet_context_.ctx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.packet_context_.ctx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NetworkPacketEvent& NetworkPacketBundle::_internal_ctx() const {
  return packet_context_case() == kCtx
      ? *_impl_.packet_context_.ctx_
      : reinterpret_cast<::perfetto::protos::NetworkPacketEvent&>(::perfetto::protos::_NetworkPacketEvent_default_instance_);
}
inline const ::perfetto::protos::NetworkPacketEvent& NetworkPacketBundle::ctx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.ctx)
  return _internal_ctx();
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketBundle::unsafe_arena_release_ctx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.NetworkPacketBundle.ctx)
  if (packet_context_case() == kCtx) {
    clear_has_packet_context();
    ::perfetto::protos::NetworkPacketEvent* temp = _impl_.packet_context_.ctx_;
    _impl_.packet_context_.ctx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NetworkPacketBundle::unsafe_arena_set_allocated_ctx(::perfetto::protos::NetworkPacketEvent* ctx) {
  clear_packet_context();
  if (ctx) {
    set_has_ctx();
    _impl_.packet_context_.ctx_ = ctx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.NetworkPacketBundle.ctx)
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketBundle::_internal_mutable_ctx() {
  if (packet_context_case() != kCtx) {
    clear_packet_context();
    set_has_ctx();
    _impl_.packet_context_.ctx_ = CreateMaybeMessage< ::perfetto::protos::NetworkPacketEvent >(GetArenaForAllocation());
  }
  return _impl_.packet_context_.ctx_;
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketBundle::mutable_ctx() {
  ::perfetto::protos::NetworkPacketEvent* _msg = _internal_mutable_ctx();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NetworkPacketBundle.ctx)
  return _msg;
}

// repeated uint64 packet_timestamps = 3 [packed = true];
inline int NetworkPacketBundle::_internal_packet_timestamps_size() const {
  return _impl_.packet_timestamps_.size();
}
inline int NetworkPacketBundle::packet_timestamps_size() const {
  return _internal_packet_timestamps_size();
}
inline void NetworkPacketBundle::clear_packet_timestamps() {
  _internal_mutable_packet_timestamps()->Clear();
}
inline ::uint64_t NetworkPacketBundle::packet_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.packet_timestamps)
  return _internal_packet_timestamps(index);
}
inline void NetworkPacketBundle::set_packet_timestamps(int index, ::uint64_t value) {
  _internal_mutable_packet_timestamps()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketBundle.packet_timestamps)
}
inline void NetworkPacketBundle::add_packet_timestamps(::uint64_t value) {
  _internal_add_packet_timestamps(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.NetworkPacketBundle.packet_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& NetworkPacketBundle::packet_timestamps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.NetworkPacketBundle.packet_timestamps)
  return _internal_packet_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* NetworkPacketBundle::mutable_packet_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.NetworkPacketBundle.packet_timestamps)
  return _internal_mutable_packet_timestamps();
}

inline ::uint64_t NetworkPacketBundle::_internal_packet_timestamps(int index) const {
  return _internal_packet_timestamps().Get(index);
}
inline void NetworkPacketBundle::_internal_add_packet_timestamps(::uint64_t value) {
  _internal_mutable_packet_timestamps()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& NetworkPacketBundle::_internal_packet_timestamps() const {
  return _impl_.packet_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* NetworkPacketBundle::_internal_mutable_packet_timestamps() {
  return &_impl_.packet_timestamps_;
}

// repeated uint32 packet_lengths = 4 [packed = true];
inline int NetworkPacketBundle::_internal_packet_lengths_size() const {
  return _impl_.packet_lengths_.size();
}
inline int NetworkPacketBundle::packet_lengths_size() const {
  return _internal_packet_lengths_size();
}
inline void NetworkPacketBundle::clear_packet_lengths() {
  _internal_mutable_packet_lengths()->Clear();
}
inline ::uint32_t NetworkPacketBundle::packet_lengths(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.packet_lengths)
  return _internal_packet_lengths(index);
}
inline void NetworkPacketBundle::set_packet_lengths(int index, ::uint32_t value) {
  _internal_mutable_packet_lengths()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketBundle.packet_lengths)
}
inline void NetworkPacketBundle::add_packet_lengths(::uint32_t value) {
  _internal_add_packet_lengths(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.NetworkPacketBundle.packet_lengths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& NetworkPacketBundle::packet_lengths() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.NetworkPacketBundle.packet_lengths)
  return _internal_packet_lengths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* NetworkPacketBundle::mutable_packet_lengths() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.NetworkPacketBundle.packet_lengths)
  return _internal_mutable_packet_lengths();
}

inline ::uint32_t NetworkPacketBundle::_internal_packet_lengths(int index) const {
  return _internal_packet_lengths().Get(index);
}
inline void NetworkPacketBundle::_internal_add_packet_lengths(::uint32_t value) {
  _internal_mutable_packet_lengths()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& NetworkPacketBundle::_internal_packet_lengths() const {
  return _impl_.packet_lengths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* NetworkPacketBundle::_internal_mutable_packet_lengths() {
  return &_impl_.packet_lengths_;
}

// optional uint32 total_packets = 5;
inline bool NetworkPacketBundle::has_total_packets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetworkPacketBundle::clear_total_packets() {
  _impl_.total_packets_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t NetworkPacketBundle::total_packets() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.total_packets)
  return _internal_total_packets();
}
inline void NetworkPacketBundle::set_total_packets(::uint32_t value) {
  _internal_set_total_packets(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketBundle.total_packets)
}
inline ::uint32_t NetworkPacketBundle::_internal_total_packets() const {
  return _impl_.total_packets_;
}
inline void NetworkPacketBundle::_internal_set_total_packets(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.total_packets_ = value;
}

// optional uint64 total_duration = 6;
inline bool NetworkPacketBundle::has_total_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetworkPacketBundle::clear_total_duration() {
  _impl_.total_duration_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t NetworkPacketBundle::total_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.total_duration)
  return _internal_total_duration();
}
inline void NetworkPacketBundle::set_total_duration(::uint64_t value) {
  _internal_set_total_duration(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketBundle.total_duration)
}
inline ::uint64_t NetworkPacketBundle::_internal_total_duration() const {
  return _impl_.total_duration_;
}
inline void NetworkPacketBundle::_internal_set_total_duration(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.total_duration_ = value;
}

// optional uint64 total_length = 7;
inline bool NetworkPacketBundle::has_total_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetworkPacketBundle::clear_total_length() {
  _impl_.total_length_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t NetworkPacketBundle::total_length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketBundle.total_length)
  return _internal_total_length();
}
inline void NetworkPacketBundle::set_total_length(::uint64_t value) {
  _internal_set_total_length(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketBundle.total_length)
}
inline ::uint64_t NetworkPacketBundle::_internal_total_length() const {
  return _impl_.total_length_;
}
inline void NetworkPacketBundle::_internal_set_total_length(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.total_length_ = value;
}

inline bool NetworkPacketBundle::has_packet_context() const {
  return packet_context_case() != PACKET_CONTEXT_NOT_SET;
}
inline void NetworkPacketBundle::clear_has_packet_context() {
  _impl_._oneof_case_[0] = PACKET_CONTEXT_NOT_SET;
}
inline NetworkPacketBundle::PacketContextCase NetworkPacketBundle::packet_context_case() const {
  return NetworkPacketBundle::PacketContextCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NetworkPacketContext

// optional uint64 iid = 1;
inline bool NetworkPacketContext::has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetworkPacketContext::clear_iid() {
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t NetworkPacketContext::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketContext.iid)
  return _internal_iid();
}
inline void NetworkPacketContext::set_iid(::uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.NetworkPacketContext.iid)
}
inline ::uint64_t NetworkPacketContext::_internal_iid() const {
  return _impl_.iid_;
}
inline void NetworkPacketContext::_internal_set_iid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}

// optional .perfetto.protos.NetworkPacketEvent ctx = 2;
inline bool NetworkPacketContext::has_ctx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ctx_ != nullptr);
  return value;
}
inline void NetworkPacketContext::clear_ctx() {
  if (_impl_.ctx_ != nullptr) _impl_.ctx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::NetworkPacketEvent& NetworkPacketContext::_internal_ctx() const {
  const ::perfetto::protos::NetworkPacketEvent* p = _impl_.ctx_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::NetworkPacketEvent&>(
      ::perfetto::protos::_NetworkPacketEvent_default_instance_);
}
inline const ::perfetto::protos::NetworkPacketEvent& NetworkPacketContext::ctx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.NetworkPacketContext.ctx)
  return _internal_ctx();
}
inline void NetworkPacketContext::unsafe_arena_set_allocated_ctx(
    ::perfetto::protos::NetworkPacketEvent* ctx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctx_);
  }
  _impl_.ctx_ = ctx;
  if (ctx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.NetworkPacketContext.ctx)
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketContext::release_ctx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::NetworkPacketEvent* temp = _impl_.ctx_;
  _impl_.ctx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketContext::unsafe_arena_release_ctx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.NetworkPacketContext.ctx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::NetworkPacketEvent* temp = _impl_.ctx_;
  _impl_.ctx_ = nullptr;
  return temp;
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketContext::_internal_mutable_ctx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::NetworkPacketEvent>(GetArenaForAllocation());
    _impl_.ctx_ = p;
  }
  return _impl_.ctx_;
}
inline ::perfetto::protos::NetworkPacketEvent* NetworkPacketContext::mutable_ctx() {
  ::perfetto::protos::NetworkPacketEvent* _msg = _internal_mutable_ctx();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.NetworkPacketContext.ctx)
  return _msg;
}
inline void NetworkPacketContext::set_allocated_ctx(::perfetto::protos::NetworkPacketEvent* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ctx_;
  }
  if (ctx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ctx);
    if (message_arena != submessage_arena) {
      ctx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ctx_ = ctx;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.NetworkPacketContext.ctx)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::TrafficDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TrafficDirection>() {
  return ::perfetto::protos::TrafficDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto_2epb_2eh
