// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/trace_packet.proto

#include "protos/perfetto/trace/trace_packet.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TracePacket::TracePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interned_data_)*/nullptr
  , /*decltype(_impl_.trace_packet_defaults_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sequence_flags_)*/ 0u

  , /*decltype(_impl_.incremental_state_cleared_)*/ false

  , /*decltype(_impl_.previous_packet_dropped_)*/ false

  , /*decltype(_impl_.first_packet_on_sequence_)*/ false

  , /*decltype(_impl_.timestamp_clock_id_)*/ 0u

  , /*decltype(_impl_.trusted_pid_)*/ 0

  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.optional_trusted_uid_)*/{}
  , /*decltype(_impl_.optional_trusted_packet_sequence_id_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TracePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracePacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracePacketDefaultTypeInternal() {}
  union {
    TracePacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracePacketDefaultTypeInternal _TracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.timestamp_clock_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.trusted_pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.interned_data_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.sequence_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.incremental_state_cleared_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.trace_packet_defaults_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.previous_packet_dropped_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.first_packet_on_sequence_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.optional_trusted_uid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_.optional_trusted_packet_sequence_id_),
    2,
    7,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    8,
    0,
    3,
    4,
    1,
    5,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 84, -1, sizeof(::perfetto::protos::TracePacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TracePacket_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(protos/perfetto/trace/trace_packet.pro"
    "to\022\017perfetto.protos\032(protos/perfetto/com"
    "mon/trace_stats.proto\032)protos/perfetto/c"
    "onfig/trace_config.proto\0320protos/perfett"
    "o/trace/extension_descriptor.proto\032Bprot"
    "os/perfetto/trace/android/android_game_i"
    "ntervention_list.proto\032/protos/perfetto/"
    "trace/android/android_log.proto\032;protos/"
    "perfetto/trace/android/android_system_pr"
    "operty.proto\0320protos/perfetto/trace/andr"
    "oid/camera_event.proto\0328protos/perfetto/"
    "trace/android/frame_timeline_event.proto"
    "\0321protos/perfetto/trace/android/gpu_mem_"
    "event.proto\0328protos/perfetto/trace/andro"
    "id/graphics_frame_event.proto\0329protos/pe"
    "rfetto/trace/android/initial_display_sta"
    "te.proto\0321protos/perfetto/trace/android/"
    "network_trace.proto\0321protos/perfetto/tra"
    "ce/android/packages_list.proto\032<protos/p"
    "erfetto/trace/chrome/chrome_benchmark_me"
    "tadata.proto\0322protos/perfetto/trace/chro"
    "me/chrome_metadata.proto\0325protos/perfett"
    "o/trace/chrome/chrome_trace_event.proto\032"
    "*protos/perfetto/trace/clock_snapshot.pr"
    "oto\0325protos/perfetto/trace/filesystem/in"
    "ode_file_map.proto\0326protos/perfetto/trac"
    "e/ftrace/ftrace_event_bundle.proto\032/prot"
    "os/perfetto/trace/ftrace/ftrace_stats.pr"
    "oto\0321protos/perfetto/trace/gpu/gpu_count"
    "er_event.proto\032\'protos/perfetto/trace/gp"
    "u/gpu_log.proto\0326protos/perfetto/trace/g"
    "pu/gpu_render_stage_event.proto\0323protos/"
    "perfetto/trace/gpu/vulkan_memory_event.p"
    "roto\0320protos/perfetto/trace/gpu/vulkan_a"
    "pi_event.proto\0327protos/perfetto/trace/in"
    "terned_data/interned_data.proto\032(protos/"
    "perfetto/trace/memory_graph.proto\0327proto"
    "s/perfetto/trace/perfetto/perfetto_metat"
    "race.proto\032:protos/perfetto/trace/perfet"
    "to/tracing_service_event.proto\032Eprotos/p"
    "erfetto/trace/power/android_energy_estim"
    "ation_breakdown.proto\032@protos/perfetto/t"
    "race/power/android_entity_state_residenc"
    "y.proto\0322protos/perfetto/trace/power/bat"
    "tery_counters.proto\032-protos/perfetto/tra"
    "ce/power/power_rails.proto\032.protos/perfe"
    "tto/trace/statsd/statsd_atom.proto\0323prot"
    "os/perfetto/trace/profiling/deobfuscatio"
    "n.proto\0320protos/perfetto/trace/profiling"
    "/heap_graph.proto\0324protos/perfetto/trace"
    "/profiling/profile_common.proto\0324protos/"
    "perfetto/trace/profiling/profile_packet."
    "proto\032+protos/perfetto/trace/profiling/s"
    "maps.proto\032,protos/perfetto/trace/ps/pro"
    "cess_stats.proto\032+protos/perfetto/trace/"
    "ps/process_tree.proto\032/protos/perfetto/t"
    "race/sys_stats/sys_stats.proto\032\'protos/p"
    "erfetto/trace/system_info.proto\0320protos/"
    "perfetto/trace/system_info/cpu_info.prot"
    "o\0321protos/perfetto/trace/trace_packet_de"
    "faults.proto\032:protos/perfetto/trace/trac"
    "k_event/process_descriptor.proto\0329protos"
    "/perfetto/trace/track_event/range_of_int"
    "erest.proto\0329protos/perfetto/trace/track"
    "_event/thread_descriptor.proto\0328protos/p"
    "erfetto/trace/track_event/track_descript"
    "or.proto\0323protos/perfetto/trace/track_ev"
    "ent/track_event.proto\0329protos/perfetto/t"
    "race/translation/translation_table.proto"
    "\032&protos/perfetto/trace/trace_uuid.proto"
    "\032#protos/perfetto/trace/trigger.proto\032&p"
    "rotos/perfetto/trace/test_event.proto\032$p"
    "rotos/perfetto/trace/ui_state.proto\"\255\"\n\013"
    "TracePacket\022\021\n\ttimestamp\030\010 \001(\004\022\032\n\022timest"
    "amp_clock_id\030: \001(\r\0224\n\014process_tree\030\002 \001(\013"
    "2\034.perfetto.protos.ProcessTreeH\000\0226\n\rproc"
    "ess_stats\030\t \001(\0132\035.perfetto.protos.Proces"
    "sStatsH\000\0227\n\016inode_file_map\030\004 \001(\0132\035.perfe"
    "tto.protos.InodeFileMapH\000\022;\n\rchrome_even"
    "ts\030\005 \001(\0132\".perfetto.protos.ChromeEventBu"
    "ndleH\000\0228\n\016clock_snapshot\030\006 \001(\0132\036.perfett"
    "o.protos.ClockSnapshotH\000\022.\n\tsys_stats\030\007 "
    "\001(\0132\031.perfetto.protos.SysStatsH\000\0222\n\013trac"
    "k_event\030\013 \001(\0132\033.perfetto.protos.TrackEve"
    "ntH\000\0220\n\ntrace_uuid\030Y \001(\0132\032.perfetto.prot"
    "os.TraceUuidH\000\0224\n\014trace_config\030! \001(\0132\034.p"
    "erfetto.protos.TraceConfigH\000\0224\n\014ftrace_s"
    "tats\030\" \001(\0132\034.perfetto.protos.FtraceStats"
    "H\000\0222\n\013trace_stats\030# \001(\0132\033.perfetto.proto"
    "s.TraceStatsH\000\0228\n\016profile_packet\030% \001(\0132\036"
    ".perfetto.protos.ProfilePacketH\000\022D\n\024stre"
    "aming_allocation\030J \001(\0132$.perfetto.protos"
    ".StreamingAllocationH\000\0228\n\016streaming_free"
    "\030K \001(\0132\036.perfetto.protos.StreamingFreeH\000"
    "\0223\n\007battery\030& \001(\0132 .perfetto.protos.Batt"
    "eryCountersH\000\0222\n\013power_rails\030( \001(\0132\033.per"
    "fetto.protos.PowerRailsH\000\0228\n\013android_log"
    "\030\' \001(\0132!.perfetto.protos.AndroidLogPacke"
    "tH\000\0222\n\013system_info\030- \001(\0132\033.perfetto.prot"
    "os.SystemInfoH\000\022+\n\007trigger\030. \001(\0132\030.perfe"
    "tto.protos.TriggerH\000\0226\n\rpackages_list\030/ "
    "\001(\0132\035.perfetto.protos.PackagesListH\000\022M\n\031"
    "chrome_benchmark_metadata\0300 \001(\0132(.perfet"
    "to.protos.ChromeBenchmarkMetadataH\000\022@\n\022p"
    "erfetto_metatrace\0301 \001(\0132\".perfetto.proto"
    "s.PerfettoMetatraceH\000\022@\n\017chrome_metadata"
    "\0303 \001(\0132%.perfetto.protos.ChromeMetadataP"
    "acketH\000\022=\n\021gpu_counter_event\0304 \001(\0132 .per"
    "fetto.protos.GpuCounterEventH\000\022F\n\026gpu_re"
    "nder_stage_event\0305 \001(\0132$.perfetto.protos"
    ".GpuRenderStageEventH\000\022K\n\030streaming_prof"
    "ile_packet\0306 \001(\0132\'.perfetto.protos.Strea"
    "mingProfilePacketH\000\0220\n\nheap_graph\0308 \001(\0132"
    "\032.perfetto.protos.HeapGraphH\000\022C\n\024graphic"
    "s_frame_event\0309 \001(\0132#.perfetto.protos.Gr"
    "aphicsFrameEventH\000\022A\n\023vulkan_memory_even"
    "t\030> \001(\0132\".perfetto.protos.VulkanMemoryEv"
    "entH\000\022*\n\007gpu_log\030\? \001(\0132\027.perfetto.protos"
    ".GpuLogH\000\022;\n\020vulkan_api_event\030A \001(\0132\037.pe"
    "rfetto.protos.VulkanApiEventH\000\0222\n\013perf_s"
    "ample\030B \001(\0132\033.perfetto.protos.PerfSample"
    "H\000\022,\n\010cpu_info\030C \001(\0132\030.perfetto.protos.C"
    "puInfoH\000\0224\n\014smaps_packet\030D \001(\0132\034.perfett"
    "o.protos.SmapsPacketH\000\022=\n\rservice_event\030"
    "E \001(\0132$.perfetto.protos.TracingServiceEv"
    "entH\000\022E\n\025initial_display_state\030F \001(\0132$.p"
    "erfetto.protos.InitialDisplayStateH\000\022@\n\023"
    "gpu_mem_total_event\030G \001(\0132!.perfetto.pro"
    "tos.GpuMemTotalEventH\000\022I\n\027memory_tracker"
    "_snapshot\030I \001(\0132&.perfetto.protos.Memory"
    "TrackerSnapshotH\000\022C\n\024frame_timeline_even"
    "t\030L \001(\0132#.perfetto.protos.FrameTimelineE"
    "ventH\000\022`\n#android_energy_estimation_brea"
    "kdown\030M \001(\01321.perfetto.protos.AndroidEne"
    "rgyEstimationBreakdownH\000\022,\n\010ui_state\030N \001"
    "(\0132\030.perfetto.protos.UiStateH\000\022N\n\032androi"
    "d_camera_frame_event\030P \001(\0132(.perfetto.pr"
    "otos.AndroidCameraFrameEventH\000\022R\n\034androi"
    "d_camera_session_stats\030Q \001(\0132*.perfetto."
    "protos.AndroidCameraSessionStatsH\000\022>\n\021tr"
    "anslation_table\030R \001(\0132!.perfetto.protos."
    "TranslationTableH\000\022V\n\036android_game_inter"
    "vention_list\030S \001(\0132,.perfetto.protos.And"
    "roidGameInterventionListH\000\0222\n\013statsd_ato"
    "m\030T \001(\0132\033.perfetto.protos.StatsdAtomH\000\022I"
    "\n\027android_system_property\030V \001(\0132&.perfet"
    "to.protos.AndroidSystemPropertyH\000\022G\n\026ent"
    "ity_state_residency\030[ \001(\0132%.perfetto.pro"
    "tos.EntityStateResidencyH\000\022G\n\026profiled_f"
    "rame_symbols\0307 \001(\0132%.perfetto.protos.Pro"
    "filedFrameSymbolsH\000\0228\n\016module_symbols\030= "
    "\001(\0132\036.perfetto.protos.ModuleSymbolsH\000\022F\n"
    "\025deobfuscation_mapping\030@ \001(\0132%.perfetto."
    "protos.DeobfuscationMappingH\000\022<\n\020track_d"
    "escriptor\030< \001(\0132 .perfetto.protos.TrackD"
    "escriptorH\000\022@\n\022process_descriptor\030+ \001(\0132"
    "\".perfetto.protos.ProcessDescriptorH\000\022>\n"
    "\021thread_descriptor\030, \001(\0132!.perfetto.prot"
    "os.ThreadDescriptorH\000\022;\n\rftrace_events\030\001"
    " \001(\0132\".perfetto.protos.FtraceEventBundle"
    "H\000\022 \n\026synchronization_marker\030$ \001(\014H\000\022\034\n\022"
    "compressed_packets\0302 \001(\014H\000\022D\n\024extension_"
    "descriptor\030H \001(\0132$.perfetto.protos.Exten"
    "sionDescriptorH\000\022=\n\016network_packet\030X \001(\013"
    "2#.perfetto.protos.NetworkPacketEventH\000\022"
    "E\n\025network_packet_bundle\030\\ \001(\0132$.perfett"
    "o.protos.NetworkPacketBundleH\000\022S\n\035track_"
    "event_range_of_interest\030Z \001(\0132*.perfetto"
    ".protos.TrackEventRangeOfInterestH\000\0222\n\013f"
    "or_testing\030\204\007 \001(\0132\032.perfetto.protos.Test"
    "EventH\000\022\025\n\013trusted_uid\030\003 \001(\005H\001\022$\n\032truste"
    "d_packet_sequence_id\030\n \001(\rH\002\022\023\n\013trusted_"
    "pid\030O \001(\005\0224\n\rinterned_data\030\014 \001(\0132\035.perfe"
    "tto.protos.InternedData\022\026\n\016sequence_flag"
    "s\030\r \001(\r\022!\n\031incremental_state_cleared\030) \001"
    "(\010\022C\n\025trace_packet_defaults\030; \001(\0132$.perf"
    "etto.protos.TracePacketDefaults\022\037\n\027previ"
    "ous_packet_dropped\030* \001(\010\022 \n\030first_packet"
    "_on_sequence\030W \001(\010\"h\n\rSequenceFlags\022\023\n\017S"
    "EQ_UNSPECIFIED\020\000\022!\n\035SEQ_INCREMENTAL_STAT"
    "E_CLEARED\020\001\022\037\n\033SEQ_NEEDS_INCREMENTAL_STA"
    "TE\020\002B\006\n\004dataB\026\n\024optional_trusted_uidB%\n#"
    "optional_trusted_packet_sequence_id"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_deps[55] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto,
        &::descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5fgame_5fintervention_5flist_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5flog_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fandroid_5fsystem_5fproperty_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fcamera_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fframe_5ftimeline_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fgpu_5fmem_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fgraphics_5fframe_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2finitial_5fdisplay_5fstate_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fnetwork_5ftrace_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fandroid_2fpackages_5flist_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fclock_5fsnapshot_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fextension_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5frender_5fstage_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2finterned_5fdata_2finterned_5fdata_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fmemory_5fgraph_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2ftracing_5fservice_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fandroid_5fenergy_5festimation_5fbreakdown_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fandroid_5fentity_5fstate_5fresidency_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fbattery_5fcounters_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fdeobfuscation_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fstatsd_2fstatsd_5fatom_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fsystem_5finfo_2fcpu_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftest_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_5fdefaults_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fuuid_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2frange_5fof_5finterest_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrigger_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fui_5fstate_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto = {
    false,
    false,
    7315,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto,
    "protos/perfetto/trace/trace_packet.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_deps,
    55,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TracePacket_SequenceFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto[0];
}
bool TracePacket_SequenceFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TracePacket_SequenceFlags TracePacket::SEQ_UNSPECIFIED;
constexpr TracePacket_SequenceFlags TracePacket::SEQ_INCREMENTAL_STATE_CLEARED;
constexpr TracePacket_SequenceFlags TracePacket::SEQ_NEEDS_INCREMENTAL_STATE;
constexpr TracePacket_SequenceFlags TracePacket::SequenceFlags_MIN;
constexpr TracePacket_SequenceFlags TracePacket::SequenceFlags_MAX;
constexpr int TracePacket::SequenceFlags_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TracePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<TracePacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TracePacket, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TracePacket, _impl_._oneof_case_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp_clock_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::ProcessTree& process_tree(const TracePacket* msg);
  static const ::perfetto::protos::ProcessStats& process_stats(const TracePacket* msg);
  static const ::perfetto::protos::InodeFileMap& inode_file_map(const TracePacket* msg);
  static const ::perfetto::protos::ChromeEventBundle& chrome_events(const TracePacket* msg);
  static const ::perfetto::protos::ClockSnapshot& clock_snapshot(const TracePacket* msg);
  static const ::perfetto::protos::SysStats& sys_stats(const TracePacket* msg);
  static const ::perfetto::protos::TrackEvent& track_event(const TracePacket* msg);
  static const ::perfetto::protos::TraceUuid& trace_uuid(const TracePacket* msg);
  static const ::perfetto::protos::TraceConfig& trace_config(const TracePacket* msg);
  static const ::perfetto::protos::FtraceStats& ftrace_stats(const TracePacket* msg);
  static const ::perfetto::protos::TraceStats& trace_stats(const TracePacket* msg);
  static const ::perfetto::protos::ProfilePacket& profile_packet(const TracePacket* msg);
  static const ::perfetto::protos::StreamingAllocation& streaming_allocation(const TracePacket* msg);
  static const ::perfetto::protos::StreamingFree& streaming_free(const TracePacket* msg);
  static const ::perfetto::protos::BatteryCounters& battery(const TracePacket* msg);
  static const ::perfetto::protos::PowerRails& power_rails(const TracePacket* msg);
  static const ::perfetto::protos::AndroidLogPacket& android_log(const TracePacket* msg);
  static const ::perfetto::protos::SystemInfo& system_info(const TracePacket* msg);
  static const ::perfetto::protos::Trigger& trigger(const TracePacket* msg);
  static const ::perfetto::protos::PackagesList& packages_list(const TracePacket* msg);
  static const ::perfetto::protos::ChromeBenchmarkMetadata& chrome_benchmark_metadata(const TracePacket* msg);
  static const ::perfetto::protos::PerfettoMetatrace& perfetto_metatrace(const TracePacket* msg);
  static const ::perfetto::protos::ChromeMetadataPacket& chrome_metadata(const TracePacket* msg);
  static const ::perfetto::protos::GpuCounterEvent& gpu_counter_event(const TracePacket* msg);
  static const ::perfetto::protos::GpuRenderStageEvent& gpu_render_stage_event(const TracePacket* msg);
  static const ::perfetto::protos::StreamingProfilePacket& streaming_profile_packet(const TracePacket* msg);
  static const ::perfetto::protos::HeapGraph& heap_graph(const TracePacket* msg);
  static const ::perfetto::protos::GraphicsFrameEvent& graphics_frame_event(const TracePacket* msg);
  static const ::perfetto::protos::VulkanMemoryEvent& vulkan_memory_event(const TracePacket* msg);
  static const ::perfetto::protos::GpuLog& gpu_log(const TracePacket* msg);
  static const ::perfetto::protos::VulkanApiEvent& vulkan_api_event(const TracePacket* msg);
  static const ::perfetto::protos::PerfSample& perf_sample(const TracePacket* msg);
  static const ::perfetto::protos::CpuInfo& cpu_info(const TracePacket* msg);
  static const ::perfetto::protos::SmapsPacket& smaps_packet(const TracePacket* msg);
  static const ::perfetto::protos::TracingServiceEvent& service_event(const TracePacket* msg);
  static const ::perfetto::protos::InitialDisplayState& initial_display_state(const TracePacket* msg);
  static const ::perfetto::protos::GpuMemTotalEvent& gpu_mem_total_event(const TracePacket* msg);
  static const ::perfetto::protos::MemoryTrackerSnapshot& memory_tracker_snapshot(const TracePacket* msg);
  static const ::perfetto::protos::FrameTimelineEvent& frame_timeline_event(const TracePacket* msg);
  static const ::perfetto::protos::AndroidEnergyEstimationBreakdown& android_energy_estimation_breakdown(const TracePacket* msg);
  static const ::perfetto::protos::UiState& ui_state(const TracePacket* msg);
  static const ::perfetto::protos::AndroidCameraFrameEvent& android_camera_frame_event(const TracePacket* msg);
  static const ::perfetto::protos::AndroidCameraSessionStats& android_camera_session_stats(const TracePacket* msg);
  static const ::perfetto::protos::TranslationTable& translation_table(const TracePacket* msg);
  static const ::perfetto::protos::AndroidGameInterventionList& android_game_intervention_list(const TracePacket* msg);
  static const ::perfetto::protos::StatsdAtom& statsd_atom(const TracePacket* msg);
  static const ::perfetto::protos::AndroidSystemProperty& android_system_property(const TracePacket* msg);
  static const ::perfetto::protos::EntityStateResidency& entity_state_residency(const TracePacket* msg);
  static const ::perfetto::protos::ProfiledFrameSymbols& profiled_frame_symbols(const TracePacket* msg);
  static const ::perfetto::protos::ModuleSymbols& module_symbols(const TracePacket* msg);
  static const ::perfetto::protos::DeobfuscationMapping& deobfuscation_mapping(const TracePacket* msg);
  static const ::perfetto::protos::TrackDescriptor& track_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::ProcessDescriptor& process_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::ThreadDescriptor& thread_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::FtraceEventBundle& ftrace_events(const TracePacket* msg);
  static const ::perfetto::protos::ExtensionDescriptor& extension_descriptor(const TracePacket* msg);
  static const ::perfetto::protos::NetworkPacketEvent& network_packet(const TracePacket* msg);
  static const ::perfetto::protos::NetworkPacketBundle& network_packet_bundle(const TracePacket* msg);
  static const ::perfetto::protos::TrackEventRangeOfInterest& track_event_range_of_interest(const TracePacket* msg);
  static const ::perfetto::protos::TestEvent& for_testing(const TracePacket* msg);
  static void set_has_trusted_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::InternedData& interned_data(const TracePacket* msg);
  static void set_has_interned_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_incremental_state_cleared(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::TracePacketDefaults& trace_packet_defaults(const TracePacket* msg);
  static void set_has_trace_packet_defaults(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_previous_packet_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_first_packet_on_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::perfetto::protos::ProcessTree&
TracePacket::_Internal::process_tree(const TracePacket* msg) {
  return *msg->_impl_.data_.process_tree_;
}
const ::perfetto::protos::ProcessStats&
TracePacket::_Internal::process_stats(const TracePacket* msg) {
  return *msg->_impl_.data_.process_stats_;
}
const ::perfetto::protos::InodeFileMap&
TracePacket::_Internal::inode_file_map(const TracePacket* msg) {
  return *msg->_impl_.data_.inode_file_map_;
}
const ::perfetto::protos::ChromeEventBundle&
TracePacket::_Internal::chrome_events(const TracePacket* msg) {
  return *msg->_impl_.data_.chrome_events_;
}
const ::perfetto::protos::ClockSnapshot&
TracePacket::_Internal::clock_snapshot(const TracePacket* msg) {
  return *msg->_impl_.data_.clock_snapshot_;
}
const ::perfetto::protos::SysStats&
TracePacket::_Internal::sys_stats(const TracePacket* msg) {
  return *msg->_impl_.data_.sys_stats_;
}
const ::perfetto::protos::TrackEvent&
TracePacket::_Internal::track_event(const TracePacket* msg) {
  return *msg->_impl_.data_.track_event_;
}
const ::perfetto::protos::TraceUuid&
TracePacket::_Internal::trace_uuid(const TracePacket* msg) {
  return *msg->_impl_.data_.trace_uuid_;
}
const ::perfetto::protos::TraceConfig&
TracePacket::_Internal::trace_config(const TracePacket* msg) {
  return *msg->_impl_.data_.trace_config_;
}
const ::perfetto::protos::FtraceStats&
TracePacket::_Internal::ftrace_stats(const TracePacket* msg) {
  return *msg->_impl_.data_.ftrace_stats_;
}
const ::perfetto::protos::TraceStats&
TracePacket::_Internal::trace_stats(const TracePacket* msg) {
  return *msg->_impl_.data_.trace_stats_;
}
const ::perfetto::protos::ProfilePacket&
TracePacket::_Internal::profile_packet(const TracePacket* msg) {
  return *msg->_impl_.data_.profile_packet_;
}
const ::perfetto::protos::StreamingAllocation&
TracePacket::_Internal::streaming_allocation(const TracePacket* msg) {
  return *msg->_impl_.data_.streaming_allocation_;
}
const ::perfetto::protos::StreamingFree&
TracePacket::_Internal::streaming_free(const TracePacket* msg) {
  return *msg->_impl_.data_.streaming_free_;
}
const ::perfetto::protos::BatteryCounters&
TracePacket::_Internal::battery(const TracePacket* msg) {
  return *msg->_impl_.data_.battery_;
}
const ::perfetto::protos::PowerRails&
TracePacket::_Internal::power_rails(const TracePacket* msg) {
  return *msg->_impl_.data_.power_rails_;
}
const ::perfetto::protos::AndroidLogPacket&
TracePacket::_Internal::android_log(const TracePacket* msg) {
  return *msg->_impl_.data_.android_log_;
}
const ::perfetto::protos::SystemInfo&
TracePacket::_Internal::system_info(const TracePacket* msg) {
  return *msg->_impl_.data_.system_info_;
}
const ::perfetto::protos::Trigger&
TracePacket::_Internal::trigger(const TracePacket* msg) {
  return *msg->_impl_.data_.trigger_;
}
const ::perfetto::protos::PackagesList&
TracePacket::_Internal::packages_list(const TracePacket* msg) {
  return *msg->_impl_.data_.packages_list_;
}
const ::perfetto::protos::ChromeBenchmarkMetadata&
TracePacket::_Internal::chrome_benchmark_metadata(const TracePacket* msg) {
  return *msg->_impl_.data_.chrome_benchmark_metadata_;
}
const ::perfetto::protos::PerfettoMetatrace&
TracePacket::_Internal::perfetto_metatrace(const TracePacket* msg) {
  return *msg->_impl_.data_.perfetto_metatrace_;
}
const ::perfetto::protos::ChromeMetadataPacket&
TracePacket::_Internal::chrome_metadata(const TracePacket* msg) {
  return *msg->_impl_.data_.chrome_metadata_;
}
const ::perfetto::protos::GpuCounterEvent&
TracePacket::_Internal::gpu_counter_event(const TracePacket* msg) {
  return *msg->_impl_.data_.gpu_counter_event_;
}
const ::perfetto::protos::GpuRenderStageEvent&
TracePacket::_Internal::gpu_render_stage_event(const TracePacket* msg) {
  return *msg->_impl_.data_.gpu_render_stage_event_;
}
const ::perfetto::protos::StreamingProfilePacket&
TracePacket::_Internal::streaming_profile_packet(const TracePacket* msg) {
  return *msg->_impl_.data_.streaming_profile_packet_;
}
const ::perfetto::protos::HeapGraph&
TracePacket::_Internal::heap_graph(const TracePacket* msg) {
  return *msg->_impl_.data_.heap_graph_;
}
const ::perfetto::protos::GraphicsFrameEvent&
TracePacket::_Internal::graphics_frame_event(const TracePacket* msg) {
  return *msg->_impl_.data_.graphics_frame_event_;
}
const ::perfetto::protos::VulkanMemoryEvent&
TracePacket::_Internal::vulkan_memory_event(const TracePacket* msg) {
  return *msg->_impl_.data_.vulkan_memory_event_;
}
const ::perfetto::protos::GpuLog&
TracePacket::_Internal::gpu_log(const TracePacket* msg) {
  return *msg->_impl_.data_.gpu_log_;
}
const ::perfetto::protos::VulkanApiEvent&
TracePacket::_Internal::vulkan_api_event(const TracePacket* msg) {
  return *msg->_impl_.data_.vulkan_api_event_;
}
const ::perfetto::protos::PerfSample&
TracePacket::_Internal::perf_sample(const TracePacket* msg) {
  return *msg->_impl_.data_.perf_sample_;
}
const ::perfetto::protos::CpuInfo&
TracePacket::_Internal::cpu_info(const TracePacket* msg) {
  return *msg->_impl_.data_.cpu_info_;
}
const ::perfetto::protos::SmapsPacket&
TracePacket::_Internal::smaps_packet(const TracePacket* msg) {
  return *msg->_impl_.data_.smaps_packet_;
}
const ::perfetto::protos::TracingServiceEvent&
TracePacket::_Internal::service_event(const TracePacket* msg) {
  return *msg->_impl_.data_.service_event_;
}
const ::perfetto::protos::InitialDisplayState&
TracePacket::_Internal::initial_display_state(const TracePacket* msg) {
  return *msg->_impl_.data_.initial_display_state_;
}
const ::perfetto::protos::GpuMemTotalEvent&
TracePacket::_Internal::gpu_mem_total_event(const TracePacket* msg) {
  return *msg->_impl_.data_.gpu_mem_total_event_;
}
const ::perfetto::protos::MemoryTrackerSnapshot&
TracePacket::_Internal::memory_tracker_snapshot(const TracePacket* msg) {
  return *msg->_impl_.data_.memory_tracker_snapshot_;
}
const ::perfetto::protos::FrameTimelineEvent&
TracePacket::_Internal::frame_timeline_event(const TracePacket* msg) {
  return *msg->_impl_.data_.frame_timeline_event_;
}
const ::perfetto::protos::AndroidEnergyEstimationBreakdown&
TracePacket::_Internal::android_energy_estimation_breakdown(const TracePacket* msg) {
  return *msg->_impl_.data_.android_energy_estimation_breakdown_;
}
const ::perfetto::protos::UiState&
TracePacket::_Internal::ui_state(const TracePacket* msg) {
  return *msg->_impl_.data_.ui_state_;
}
const ::perfetto::protos::AndroidCameraFrameEvent&
TracePacket::_Internal::android_camera_frame_event(const TracePacket* msg) {
  return *msg->_impl_.data_.android_camera_frame_event_;
}
const ::perfetto::protos::AndroidCameraSessionStats&
TracePacket::_Internal::android_camera_session_stats(const TracePacket* msg) {
  return *msg->_impl_.data_.android_camera_session_stats_;
}
const ::perfetto::protos::TranslationTable&
TracePacket::_Internal::translation_table(const TracePacket* msg) {
  return *msg->_impl_.data_.translation_table_;
}
const ::perfetto::protos::AndroidGameInterventionList&
TracePacket::_Internal::android_game_intervention_list(const TracePacket* msg) {
  return *msg->_impl_.data_.android_game_intervention_list_;
}
const ::perfetto::protos::StatsdAtom&
TracePacket::_Internal::statsd_atom(const TracePacket* msg) {
  return *msg->_impl_.data_.statsd_atom_;
}
const ::perfetto::protos::AndroidSystemProperty&
TracePacket::_Internal::android_system_property(const TracePacket* msg) {
  return *msg->_impl_.data_.android_system_property_;
}
const ::perfetto::protos::EntityStateResidency&
TracePacket::_Internal::entity_state_residency(const TracePacket* msg) {
  return *msg->_impl_.data_.entity_state_residency_;
}
const ::perfetto::protos::ProfiledFrameSymbols&
TracePacket::_Internal::profiled_frame_symbols(const TracePacket* msg) {
  return *msg->_impl_.data_.profiled_frame_symbols_;
}
const ::perfetto::protos::ModuleSymbols&
TracePacket::_Internal::module_symbols(const TracePacket* msg) {
  return *msg->_impl_.data_.module_symbols_;
}
const ::perfetto::protos::DeobfuscationMapping&
TracePacket::_Internal::deobfuscation_mapping(const TracePacket* msg) {
  return *msg->_impl_.data_.deobfuscation_mapping_;
}
const ::perfetto::protos::TrackDescriptor&
TracePacket::_Internal::track_descriptor(const TracePacket* msg) {
  return *msg->_impl_.data_.track_descriptor_;
}
const ::perfetto::protos::ProcessDescriptor&
TracePacket::_Internal::process_descriptor(const TracePacket* msg) {
  return *msg->_impl_.data_.process_descriptor_;
}
const ::perfetto::protos::ThreadDescriptor&
TracePacket::_Internal::thread_descriptor(const TracePacket* msg) {
  return *msg->_impl_.data_.thread_descriptor_;
}
const ::perfetto::protos::FtraceEventBundle&
TracePacket::_Internal::ftrace_events(const TracePacket* msg) {
  return *msg->_impl_.data_.ftrace_events_;
}
const ::perfetto::protos::ExtensionDescriptor&
TracePacket::_Internal::extension_descriptor(const TracePacket* msg) {
  return *msg->_impl_.data_.extension_descriptor_;
}
const ::perfetto::protos::NetworkPacketEvent&
TracePacket::_Internal::network_packet(const TracePacket* msg) {
  return *msg->_impl_.data_.network_packet_;
}
const ::perfetto::protos::NetworkPacketBundle&
TracePacket::_Internal::network_packet_bundle(const TracePacket* msg) {
  return *msg->_impl_.data_.network_packet_bundle_;
}
const ::perfetto::protos::TrackEventRangeOfInterest&
TracePacket::_Internal::track_event_range_of_interest(const TracePacket* msg) {
  return *msg->_impl_.data_.track_event_range_of_interest_;
}
const ::perfetto::protos::TestEvent&
TracePacket::_Internal::for_testing(const TracePacket* msg) {
  return *msg->_impl_.data_.for_testing_;
}
const ::perfetto::protos::InternedData&
TracePacket::_Internal::interned_data(const TracePacket* msg) {
  return *msg->_impl_.interned_data_;
}
const ::perfetto::protos::TracePacketDefaults&
TracePacket::_Internal::trace_packet_defaults(const TracePacket* msg) {
  return *msg->_impl_.trace_packet_defaults_;
}
void TracePacket::set_allocated_process_tree(::perfetto::protos::ProcessTree* process_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (process_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_tree));
    if (message_arena != submessage_arena) {
      process_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_tree, submessage_arena);
    }
    set_has_process_tree();
    _impl_.data_.process_tree_ = process_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.process_tree)
}
void TracePacket::clear_process_tree() {
  if (data_case() == kProcessTree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.process_tree_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_process_stats(::perfetto::protos::ProcessStats* process_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (process_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_stats));
    if (message_arena != submessage_arena) {
      process_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_stats, submessage_arena);
    }
    set_has_process_stats();
    _impl_.data_.process_stats_ = process_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.process_stats)
}
void TracePacket::clear_process_stats() {
  if (data_case() == kProcessStats) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.process_stats_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_inode_file_map(::perfetto::protos::InodeFileMap* inode_file_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (inode_file_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inode_file_map));
    if (message_arena != submessage_arena) {
      inode_file_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inode_file_map, submessage_arena);
    }
    set_has_inode_file_map();
    _impl_.data_.inode_file_map_ = inode_file_map;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.inode_file_map)
}
void TracePacket::clear_inode_file_map() {
  if (data_case() == kInodeFileMap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.inode_file_map_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (chrome_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_events));
    if (message_arena != submessage_arena) {
      chrome_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_events, submessage_arena);
    }
    set_has_chrome_events();
    _impl_.data_.chrome_events_ = chrome_events;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.chrome_events)
}
void TracePacket::clear_chrome_events() {
  if (data_case() == kChromeEvents) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.chrome_events_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (clock_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_snapshot));
    if (message_arena != submessage_arena) {
      clock_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_snapshot, submessage_arena);
    }
    set_has_clock_snapshot();
    _impl_.data_.clock_snapshot_ = clock_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.clock_snapshot)
}
void TracePacket::clear_clock_snapshot() {
  if (data_case() == kClockSnapshot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.clock_snapshot_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_sys_stats(::perfetto::protos::SysStats* sys_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (sys_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_stats));
    if (message_arena != submessage_arena) {
      sys_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_stats, submessage_arena);
    }
    set_has_sys_stats();
    _impl_.data_.sys_stats_ = sys_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.sys_stats)
}
void TracePacket::clear_sys_stats() {
  if (data_case() == kSysStats) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.sys_stats_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_track_event(::perfetto::protos::TrackEvent* track_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (track_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event));
    if (message_arena != submessage_arena) {
      track_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event, submessage_arena);
    }
    set_has_track_event();
    _impl_.data_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.track_event)
}
void TracePacket::clear_track_event() {
  if (data_case() == kTrackEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.track_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_trace_uuid(::perfetto::protos::TraceUuid* trace_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (trace_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_uuid));
    if (message_arena != submessage_arena) {
      trace_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_uuid, submessage_arena);
    }
    set_has_trace_uuid();
    _impl_.data_.trace_uuid_ = trace_uuid;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_uuid)
}
void TracePacket::clear_trace_uuid() {
  if (data_case() == kTraceUuid) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.trace_uuid_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (trace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_config));
    if (message_arena != submessage_arena) {
      trace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_config, submessage_arena);
    }
    set_has_trace_config();
    _impl_.data_.trace_config_ = trace_config;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_config)
}
void TracePacket::clear_trace_config() {
  if (data_case() == kTraceConfig) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.trace_config_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_ftrace_stats(::perfetto::protos::FtraceStats* ftrace_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (ftrace_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ftrace_stats));
    if (message_arena != submessage_arena) {
      ftrace_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftrace_stats, submessage_arena);
    }
    set_has_ftrace_stats();
    _impl_.data_.ftrace_stats_ = ftrace_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.ftrace_stats)
}
void TracePacket::clear_ftrace_stats() {
  if (data_case() == kFtraceStats) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.ftrace_stats_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (trace_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_stats));
    if (message_arena != submessage_arena) {
      trace_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_stats, submessage_arena);
    }
    set_has_trace_stats();
    _impl_.data_.trace_stats_ = trace_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_stats)
}
void TracePacket::clear_trace_stats() {
  if (data_case() == kTraceStats) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.trace_stats_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_profile_packet(::perfetto::protos::ProfilePacket* profile_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (profile_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_packet));
    if (message_arena != submessage_arena) {
      profile_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_packet, submessage_arena);
    }
    set_has_profile_packet();
    _impl_.data_.profile_packet_ = profile_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.profile_packet)
}
void TracePacket::clear_profile_packet() {
  if (data_case() == kProfilePacket) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.profile_packet_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_streaming_allocation(::perfetto::protos::StreamingAllocation* streaming_allocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (streaming_allocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_allocation));
    if (message_arena != submessage_arena) {
      streaming_allocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_allocation, submessage_arena);
    }
    set_has_streaming_allocation();
    _impl_.data_.streaming_allocation_ = streaming_allocation;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.streaming_allocation)
}
void TracePacket::clear_streaming_allocation() {
  if (data_case() == kStreamingAllocation) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.streaming_allocation_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_streaming_free(::perfetto::protos::StreamingFree* streaming_free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (streaming_free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_free));
    if (message_arena != submessage_arena) {
      streaming_free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_free, submessage_arena);
    }
    set_has_streaming_free();
    _impl_.data_.streaming_free_ = streaming_free;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.streaming_free)
}
void TracePacket::clear_streaming_free() {
  if (data_case() == kStreamingFree) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.streaming_free_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_battery(::perfetto::protos::BatteryCounters* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery));
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    set_has_battery();
    _impl_.data_.battery_ = battery;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.battery)
}
void TracePacket::clear_battery() {
  if (data_case() == kBattery) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.battery_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_power_rails(::perfetto::protos::PowerRails* power_rails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (power_rails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_rails));
    if (message_arena != submessage_arena) {
      power_rails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_rails, submessage_arena);
    }
    set_has_power_rails();
    _impl_.data_.power_rails_ = power_rails;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.power_rails)
}
void TracePacket::clear_power_rails() {
  if (data_case() == kPowerRails) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.power_rails_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_log(::perfetto::protos::AndroidLogPacket* android_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (android_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_log));
    if (message_arena != submessage_arena) {
      android_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_log, submessage_arena);
    }
    set_has_android_log();
    _impl_.data_.android_log_ = android_log;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_log)
}
void TracePacket::clear_android_log() {
  if (data_case() == kAndroidLog) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.android_log_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_system_info(::perfetto::protos::SystemInfo* system_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (system_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_info));
    if (message_arena != submessage_arena) {
      system_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_info, submessage_arena);
    }
    set_has_system_info();
    _impl_.data_.system_info_ = system_info;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.system_info)
}
void TracePacket::clear_system_info() {
  if (data_case() == kSystemInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.system_info_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_trigger(::perfetto::protos::Trigger* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger));
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    set_has_trigger();
    _impl_.data_.trigger_ = trigger;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trigger)
}
void TracePacket::clear_trigger() {
  if (data_case() == kTrigger) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.trigger_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_packages_list(::perfetto::protos::PackagesList* packages_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (packages_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packages_list));
    if (message_arena != submessage_arena) {
      packages_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packages_list, submessage_arena);
    }
    set_has_packages_list();
    _impl_.data_.packages_list_ = packages_list;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.packages_list)
}
void TracePacket::clear_packages_list() {
  if (data_case() == kPackagesList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.packages_list_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_chrome_benchmark_metadata(::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (chrome_benchmark_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_benchmark_metadata));
    if (message_arena != submessage_arena) {
      chrome_benchmark_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_benchmark_metadata, submessage_arena);
    }
    set_has_chrome_benchmark_metadata();
    _impl_.data_.chrome_benchmark_metadata_ = chrome_benchmark_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.chrome_benchmark_metadata)
}
void TracePacket::clear_chrome_benchmark_metadata() {
  if (data_case() == kChromeBenchmarkMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.chrome_benchmark_metadata_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_perfetto_metatrace(::perfetto::protos::PerfettoMetatrace* perfetto_metatrace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (perfetto_metatrace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perfetto_metatrace));
    if (message_arena != submessage_arena) {
      perfetto_metatrace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perfetto_metatrace, submessage_arena);
    }
    set_has_perfetto_metatrace();
    _impl_.data_.perfetto_metatrace_ = perfetto_metatrace;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.perfetto_metatrace)
}
void TracePacket::clear_perfetto_metatrace() {
  if (data_case() == kPerfettoMetatrace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.perfetto_metatrace_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_chrome_metadata(::perfetto::protos::ChromeMetadataPacket* chrome_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (chrome_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_metadata));
    if (message_arena != submessage_arena) {
      chrome_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_metadata, submessage_arena);
    }
    set_has_chrome_metadata();
    _impl_.data_.chrome_metadata_ = chrome_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.chrome_metadata)
}
void TracePacket::clear_chrome_metadata() {
  if (data_case() == kChromeMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.chrome_metadata_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_counter_event(::perfetto::protos::GpuCounterEvent* gpu_counter_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gpu_counter_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_counter_event));
    if (message_arena != submessage_arena) {
      gpu_counter_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_counter_event, submessage_arena);
    }
    set_has_gpu_counter_event();
    _impl_.data_.gpu_counter_event_ = gpu_counter_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_counter_event)
}
void TracePacket::clear_gpu_counter_event() {
  if (data_case() == kGpuCounterEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.gpu_counter_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_render_stage_event(::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gpu_render_stage_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_render_stage_event));
    if (message_arena != submessage_arena) {
      gpu_render_stage_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_render_stage_event, submessage_arena);
    }
    set_has_gpu_render_stage_event();
    _impl_.data_.gpu_render_stage_event_ = gpu_render_stage_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_render_stage_event)
}
void TracePacket::clear_gpu_render_stage_event() {
  if (data_case() == kGpuRenderStageEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.gpu_render_stage_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (streaming_profile_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_profile_packet));
    if (message_arena != submessage_arena) {
      streaming_profile_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_profile_packet, submessage_arena);
    }
    set_has_streaming_profile_packet();
    _impl_.data_.streaming_profile_packet_ = streaming_profile_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.streaming_profile_packet)
}
void TracePacket::clear_streaming_profile_packet() {
  if (data_case() == kStreamingProfilePacket) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.streaming_profile_packet_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_heap_graph(::perfetto::protos::HeapGraph* heap_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (heap_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heap_graph));
    if (message_arena != submessage_arena) {
      heap_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heap_graph, submessage_arena);
    }
    set_has_heap_graph();
    _impl_.data_.heap_graph_ = heap_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.heap_graph)
}
void TracePacket::clear_heap_graph() {
  if (data_case() == kHeapGraph) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.heap_graph_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_graphics_frame_event(::perfetto::protos::GraphicsFrameEvent* graphics_frame_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (graphics_frame_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graphics_frame_event));
    if (message_arena != submessage_arena) {
      graphics_frame_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graphics_frame_event, submessage_arena);
    }
    set_has_graphics_frame_event();
    _impl_.data_.graphics_frame_event_ = graphics_frame_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.graphics_frame_event)
}
void TracePacket::clear_graphics_frame_event() {
  if (data_case() == kGraphicsFrameEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.graphics_frame_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_vulkan_memory_event(::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (vulkan_memory_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vulkan_memory_event));
    if (message_arena != submessage_arena) {
      vulkan_memory_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vulkan_memory_event, submessage_arena);
    }
    set_has_vulkan_memory_event();
    _impl_.data_.vulkan_memory_event_ = vulkan_memory_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.vulkan_memory_event)
}
void TracePacket::clear_vulkan_memory_event() {
  if (data_case() == kVulkanMemoryEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.vulkan_memory_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_log(::perfetto::protos::GpuLog* gpu_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gpu_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_log));
    if (message_arena != submessage_arena) {
      gpu_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_log, submessage_arena);
    }
    set_has_gpu_log();
    _impl_.data_.gpu_log_ = gpu_log;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_log)
}
void TracePacket::clear_gpu_log() {
  if (data_case() == kGpuLog) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.gpu_log_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_vulkan_api_event(::perfetto::protos::VulkanApiEvent* vulkan_api_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (vulkan_api_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vulkan_api_event));
    if (message_arena != submessage_arena) {
      vulkan_api_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vulkan_api_event, submessage_arena);
    }
    set_has_vulkan_api_event();
    _impl_.data_.vulkan_api_event_ = vulkan_api_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.vulkan_api_event)
}
void TracePacket::clear_vulkan_api_event() {
  if (data_case() == kVulkanApiEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.vulkan_api_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_perf_sample(::perfetto::protos::PerfSample* perf_sample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (perf_sample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perf_sample));
    if (message_arena != submessage_arena) {
      perf_sample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_sample, submessage_arena);
    }
    set_has_perf_sample();
    _impl_.data_.perf_sample_ = perf_sample;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.perf_sample)
}
void TracePacket::clear_perf_sample() {
  if (data_case() == kPerfSample) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.perf_sample_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_cpu_info(::perfetto::protos::CpuInfo* cpu_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (cpu_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_info));
    if (message_arena != submessage_arena) {
      cpu_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu_info, submessage_arena);
    }
    set_has_cpu_info();
    _impl_.data_.cpu_info_ = cpu_info;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.cpu_info)
}
void TracePacket::clear_cpu_info() {
  if (data_case() == kCpuInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.cpu_info_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_smaps_packet(::perfetto::protos::SmapsPacket* smaps_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (smaps_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smaps_packet));
    if (message_arena != submessage_arena) {
      smaps_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smaps_packet, submessage_arena);
    }
    set_has_smaps_packet();
    _impl_.data_.smaps_packet_ = smaps_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.smaps_packet)
}
void TracePacket::clear_smaps_packet() {
  if (data_case() == kSmapsPacket) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.smaps_packet_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_service_event(::perfetto::protos::TracingServiceEvent* service_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (service_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_event));
    if (message_arena != submessage_arena) {
      service_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_event, submessage_arena);
    }
    set_has_service_event();
    _impl_.data_.service_event_ = service_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.service_event)
}
void TracePacket::clear_service_event() {
  if (data_case() == kServiceEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.service_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_initial_display_state(::perfetto::protos::InitialDisplayState* initial_display_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (initial_display_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_display_state));
    if (message_arena != submessage_arena) {
      initial_display_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_display_state, submessage_arena);
    }
    set_has_initial_display_state();
    _impl_.data_.initial_display_state_ = initial_display_state;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.initial_display_state)
}
void TracePacket::clear_initial_display_state() {
  if (data_case() == kInitialDisplayState) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.initial_display_state_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_gpu_mem_total_event(::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gpu_mem_total_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_mem_total_event));
    if (message_arena != submessage_arena) {
      gpu_mem_total_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_mem_total_event, submessage_arena);
    }
    set_has_gpu_mem_total_event();
    _impl_.data_.gpu_mem_total_event_ = gpu_mem_total_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.gpu_mem_total_event)
}
void TracePacket::clear_gpu_mem_total_event() {
  if (data_case() == kGpuMemTotalEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.gpu_mem_total_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_memory_tracker_snapshot(::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (memory_tracker_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_tracker_snapshot));
    if (message_arena != submessage_arena) {
      memory_tracker_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_tracker_snapshot, submessage_arena);
    }
    set_has_memory_tracker_snapshot();
    _impl_.data_.memory_tracker_snapshot_ = memory_tracker_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.memory_tracker_snapshot)
}
void TracePacket::clear_memory_tracker_snapshot() {
  if (data_case() == kMemoryTrackerSnapshot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.memory_tracker_snapshot_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_frame_timeline_event(::perfetto::protos::FrameTimelineEvent* frame_timeline_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (frame_timeline_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_timeline_event));
    if (message_arena != submessage_arena) {
      frame_timeline_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_timeline_event, submessage_arena);
    }
    set_has_frame_timeline_event();
    _impl_.data_.frame_timeline_event_ = frame_timeline_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.frame_timeline_event)
}
void TracePacket::clear_frame_timeline_event() {
  if (data_case() == kFrameTimelineEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.frame_timeline_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_energy_estimation_breakdown(::perfetto::protos::AndroidEnergyEstimationBreakdown* android_energy_estimation_breakdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (android_energy_estimation_breakdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_energy_estimation_breakdown));
    if (message_arena != submessage_arena) {
      android_energy_estimation_breakdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_energy_estimation_breakdown, submessage_arena);
    }
    set_has_android_energy_estimation_breakdown();
    _impl_.data_.android_energy_estimation_breakdown_ = android_energy_estimation_breakdown;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_energy_estimation_breakdown)
}
void TracePacket::clear_android_energy_estimation_breakdown() {
  if (data_case() == kAndroidEnergyEstimationBreakdown) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.android_energy_estimation_breakdown_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_ui_state(::perfetto::protos::UiState* ui_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (ui_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ui_state));
    if (message_arena != submessage_arena) {
      ui_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ui_state, submessage_arena);
    }
    set_has_ui_state();
    _impl_.data_.ui_state_ = ui_state;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.ui_state)
}
void TracePacket::clear_ui_state() {
  if (data_case() == kUiState) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.ui_state_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_camera_frame_event(::perfetto::protos::AndroidCameraFrameEvent* android_camera_frame_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (android_camera_frame_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_camera_frame_event));
    if (message_arena != submessage_arena) {
      android_camera_frame_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_camera_frame_event, submessage_arena);
    }
    set_has_android_camera_frame_event();
    _impl_.data_.android_camera_frame_event_ = android_camera_frame_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_camera_frame_event)
}
void TracePacket::clear_android_camera_frame_event() {
  if (data_case() == kAndroidCameraFrameEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.android_camera_frame_event_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_camera_session_stats(::perfetto::protos::AndroidCameraSessionStats* android_camera_session_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (android_camera_session_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_camera_session_stats));
    if (message_arena != submessage_arena) {
      android_camera_session_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_camera_session_stats, submessage_arena);
    }
    set_has_android_camera_session_stats();
    _impl_.data_.android_camera_session_stats_ = android_camera_session_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_camera_session_stats)
}
void TracePacket::clear_android_camera_session_stats() {
  if (data_case() == kAndroidCameraSessionStats) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.android_camera_session_stats_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_translation_table(::perfetto::protos::TranslationTable* translation_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (translation_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_table));
    if (message_arena != submessage_arena) {
      translation_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation_table, submessage_arena);
    }
    set_has_translation_table();
    _impl_.data_.translation_table_ = translation_table;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.translation_table)
}
void TracePacket::clear_translation_table() {
  if (data_case() == kTranslationTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.translation_table_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_game_intervention_list(::perfetto::protos::AndroidGameInterventionList* android_game_intervention_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (android_game_intervention_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_game_intervention_list));
    if (message_arena != submessage_arena) {
      android_game_intervention_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_game_intervention_list, submessage_arena);
    }
    set_has_android_game_intervention_list();
    _impl_.data_.android_game_intervention_list_ = android_game_intervention_list;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_game_intervention_list)
}
void TracePacket::clear_android_game_intervention_list() {
  if (data_case() == kAndroidGameInterventionList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.android_game_intervention_list_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_statsd_atom(::perfetto::protos::StatsdAtom* statsd_atom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (statsd_atom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statsd_atom));
    if (message_arena != submessage_arena) {
      statsd_atom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statsd_atom, submessage_arena);
    }
    set_has_statsd_atom();
    _impl_.data_.statsd_atom_ = statsd_atom;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.statsd_atom)
}
void TracePacket::clear_statsd_atom() {
  if (data_case() == kStatsdAtom) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.statsd_atom_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_android_system_property(::perfetto::protos::AndroidSystemProperty* android_system_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (android_system_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_system_property));
    if (message_arena != submessage_arena) {
      android_system_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_system_property, submessage_arena);
    }
    set_has_android_system_property();
    _impl_.data_.android_system_property_ = android_system_property;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.android_system_property)
}
void TracePacket::clear_android_system_property() {
  if (data_case() == kAndroidSystemProperty) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.android_system_property_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_entity_state_residency(::perfetto::protos::EntityStateResidency* entity_state_residency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (entity_state_residency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_state_residency));
    if (message_arena != submessage_arena) {
      entity_state_residency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_state_residency, submessage_arena);
    }
    set_has_entity_state_residency();
    _impl_.data_.entity_state_residency_ = entity_state_residency;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.entity_state_residency)
}
void TracePacket::clear_entity_state_residency() {
  if (data_case() == kEntityStateResidency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.entity_state_residency_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (profiled_frame_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profiled_frame_symbols));
    if (message_arena != submessage_arena) {
      profiled_frame_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profiled_frame_symbols, submessage_arena);
    }
    set_has_profiled_frame_symbols();
    _impl_.data_.profiled_frame_symbols_ = profiled_frame_symbols;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.profiled_frame_symbols)
}
void TracePacket::clear_profiled_frame_symbols() {
  if (data_case() == kProfiledFrameSymbols) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.profiled_frame_symbols_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_module_symbols(::perfetto::protos::ModuleSymbols* module_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (module_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(module_symbols));
    if (message_arena != submessage_arena) {
      module_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, module_symbols, submessage_arena);
    }
    set_has_module_symbols();
    _impl_.data_.module_symbols_ = module_symbols;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.module_symbols)
}
void TracePacket::clear_module_symbols() {
  if (data_case() == kModuleSymbols) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.module_symbols_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_deobfuscation_mapping(::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (deobfuscation_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deobfuscation_mapping));
    if (message_arena != submessage_arena) {
      deobfuscation_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deobfuscation_mapping, submessage_arena);
    }
    set_has_deobfuscation_mapping();
    _impl_.data_.deobfuscation_mapping_ = deobfuscation_mapping;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.deobfuscation_mapping)
}
void TracePacket::clear_deobfuscation_mapping() {
  if (data_case() == kDeobfuscationMapping) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.deobfuscation_mapping_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_track_descriptor(::perfetto::protos::TrackDescriptor* track_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (track_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_descriptor));
    if (message_arena != submessage_arena) {
      track_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_descriptor, submessage_arena);
    }
    set_has_track_descriptor();
    _impl_.data_.track_descriptor_ = track_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.track_descriptor)
}
void TracePacket::clear_track_descriptor() {
  if (data_case() == kTrackDescriptor) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.track_descriptor_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (process_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_descriptor));
    if (message_arena != submessage_arena) {
      process_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_descriptor, submessage_arena);
    }
    set_has_process_descriptor();
    _impl_.data_.process_descriptor_ = process_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.process_descriptor)
}
void TracePacket::clear_process_descriptor() {
  if (data_case() == kProcessDescriptor) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.process_descriptor_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (thread_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_descriptor));
    if (message_arena != submessage_arena) {
      thread_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread_descriptor, submessage_arena);
    }
    set_has_thread_descriptor();
    _impl_.data_.thread_descriptor_ = thread_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.thread_descriptor)
}
void TracePacket::clear_thread_descriptor() {
  if (data_case() == kThreadDescriptor) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.thread_descriptor_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_ftrace_events(::perfetto::protos::FtraceEventBundle* ftrace_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (ftrace_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ftrace_events));
    if (message_arena != submessage_arena) {
      ftrace_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ftrace_events, submessage_arena);
    }
    set_has_ftrace_events();
    _impl_.data_.ftrace_events_ = ftrace_events;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.ftrace_events)
}
void TracePacket::clear_ftrace_events() {
  if (data_case() == kFtraceEvents) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.ftrace_events_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_extension_descriptor(::perfetto::protos::ExtensionDescriptor* extension_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (extension_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_descriptor));
    if (message_arena != submessage_arena) {
      extension_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_descriptor, submessage_arena);
    }
    set_has_extension_descriptor();
    _impl_.data_.extension_descriptor_ = extension_descriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.extension_descriptor)
}
void TracePacket::clear_extension_descriptor() {
  if (data_case() == kExtensionDescriptor) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.extension_descriptor_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_network_packet(::perfetto::protos::NetworkPacketEvent* network_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (network_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_packet));
    if (message_arena != submessage_arena) {
      network_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_packet, submessage_arena);
    }
    set_has_network_packet();
    _impl_.data_.network_packet_ = network_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.network_packet)
}
void TracePacket::clear_network_packet() {
  if (data_case() == kNetworkPacket) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.network_packet_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_network_packet_bundle(::perfetto::protos::NetworkPacketBundle* network_packet_bundle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (network_packet_bundle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_packet_bundle));
    if (message_arena != submessage_arena) {
      network_packet_bundle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_packet_bundle, submessage_arena);
    }
    set_has_network_packet_bundle();
    _impl_.data_.network_packet_bundle_ = network_packet_bundle;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.network_packet_bundle)
}
void TracePacket::clear_network_packet_bundle() {
  if (data_case() == kNetworkPacketBundle) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.network_packet_bundle_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_track_event_range_of_interest(::perfetto::protos::TrackEventRangeOfInterest* track_event_range_of_interest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (track_event_range_of_interest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event_range_of_interest));
    if (message_arena != submessage_arena) {
      track_event_range_of_interest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event_range_of_interest, submessage_arena);
    }
    set_has_track_event_range_of_interest();
    _impl_.data_.track_event_range_of_interest_ = track_event_range_of_interest;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.track_event_range_of_interest)
}
void TracePacket::clear_track_event_range_of_interest() {
  if (data_case() == kTrackEventRangeOfInterest) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.track_event_range_of_interest_;
    }
    clear_has_data();
  }
}
void TracePacket::set_allocated_for_testing(::perfetto::protos::TestEvent* for_testing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (for_testing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(for_testing));
    if (message_arena != submessage_arena) {
      for_testing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, for_testing, submessage_arena);
    }
    set_has_for_testing();
    _impl_.data_.for_testing_ = for_testing;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.for_testing)
}
void TracePacket::clear_for_testing() {
  if (data_case() == kForTesting) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.for_testing_;
    }
    clear_has_data();
  }
}
void TracePacket::clear_interned_data() {
  if (_impl_.interned_data_ != nullptr) _impl_.interned_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TracePacket::clear_trace_packet_defaults() {
  if (_impl_.trace_packet_defaults_ != nullptr) _impl_.trace_packet_defaults_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TracePacket::TracePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracePacket)
}
TracePacket::TracePacket(const TracePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TracePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interned_data_){nullptr}
    , decltype(_impl_.trace_packet_defaults_){nullptr}
    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.sequence_flags_) {}

    , decltype(_impl_.incremental_state_cleared_) {}

    , decltype(_impl_.previous_packet_dropped_) {}

    , decltype(_impl_.first_packet_on_sequence_) {}

    , decltype(_impl_.timestamp_clock_id_) {}

    , decltype(_impl_.trusted_pid_) {}

    , decltype(_impl_.data_){}
    , decltype(_impl_.optional_trusted_uid_){}
    , decltype(_impl_.optional_trusted_packet_sequence_id_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.interned_data_ = new ::perfetto::protos::InternedData(*from._impl_.interned_data_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.trace_packet_defaults_ = new ::perfetto::protos::TracePacketDefaults(*from._impl_.trace_packet_defaults_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.trusted_pid_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.trusted_pid_));
  clear_has_data();
  switch (from.data_case()) {
    case kProcessTree: {
      _this->_internal_mutable_process_tree()->::perfetto::protos::ProcessTree::MergeFrom(
          from._internal_process_tree());
      break;
    }
    case kProcessStats: {
      _this->_internal_mutable_process_stats()->::perfetto::protos::ProcessStats::MergeFrom(
          from._internal_process_stats());
      break;
    }
    case kInodeFileMap: {
      _this->_internal_mutable_inode_file_map()->::perfetto::protos::InodeFileMap::MergeFrom(
          from._internal_inode_file_map());
      break;
    }
    case kChromeEvents: {
      _this->_internal_mutable_chrome_events()->::perfetto::protos::ChromeEventBundle::MergeFrom(
          from._internal_chrome_events());
      break;
    }
    case kClockSnapshot: {
      _this->_internal_mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(
          from._internal_clock_snapshot());
      break;
    }
    case kSysStats: {
      _this->_internal_mutable_sys_stats()->::perfetto::protos::SysStats::MergeFrom(
          from._internal_sys_stats());
      break;
    }
    case kTrackEvent: {
      _this->_internal_mutable_track_event()->::perfetto::protos::TrackEvent::MergeFrom(
          from._internal_track_event());
      break;
    }
    case kTraceUuid: {
      _this->_internal_mutable_trace_uuid()->::perfetto::protos::TraceUuid::MergeFrom(
          from._internal_trace_uuid());
      break;
    }
    case kTraceConfig: {
      _this->_internal_mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(
          from._internal_trace_config());
      break;
    }
    case kFtraceStats: {
      _this->_internal_mutable_ftrace_stats()->::perfetto::protos::FtraceStats::MergeFrom(
          from._internal_ftrace_stats());
      break;
    }
    case kTraceStats: {
      _this->_internal_mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(
          from._internal_trace_stats());
      break;
    }
    case kProfilePacket: {
      _this->_internal_mutable_profile_packet()->::perfetto::protos::ProfilePacket::MergeFrom(
          from._internal_profile_packet());
      break;
    }
    case kStreamingAllocation: {
      _this->_internal_mutable_streaming_allocation()->::perfetto::protos::StreamingAllocation::MergeFrom(
          from._internal_streaming_allocation());
      break;
    }
    case kStreamingFree: {
      _this->_internal_mutable_streaming_free()->::perfetto::protos::StreamingFree::MergeFrom(
          from._internal_streaming_free());
      break;
    }
    case kBattery: {
      _this->_internal_mutable_battery()->::perfetto::protos::BatteryCounters::MergeFrom(
          from._internal_battery());
      break;
    }
    case kPowerRails: {
      _this->_internal_mutable_power_rails()->::perfetto::protos::PowerRails::MergeFrom(
          from._internal_power_rails());
      break;
    }
    case kAndroidLog: {
      _this->_internal_mutable_android_log()->::perfetto::protos::AndroidLogPacket::MergeFrom(
          from._internal_android_log());
      break;
    }
    case kSystemInfo: {
      _this->_internal_mutable_system_info()->::perfetto::protos::SystemInfo::MergeFrom(
          from._internal_system_info());
      break;
    }
    case kTrigger: {
      _this->_internal_mutable_trigger()->::perfetto::protos::Trigger::MergeFrom(
          from._internal_trigger());
      break;
    }
    case kPackagesList: {
      _this->_internal_mutable_packages_list()->::perfetto::protos::PackagesList::MergeFrom(
          from._internal_packages_list());
      break;
    }
    case kChromeBenchmarkMetadata: {
      _this->_internal_mutable_chrome_benchmark_metadata()->::perfetto::protos::ChromeBenchmarkMetadata::MergeFrom(
          from._internal_chrome_benchmark_metadata());
      break;
    }
    case kPerfettoMetatrace: {
      _this->_internal_mutable_perfetto_metatrace()->::perfetto::protos::PerfettoMetatrace::MergeFrom(
          from._internal_perfetto_metatrace());
      break;
    }
    case kChromeMetadata: {
      _this->_internal_mutable_chrome_metadata()->::perfetto::protos::ChromeMetadataPacket::MergeFrom(
          from._internal_chrome_metadata());
      break;
    }
    case kGpuCounterEvent: {
      _this->_internal_mutable_gpu_counter_event()->::perfetto::protos::GpuCounterEvent::MergeFrom(
          from._internal_gpu_counter_event());
      break;
    }
    case kGpuRenderStageEvent: {
      _this->_internal_mutable_gpu_render_stage_event()->::perfetto::protos::GpuRenderStageEvent::MergeFrom(
          from._internal_gpu_render_stage_event());
      break;
    }
    case kStreamingProfilePacket: {
      _this->_internal_mutable_streaming_profile_packet()->::perfetto::protos::StreamingProfilePacket::MergeFrom(
          from._internal_streaming_profile_packet());
      break;
    }
    case kHeapGraph: {
      _this->_internal_mutable_heap_graph()->::perfetto::protos::HeapGraph::MergeFrom(
          from._internal_heap_graph());
      break;
    }
    case kGraphicsFrameEvent: {
      _this->_internal_mutable_graphics_frame_event()->::perfetto::protos::GraphicsFrameEvent::MergeFrom(
          from._internal_graphics_frame_event());
      break;
    }
    case kVulkanMemoryEvent: {
      _this->_internal_mutable_vulkan_memory_event()->::perfetto::protos::VulkanMemoryEvent::MergeFrom(
          from._internal_vulkan_memory_event());
      break;
    }
    case kGpuLog: {
      _this->_internal_mutable_gpu_log()->::perfetto::protos::GpuLog::MergeFrom(
          from._internal_gpu_log());
      break;
    }
    case kVulkanApiEvent: {
      _this->_internal_mutable_vulkan_api_event()->::perfetto::protos::VulkanApiEvent::MergeFrom(
          from._internal_vulkan_api_event());
      break;
    }
    case kPerfSample: {
      _this->_internal_mutable_perf_sample()->::perfetto::protos::PerfSample::MergeFrom(
          from._internal_perf_sample());
      break;
    }
    case kCpuInfo: {
      _this->_internal_mutable_cpu_info()->::perfetto::protos::CpuInfo::MergeFrom(
          from._internal_cpu_info());
      break;
    }
    case kSmapsPacket: {
      _this->_internal_mutable_smaps_packet()->::perfetto::protos::SmapsPacket::MergeFrom(
          from._internal_smaps_packet());
      break;
    }
    case kServiceEvent: {
      _this->_internal_mutable_service_event()->::perfetto::protos::TracingServiceEvent::MergeFrom(
          from._internal_service_event());
      break;
    }
    case kInitialDisplayState: {
      _this->_internal_mutable_initial_display_state()->::perfetto::protos::InitialDisplayState::MergeFrom(
          from._internal_initial_display_state());
      break;
    }
    case kGpuMemTotalEvent: {
      _this->_internal_mutable_gpu_mem_total_event()->::perfetto::protos::GpuMemTotalEvent::MergeFrom(
          from._internal_gpu_mem_total_event());
      break;
    }
    case kMemoryTrackerSnapshot: {
      _this->_internal_mutable_memory_tracker_snapshot()->::perfetto::protos::MemoryTrackerSnapshot::MergeFrom(
          from._internal_memory_tracker_snapshot());
      break;
    }
    case kFrameTimelineEvent: {
      _this->_internal_mutable_frame_timeline_event()->::perfetto::protos::FrameTimelineEvent::MergeFrom(
          from._internal_frame_timeline_event());
      break;
    }
    case kAndroidEnergyEstimationBreakdown: {
      _this->_internal_mutable_android_energy_estimation_breakdown()->::perfetto::protos::AndroidEnergyEstimationBreakdown::MergeFrom(
          from._internal_android_energy_estimation_breakdown());
      break;
    }
    case kUiState: {
      _this->_internal_mutable_ui_state()->::perfetto::protos::UiState::MergeFrom(
          from._internal_ui_state());
      break;
    }
    case kAndroidCameraFrameEvent: {
      _this->_internal_mutable_android_camera_frame_event()->::perfetto::protos::AndroidCameraFrameEvent::MergeFrom(
          from._internal_android_camera_frame_event());
      break;
    }
    case kAndroidCameraSessionStats: {
      _this->_internal_mutable_android_camera_session_stats()->::perfetto::protos::AndroidCameraSessionStats::MergeFrom(
          from._internal_android_camera_session_stats());
      break;
    }
    case kTranslationTable: {
      _this->_internal_mutable_translation_table()->::perfetto::protos::TranslationTable::MergeFrom(
          from._internal_translation_table());
      break;
    }
    case kAndroidGameInterventionList: {
      _this->_internal_mutable_android_game_intervention_list()->::perfetto::protos::AndroidGameInterventionList::MergeFrom(
          from._internal_android_game_intervention_list());
      break;
    }
    case kStatsdAtom: {
      _this->_internal_mutable_statsd_atom()->::perfetto::protos::StatsdAtom::MergeFrom(
          from._internal_statsd_atom());
      break;
    }
    case kAndroidSystemProperty: {
      _this->_internal_mutable_android_system_property()->::perfetto::protos::AndroidSystemProperty::MergeFrom(
          from._internal_android_system_property());
      break;
    }
    case kEntityStateResidency: {
      _this->_internal_mutable_entity_state_residency()->::perfetto::protos::EntityStateResidency::MergeFrom(
          from._internal_entity_state_residency());
      break;
    }
    case kProfiledFrameSymbols: {
      _this->_internal_mutable_profiled_frame_symbols()->::perfetto::protos::ProfiledFrameSymbols::MergeFrom(
          from._internal_profiled_frame_symbols());
      break;
    }
    case kModuleSymbols: {
      _this->_internal_mutable_module_symbols()->::perfetto::protos::ModuleSymbols::MergeFrom(
          from._internal_module_symbols());
      break;
    }
    case kDeobfuscationMapping: {
      _this->_internal_mutable_deobfuscation_mapping()->::perfetto::protos::DeobfuscationMapping::MergeFrom(
          from._internal_deobfuscation_mapping());
      break;
    }
    case kTrackDescriptor: {
      _this->_internal_mutable_track_descriptor()->::perfetto::protos::TrackDescriptor::MergeFrom(
          from._internal_track_descriptor());
      break;
    }
    case kProcessDescriptor: {
      _this->_internal_mutable_process_descriptor()->::perfetto::protos::ProcessDescriptor::MergeFrom(
          from._internal_process_descriptor());
      break;
    }
    case kThreadDescriptor: {
      _this->_internal_mutable_thread_descriptor()->::perfetto::protos::ThreadDescriptor::MergeFrom(
          from._internal_thread_descriptor());
      break;
    }
    case kFtraceEvents: {
      _this->_internal_mutable_ftrace_events()->::perfetto::protos::FtraceEventBundle::MergeFrom(
          from._internal_ftrace_events());
      break;
    }
    case kSynchronizationMarker: {
      _this->_internal_set_synchronization_marker(from._internal_synchronization_marker());
      break;
    }
    case kCompressedPackets: {
      _this->_internal_set_compressed_packets(from._internal_compressed_packets());
      break;
    }
    case kExtensionDescriptor: {
      _this->_internal_mutable_extension_descriptor()->::perfetto::protos::ExtensionDescriptor::MergeFrom(
          from._internal_extension_descriptor());
      break;
    }
    case kNetworkPacket: {
      _this->_internal_mutable_network_packet()->::perfetto::protos::NetworkPacketEvent::MergeFrom(
          from._internal_network_packet());
      break;
    }
    case kNetworkPacketBundle: {
      _this->_internal_mutable_network_packet_bundle()->::perfetto::protos::NetworkPacketBundle::MergeFrom(
          from._internal_network_packet_bundle());
      break;
    }
    case kTrackEventRangeOfInterest: {
      _this->_internal_mutable_track_event_range_of_interest()->::perfetto::protos::TrackEventRangeOfInterest::MergeFrom(
          from._internal_track_event_range_of_interest());
      break;
    }
    case kForTesting: {
      _this->_internal_mutable_for_testing()->::perfetto::protos::TestEvent::MergeFrom(
          from._internal_for_testing());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  clear_has_optional_trusted_uid();
  switch (from.optional_trusted_uid_case()) {
    case kTrustedUid: {
      _this->_internal_set_trusted_uid(from._internal_trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  clear_has_optional_trusted_packet_sequence_id();
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      _this->_internal_set_trusted_packet_sequence_id(from._internal_trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracePacket)
}

inline void TracePacket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interned_data_){nullptr}
    , decltype(_impl_.trace_packet_defaults_){nullptr}
    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.sequence_flags_) { 0u }

    , decltype(_impl_.incremental_state_cleared_) { false }

    , decltype(_impl_.previous_packet_dropped_) { false }

    , decltype(_impl_.first_packet_on_sequence_) { false }

    , decltype(_impl_.timestamp_clock_id_) { 0u }

    , decltype(_impl_.trusted_pid_) { 0 }

    , decltype(_impl_.data_){}
    , decltype(_impl_.optional_trusted_uid_){}
    , decltype(_impl_.optional_trusted_packet_sequence_id_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
  clear_has_optional_trusted_uid();
  clear_has_optional_trusted_packet_sequence_id();
}

TracePacket::~TracePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TracePacket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interned_data_;
  if (this != internal_default_instance()) delete _impl_.trace_packet_defaults_;
  if (has_data()) {
    clear_data();
  }
  if (has_optional_trusted_uid()) {
    clear_optional_trusted_uid();
  }
  if (has_optional_trusted_packet_sequence_id()) {
    clear_optional_trusted_packet_sequence_id();
  }
}

void TracePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TracePacket::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracePacket)
  switch (data_case()) {
    case kProcessTree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.process_tree_;
      }
      break;
    }
    case kProcessStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.process_stats_;
      }
      break;
    }
    case kInodeFileMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.inode_file_map_;
      }
      break;
    }
    case kChromeEvents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.chrome_events_;
      }
      break;
    }
    case kClockSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.clock_snapshot_;
      }
      break;
    }
    case kSysStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.sys_stats_;
      }
      break;
    }
    case kTrackEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.track_event_;
      }
      break;
    }
    case kTraceUuid: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.trace_uuid_;
      }
      break;
    }
    case kTraceConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.trace_config_;
      }
      break;
    }
    case kFtraceStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.ftrace_stats_;
      }
      break;
    }
    case kTraceStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.trace_stats_;
      }
      break;
    }
    case kProfilePacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.profile_packet_;
      }
      break;
    }
    case kStreamingAllocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.streaming_allocation_;
      }
      break;
    }
    case kStreamingFree: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.streaming_free_;
      }
      break;
    }
    case kBattery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.battery_;
      }
      break;
    }
    case kPowerRails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.power_rails_;
      }
      break;
    }
    case kAndroidLog: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.android_log_;
      }
      break;
    }
    case kSystemInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.system_info_;
      }
      break;
    }
    case kTrigger: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.trigger_;
      }
      break;
    }
    case kPackagesList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.packages_list_;
      }
      break;
    }
    case kChromeBenchmarkMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.chrome_benchmark_metadata_;
      }
      break;
    }
    case kPerfettoMetatrace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.perfetto_metatrace_;
      }
      break;
    }
    case kChromeMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.chrome_metadata_;
      }
      break;
    }
    case kGpuCounterEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gpu_counter_event_;
      }
      break;
    }
    case kGpuRenderStageEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gpu_render_stage_event_;
      }
      break;
    }
    case kStreamingProfilePacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.streaming_profile_packet_;
      }
      break;
    }
    case kHeapGraph: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.heap_graph_;
      }
      break;
    }
    case kGraphicsFrameEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.graphics_frame_event_;
      }
      break;
    }
    case kVulkanMemoryEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.vulkan_memory_event_;
      }
      break;
    }
    case kGpuLog: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gpu_log_;
      }
      break;
    }
    case kVulkanApiEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.vulkan_api_event_;
      }
      break;
    }
    case kPerfSample: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.perf_sample_;
      }
      break;
    }
    case kCpuInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.cpu_info_;
      }
      break;
    }
    case kSmapsPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.smaps_packet_;
      }
      break;
    }
    case kServiceEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.service_event_;
      }
      break;
    }
    case kInitialDisplayState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.initial_display_state_;
      }
      break;
    }
    case kGpuMemTotalEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gpu_mem_total_event_;
      }
      break;
    }
    case kMemoryTrackerSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.memory_tracker_snapshot_;
      }
      break;
    }
    case kFrameTimelineEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.frame_timeline_event_;
      }
      break;
    }
    case kAndroidEnergyEstimationBreakdown: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.android_energy_estimation_breakdown_;
      }
      break;
    }
    case kUiState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.ui_state_;
      }
      break;
    }
    case kAndroidCameraFrameEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.android_camera_frame_event_;
      }
      break;
    }
    case kAndroidCameraSessionStats: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.android_camera_session_stats_;
      }
      break;
    }
    case kTranslationTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.translation_table_;
      }
      break;
    }
    case kAndroidGameInterventionList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.android_game_intervention_list_;
      }
      break;
    }
    case kStatsdAtom: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.statsd_atom_;
      }
      break;
    }
    case kAndroidSystemProperty: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.android_system_property_;
      }
      break;
    }
    case kEntityStateResidency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.entity_state_residency_;
      }
      break;
    }
    case kProfiledFrameSymbols: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.profiled_frame_symbols_;
      }
      break;
    }
    case kModuleSymbols: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.module_symbols_;
      }
      break;
    }
    case kDeobfuscationMapping: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.deobfuscation_mapping_;
      }
      break;
    }
    case kTrackDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.track_descriptor_;
      }
      break;
    }
    case kProcessDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.process_descriptor_;
      }
      break;
    }
    case kThreadDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.thread_descriptor_;
      }
      break;
    }
    case kFtraceEvents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.ftrace_events_;
      }
      break;
    }
    case kSynchronizationMarker: {
      _impl_.data_.synchronization_marker_.Destroy();
      break;
    }
    case kCompressedPackets: {
      _impl_.data_.compressed_packets_.Destroy();
      break;
    }
    case kExtensionDescriptor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.extension_descriptor_;
      }
      break;
    }
    case kNetworkPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.network_packet_;
      }
      break;
    }
    case kNetworkPacketBundle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.network_packet_bundle_;
      }
      break;
    }
    case kTrackEventRangeOfInterest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.track_event_range_of_interest_;
      }
      break;
    }
    case kForTesting: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.for_testing_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}

void TracePacket::clear_optional_trusted_uid() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracePacket)
  switch (optional_trusted_uid_case()) {
    case kTrustedUid: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_TRUSTED_UID_NOT_SET;
}

void TracePacket::clear_optional_trusted_packet_sequence_id() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TracePacket)
  switch (optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      // No need to clear
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}


void TracePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracePacket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.interned_data_ != nullptr);
      _impl_.interned_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trace_packet_defaults_ != nullptr);
      _impl_.trace_packet_defaults_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_clock_id_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.timestamp_clock_id_));
  }
  _impl_.trusted_pid_ = 0;
  clear_data();
  clear_optional_trusted_uid();
  clear_optional_trusted_packet_sequence_id();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.FtraceEventBundle ftrace_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ftrace_events(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ProcessTree process_tree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_tree(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 trusted_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_trusted_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.InodeFileMap inode_file_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inode_file_map(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ChromeEventBundle chrome_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_events(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock_snapshot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SysStats sys_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ProcessStats process_stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 trusted_packet_sequence_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _internal_set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrackEvent track_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.InternedData interned_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_interned_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sequence_flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_sequence_flags(&has_bits);
          _impl_.sequence_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TraceConfig trace_config = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FtraceStats ftrace_stats = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ftrace_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TraceStats trace_stats = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes synchronization_marker = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_synchronization_marker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ProfilePacket profile_packet = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.BatteryCounters battery = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidLogPacket android_log = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_log(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PowerRails power_rails = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_rails(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool incremental_state_cleared = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_incremental_state_cleared(&has_bits);
          _impl_.incremental_state_cleared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool previous_packet_dropped = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_previous_packet_dropped(&has_bits);
          _impl_.previous_packet_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_descriptor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_thread_descriptor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SystemInfo system_info = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Trigger trigger = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PackagesList packages_list = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_packages_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_benchmark_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_perfetto_metatrace(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes compressed_packets = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_compressed_packets();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_counter_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_render_stage_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_profile_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_profiled_frame_symbols(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.HeapGraph heap_graph = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_heap_graph(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_graphics_frame_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 timestamp_clock_id = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 208)) {
          _Internal::set_has_timestamp_clock_id(&has_bits);
          _impl_.timestamp_clock_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_packet_defaults(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrackDescriptor track_descriptor = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_descriptor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ModuleSymbols module_symbols = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_module_symbols(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_vulkan_memory_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GpuLog gpu_log = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_log(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_deobfuscation_mapping(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vulkan_api_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PerfSample perf_sample = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_sample(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.CpuInfo cpu_info = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SmapsPacket smaps_packet = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_smaps_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TracingServiceEvent service_event = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.InitialDisplayState initial_display_state = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_display_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu_mem_total_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_descriptor(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_tracker_snapshot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.StreamingAllocation streaming_allocation = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_allocation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.StreamingFree streaming_free = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_free(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_timeline_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidEnergyEstimationBreakdown android_energy_estimation_breakdown = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_energy_estimation_breakdown(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.UiState ui_state = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 trusted_pid = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_trusted_pid(&has_bits);
          _impl_.trusted_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidCameraFrameEvent android_camera_frame_event = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_camera_frame_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidCameraSessionStats android_camera_session_stats = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_camera_session_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TranslationTable translation_table = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation_table(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidGameInterventionList android_game_intervention_list = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_game_intervention_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.StatsdAtom statsd_atom = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_statsd_atom(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.AndroidSystemProperty android_system_property = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_system_property(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool first_packet_on_sequence = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_first_packet_on_sequence(&has_bits);
          _impl_.first_packet_on_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NetworkPacketEvent network_packet = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TraceUuid trace_uuid = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_uuid(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TrackEventRangeOfInterest track_event_range_of_interest = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_event_range_of_interest(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.EntityStateResidency entity_state_residency = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_state_residency(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.NetworkPacketBundle network_packet_bundle = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_packet_bundle(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.TestEvent for_testing = 900;
      case 900:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_for_testing(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TracePacket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracePacket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kFtraceEvents: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::ftrace_events(this),
          _Internal::ftrace_events(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessTree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::process_tree(this),
          _Internal::process_tree(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // int32 trusted_uid = 3;
  if (optional_trusted_uid_case() == kTrustedUid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_trusted_uid(), target);
  }

  switch (data_case()) {
    case kInodeFileMap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::inode_file_map(this),
          _Internal::inode_file_map(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromeEvents: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::chrome_events(this),
          _Internal::chrome_events(this).GetCachedSize(), target, stream);
      break;
    }
    case kClockSnapshot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::clock_snapshot(this),
          _Internal::clock_snapshot(this).GetCachedSize(), target, stream);
      break;
    }
    case kSysStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::sys_stats(this),
          _Internal::sys_stats(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 timestamp = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_timestamp(), target);
  }

  // .perfetto.protos.ProcessStats process_stats = 9;
  if (data_case() == kProcessStats) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::process_stats(this),
        _Internal::process_stats(this).GetCachedSize(), target, stream);
  }

  // uint32 trusted_packet_sequence_id = 10;
  if (optional_trusted_packet_sequence_id_case() == kTrustedPacketSequenceId) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_trusted_packet_sequence_id(), target);
  }

  // .perfetto.protos.TrackEvent track_event = 11;
  if (data_case() == kTrackEvent) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::track_event(this),
        _Internal::track_event(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.InternedData interned_data = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::interned_data(this),
        _Internal::interned_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 sequence_flags = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_sequence_flags(), target);
  }

  switch (data_case()) {
    case kTraceConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::trace_config(this),
          _Internal::trace_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kFtraceStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, _Internal::ftrace_stats(this),
          _Internal::ftrace_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kTraceStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, _Internal::trace_stats(this),
          _Internal::trace_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kSynchronizationMarker: {
      const std::string& _s = this->_internal_synchronization_marker();
      target = stream->WriteBytesMaybeAliased(36, _s, target);
      break;
    }
    case kProfilePacket: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, _Internal::profile_packet(this),
          _Internal::profile_packet(this).GetCachedSize(), target, stream);
      break;
    }
    case kBattery: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, _Internal::battery(this),
          _Internal::battery(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidLog: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, _Internal::android_log(this),
          _Internal::android_log(this).GetCachedSize(), target, stream);
      break;
    }
    case kPowerRails: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, _Internal::power_rails(this),
          _Internal::power_rails(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional bool incremental_state_cleared = 41;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        41, this->_internal_incremental_state_cleared(), target);
  }

  // optional bool previous_packet_dropped = 42;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        42, this->_internal_previous_packet_dropped(), target);
  }

  switch (data_case()) {
    case kProcessDescriptor: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, _Internal::process_descriptor(this),
          _Internal::process_descriptor(this).GetCachedSize(), target, stream);
      break;
    }
    case kThreadDescriptor: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, _Internal::thread_descriptor(this),
          _Internal::thread_descriptor(this).GetCachedSize(), target, stream);
      break;
    }
    case kSystemInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, _Internal::system_info(this),
          _Internal::system_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrigger: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(46, _Internal::trigger(this),
          _Internal::trigger(this).GetCachedSize(), target, stream);
      break;
    }
    case kPackagesList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, _Internal::packages_list(this),
          _Internal::packages_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromeBenchmarkMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, _Internal::chrome_benchmark_metadata(this),
          _Internal::chrome_benchmark_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kPerfettoMetatrace: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, _Internal::perfetto_metatrace(this),
          _Internal::perfetto_metatrace(this).GetCachedSize(), target, stream);
      break;
    }
    case kCompressedPackets: {
      const std::string& _s = this->_internal_compressed_packets();
      target = stream->WriteBytesMaybeAliased(50, _s, target);
      break;
    }
    case kChromeMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(51, _Internal::chrome_metadata(this),
          _Internal::chrome_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kGpuCounterEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(52, _Internal::gpu_counter_event(this),
          _Internal::gpu_counter_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kGpuRenderStageEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(53, _Internal::gpu_render_stage_event(this),
          _Internal::gpu_render_stage_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamingProfilePacket: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(54, _Internal::streaming_profile_packet(this),
          _Internal::streaming_profile_packet(this).GetCachedSize(), target, stream);
      break;
    }
    case kProfiledFrameSymbols: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(55, _Internal::profiled_frame_symbols(this),
          _Internal::profiled_frame_symbols(this).GetCachedSize(), target, stream);
      break;
    }
    case kHeapGraph: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(56, _Internal::heap_graph(this),
          _Internal::heap_graph(this).GetCachedSize(), target, stream);
      break;
    }
    case kGraphicsFrameEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(57, _Internal::graphics_frame_event(this),
          _Internal::graphics_frame_event(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional uint32 timestamp_clock_id = 58;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        58, this->_internal_timestamp_clock_id(), target);
  }

  // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::trace_packet_defaults(this),
        _Internal::trace_packet_defaults(this).GetCachedSize(), target, stream);
  }

  switch (data_case()) {
    case kTrackDescriptor: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(60, _Internal::track_descriptor(this),
          _Internal::track_descriptor(this).GetCachedSize(), target, stream);
      break;
    }
    case kModuleSymbols: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(61, _Internal::module_symbols(this),
          _Internal::module_symbols(this).GetCachedSize(), target, stream);
      break;
    }
    case kVulkanMemoryEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(62, _Internal::vulkan_memory_event(this),
          _Internal::vulkan_memory_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kGpuLog: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(63, _Internal::gpu_log(this),
          _Internal::gpu_log(this).GetCachedSize(), target, stream);
      break;
    }
    case kDeobfuscationMapping: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(64, _Internal::deobfuscation_mapping(this),
          _Internal::deobfuscation_mapping(this).GetCachedSize(), target, stream);
      break;
    }
    case kVulkanApiEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(65, _Internal::vulkan_api_event(this),
          _Internal::vulkan_api_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kPerfSample: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(66, _Internal::perf_sample(this),
          _Internal::perf_sample(this).GetCachedSize(), target, stream);
      break;
    }
    case kCpuInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(67, _Internal::cpu_info(this),
          _Internal::cpu_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kSmapsPacket: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(68, _Internal::smaps_packet(this),
          _Internal::smaps_packet(this).GetCachedSize(), target, stream);
      break;
    }
    case kServiceEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(69, _Internal::service_event(this),
          _Internal::service_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kInitialDisplayState: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(70, _Internal::initial_display_state(this),
          _Internal::initial_display_state(this).GetCachedSize(), target, stream);
      break;
    }
    case kGpuMemTotalEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(71, _Internal::gpu_mem_total_event(this),
          _Internal::gpu_mem_total_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kExtensionDescriptor: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(72, _Internal::extension_descriptor(this),
          _Internal::extension_descriptor(this).GetCachedSize(), target, stream);
      break;
    }
    case kMemoryTrackerSnapshot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(73, _Internal::memory_tracker_snapshot(this),
          _Internal::memory_tracker_snapshot(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamingAllocation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(74, _Internal::streaming_allocation(this),
          _Internal::streaming_allocation(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamingFree: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(75, _Internal::streaming_free(this),
          _Internal::streaming_free(this).GetCachedSize(), target, stream);
      break;
    }
    case kFrameTimelineEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(76, _Internal::frame_timeline_event(this),
          _Internal::frame_timeline_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidEnergyEstimationBreakdown: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(77, _Internal::android_energy_estimation_breakdown(this),
          _Internal::android_energy_estimation_breakdown(this).GetCachedSize(), target, stream);
      break;
    }
    case kUiState: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(78, _Internal::ui_state(this),
          _Internal::ui_state(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional int32 trusted_pid = 79;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        79, this->_internal_trusted_pid(), target);
  }

  switch (data_case()) {
    case kAndroidCameraFrameEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(80, _Internal::android_camera_frame_event(this),
          _Internal::android_camera_frame_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidCameraSessionStats: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(81, _Internal::android_camera_session_stats(this),
          _Internal::android_camera_session_stats(this).GetCachedSize(), target, stream);
      break;
    }
    case kTranslationTable: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(82, _Internal::translation_table(this),
          _Internal::translation_table(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidGameInterventionList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(83, _Internal::android_game_intervention_list(this),
          _Internal::android_game_intervention_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kStatsdAtom: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(84, _Internal::statsd_atom(this),
          _Internal::statsd_atom(this).GetCachedSize(), target, stream);
      break;
    }
    case kAndroidSystemProperty: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(86, _Internal::android_system_property(this),
          _Internal::android_system_property(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional bool first_packet_on_sequence = 87;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        87, this->_internal_first_packet_on_sequence(), target);
  }

  switch (data_case()) {
    case kNetworkPacket: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(88, _Internal::network_packet(this),
          _Internal::network_packet(this).GetCachedSize(), target, stream);
      break;
    }
    case kTraceUuid: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(89, _Internal::trace_uuid(this),
          _Internal::trace_uuid(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrackEventRangeOfInterest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(90, _Internal::track_event_range_of_interest(this),
          _Internal::track_event_range_of_interest(this).GetCachedSize(), target, stream);
      break;
    }
    case kEntityStateResidency: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(91, _Internal::entity_state_residency(this),
          _Internal::entity_state_residency(this).GetCachedSize(), target, stream);
      break;
    }
    case kNetworkPacketBundle: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(92, _Internal::network_packet_bundle(this),
          _Internal::network_packet_bundle(this).GetCachedSize(), target, stream);
      break;
    }
    case kForTesting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(900, _Internal::for_testing(this),
          _Internal::for_testing(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracePacket)
  return target;
}

::size_t TracePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracePacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.InternedData interned_data = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.interned_data_);
    }

    // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trace_packet_defaults_);
    }

    // optional uint64 timestamp = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional uint32 sequence_flags = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sequence_flags());
    }

    // optional bool incremental_state_cleared = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3;
    }

    // optional bool previous_packet_dropped = 42;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3;
    }

    // optional bool first_packet_on_sequence = 87;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3;
    }

    // optional uint32 timestamp_clock_id = 58;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_timestamp_clock_id());
    }

  }
  // optional int32 trusted_pid = 79;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_trusted_pid());
  }

  switch (data_case()) {
    // .perfetto.protos.ProcessTree process_tree = 2;
    case kProcessTree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.process_tree_);
      break;
    }
    // .perfetto.protos.ProcessStats process_stats = 9;
    case kProcessStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.process_stats_);
      break;
    }
    // .perfetto.protos.InodeFileMap inode_file_map = 4;
    case kInodeFileMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.inode_file_map_);
      break;
    }
    // .perfetto.protos.ChromeEventBundle chrome_events = 5;
    case kChromeEvents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.chrome_events_);
      break;
    }
    // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
    case kClockSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.clock_snapshot_);
      break;
    }
    // .perfetto.protos.SysStats sys_stats = 7;
    case kSysStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.sys_stats_);
      break;
    }
    // .perfetto.protos.TrackEvent track_event = 11;
    case kTrackEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.track_event_);
      break;
    }
    // .perfetto.protos.TraceUuid trace_uuid = 89;
    case kTraceUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.trace_uuid_);
      break;
    }
    // .perfetto.protos.TraceConfig trace_config = 33;
    case kTraceConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.trace_config_);
      break;
    }
    // .perfetto.protos.FtraceStats ftrace_stats = 34;
    case kFtraceStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.ftrace_stats_);
      break;
    }
    // .perfetto.protos.TraceStats trace_stats = 35;
    case kTraceStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.trace_stats_);
      break;
    }
    // .perfetto.protos.ProfilePacket profile_packet = 37;
    case kProfilePacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.profile_packet_);
      break;
    }
    // .perfetto.protos.StreamingAllocation streaming_allocation = 74;
    case kStreamingAllocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.streaming_allocation_);
      break;
    }
    // .perfetto.protos.StreamingFree streaming_free = 75;
    case kStreamingFree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.streaming_free_);
      break;
    }
    // .perfetto.protos.BatteryCounters battery = 38;
    case kBattery: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.battery_);
      break;
    }
    // .perfetto.protos.PowerRails power_rails = 40;
    case kPowerRails: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.power_rails_);
      break;
    }
    // .perfetto.protos.AndroidLogPacket android_log = 39;
    case kAndroidLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.android_log_);
      break;
    }
    // .perfetto.protos.SystemInfo system_info = 45;
    case kSystemInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.system_info_);
      break;
    }
    // .perfetto.protos.Trigger trigger = 46;
    case kTrigger: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.trigger_);
      break;
    }
    // .perfetto.protos.PackagesList packages_list = 47;
    case kPackagesList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.packages_list_);
      break;
    }
    // .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
    case kChromeBenchmarkMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.chrome_benchmark_metadata_);
      break;
    }
    // .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
    case kPerfettoMetatrace: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.perfetto_metatrace_);
      break;
    }
    // .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
    case kChromeMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.chrome_metadata_);
      break;
    }
    // .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
    case kGpuCounterEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gpu_counter_event_);
      break;
    }
    // .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
    case kGpuRenderStageEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gpu_render_stage_event_);
      break;
    }
    // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
    case kStreamingProfilePacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.streaming_profile_packet_);
      break;
    }
    // .perfetto.protos.HeapGraph heap_graph = 56;
    case kHeapGraph: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.heap_graph_);
      break;
    }
    // .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
    case kGraphicsFrameEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.graphics_frame_event_);
      break;
    }
    // .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
    case kVulkanMemoryEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.vulkan_memory_event_);
      break;
    }
    // .perfetto.protos.GpuLog gpu_log = 63;
    case kGpuLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gpu_log_);
      break;
    }
    // .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
    case kVulkanApiEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.vulkan_api_event_);
      break;
    }
    // .perfetto.protos.PerfSample perf_sample = 66;
    case kPerfSample: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.perf_sample_);
      break;
    }
    // .perfetto.protos.CpuInfo cpu_info = 67;
    case kCpuInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.cpu_info_);
      break;
    }
    // .perfetto.protos.SmapsPacket smaps_packet = 68;
    case kSmapsPacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.smaps_packet_);
      break;
    }
    // .perfetto.protos.TracingServiceEvent service_event = 69;
    case kServiceEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.service_event_);
      break;
    }
    // .perfetto.protos.InitialDisplayState initial_display_state = 70;
    case kInitialDisplayState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.initial_display_state_);
      break;
    }
    // .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
    case kGpuMemTotalEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gpu_mem_total_event_);
      break;
    }
    // .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
    case kMemoryTrackerSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.memory_tracker_snapshot_);
      break;
    }
    // .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
    case kFrameTimelineEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.frame_timeline_event_);
      break;
    }
    // .perfetto.protos.AndroidEnergyEstimationBreakdown android_energy_estimation_breakdown = 77;
    case kAndroidEnergyEstimationBreakdown: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.android_energy_estimation_breakdown_);
      break;
    }
    // .perfetto.protos.UiState ui_state = 78;
    case kUiState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.ui_state_);
      break;
    }
    // .perfetto.protos.AndroidCameraFrameEvent android_camera_frame_event = 80;
    case kAndroidCameraFrameEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.android_camera_frame_event_);
      break;
    }
    // .perfetto.protos.AndroidCameraSessionStats android_camera_session_stats = 81;
    case kAndroidCameraSessionStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.android_camera_session_stats_);
      break;
    }
    // .perfetto.protos.TranslationTable translation_table = 82;
    case kTranslationTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.translation_table_);
      break;
    }
    // .perfetto.protos.AndroidGameInterventionList android_game_intervention_list = 83;
    case kAndroidGameInterventionList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.android_game_intervention_list_);
      break;
    }
    // .perfetto.protos.StatsdAtom statsd_atom = 84;
    case kStatsdAtom: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.statsd_atom_);
      break;
    }
    // .perfetto.protos.AndroidSystemProperty android_system_property = 86;
    case kAndroidSystemProperty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.android_system_property_);
      break;
    }
    // .perfetto.protos.EntityStateResidency entity_state_residency = 91;
    case kEntityStateResidency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.entity_state_residency_);
      break;
    }
    // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
    case kProfiledFrameSymbols: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.profiled_frame_symbols_);
      break;
    }
    // .perfetto.protos.ModuleSymbols module_symbols = 61;
    case kModuleSymbols: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.module_symbols_);
      break;
    }
    // .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
    case kDeobfuscationMapping: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.deobfuscation_mapping_);
      break;
    }
    // .perfetto.protos.TrackDescriptor track_descriptor = 60;
    case kTrackDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.track_descriptor_);
      break;
    }
    // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
    case kProcessDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.process_descriptor_);
      break;
    }
    // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
    case kThreadDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.thread_descriptor_);
      break;
    }
    // .perfetto.protos.FtraceEventBundle ftrace_events = 1;
    case kFtraceEvents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.ftrace_events_);
      break;
    }
    // bytes synchronization_marker = 36;
    case kSynchronizationMarker: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_synchronization_marker());
      break;
    }
    // bytes compressed_packets = 50;
    case kCompressedPackets: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_compressed_packets());
      break;
    }
    // .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
    case kExtensionDescriptor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.extension_descriptor_);
      break;
    }
    // .perfetto.protos.NetworkPacketEvent network_packet = 88;
    case kNetworkPacket: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.network_packet_);
      break;
    }
    // .perfetto.protos.NetworkPacketBundle network_packet_bundle = 92;
    case kNetworkPacketBundle: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.network_packet_bundle_);
      break;
    }
    // .perfetto.protos.TrackEventRangeOfInterest track_event_range_of_interest = 90;
    case kTrackEventRangeOfInterest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.track_event_range_of_interest_);
      break;
    }
    // .perfetto.protos.TestEvent for_testing = 900;
    case kForTesting: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.for_testing_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (optional_trusted_uid_case()) {
    // int32 trusted_uid = 3;
    case kTrustedUid: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  switch (optional_trusted_packet_sequence_id_case()) {
    // uint32 trusted_packet_sequence_id = 10;
    case kTrustedPacketSequenceId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TracePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TracePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TracePacket::GetClassData() const { return &_class_data_; }


void TracePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TracePacket*>(&to_msg);
  auto& from = static_cast<const TracePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracePacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_interned_data()->::perfetto::protos::InternedData::MergeFrom(
          from._internal_interned_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trace_packet_defaults()->::perfetto::protos::TracePacketDefaults::MergeFrom(
          from._internal_trace_packet_defaults());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sequence_flags_ = from._impl_.sequence_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.incremental_state_cleared_ = from._impl_.incremental_state_cleared_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.previous_packet_dropped_ = from._impl_.previous_packet_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.first_packet_on_sequence_ = from._impl_.first_packet_on_sequence_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timestamp_clock_id_ = from._impl_.timestamp_clock_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_trusted_pid(from._internal_trusted_pid());
  }
  switch (from.data_case()) {
    case kProcessTree: {
      _this->_internal_mutable_process_tree()->::perfetto::protos::ProcessTree::MergeFrom(
          from._internal_process_tree());
      break;
    }
    case kProcessStats: {
      _this->_internal_mutable_process_stats()->::perfetto::protos::ProcessStats::MergeFrom(
          from._internal_process_stats());
      break;
    }
    case kInodeFileMap: {
      _this->_internal_mutable_inode_file_map()->::perfetto::protos::InodeFileMap::MergeFrom(
          from._internal_inode_file_map());
      break;
    }
    case kChromeEvents: {
      _this->_internal_mutable_chrome_events()->::perfetto::protos::ChromeEventBundle::MergeFrom(
          from._internal_chrome_events());
      break;
    }
    case kClockSnapshot: {
      _this->_internal_mutable_clock_snapshot()->::perfetto::protos::ClockSnapshot::MergeFrom(
          from._internal_clock_snapshot());
      break;
    }
    case kSysStats: {
      _this->_internal_mutable_sys_stats()->::perfetto::protos::SysStats::MergeFrom(
          from._internal_sys_stats());
      break;
    }
    case kTrackEvent: {
      _this->_internal_mutable_track_event()->::perfetto::protos::TrackEvent::MergeFrom(
          from._internal_track_event());
      break;
    }
    case kTraceUuid: {
      _this->_internal_mutable_trace_uuid()->::perfetto::protos::TraceUuid::MergeFrom(
          from._internal_trace_uuid());
      break;
    }
    case kTraceConfig: {
      _this->_internal_mutable_trace_config()->::perfetto::protos::TraceConfig::MergeFrom(
          from._internal_trace_config());
      break;
    }
    case kFtraceStats: {
      _this->_internal_mutable_ftrace_stats()->::perfetto::protos::FtraceStats::MergeFrom(
          from._internal_ftrace_stats());
      break;
    }
    case kTraceStats: {
      _this->_internal_mutable_trace_stats()->::perfetto::protos::TraceStats::MergeFrom(
          from._internal_trace_stats());
      break;
    }
    case kProfilePacket: {
      _this->_internal_mutable_profile_packet()->::perfetto::protos::ProfilePacket::MergeFrom(
          from._internal_profile_packet());
      break;
    }
    case kStreamingAllocation: {
      _this->_internal_mutable_streaming_allocation()->::perfetto::protos::StreamingAllocation::MergeFrom(
          from._internal_streaming_allocation());
      break;
    }
    case kStreamingFree: {
      _this->_internal_mutable_streaming_free()->::perfetto::protos::StreamingFree::MergeFrom(
          from._internal_streaming_free());
      break;
    }
    case kBattery: {
      _this->_internal_mutable_battery()->::perfetto::protos::BatteryCounters::MergeFrom(
          from._internal_battery());
      break;
    }
    case kPowerRails: {
      _this->_internal_mutable_power_rails()->::perfetto::protos::PowerRails::MergeFrom(
          from._internal_power_rails());
      break;
    }
    case kAndroidLog: {
      _this->_internal_mutable_android_log()->::perfetto::protos::AndroidLogPacket::MergeFrom(
          from._internal_android_log());
      break;
    }
    case kSystemInfo: {
      _this->_internal_mutable_system_info()->::perfetto::protos::SystemInfo::MergeFrom(
          from._internal_system_info());
      break;
    }
    case kTrigger: {
      _this->_internal_mutable_trigger()->::perfetto::protos::Trigger::MergeFrom(
          from._internal_trigger());
      break;
    }
    case kPackagesList: {
      _this->_internal_mutable_packages_list()->::perfetto::protos::PackagesList::MergeFrom(
          from._internal_packages_list());
      break;
    }
    case kChromeBenchmarkMetadata: {
      _this->_internal_mutable_chrome_benchmark_metadata()->::perfetto::protos::ChromeBenchmarkMetadata::MergeFrom(
          from._internal_chrome_benchmark_metadata());
      break;
    }
    case kPerfettoMetatrace: {
      _this->_internal_mutable_perfetto_metatrace()->::perfetto::protos::PerfettoMetatrace::MergeFrom(
          from._internal_perfetto_metatrace());
      break;
    }
    case kChromeMetadata: {
      _this->_internal_mutable_chrome_metadata()->::perfetto::protos::ChromeMetadataPacket::MergeFrom(
          from._internal_chrome_metadata());
      break;
    }
    case kGpuCounterEvent: {
      _this->_internal_mutable_gpu_counter_event()->::perfetto::protos::GpuCounterEvent::MergeFrom(
          from._internal_gpu_counter_event());
      break;
    }
    case kGpuRenderStageEvent: {
      _this->_internal_mutable_gpu_render_stage_event()->::perfetto::protos::GpuRenderStageEvent::MergeFrom(
          from._internal_gpu_render_stage_event());
      break;
    }
    case kStreamingProfilePacket: {
      _this->_internal_mutable_streaming_profile_packet()->::perfetto::protos::StreamingProfilePacket::MergeFrom(
          from._internal_streaming_profile_packet());
      break;
    }
    case kHeapGraph: {
      _this->_internal_mutable_heap_graph()->::perfetto::protos::HeapGraph::MergeFrom(
          from._internal_heap_graph());
      break;
    }
    case kGraphicsFrameEvent: {
      _this->_internal_mutable_graphics_frame_event()->::perfetto::protos::GraphicsFrameEvent::MergeFrom(
          from._internal_graphics_frame_event());
      break;
    }
    case kVulkanMemoryEvent: {
      _this->_internal_mutable_vulkan_memory_event()->::perfetto::protos::VulkanMemoryEvent::MergeFrom(
          from._internal_vulkan_memory_event());
      break;
    }
    case kGpuLog: {
      _this->_internal_mutable_gpu_log()->::perfetto::protos::GpuLog::MergeFrom(
          from._internal_gpu_log());
      break;
    }
    case kVulkanApiEvent: {
      _this->_internal_mutable_vulkan_api_event()->::perfetto::protos::VulkanApiEvent::MergeFrom(
          from._internal_vulkan_api_event());
      break;
    }
    case kPerfSample: {
      _this->_internal_mutable_perf_sample()->::perfetto::protos::PerfSample::MergeFrom(
          from._internal_perf_sample());
      break;
    }
    case kCpuInfo: {
      _this->_internal_mutable_cpu_info()->::perfetto::protos::CpuInfo::MergeFrom(
          from._internal_cpu_info());
      break;
    }
    case kSmapsPacket: {
      _this->_internal_mutable_smaps_packet()->::perfetto::protos::SmapsPacket::MergeFrom(
          from._internal_smaps_packet());
      break;
    }
    case kServiceEvent: {
      _this->_internal_mutable_service_event()->::perfetto::protos::TracingServiceEvent::MergeFrom(
          from._internal_service_event());
      break;
    }
    case kInitialDisplayState: {
      _this->_internal_mutable_initial_display_state()->::perfetto::protos::InitialDisplayState::MergeFrom(
          from._internal_initial_display_state());
      break;
    }
    case kGpuMemTotalEvent: {
      _this->_internal_mutable_gpu_mem_total_event()->::perfetto::protos::GpuMemTotalEvent::MergeFrom(
          from._internal_gpu_mem_total_event());
      break;
    }
    case kMemoryTrackerSnapshot: {
      _this->_internal_mutable_memory_tracker_snapshot()->::perfetto::protos::MemoryTrackerSnapshot::MergeFrom(
          from._internal_memory_tracker_snapshot());
      break;
    }
    case kFrameTimelineEvent: {
      _this->_internal_mutable_frame_timeline_event()->::perfetto::protos::FrameTimelineEvent::MergeFrom(
          from._internal_frame_timeline_event());
      break;
    }
    case kAndroidEnergyEstimationBreakdown: {
      _this->_internal_mutable_android_energy_estimation_breakdown()->::perfetto::protos::AndroidEnergyEstimationBreakdown::MergeFrom(
          from._internal_android_energy_estimation_breakdown());
      break;
    }
    case kUiState: {
      _this->_internal_mutable_ui_state()->::perfetto::protos::UiState::MergeFrom(
          from._internal_ui_state());
      break;
    }
    case kAndroidCameraFrameEvent: {
      _this->_internal_mutable_android_camera_frame_event()->::perfetto::protos::AndroidCameraFrameEvent::MergeFrom(
          from._internal_android_camera_frame_event());
      break;
    }
    case kAndroidCameraSessionStats: {
      _this->_internal_mutable_android_camera_session_stats()->::perfetto::protos::AndroidCameraSessionStats::MergeFrom(
          from._internal_android_camera_session_stats());
      break;
    }
    case kTranslationTable: {
      _this->_internal_mutable_translation_table()->::perfetto::protos::TranslationTable::MergeFrom(
          from._internal_translation_table());
      break;
    }
    case kAndroidGameInterventionList: {
      _this->_internal_mutable_android_game_intervention_list()->::perfetto::protos::AndroidGameInterventionList::MergeFrom(
          from._internal_android_game_intervention_list());
      break;
    }
    case kStatsdAtom: {
      _this->_internal_mutable_statsd_atom()->::perfetto::protos::StatsdAtom::MergeFrom(
          from._internal_statsd_atom());
      break;
    }
    case kAndroidSystemProperty: {
      _this->_internal_mutable_android_system_property()->::perfetto::protos::AndroidSystemProperty::MergeFrom(
          from._internal_android_system_property());
      break;
    }
    case kEntityStateResidency: {
      _this->_internal_mutable_entity_state_residency()->::perfetto::protos::EntityStateResidency::MergeFrom(
          from._internal_entity_state_residency());
      break;
    }
    case kProfiledFrameSymbols: {
      _this->_internal_mutable_profiled_frame_symbols()->::perfetto::protos::ProfiledFrameSymbols::MergeFrom(
          from._internal_profiled_frame_symbols());
      break;
    }
    case kModuleSymbols: {
      _this->_internal_mutable_module_symbols()->::perfetto::protos::ModuleSymbols::MergeFrom(
          from._internal_module_symbols());
      break;
    }
    case kDeobfuscationMapping: {
      _this->_internal_mutable_deobfuscation_mapping()->::perfetto::protos::DeobfuscationMapping::MergeFrom(
          from._internal_deobfuscation_mapping());
      break;
    }
    case kTrackDescriptor: {
      _this->_internal_mutable_track_descriptor()->::perfetto::protos::TrackDescriptor::MergeFrom(
          from._internal_track_descriptor());
      break;
    }
    case kProcessDescriptor: {
      _this->_internal_mutable_process_descriptor()->::perfetto::protos::ProcessDescriptor::MergeFrom(
          from._internal_process_descriptor());
      break;
    }
    case kThreadDescriptor: {
      _this->_internal_mutable_thread_descriptor()->::perfetto::protos::ThreadDescriptor::MergeFrom(
          from._internal_thread_descriptor());
      break;
    }
    case kFtraceEvents: {
      _this->_internal_mutable_ftrace_events()->::perfetto::protos::FtraceEventBundle::MergeFrom(
          from._internal_ftrace_events());
      break;
    }
    case kSynchronizationMarker: {
      _this->_internal_set_synchronization_marker(from._internal_synchronization_marker());
      break;
    }
    case kCompressedPackets: {
      _this->_internal_set_compressed_packets(from._internal_compressed_packets());
      break;
    }
    case kExtensionDescriptor: {
      _this->_internal_mutable_extension_descriptor()->::perfetto::protos::ExtensionDescriptor::MergeFrom(
          from._internal_extension_descriptor());
      break;
    }
    case kNetworkPacket: {
      _this->_internal_mutable_network_packet()->::perfetto::protos::NetworkPacketEvent::MergeFrom(
          from._internal_network_packet());
      break;
    }
    case kNetworkPacketBundle: {
      _this->_internal_mutable_network_packet_bundle()->::perfetto::protos::NetworkPacketBundle::MergeFrom(
          from._internal_network_packet_bundle());
      break;
    }
    case kTrackEventRangeOfInterest: {
      _this->_internal_mutable_track_event_range_of_interest()->::perfetto::protos::TrackEventRangeOfInterest::MergeFrom(
          from._internal_track_event_range_of_interest());
      break;
    }
    case kForTesting: {
      _this->_internal_mutable_for_testing()->::perfetto::protos::TestEvent::MergeFrom(
          from._internal_for_testing());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  switch (from.optional_trusted_uid_case()) {
    case kTrustedUid: {
      _this->_internal_set_trusted_uid(from._internal_trusted_uid());
      break;
    }
    case OPTIONAL_TRUSTED_UID_NOT_SET: {
      break;
    }
  }
  switch (from.optional_trusted_packet_sequence_id_case()) {
    case kTrustedPacketSequenceId: {
      _this->_internal_set_trusted_packet_sequence_id(from._internal_trusted_packet_sequence_id());
      break;
    }
    case OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TracePacket::CopyFrom(const TracePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracePacket::IsInitialized() const {
  switch (data_case()) {
    case kProcessTree: {
      break;
    }
    case kProcessStats: {
      break;
    }
    case kInodeFileMap: {
      break;
    }
    case kChromeEvents: {
      break;
    }
    case kClockSnapshot: {
      break;
    }
    case kSysStats: {
      break;
    }
    case kTrackEvent: {
      if (data_case() == kTrackEvent) {
        if (!_impl_.data_.track_event_->IsInitialized()) return false;
      }
      break;
    }
    case kTraceUuid: {
      break;
    }
    case kTraceConfig: {
      break;
    }
    case kFtraceStats: {
      break;
    }
    case kTraceStats: {
      break;
    }
    case kProfilePacket: {
      break;
    }
    case kStreamingAllocation: {
      break;
    }
    case kStreamingFree: {
      break;
    }
    case kBattery: {
      break;
    }
    case kPowerRails: {
      break;
    }
    case kAndroidLog: {
      break;
    }
    case kSystemInfo: {
      break;
    }
    case kTrigger: {
      break;
    }
    case kPackagesList: {
      break;
    }
    case kChromeBenchmarkMetadata: {
      break;
    }
    case kPerfettoMetatrace: {
      break;
    }
    case kChromeMetadata: {
      break;
    }
    case kGpuCounterEvent: {
      break;
    }
    case kGpuRenderStageEvent: {
      if (data_case() == kGpuRenderStageEvent) {
        if (!_impl_.data_.gpu_render_stage_event_->IsInitialized()) return false;
      }
      break;
    }
    case kStreamingProfilePacket: {
      break;
    }
    case kHeapGraph: {
      break;
    }
    case kGraphicsFrameEvent: {
      break;
    }
    case kVulkanMemoryEvent: {
      break;
    }
    case kGpuLog: {
      break;
    }
    case kVulkanApiEvent: {
      break;
    }
    case kPerfSample: {
      break;
    }
    case kCpuInfo: {
      break;
    }
    case kSmapsPacket: {
      break;
    }
    case kServiceEvent: {
      break;
    }
    case kInitialDisplayState: {
      break;
    }
    case kGpuMemTotalEvent: {
      break;
    }
    case kMemoryTrackerSnapshot: {
      break;
    }
    case kFrameTimelineEvent: {
      break;
    }
    case kAndroidEnergyEstimationBreakdown: {
      break;
    }
    case kUiState: {
      break;
    }
    case kAndroidCameraFrameEvent: {
      break;
    }
    case kAndroidCameraSessionStats: {
      break;
    }
    case kTranslationTable: {
      break;
    }
    case kAndroidGameInterventionList: {
      break;
    }
    case kStatsdAtom: {
      break;
    }
    case kAndroidSystemProperty: {
      break;
    }
    case kEntityStateResidency: {
      break;
    }
    case kProfiledFrameSymbols: {
      break;
    }
    case kModuleSymbols: {
      break;
    }
    case kDeobfuscationMapping: {
      break;
    }
    case kTrackDescriptor: {
      break;
    }
    case kProcessDescriptor: {
      break;
    }
    case kThreadDescriptor: {
      break;
    }
    case kFtraceEvents: {
      break;
    }
    case kSynchronizationMarker: {
      break;
    }
    case kCompressedPackets: {
      break;
    }
    case kExtensionDescriptor: {
      if (data_case() == kExtensionDescriptor) {
        if (!_impl_.data_.extension_descriptor_->IsInitialized()) return false;
      }
      break;
    }
    case kNetworkPacket: {
      break;
    }
    case kNetworkPacketBundle: {
      break;
    }
    case kTrackEventRangeOfInterest: {
      break;
    }
    case kForTesting: {
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void TracePacket::InternalSwap(TracePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracePacket, _impl_.trusted_pid_)
      + sizeof(TracePacket::_impl_.trusted_pid_)
      - PROTOBUF_FIELD_OFFSET(TracePacket, _impl_.interned_data_)>(
          reinterpret_cast<char*>(&_impl_.interned_data_),
          reinterpret_cast<char*>(&other->_impl_.interned_data_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_.optional_trusted_uid_, other->_impl_.optional_trusted_uid_);
  swap(_impl_.optional_trusted_packet_sequence_id_, other->_impl_.optional_trusted_packet_sequence_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracePacket*
Arena::CreateMaybeMessage< ::perfetto::protos::TracePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
