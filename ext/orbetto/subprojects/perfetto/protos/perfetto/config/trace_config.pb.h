// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/trace_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/common/builtin_clock.pb.h"
#include "protos/perfetto/config/data_source_config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class TraceConfig;
struct TraceConfigDefaultTypeInternal;
extern TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
class TraceConfig_AndroidReportConfig;
struct TraceConfig_AndroidReportConfigDefaultTypeInternal;
extern TraceConfig_AndroidReportConfigDefaultTypeInternal _TraceConfig_AndroidReportConfig_default_instance_;
class TraceConfig_BufferConfig;
struct TraceConfig_BufferConfigDefaultTypeInternal;
extern TraceConfig_BufferConfigDefaultTypeInternal _TraceConfig_BufferConfig_default_instance_;
class TraceConfig_BuiltinDataSource;
struct TraceConfig_BuiltinDataSourceDefaultTypeInternal;
extern TraceConfig_BuiltinDataSourceDefaultTypeInternal _TraceConfig_BuiltinDataSource_default_instance_;
class TraceConfig_CmdTraceStartDelay;
struct TraceConfig_CmdTraceStartDelayDefaultTypeInternal;
extern TraceConfig_CmdTraceStartDelayDefaultTypeInternal _TraceConfig_CmdTraceStartDelay_default_instance_;
class TraceConfig_DataSource;
struct TraceConfig_DataSourceDefaultTypeInternal;
extern TraceConfig_DataSourceDefaultTypeInternal _TraceConfig_DataSource_default_instance_;
class TraceConfig_GuardrailOverrides;
struct TraceConfig_GuardrailOverridesDefaultTypeInternal;
extern TraceConfig_GuardrailOverridesDefaultTypeInternal _TraceConfig_GuardrailOverrides_default_instance_;
class TraceConfig_IncidentReportConfig;
struct TraceConfig_IncidentReportConfigDefaultTypeInternal;
extern TraceConfig_IncidentReportConfigDefaultTypeInternal _TraceConfig_IncidentReportConfig_default_instance_;
class TraceConfig_IncrementalStateConfig;
struct TraceConfig_IncrementalStateConfigDefaultTypeInternal;
extern TraceConfig_IncrementalStateConfigDefaultTypeInternal _TraceConfig_IncrementalStateConfig_default_instance_;
class TraceConfig_ProducerConfig;
struct TraceConfig_ProducerConfigDefaultTypeInternal;
extern TraceConfig_ProducerConfigDefaultTypeInternal _TraceConfig_ProducerConfig_default_instance_;
class TraceConfig_StatsdMetadata;
struct TraceConfig_StatsdMetadataDefaultTypeInternal;
extern TraceConfig_StatsdMetadataDefaultTypeInternal _TraceConfig_StatsdMetadata_default_instance_;
class TraceConfig_TraceFilter;
struct TraceConfig_TraceFilterDefaultTypeInternal;
extern TraceConfig_TraceFilterDefaultTypeInternal _TraceConfig_TraceFilter_default_instance_;
class TraceConfig_TraceFilter_StringFilterChain;
struct TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal;
extern TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal _TraceConfig_TraceFilter_StringFilterChain_default_instance_;
class TraceConfig_TraceFilter_StringFilterRule;
struct TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal;
extern TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal _TraceConfig_TraceFilter_StringFilterRule_default_instance_;
class TraceConfig_TriggerConfig;
struct TraceConfig_TriggerConfigDefaultTypeInternal;
extern TraceConfig_TriggerConfigDefaultTypeInternal _TraceConfig_TriggerConfig_default_instance_;
class TraceConfig_TriggerConfig_Trigger;
struct TraceConfig_TriggerConfig_TriggerDefaultTypeInternal;
extern TraceConfig_TriggerConfig_TriggerDefaultTypeInternal _TraceConfig_TriggerConfig_Trigger_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::TraceConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_AndroidReportConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_AndroidReportConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_BufferConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_BufferConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_BuiltinDataSource* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_BuiltinDataSource>(Arena*);
template <>
::perfetto::protos::TraceConfig_CmdTraceStartDelay* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_CmdTraceStartDelay>(Arena*);
template <>
::perfetto::protos::TraceConfig_DataSource* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_DataSource>(Arena*);
template <>
::perfetto::protos::TraceConfig_GuardrailOverrides* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_GuardrailOverrides>(Arena*);
template <>
::perfetto::protos::TraceConfig_IncidentReportConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_IncidentReportConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_IncrementalStateConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_IncrementalStateConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_ProducerConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_ProducerConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_StatsdMetadata* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_StatsdMetadata>(Arena*);
template <>
::perfetto::protos::TraceConfig_TraceFilter* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TraceFilter>(Arena*);
template <>
::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain>(Arena*);
template <>
::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule>(Arena*);
template <>
::perfetto::protos::TraceConfig_TriggerConfig* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TriggerConfig>(Arena*);
template <>
::perfetto::protos::TraceConfig_TriggerConfig_Trigger* Arena::CreateMaybeMessage<::perfetto::protos::TraceConfig_TriggerConfig_Trigger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum TraceConfig_BufferConfig_FillPolicy : int {
  TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED = 0,
  TraceConfig_BufferConfig_FillPolicy_RING_BUFFER = 1,
  TraceConfig_BufferConfig_FillPolicy_DISCARD = 2,
};

bool TraceConfig_BufferConfig_FillPolicy_IsValid(int value);
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig_FillPolicy_FillPolicy_MIN = static_cast<TraceConfig_BufferConfig_FillPolicy>(0);
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig_FillPolicy_FillPolicy_MAX = static_cast<TraceConfig_BufferConfig_FillPolicy>(2);
constexpr int TraceConfig_BufferConfig_FillPolicy_FillPolicy_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TraceConfig_BufferConfig_FillPolicy_descriptor();
template <typename T>
const std::string& TraceConfig_BufferConfig_FillPolicy_Name(T value) {
  static_assert(std::is_same<T, TraceConfig_BufferConfig_FillPolicy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FillPolicy_Name().");
  return TraceConfig_BufferConfig_FillPolicy_Name(static_cast<TraceConfig_BufferConfig_FillPolicy>(value));
}
template <>
inline const std::string& TraceConfig_BufferConfig_FillPolicy_Name(TraceConfig_BufferConfig_FillPolicy value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TraceConfig_BufferConfig_FillPolicy_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TraceConfig_BufferConfig_FillPolicy_Parse(absl::string_view name, TraceConfig_BufferConfig_FillPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceConfig_BufferConfig_FillPolicy>(
      TraceConfig_BufferConfig_FillPolicy_descriptor(), name, value);
}
enum TraceConfig_TriggerConfig_TriggerMode : int {
  TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED = 0,
  TraceConfig_TriggerConfig_TriggerMode_START_TRACING = 1,
  TraceConfig_TriggerConfig_TriggerMode_STOP_TRACING = 2,
  TraceConfig_TriggerConfig_TriggerMode_CLONE_SNAPSHOT = 3,
};

bool TraceConfig_TriggerConfig_TriggerMode_IsValid(int value);
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MIN = static_cast<TraceConfig_TriggerConfig_TriggerMode>(0);
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MAX = static_cast<TraceConfig_TriggerConfig_TriggerMode>(3);
constexpr int TraceConfig_TriggerConfig_TriggerMode_TriggerMode_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TraceConfig_TriggerConfig_TriggerMode_descriptor();
template <typename T>
const std::string& TraceConfig_TriggerConfig_TriggerMode_Name(T value) {
  static_assert(std::is_same<T, TraceConfig_TriggerConfig_TriggerMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TriggerMode_Name().");
  return TraceConfig_TriggerConfig_TriggerMode_Name(static_cast<TraceConfig_TriggerConfig_TriggerMode>(value));
}
template <>
inline const std::string& TraceConfig_TriggerConfig_TriggerMode_Name(TraceConfig_TriggerConfig_TriggerMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TraceConfig_TriggerConfig_TriggerMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TraceConfig_TriggerConfig_TriggerMode_Parse(absl::string_view name, TraceConfig_TriggerConfig_TriggerMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceConfig_TriggerConfig_TriggerMode>(
      TraceConfig_TriggerConfig_TriggerMode_descriptor(), name, value);
}
enum TraceConfig_TraceFilter_StringFilterPolicy : int {
  TraceConfig_TraceFilter_StringFilterPolicy_SFP_UNSPECIFIED = 0,
  TraceConfig_TraceFilter_StringFilterPolicy_SFP_MATCH_REDACT_GROUPS = 1,
  TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_MATCH_REDACT_GROUPS = 2,
  TraceConfig_TraceFilter_StringFilterPolicy_SFP_MATCH_BREAK = 3,
  TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_MATCH_BREAK = 4,
};

bool TraceConfig_TraceFilter_StringFilterPolicy_IsValid(int value);
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter_StringFilterPolicy_StringFilterPolicy_MIN = static_cast<TraceConfig_TraceFilter_StringFilterPolicy>(0);
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter_StringFilterPolicy_StringFilterPolicy_MAX = static_cast<TraceConfig_TraceFilter_StringFilterPolicy>(4);
constexpr int TraceConfig_TraceFilter_StringFilterPolicy_StringFilterPolicy_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TraceConfig_TraceFilter_StringFilterPolicy_descriptor();
template <typename T>
const std::string& TraceConfig_TraceFilter_StringFilterPolicy_Name(T value) {
  static_assert(std::is_same<T, TraceConfig_TraceFilter_StringFilterPolicy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StringFilterPolicy_Name().");
  return TraceConfig_TraceFilter_StringFilterPolicy_Name(static_cast<TraceConfig_TraceFilter_StringFilterPolicy>(value));
}
template <>
inline const std::string& TraceConfig_TraceFilter_StringFilterPolicy_Name(TraceConfig_TraceFilter_StringFilterPolicy value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TraceConfig_TraceFilter_StringFilterPolicy_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TraceConfig_TraceFilter_StringFilterPolicy_Parse(absl::string_view name, TraceConfig_TraceFilter_StringFilterPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceConfig_TraceFilter_StringFilterPolicy>(
      TraceConfig_TraceFilter_StringFilterPolicy_descriptor(), name, value);
}
enum TraceConfig_LockdownModeOperation : int {
  TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED = 0,
  TraceConfig_LockdownModeOperation_LOCKDOWN_CLEAR = 1,
  TraceConfig_LockdownModeOperation_LOCKDOWN_SET = 2,
};

bool TraceConfig_LockdownModeOperation_IsValid(int value);
constexpr TraceConfig_LockdownModeOperation TraceConfig_LockdownModeOperation_LockdownModeOperation_MIN = static_cast<TraceConfig_LockdownModeOperation>(0);
constexpr TraceConfig_LockdownModeOperation TraceConfig_LockdownModeOperation_LockdownModeOperation_MAX = static_cast<TraceConfig_LockdownModeOperation>(2);
constexpr int TraceConfig_LockdownModeOperation_LockdownModeOperation_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TraceConfig_LockdownModeOperation_descriptor();
template <typename T>
const std::string& TraceConfig_LockdownModeOperation_Name(T value) {
  static_assert(std::is_same<T, TraceConfig_LockdownModeOperation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LockdownModeOperation_Name().");
  return TraceConfig_LockdownModeOperation_Name(static_cast<TraceConfig_LockdownModeOperation>(value));
}
template <>
inline const std::string& TraceConfig_LockdownModeOperation_Name(TraceConfig_LockdownModeOperation value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TraceConfig_LockdownModeOperation_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TraceConfig_LockdownModeOperation_Parse(absl::string_view name, TraceConfig_LockdownModeOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceConfig_LockdownModeOperation>(
      TraceConfig_LockdownModeOperation_descriptor(), name, value);
}
enum TraceConfig_CompressionType : int {
  TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED = 0,
  TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE = 1,
};

bool TraceConfig_CompressionType_IsValid(int value);
constexpr TraceConfig_CompressionType TraceConfig_CompressionType_CompressionType_MIN = static_cast<TraceConfig_CompressionType>(0);
constexpr TraceConfig_CompressionType TraceConfig_CompressionType_CompressionType_MAX = static_cast<TraceConfig_CompressionType>(1);
constexpr int TraceConfig_CompressionType_CompressionType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TraceConfig_CompressionType_descriptor();
template <typename T>
const std::string& TraceConfig_CompressionType_Name(T value) {
  static_assert(std::is_same<T, TraceConfig_CompressionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CompressionType_Name().");
  return TraceConfig_CompressionType_Name(static_cast<TraceConfig_CompressionType>(value));
}
template <>
inline const std::string& TraceConfig_CompressionType_Name(TraceConfig_CompressionType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TraceConfig_CompressionType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TraceConfig_CompressionType_Parse(absl::string_view name, TraceConfig_CompressionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceConfig_CompressionType>(
      TraceConfig_CompressionType_descriptor(), name, value);
}
enum TraceConfig_StatsdLogging : int {
  TraceConfig_StatsdLogging_STATSD_LOGGING_UNSPECIFIED = 0,
  TraceConfig_StatsdLogging_STATSD_LOGGING_ENABLED = 1,
  TraceConfig_StatsdLogging_STATSD_LOGGING_DISABLED = 2,
};

bool TraceConfig_StatsdLogging_IsValid(int value);
constexpr TraceConfig_StatsdLogging TraceConfig_StatsdLogging_StatsdLogging_MIN = static_cast<TraceConfig_StatsdLogging>(0);
constexpr TraceConfig_StatsdLogging TraceConfig_StatsdLogging_StatsdLogging_MAX = static_cast<TraceConfig_StatsdLogging>(2);
constexpr int TraceConfig_StatsdLogging_StatsdLogging_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TraceConfig_StatsdLogging_descriptor();
template <typename T>
const std::string& TraceConfig_StatsdLogging_Name(T value) {
  static_assert(std::is_same<T, TraceConfig_StatsdLogging>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatsdLogging_Name().");
  return TraceConfig_StatsdLogging_Name(static_cast<TraceConfig_StatsdLogging>(value));
}
template <>
inline const std::string& TraceConfig_StatsdLogging_Name(TraceConfig_StatsdLogging value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TraceConfig_StatsdLogging_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TraceConfig_StatsdLogging_Parse(absl::string_view name, TraceConfig_StatsdLogging* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceConfig_StatsdLogging>(
      TraceConfig_StatsdLogging_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TraceConfig_BufferConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.BufferConfig) */ {
 public:
  inline TraceConfig_BufferConfig() : TraceConfig_BufferConfig(nullptr) {}
  ~TraceConfig_BufferConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_BufferConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_BufferConfig(const TraceConfig_BufferConfig& from);
  TraceConfig_BufferConfig(TraceConfig_BufferConfig&& from) noexcept
    : TraceConfig_BufferConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_BufferConfig& operator=(const TraceConfig_BufferConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_BufferConfig& operator=(TraceConfig_BufferConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_BufferConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_BufferConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_BufferConfig*>(
               &_TraceConfig_BufferConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceConfig_BufferConfig& a, TraceConfig_BufferConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_BufferConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_BufferConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_BufferConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_BufferConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_BufferConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_BufferConfig& from) {
    TraceConfig_BufferConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_BufferConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.BufferConfig";
  }
  protected:
  explicit TraceConfig_BufferConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using FillPolicy = TraceConfig_BufferConfig_FillPolicy;
  static constexpr FillPolicy UNSPECIFIED = TraceConfig_BufferConfig_FillPolicy_UNSPECIFIED;
  static constexpr FillPolicy RING_BUFFER = TraceConfig_BufferConfig_FillPolicy_RING_BUFFER;
  static constexpr FillPolicy DISCARD = TraceConfig_BufferConfig_FillPolicy_DISCARD;
  static inline bool FillPolicy_IsValid(int value) {
    return TraceConfig_BufferConfig_FillPolicy_IsValid(value);
  }
  static constexpr FillPolicy FillPolicy_MIN = TraceConfig_BufferConfig_FillPolicy_FillPolicy_MIN;
  static constexpr FillPolicy FillPolicy_MAX = TraceConfig_BufferConfig_FillPolicy_FillPolicy_MAX;
  static constexpr int FillPolicy_ARRAYSIZE = TraceConfig_BufferConfig_FillPolicy_FillPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillPolicy_descriptor() {
    return TraceConfig_BufferConfig_FillPolicy_descriptor();
  }
  template <typename T>
  static inline const std::string& FillPolicy_Name(T value) {
    return TraceConfig_BufferConfig_FillPolicy_Name(value);
  }
  static inline bool FillPolicy_Parse(absl::string_view name, FillPolicy* value) {
    return TraceConfig_BufferConfig_FillPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizeKbFieldNumber = 1,
    kFillPolicyFieldNumber = 4,
  };
  // optional uint32 size_kb = 1;
  bool has_size_kb() const;
  void clear_size_kb() ;
  ::uint32_t size_kb() const;
  void set_size_kb(::uint32_t value);

  private:
  ::uint32_t _internal_size_kb() const;
  void _internal_set_size_kb(::uint32_t value);

  public:
  // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
  bool has_fill_policy() const;
  void clear_fill_policy() ;
  ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy fill_policy() const;
  void set_fill_policy(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy value);

  private:
  ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy _internal_fill_policy() const;
  void _internal_set_fill_policy(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.BufferConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t size_kb_;
    int fill_policy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_DataSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.DataSource) */ {
 public:
  inline TraceConfig_DataSource() : TraceConfig_DataSource(nullptr) {}
  ~TraceConfig_DataSource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_DataSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_DataSource(const TraceConfig_DataSource& from);
  TraceConfig_DataSource(TraceConfig_DataSource&& from) noexcept
    : TraceConfig_DataSource() {
    *this = ::std::move(from);
  }

  inline TraceConfig_DataSource& operator=(const TraceConfig_DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_DataSource& operator=(TraceConfig_DataSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_DataSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_DataSource* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_DataSource*>(
               &_TraceConfig_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceConfig_DataSource& a, TraceConfig_DataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_DataSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_DataSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_DataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_DataSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_DataSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_DataSource& from) {
    TraceConfig_DataSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_DataSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.DataSource";
  }
  protected:
  explicit TraceConfig_DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerNameFilterFieldNumber = 2,
    kProducerNameRegexFilterFieldNumber = 3,
    kConfigFieldNumber = 1,
  };
  // repeated string producer_name_filter = 2;
  int producer_name_filter_size() const;
  private:
  int _internal_producer_name_filter_size() const;

  public:
  void clear_producer_name_filter() ;
  const std::string& producer_name_filter(int index) const;
  std::string* mutable_producer_name_filter(int index);
  void set_producer_name_filter(int index, const std::string& value);
  void set_producer_name_filter(int index, std::string&& value);
  void set_producer_name_filter(int index, const char* value);
  void set_producer_name_filter(int index, const char* value, std::size_t size);
  void set_producer_name_filter(int index, absl::string_view value);
  std::string* add_producer_name_filter();
  void add_producer_name_filter(const std::string& value);
  void add_producer_name_filter(std::string&& value);
  void add_producer_name_filter(const char* value);
  void add_producer_name_filter(const char* value, std::size_t size);
  void add_producer_name_filter(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& producer_name_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_producer_name_filter();

  private:
  const std::string& _internal_producer_name_filter(int index) const;
  std::string* _internal_add_producer_name_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_producer_name_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_producer_name_filter();

  public:
  // repeated string producer_name_regex_filter = 3;
  int producer_name_regex_filter_size() const;
  private:
  int _internal_producer_name_regex_filter_size() const;

  public:
  void clear_producer_name_regex_filter() ;
  const std::string& producer_name_regex_filter(int index) const;
  std::string* mutable_producer_name_regex_filter(int index);
  void set_producer_name_regex_filter(int index, const std::string& value);
  void set_producer_name_regex_filter(int index, std::string&& value);
  void set_producer_name_regex_filter(int index, const char* value);
  void set_producer_name_regex_filter(int index, const char* value, std::size_t size);
  void set_producer_name_regex_filter(int index, absl::string_view value);
  std::string* add_producer_name_regex_filter();
  void add_producer_name_regex_filter(const std::string& value);
  void add_producer_name_regex_filter(std::string&& value);
  void add_producer_name_regex_filter(const char* value);
  void add_producer_name_regex_filter(const char* value, std::size_t size);
  void add_producer_name_regex_filter(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& producer_name_regex_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_producer_name_regex_filter();

  private:
  const std::string& _internal_producer_name_regex_filter(int index) const;
  std::string* _internal_add_producer_name_regex_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_producer_name_regex_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_producer_name_regex_filter();

  public:
  // optional .perfetto.protos.DataSourceConfig config = 1;
  bool has_config() const;
  void clear_config() ;
  const ::perfetto::protos::DataSourceConfig& config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DataSourceConfig* release_config();
  ::perfetto::protos::DataSourceConfig* mutable_config();
  void set_allocated_config(::perfetto::protos::DataSourceConfig* config);
  private:
  const ::perfetto::protos::DataSourceConfig& _internal_config() const;
  ::perfetto::protos::DataSourceConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::perfetto::protos::DataSourceConfig* config);
  ::perfetto::protos::DataSourceConfig* unsafe_arena_release_config();
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.DataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> producer_name_filter_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> producer_name_regex_filter_;
    ::perfetto::protos::DataSourceConfig* config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_BuiltinDataSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.BuiltinDataSource) */ {
 public:
  inline TraceConfig_BuiltinDataSource() : TraceConfig_BuiltinDataSource(nullptr) {}
  ~TraceConfig_BuiltinDataSource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_BuiltinDataSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_BuiltinDataSource(const TraceConfig_BuiltinDataSource& from);
  TraceConfig_BuiltinDataSource(TraceConfig_BuiltinDataSource&& from) noexcept
    : TraceConfig_BuiltinDataSource() {
    *this = ::std::move(from);
  }

  inline TraceConfig_BuiltinDataSource& operator=(const TraceConfig_BuiltinDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_BuiltinDataSource& operator=(TraceConfig_BuiltinDataSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_BuiltinDataSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_BuiltinDataSource* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_BuiltinDataSource*>(
               &_TraceConfig_BuiltinDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TraceConfig_BuiltinDataSource& a, TraceConfig_BuiltinDataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_BuiltinDataSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_BuiltinDataSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_BuiltinDataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_BuiltinDataSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_BuiltinDataSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_BuiltinDataSource& from) {
    TraceConfig_BuiltinDataSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_BuiltinDataSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.BuiltinDataSource";
  }
  protected:
  explicit TraceConfig_BuiltinDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisableClockSnapshottingFieldNumber = 1,
    kDisableTraceConfigFieldNumber = 2,
    kDisableSystemInfoFieldNumber = 3,
    kDisableServiceEventsFieldNumber = 4,
    kPrimaryTraceClockFieldNumber = 5,
    kSnapshotIntervalMsFieldNumber = 6,
    kPreferSuspendClockForSnapshotFieldNumber = 7,
    kDisableChunkUsageHistogramsFieldNumber = 8,
  };
  // optional bool disable_clock_snapshotting = 1;
  bool has_disable_clock_snapshotting() const;
  void clear_disable_clock_snapshotting() ;
  bool disable_clock_snapshotting() const;
  void set_disable_clock_snapshotting(bool value);

  private:
  bool _internal_disable_clock_snapshotting() const;
  void _internal_set_disable_clock_snapshotting(bool value);

  public:
  // optional bool disable_trace_config = 2;
  bool has_disable_trace_config() const;
  void clear_disable_trace_config() ;
  bool disable_trace_config() const;
  void set_disable_trace_config(bool value);

  private:
  bool _internal_disable_trace_config() const;
  void _internal_set_disable_trace_config(bool value);

  public:
  // optional bool disable_system_info = 3;
  bool has_disable_system_info() const;
  void clear_disable_system_info() ;
  bool disable_system_info() const;
  void set_disable_system_info(bool value);

  private:
  bool _internal_disable_system_info() const;
  void _internal_set_disable_system_info(bool value);

  public:
  // optional bool disable_service_events = 4;
  bool has_disable_service_events() const;
  void clear_disable_service_events() ;
  bool disable_service_events() const;
  void set_disable_service_events(bool value);

  private:
  bool _internal_disable_service_events() const;
  void _internal_set_disable_service_events(bool value);

  public:
  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
  bool has_primary_trace_clock() const;
  void clear_primary_trace_clock() ;
  ::perfetto::protos::BuiltinClock primary_trace_clock() const;
  void set_primary_trace_clock(::perfetto::protos::BuiltinClock value);

  private:
  ::perfetto::protos::BuiltinClock _internal_primary_trace_clock() const;
  void _internal_set_primary_trace_clock(::perfetto::protos::BuiltinClock value);

  public:
  // optional uint32 snapshot_interval_ms = 6;
  bool has_snapshot_interval_ms() const;
  void clear_snapshot_interval_ms() ;
  ::uint32_t snapshot_interval_ms() const;
  void set_snapshot_interval_ms(::uint32_t value);

  private:
  ::uint32_t _internal_snapshot_interval_ms() const;
  void _internal_set_snapshot_interval_ms(::uint32_t value);

  public:
  // optional bool prefer_suspend_clock_for_snapshot = 7;
  bool has_prefer_suspend_clock_for_snapshot() const;
  void clear_prefer_suspend_clock_for_snapshot() ;
  bool prefer_suspend_clock_for_snapshot() const;
  void set_prefer_suspend_clock_for_snapshot(bool value);

  private:
  bool _internal_prefer_suspend_clock_for_snapshot() const;
  void _internal_set_prefer_suspend_clock_for_snapshot(bool value);

  public:
  // optional bool disable_chunk_usage_histograms = 8;
  bool has_disable_chunk_usage_histograms() const;
  void clear_disable_chunk_usage_histograms() ;
  bool disable_chunk_usage_histograms() const;
  void set_disable_chunk_usage_histograms(bool value);

  private:
  bool _internal_disable_chunk_usage_histograms() const;
  void _internal_set_disable_chunk_usage_histograms(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.BuiltinDataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool disable_clock_snapshotting_;
    bool disable_trace_config_;
    bool disable_system_info_;
    bool disable_service_events_;
    int primary_trace_clock_;
    ::uint32_t snapshot_interval_ms_;
    bool prefer_suspend_clock_for_snapshot_;
    bool disable_chunk_usage_histograms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_ProducerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.ProducerConfig) */ {
 public:
  inline TraceConfig_ProducerConfig() : TraceConfig_ProducerConfig(nullptr) {}
  ~TraceConfig_ProducerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_ProducerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_ProducerConfig(const TraceConfig_ProducerConfig& from);
  TraceConfig_ProducerConfig(TraceConfig_ProducerConfig&& from) noexcept
    : TraceConfig_ProducerConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_ProducerConfig& operator=(const TraceConfig_ProducerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_ProducerConfig& operator=(TraceConfig_ProducerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_ProducerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_ProducerConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_ProducerConfig*>(
               &_TraceConfig_ProducerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TraceConfig_ProducerConfig& a, TraceConfig_ProducerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_ProducerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_ProducerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_ProducerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_ProducerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_ProducerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_ProducerConfig& from) {
    TraceConfig_ProducerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_ProducerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.ProducerConfig";
  }
  protected:
  explicit TraceConfig_ProducerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerNameFieldNumber = 1,
    kShmSizeKbFieldNumber = 2,
    kPageSizeKbFieldNumber = 3,
  };
  // optional string producer_name = 1;
  bool has_producer_name() const;
  void clear_producer_name() ;
  const std::string& producer_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_producer_name(Arg_&& arg, Args_... args);
  std::string* mutable_producer_name();
  PROTOBUF_NODISCARD std::string* release_producer_name();
  void set_allocated_producer_name(std::string* ptr);

  private:
  const std::string& _internal_producer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_name(
      const std::string& value);
  std::string* _internal_mutable_producer_name();

  public:
  // optional uint32 shm_size_kb = 2;
  bool has_shm_size_kb() const;
  void clear_shm_size_kb() ;
  ::uint32_t shm_size_kb() const;
  void set_shm_size_kb(::uint32_t value);

  private:
  ::uint32_t _internal_shm_size_kb() const;
  void _internal_set_shm_size_kb(::uint32_t value);

  public:
  // optional uint32 page_size_kb = 3;
  bool has_page_size_kb() const;
  void clear_page_size_kb() ;
  ::uint32_t page_size_kb() const;
  void set_page_size_kb(::uint32_t value);

  private:
  ::uint32_t _internal_page_size_kb() const;
  void _internal_set_page_size_kb(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.ProducerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_name_;
    ::uint32_t shm_size_kb_;
    ::uint32_t page_size_kb_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_StatsdMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.StatsdMetadata) */ {
 public:
  inline TraceConfig_StatsdMetadata() : TraceConfig_StatsdMetadata(nullptr) {}
  ~TraceConfig_StatsdMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_StatsdMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_StatsdMetadata(const TraceConfig_StatsdMetadata& from);
  TraceConfig_StatsdMetadata(TraceConfig_StatsdMetadata&& from) noexcept
    : TraceConfig_StatsdMetadata() {
    *this = ::std::move(from);
  }

  inline TraceConfig_StatsdMetadata& operator=(const TraceConfig_StatsdMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_StatsdMetadata& operator=(TraceConfig_StatsdMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_StatsdMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_StatsdMetadata* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_StatsdMetadata*>(
               &_TraceConfig_StatsdMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TraceConfig_StatsdMetadata& a, TraceConfig_StatsdMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_StatsdMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_StatsdMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_StatsdMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_StatsdMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_StatsdMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_StatsdMetadata& from) {
    TraceConfig_StatsdMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_StatsdMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.StatsdMetadata";
  }
  protected:
  explicit TraceConfig_StatsdMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggeringAlertIdFieldNumber = 1,
    kTriggeringConfigIdFieldNumber = 3,
    kTriggeringSubscriptionIdFieldNumber = 4,
    kTriggeringConfigUidFieldNumber = 2,
  };
  // optional int64 triggering_alert_id = 1;
  bool has_triggering_alert_id() const;
  void clear_triggering_alert_id() ;
  ::int64_t triggering_alert_id() const;
  void set_triggering_alert_id(::int64_t value);

  private:
  ::int64_t _internal_triggering_alert_id() const;
  void _internal_set_triggering_alert_id(::int64_t value);

  public:
  // optional int64 triggering_config_id = 3;
  bool has_triggering_config_id() const;
  void clear_triggering_config_id() ;
  ::int64_t triggering_config_id() const;
  void set_triggering_config_id(::int64_t value);

  private:
  ::int64_t _internal_triggering_config_id() const;
  void _internal_set_triggering_config_id(::int64_t value);

  public:
  // optional int64 triggering_subscription_id = 4;
  bool has_triggering_subscription_id() const;
  void clear_triggering_subscription_id() ;
  ::int64_t triggering_subscription_id() const;
  void set_triggering_subscription_id(::int64_t value);

  private:
  ::int64_t _internal_triggering_subscription_id() const;
  void _internal_set_triggering_subscription_id(::int64_t value);

  public:
  // optional int32 triggering_config_uid = 2;
  bool has_triggering_config_uid() const;
  void clear_triggering_config_uid() ;
  ::int32_t triggering_config_uid() const;
  void set_triggering_config_uid(::int32_t value);

  private:
  ::int32_t _internal_triggering_config_uid() const;
  void _internal_set_triggering_config_uid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.StatsdMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t triggering_alert_id_;
    ::int64_t triggering_config_id_;
    ::int64_t triggering_subscription_id_;
    ::int32_t triggering_config_uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_GuardrailOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.GuardrailOverrides) */ {
 public:
  inline TraceConfig_GuardrailOverrides() : TraceConfig_GuardrailOverrides(nullptr) {}
  ~TraceConfig_GuardrailOverrides() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_GuardrailOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_GuardrailOverrides(const TraceConfig_GuardrailOverrides& from);
  TraceConfig_GuardrailOverrides(TraceConfig_GuardrailOverrides&& from) noexcept
    : TraceConfig_GuardrailOverrides() {
    *this = ::std::move(from);
  }

  inline TraceConfig_GuardrailOverrides& operator=(const TraceConfig_GuardrailOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_GuardrailOverrides& operator=(TraceConfig_GuardrailOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_GuardrailOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_GuardrailOverrides* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_GuardrailOverrides*>(
               &_TraceConfig_GuardrailOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TraceConfig_GuardrailOverrides& a, TraceConfig_GuardrailOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_GuardrailOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_GuardrailOverrides* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_GuardrailOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_GuardrailOverrides>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_GuardrailOverrides& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_GuardrailOverrides& from) {
    TraceConfig_GuardrailOverrides::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_GuardrailOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.GuardrailOverrides";
  }
  protected:
  explicit TraceConfig_GuardrailOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxUploadPerDayBytesFieldNumber = 1,
    kMaxTracingBufferSizeKbFieldNumber = 2,
  };
  // optional uint64 max_upload_per_day_bytes = 1;
  bool has_max_upload_per_day_bytes() const;
  void clear_max_upload_per_day_bytes() ;
  ::uint64_t max_upload_per_day_bytes() const;
  void set_max_upload_per_day_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_max_upload_per_day_bytes() const;
  void _internal_set_max_upload_per_day_bytes(::uint64_t value);

  public:
  // optional uint32 max_tracing_buffer_size_kb = 2;
  bool has_max_tracing_buffer_size_kb() const;
  void clear_max_tracing_buffer_size_kb() ;
  ::uint32_t max_tracing_buffer_size_kb() const;
  void set_max_tracing_buffer_size_kb(::uint32_t value);

  private:
  ::uint32_t _internal_max_tracing_buffer_size_kb() const;
  void _internal_set_max_tracing_buffer_size_kb(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.GuardrailOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t max_upload_per_day_bytes_;
    ::uint32_t max_tracing_buffer_size_kb_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_TriggerConfig_Trigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TriggerConfig.Trigger) */ {
 public:
  inline TraceConfig_TriggerConfig_Trigger() : TraceConfig_TriggerConfig_Trigger(nullptr) {}
  ~TraceConfig_TriggerConfig_Trigger() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig_Trigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_TriggerConfig_Trigger(const TraceConfig_TriggerConfig_Trigger& from);
  TraceConfig_TriggerConfig_Trigger(TraceConfig_TriggerConfig_Trigger&& from) noexcept
    : TraceConfig_TriggerConfig_Trigger() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TriggerConfig_Trigger& operator=(const TraceConfig_TriggerConfig_Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TriggerConfig_Trigger& operator=(TraceConfig_TriggerConfig_Trigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_TriggerConfig_Trigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_TriggerConfig_Trigger* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TriggerConfig_Trigger*>(
               &_TraceConfig_TriggerConfig_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TraceConfig_TriggerConfig_Trigger& a, TraceConfig_TriggerConfig_Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TriggerConfig_Trigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_TriggerConfig_Trigger* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_TriggerConfig_Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_TriggerConfig_Trigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_TriggerConfig_Trigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_TriggerConfig_Trigger& from) {
    TraceConfig_TriggerConfig_Trigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_TriggerConfig_Trigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.TriggerConfig.Trigger";
  }
  protected:
  explicit TraceConfig_TriggerConfig_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProducerNameRegexFieldNumber = 2,
    kStopDelayMsFieldNumber = 3,
    kMaxPer24HFieldNumber = 4,
    kSkipProbabilityFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string producer_name_regex = 2;
  bool has_producer_name_regex() const;
  void clear_producer_name_regex() ;
  const std::string& producer_name_regex() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_producer_name_regex(Arg_&& arg, Args_... args);
  std::string* mutable_producer_name_regex();
  PROTOBUF_NODISCARD std::string* release_producer_name_regex();
  void set_allocated_producer_name_regex(std::string* ptr);

  private:
  const std::string& _internal_producer_name_regex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_name_regex(
      const std::string& value);
  std::string* _internal_mutable_producer_name_regex();

  public:
  // optional uint32 stop_delay_ms = 3;
  bool has_stop_delay_ms() const;
  void clear_stop_delay_ms() ;
  ::uint32_t stop_delay_ms() const;
  void set_stop_delay_ms(::uint32_t value);

  private:
  ::uint32_t _internal_stop_delay_ms() const;
  void _internal_set_stop_delay_ms(::uint32_t value);

  public:
  // optional uint32 max_per_24_h = 4;
  bool has_max_per_24_h() const;
  void clear_max_per_24_h() ;
  ::uint32_t max_per_24_h() const;
  void set_max_per_24_h(::uint32_t value);

  private:
  ::uint32_t _internal_max_per_24_h() const;
  void _internal_set_max_per_24_h(::uint32_t value);

  public:
  // optional double skip_probability = 5;
  bool has_skip_probability() const;
  void clear_skip_probability() ;
  double skip_probability() const;
  void set_skip_probability(double value);

  private:
  double _internal_skip_probability() const;
  void _internal_set_skip_probability(double value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_name_regex_;
    ::uint32_t stop_delay_ms_;
    ::uint32_t max_per_24_h_;
    double skip_probability_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_TriggerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TriggerConfig) */ {
 public:
  inline TraceConfig_TriggerConfig() : TraceConfig_TriggerConfig(nullptr) {}
  ~TraceConfig_TriggerConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_TriggerConfig(const TraceConfig_TriggerConfig& from);
  TraceConfig_TriggerConfig(TraceConfig_TriggerConfig&& from) noexcept
    : TraceConfig_TriggerConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TriggerConfig& operator=(const TraceConfig_TriggerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TriggerConfig& operator=(TraceConfig_TriggerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_TriggerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_TriggerConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TriggerConfig*>(
               &_TraceConfig_TriggerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TraceConfig_TriggerConfig& a, TraceConfig_TriggerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TriggerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_TriggerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_TriggerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_TriggerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_TriggerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_TriggerConfig& from) {
    TraceConfig_TriggerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_TriggerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.TriggerConfig";
  }
  protected:
  explicit TraceConfig_TriggerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TraceConfig_TriggerConfig_Trigger Trigger;

  using TriggerMode = TraceConfig_TriggerConfig_TriggerMode;
  static constexpr TriggerMode UNSPECIFIED = TraceConfig_TriggerConfig_TriggerMode_UNSPECIFIED;
  static constexpr TriggerMode START_TRACING = TraceConfig_TriggerConfig_TriggerMode_START_TRACING;
  static constexpr TriggerMode STOP_TRACING = TraceConfig_TriggerConfig_TriggerMode_STOP_TRACING;
  static constexpr TriggerMode CLONE_SNAPSHOT = TraceConfig_TriggerConfig_TriggerMode_CLONE_SNAPSHOT;
  static inline bool TriggerMode_IsValid(int value) {
    return TraceConfig_TriggerConfig_TriggerMode_IsValid(value);
  }
  static constexpr TriggerMode TriggerMode_MIN = TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MIN;
  static constexpr TriggerMode TriggerMode_MAX = TraceConfig_TriggerConfig_TriggerMode_TriggerMode_MAX;
  static constexpr int TriggerMode_ARRAYSIZE = TraceConfig_TriggerConfig_TriggerMode_TriggerMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TriggerMode_descriptor() {
    return TraceConfig_TriggerConfig_TriggerMode_descriptor();
  }
  template <typename T>
  static inline const std::string& TriggerMode_Name(T value) {
    return TraceConfig_TriggerConfig_TriggerMode_Name(value);
  }
  static inline bool TriggerMode_Parse(absl::string_view name, TriggerMode* value) {
    return TraceConfig_TriggerConfig_TriggerMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTriggersFieldNumber = 2,
    kTriggerModeFieldNumber = 1,
    kTriggerTimeoutMsFieldNumber = 3,
    kUseCloneSnapshotIfAvailableFieldNumber = 4,
  };
  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;

  public:
  void clear_triggers() ;
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* mutable_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >*
      mutable_triggers();
  private:
  const ::perfetto::protos::TraceConfig_TriggerConfig_Trigger& _internal_triggers(int index) const;
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* _internal_add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TriggerConfig_Trigger>& _internal_triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TriggerConfig_Trigger>* _internal_mutable_triggers();
  public:
  const ::perfetto::protos::TraceConfig_TriggerConfig_Trigger& triggers(int index) const;
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >&
      triggers() const;
  // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
  bool has_trigger_mode() const;
  void clear_trigger_mode() ;
  ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode trigger_mode() const;
  void set_trigger_mode(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode value);

  private:
  ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode _internal_trigger_mode() const;
  void _internal_set_trigger_mode(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode value);

  public:
  // optional uint32 trigger_timeout_ms = 3;
  bool has_trigger_timeout_ms() const;
  void clear_trigger_timeout_ms() ;
  ::uint32_t trigger_timeout_ms() const;
  void set_trigger_timeout_ms(::uint32_t value);

  private:
  ::uint32_t _internal_trigger_timeout_ms() const;
  void _internal_set_trigger_timeout_ms(::uint32_t value);

  public:
  // optional bool use_clone_snapshot_if_available = 4;
  bool has_use_clone_snapshot_if_available() const;
  void clear_use_clone_snapshot_if_available() ;
  bool use_clone_snapshot_if_available() const;
  void set_use_clone_snapshot_if_available(bool value);

  private:
  bool _internal_use_clone_snapshot_if_available() const;
  void _internal_set_use_clone_snapshot_if_available(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TriggerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger > triggers_;
    int trigger_mode_;
    ::uint32_t trigger_timeout_ms_;
    bool use_clone_snapshot_if_available_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_IncrementalStateConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.IncrementalStateConfig) */ {
 public:
  inline TraceConfig_IncrementalStateConfig() : TraceConfig_IncrementalStateConfig(nullptr) {}
  ~TraceConfig_IncrementalStateConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_IncrementalStateConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_IncrementalStateConfig(const TraceConfig_IncrementalStateConfig& from);
  TraceConfig_IncrementalStateConfig(TraceConfig_IncrementalStateConfig&& from) noexcept
    : TraceConfig_IncrementalStateConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_IncrementalStateConfig& operator=(const TraceConfig_IncrementalStateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_IncrementalStateConfig& operator=(TraceConfig_IncrementalStateConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_IncrementalStateConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_IncrementalStateConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_IncrementalStateConfig*>(
               &_TraceConfig_IncrementalStateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TraceConfig_IncrementalStateConfig& a, TraceConfig_IncrementalStateConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_IncrementalStateConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_IncrementalStateConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_IncrementalStateConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_IncrementalStateConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_IncrementalStateConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_IncrementalStateConfig& from) {
    TraceConfig_IncrementalStateConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_IncrementalStateConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.IncrementalStateConfig";
  }
  protected:
  explicit TraceConfig_IncrementalStateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearPeriodMsFieldNumber = 1,
  };
  // optional uint32 clear_period_ms = 1;
  bool has_clear_period_ms() const;
  void clear_clear_period_ms() ;
  ::uint32_t clear_period_ms() const;
  void set_clear_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_clear_period_ms() const;
  void _internal_set_clear_period_ms(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.IncrementalStateConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t clear_period_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_IncidentReportConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.IncidentReportConfig) */ {
 public:
  inline TraceConfig_IncidentReportConfig() : TraceConfig_IncidentReportConfig(nullptr) {}
  ~TraceConfig_IncidentReportConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_IncidentReportConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_IncidentReportConfig(const TraceConfig_IncidentReportConfig& from);
  TraceConfig_IncidentReportConfig(TraceConfig_IncidentReportConfig&& from) noexcept
    : TraceConfig_IncidentReportConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_IncidentReportConfig& operator=(const TraceConfig_IncidentReportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_IncidentReportConfig& operator=(TraceConfig_IncidentReportConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_IncidentReportConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_IncidentReportConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_IncidentReportConfig*>(
               &_TraceConfig_IncidentReportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TraceConfig_IncidentReportConfig& a, TraceConfig_IncidentReportConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_IncidentReportConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_IncidentReportConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_IncidentReportConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_IncidentReportConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_IncidentReportConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_IncidentReportConfig& from) {
    TraceConfig_IncidentReportConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_IncidentReportConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.IncidentReportConfig";
  }
  protected:
  explicit TraceConfig_IncidentReportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationPackageFieldNumber = 1,
    kDestinationClassFieldNumber = 2,
    kPrivacyLevelFieldNumber = 3,
    kSkipIncidentdFieldNumber = 5,
    kSkipDropboxFieldNumber = 4,
  };
  // optional string destination_package = 1;
  bool has_destination_package() const;
  void clear_destination_package() ;
  const std::string& destination_package() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_package(Arg_&& arg, Args_... args);
  std::string* mutable_destination_package();
  PROTOBUF_NODISCARD std::string* release_destination_package();
  void set_allocated_destination_package(std::string* ptr);

  private:
  const std::string& _internal_destination_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_package(
      const std::string& value);
  std::string* _internal_mutable_destination_package();

  public:
  // optional string destination_class = 2;
  bool has_destination_class() const;
  void clear_destination_class() ;
  const std::string& destination_class() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_class(Arg_&& arg, Args_... args);
  std::string* mutable_destination_class();
  PROTOBUF_NODISCARD std::string* release_destination_class();
  void set_allocated_destination_class(std::string* ptr);

  private:
  const std::string& _internal_destination_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_class(
      const std::string& value);
  std::string* _internal_mutable_destination_class();

  public:
  // optional int32 privacy_level = 3;
  bool has_privacy_level() const;
  void clear_privacy_level() ;
  ::int32_t privacy_level() const;
  void set_privacy_level(::int32_t value);

  private:
  ::int32_t _internal_privacy_level() const;
  void _internal_set_privacy_level(::int32_t value);

  public:
  // optional bool skip_incidentd = 5;
  bool has_skip_incidentd() const;
  void clear_skip_incidentd() ;
  bool skip_incidentd() const;
  void set_skip_incidentd(bool value);

  private:
  bool _internal_skip_incidentd() const;
  void _internal_set_skip_incidentd(bool value);

  public:
  // optional bool skip_dropbox = 4 [deprecated = true];
  [[deprecated]]  bool has_skip_dropbox() const;
  [[deprecated]]  void clear_skip_dropbox() ;
  [[deprecated]] bool skip_dropbox() const;
  [[deprecated]] void set_skip_dropbox(bool value);

  private:
  bool _internal_skip_dropbox() const;
  void _internal_set_skip_dropbox(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.IncidentReportConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_package_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_class_;
    ::int32_t privacy_level_;
    bool skip_incidentd_;
    bool skip_dropbox_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_TraceFilter_StringFilterRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule) */ {
 public:
  inline TraceConfig_TraceFilter_StringFilterRule() : TraceConfig_TraceFilter_StringFilterRule(nullptr) {}
  ~TraceConfig_TraceFilter_StringFilterRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_TraceFilter_StringFilterRule(const TraceConfig_TraceFilter_StringFilterRule& from);
  TraceConfig_TraceFilter_StringFilterRule(TraceConfig_TraceFilter_StringFilterRule&& from) noexcept
    : TraceConfig_TraceFilter_StringFilterRule() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TraceFilter_StringFilterRule& operator=(const TraceConfig_TraceFilter_StringFilterRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TraceFilter_StringFilterRule& operator=(TraceConfig_TraceFilter_StringFilterRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_TraceFilter_StringFilterRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_TraceFilter_StringFilterRule* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TraceFilter_StringFilterRule*>(
               &_TraceConfig_TraceFilter_StringFilterRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TraceConfig_TraceFilter_StringFilterRule& a, TraceConfig_TraceFilter_StringFilterRule& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TraceFilter_StringFilterRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_TraceFilter_StringFilterRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_TraceFilter_StringFilterRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_TraceFilter_StringFilterRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_TraceFilter_StringFilterRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_TraceFilter_StringFilterRule& from) {
    TraceConfig_TraceFilter_StringFilterRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_TraceFilter_StringFilterRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.TraceFilter.StringFilterRule";
  }
  protected:
  explicit TraceConfig_TraceFilter_StringFilterRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexPatternFieldNumber = 2,
    kAtracePayloadStartsWithFieldNumber = 3,
    kPolicyFieldNumber = 1,
  };
  // optional string regex_pattern = 2;
  bool has_regex_pattern() const;
  void clear_regex_pattern() ;
  const std::string& regex_pattern() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_regex_pattern(Arg_&& arg, Args_... args);
  std::string* mutable_regex_pattern();
  PROTOBUF_NODISCARD std::string* release_regex_pattern();
  void set_allocated_regex_pattern(std::string* ptr);

  private:
  const std::string& _internal_regex_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regex_pattern(
      const std::string& value);
  std::string* _internal_mutable_regex_pattern();

  public:
  // optional string atrace_payload_starts_with = 3;
  bool has_atrace_payload_starts_with() const;
  void clear_atrace_payload_starts_with() ;
  const std::string& atrace_payload_starts_with() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_atrace_payload_starts_with(Arg_&& arg, Args_... args);
  std::string* mutable_atrace_payload_starts_with();
  PROTOBUF_NODISCARD std::string* release_atrace_payload_starts_with();
  void set_allocated_atrace_payload_starts_with(std::string* ptr);

  private:
  const std::string& _internal_atrace_payload_starts_with() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atrace_payload_starts_with(
      const std::string& value);
  std::string* _internal_mutable_atrace_payload_starts_with();

  public:
  // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
  bool has_policy() const;
  void clear_policy() ;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy policy() const;
  void set_policy(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy value);

  private:
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy _internal_policy() const;
  void _internal_set_policy(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_pattern_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atrace_payload_starts_with_;
    int policy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_TraceFilter_StringFilterChain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain) */ {
 public:
  inline TraceConfig_TraceFilter_StringFilterChain() : TraceConfig_TraceFilter_StringFilterChain(nullptr) {}
  ~TraceConfig_TraceFilter_StringFilterChain() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterChain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_TraceFilter_StringFilterChain(const TraceConfig_TraceFilter_StringFilterChain& from);
  TraceConfig_TraceFilter_StringFilterChain(TraceConfig_TraceFilter_StringFilterChain&& from) noexcept
    : TraceConfig_TraceFilter_StringFilterChain() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TraceFilter_StringFilterChain& operator=(const TraceConfig_TraceFilter_StringFilterChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TraceFilter_StringFilterChain& operator=(TraceConfig_TraceFilter_StringFilterChain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_TraceFilter_StringFilterChain& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_TraceFilter_StringFilterChain* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TraceFilter_StringFilterChain*>(
               &_TraceConfig_TraceFilter_StringFilterChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TraceConfig_TraceFilter_StringFilterChain& a, TraceConfig_TraceFilter_StringFilterChain& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TraceFilter_StringFilterChain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_TraceFilter_StringFilterChain* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_TraceFilter_StringFilterChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_TraceFilter_StringFilterChain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_TraceFilter_StringFilterChain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_TraceFilter_StringFilterChain& from) {
    TraceConfig_TraceFilter_StringFilterChain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_TraceFilter_StringFilterChain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.TraceFilter.StringFilterChain";
  }
  protected:
  explicit TraceConfig_TraceFilter_StringFilterChain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >*
      mutable_rules();
  private:
  const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule& _internal_rules(int index) const;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* _internal_add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule>& _internal_rules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule>* _internal_mutable_rules();
  public:
  const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule& rules(int index) const;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >&
      rules() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule > rules_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_TraceFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.TraceFilter) */ {
 public:
  inline TraceConfig_TraceFilter() : TraceConfig_TraceFilter(nullptr) {}
  ~TraceConfig_TraceFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_TraceFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_TraceFilter(const TraceConfig_TraceFilter& from);
  TraceConfig_TraceFilter(TraceConfig_TraceFilter&& from) noexcept
    : TraceConfig_TraceFilter() {
    *this = ::std::move(from);
  }

  inline TraceConfig_TraceFilter& operator=(const TraceConfig_TraceFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_TraceFilter& operator=(TraceConfig_TraceFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_TraceFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_TraceFilter* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_TraceFilter*>(
               &_TraceConfig_TraceFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TraceConfig_TraceFilter& a, TraceConfig_TraceFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_TraceFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_TraceFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_TraceFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_TraceFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_TraceFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_TraceFilter& from) {
    TraceConfig_TraceFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_TraceFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.TraceFilter";
  }
  protected:
  explicit TraceConfig_TraceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TraceConfig_TraceFilter_StringFilterRule StringFilterRule;
  typedef TraceConfig_TraceFilter_StringFilterChain StringFilterChain;

  using StringFilterPolicy = TraceConfig_TraceFilter_StringFilterPolicy;
  static constexpr StringFilterPolicy SFP_UNSPECIFIED = TraceConfig_TraceFilter_StringFilterPolicy_SFP_UNSPECIFIED;
  static constexpr StringFilterPolicy SFP_MATCH_REDACT_GROUPS = TraceConfig_TraceFilter_StringFilterPolicy_SFP_MATCH_REDACT_GROUPS;
  static constexpr StringFilterPolicy SFP_ATRACE_MATCH_REDACT_GROUPS = TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_MATCH_REDACT_GROUPS;
  static constexpr StringFilterPolicy SFP_MATCH_BREAK = TraceConfig_TraceFilter_StringFilterPolicy_SFP_MATCH_BREAK;
  static constexpr StringFilterPolicy SFP_ATRACE_MATCH_BREAK = TraceConfig_TraceFilter_StringFilterPolicy_SFP_ATRACE_MATCH_BREAK;
  static inline bool StringFilterPolicy_IsValid(int value) {
    return TraceConfig_TraceFilter_StringFilterPolicy_IsValid(value);
  }
  static constexpr StringFilterPolicy StringFilterPolicy_MIN = TraceConfig_TraceFilter_StringFilterPolicy_StringFilterPolicy_MIN;
  static constexpr StringFilterPolicy StringFilterPolicy_MAX = TraceConfig_TraceFilter_StringFilterPolicy_StringFilterPolicy_MAX;
  static constexpr int StringFilterPolicy_ARRAYSIZE = TraceConfig_TraceFilter_StringFilterPolicy_StringFilterPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StringFilterPolicy_descriptor() {
    return TraceConfig_TraceFilter_StringFilterPolicy_descriptor();
  }
  template <typename T>
  static inline const std::string& StringFilterPolicy_Name(T value) {
    return TraceConfig_TraceFilter_StringFilterPolicy_Name(value);
  }
  static inline bool StringFilterPolicy_Parse(absl::string_view name, StringFilterPolicy* value) {
    return TraceConfig_TraceFilter_StringFilterPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBytecodeFieldNumber = 1,
    kBytecodeV2FieldNumber = 2,
    kStringFilterChainFieldNumber = 3,
  };
  // optional bytes bytecode = 1;
  bool has_bytecode() const;
  void clear_bytecode() ;
  const std::string& bytecode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytecode(Arg_&& arg, Args_... args);
  std::string* mutable_bytecode();
  PROTOBUF_NODISCARD std::string* release_bytecode();
  void set_allocated_bytecode(std::string* ptr);

  private:
  const std::string& _internal_bytecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytecode(
      const std::string& value);
  std::string* _internal_mutable_bytecode();

  public:
  // optional bytes bytecode_v2 = 2;
  bool has_bytecode_v2() const;
  void clear_bytecode_v2() ;
  const std::string& bytecode_v2() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytecode_v2(Arg_&& arg, Args_... args);
  std::string* mutable_bytecode_v2();
  PROTOBUF_NODISCARD std::string* release_bytecode_v2();
  void set_allocated_bytecode_v2(std::string* ptr);

  private:
  const std::string& _internal_bytecode_v2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytecode_v2(
      const std::string& value);
  std::string* _internal_mutable_bytecode_v2();

  public:
  // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
  bool has_string_filter_chain() const;
  void clear_string_filter_chain() ;
  const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain& string_filter_chain() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* release_string_filter_chain();
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* mutable_string_filter_chain();
  void set_allocated_string_filter_chain(::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* string_filter_chain);
  private:
  const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain& _internal_string_filter_chain() const;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* _internal_mutable_string_filter_chain();
  public:
  void unsafe_arena_set_allocated_string_filter_chain(
      ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* string_filter_chain);
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* unsafe_arena_release_string_filter_chain();
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.TraceFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_v2_;
    ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* string_filter_chain_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_AndroidReportConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.AndroidReportConfig) */ {
 public:
  inline TraceConfig_AndroidReportConfig() : TraceConfig_AndroidReportConfig(nullptr) {}
  ~TraceConfig_AndroidReportConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_AndroidReportConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_AndroidReportConfig(const TraceConfig_AndroidReportConfig& from);
  TraceConfig_AndroidReportConfig(TraceConfig_AndroidReportConfig&& from) noexcept
    : TraceConfig_AndroidReportConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig_AndroidReportConfig& operator=(const TraceConfig_AndroidReportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_AndroidReportConfig& operator=(TraceConfig_AndroidReportConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_AndroidReportConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_AndroidReportConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_AndroidReportConfig*>(
               &_TraceConfig_AndroidReportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TraceConfig_AndroidReportConfig& a, TraceConfig_AndroidReportConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_AndroidReportConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_AndroidReportConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_AndroidReportConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_AndroidReportConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_AndroidReportConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_AndroidReportConfig& from) {
    TraceConfig_AndroidReportConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_AndroidReportConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.AndroidReportConfig";
  }
  protected:
  explicit TraceConfig_AndroidReportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReporterServicePackageFieldNumber = 1,
    kReporterServiceClassFieldNumber = 2,
    kSkipReportFieldNumber = 3,
    kUsePipeInFrameworkForTestingFieldNumber = 4,
  };
  // optional string reporter_service_package = 1;
  bool has_reporter_service_package() const;
  void clear_reporter_service_package() ;
  const std::string& reporter_service_package() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reporter_service_package(Arg_&& arg, Args_... args);
  std::string* mutable_reporter_service_package();
  PROTOBUF_NODISCARD std::string* release_reporter_service_package();
  void set_allocated_reporter_service_package(std::string* ptr);

  private:
  const std::string& _internal_reporter_service_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reporter_service_package(
      const std::string& value);
  std::string* _internal_mutable_reporter_service_package();

  public:
  // optional string reporter_service_class = 2;
  bool has_reporter_service_class() const;
  void clear_reporter_service_class() ;
  const std::string& reporter_service_class() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reporter_service_class(Arg_&& arg, Args_... args);
  std::string* mutable_reporter_service_class();
  PROTOBUF_NODISCARD std::string* release_reporter_service_class();
  void set_allocated_reporter_service_class(std::string* ptr);

  private:
  const std::string& _internal_reporter_service_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reporter_service_class(
      const std::string& value);
  std::string* _internal_mutable_reporter_service_class();

  public:
  // optional bool skip_report = 3;
  bool has_skip_report() const;
  void clear_skip_report() ;
  bool skip_report() const;
  void set_skip_report(bool value);

  private:
  bool _internal_skip_report() const;
  void _internal_set_skip_report(bool value);

  public:
  // optional bool use_pipe_in_framework_for_testing = 4;
  bool has_use_pipe_in_framework_for_testing() const;
  void clear_use_pipe_in_framework_for_testing() ;
  bool use_pipe_in_framework_for_testing() const;
  void set_use_pipe_in_framework_for_testing(bool value);

  private:
  bool _internal_use_pipe_in_framework_for_testing() const;
  void _internal_set_use_pipe_in_framework_for_testing(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.AndroidReportConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reporter_service_package_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reporter_service_class_;
    bool skip_report_;
    bool use_pipe_in_framework_for_testing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig_CmdTraceStartDelay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig.CmdTraceStartDelay) */ {
 public:
  inline TraceConfig_CmdTraceStartDelay() : TraceConfig_CmdTraceStartDelay(nullptr) {}
  ~TraceConfig_CmdTraceStartDelay() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig_CmdTraceStartDelay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig_CmdTraceStartDelay(const TraceConfig_CmdTraceStartDelay& from);
  TraceConfig_CmdTraceStartDelay(TraceConfig_CmdTraceStartDelay&& from) noexcept
    : TraceConfig_CmdTraceStartDelay() {
    *this = ::std::move(from);
  }

  inline TraceConfig_CmdTraceStartDelay& operator=(const TraceConfig_CmdTraceStartDelay& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig_CmdTraceStartDelay& operator=(TraceConfig_CmdTraceStartDelay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig_CmdTraceStartDelay& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig_CmdTraceStartDelay* internal_default_instance() {
    return reinterpret_cast<const TraceConfig_CmdTraceStartDelay*>(
               &_TraceConfig_CmdTraceStartDelay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TraceConfig_CmdTraceStartDelay& a, TraceConfig_CmdTraceStartDelay& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig_CmdTraceStartDelay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig_CmdTraceStartDelay* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig_CmdTraceStartDelay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig_CmdTraceStartDelay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig_CmdTraceStartDelay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig_CmdTraceStartDelay& from) {
    TraceConfig_CmdTraceStartDelay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig_CmdTraceStartDelay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig.CmdTraceStartDelay";
  }
  protected:
  explicit TraceConfig_CmdTraceStartDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDelayMsFieldNumber = 1,
    kMaxDelayMsFieldNumber = 2,
  };
  // optional uint32 min_delay_ms = 1;
  bool has_min_delay_ms() const;
  void clear_min_delay_ms() ;
  ::uint32_t min_delay_ms() const;
  void set_min_delay_ms(::uint32_t value);

  private:
  ::uint32_t _internal_min_delay_ms() const;
  void _internal_set_min_delay_ms(::uint32_t value);

  public:
  // optional uint32 max_delay_ms = 2;
  bool has_max_delay_ms() const;
  void clear_max_delay_ms() ;
  ::uint32_t max_delay_ms() const;
  void set_max_delay_ms(::uint32_t value);

  private:
  ::uint32_t _internal_max_delay_ms() const;
  void _internal_set_max_delay_ms(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig.CmdTraceStartDelay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t min_delay_ms_;
    ::uint32_t max_delay_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class TraceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TraceConfig) */ {
 public:
  inline TraceConfig() : TraceConfig(nullptr) {}
  ~TraceConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TraceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig(const TraceConfig& from);
  TraceConfig(TraceConfig&& from) noexcept
    : TraceConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig& operator=(const TraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig& operator=(TraceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig*>(
               &_TraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TraceConfig& a, TraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceConfig& from) {
    TraceConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TraceConfig";
  }
  protected:
  explicit TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TraceConfig_BufferConfig BufferConfig;
  typedef TraceConfig_DataSource DataSource;
  typedef TraceConfig_BuiltinDataSource BuiltinDataSource;
  typedef TraceConfig_ProducerConfig ProducerConfig;
  typedef TraceConfig_StatsdMetadata StatsdMetadata;
  typedef TraceConfig_GuardrailOverrides GuardrailOverrides;
  typedef TraceConfig_TriggerConfig TriggerConfig;
  typedef TraceConfig_IncrementalStateConfig IncrementalStateConfig;
  typedef TraceConfig_IncidentReportConfig IncidentReportConfig;
  typedef TraceConfig_TraceFilter TraceFilter;
  typedef TraceConfig_AndroidReportConfig AndroidReportConfig;
  typedef TraceConfig_CmdTraceStartDelay CmdTraceStartDelay;

  using LockdownModeOperation = TraceConfig_LockdownModeOperation;
  static constexpr LockdownModeOperation LOCKDOWN_UNCHANGED = TraceConfig_LockdownModeOperation_LOCKDOWN_UNCHANGED;
  static constexpr LockdownModeOperation LOCKDOWN_CLEAR = TraceConfig_LockdownModeOperation_LOCKDOWN_CLEAR;
  static constexpr LockdownModeOperation LOCKDOWN_SET = TraceConfig_LockdownModeOperation_LOCKDOWN_SET;
  static inline bool LockdownModeOperation_IsValid(int value) {
    return TraceConfig_LockdownModeOperation_IsValid(value);
  }
  static constexpr LockdownModeOperation LockdownModeOperation_MIN = TraceConfig_LockdownModeOperation_LockdownModeOperation_MIN;
  static constexpr LockdownModeOperation LockdownModeOperation_MAX = TraceConfig_LockdownModeOperation_LockdownModeOperation_MAX;
  static constexpr int LockdownModeOperation_ARRAYSIZE = TraceConfig_LockdownModeOperation_LockdownModeOperation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockdownModeOperation_descriptor() {
    return TraceConfig_LockdownModeOperation_descriptor();
  }
  template <typename T>
  static inline const std::string& LockdownModeOperation_Name(T value) {
    return TraceConfig_LockdownModeOperation_Name(value);
  }
  static inline bool LockdownModeOperation_Parse(absl::string_view name, LockdownModeOperation* value) {
    return TraceConfig_LockdownModeOperation_Parse(name, value);
  }

  using CompressionType = TraceConfig_CompressionType;
  static constexpr CompressionType COMPRESSION_TYPE_UNSPECIFIED = TraceConfig_CompressionType_COMPRESSION_TYPE_UNSPECIFIED;
  static constexpr CompressionType COMPRESSION_TYPE_DEFLATE = TraceConfig_CompressionType_COMPRESSION_TYPE_DEFLATE;
  static inline bool CompressionType_IsValid(int value) {
    return TraceConfig_CompressionType_IsValid(value);
  }
  static constexpr CompressionType CompressionType_MIN = TraceConfig_CompressionType_CompressionType_MIN;
  static constexpr CompressionType CompressionType_MAX = TraceConfig_CompressionType_CompressionType_MAX;
  static constexpr int CompressionType_ARRAYSIZE = TraceConfig_CompressionType_CompressionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
    return TraceConfig_CompressionType_descriptor();
  }
  template <typename T>
  static inline const std::string& CompressionType_Name(T value) {
    return TraceConfig_CompressionType_Name(value);
  }
  static inline bool CompressionType_Parse(absl::string_view name, CompressionType* value) {
    return TraceConfig_CompressionType_Parse(name, value);
  }

  using StatsdLogging = TraceConfig_StatsdLogging;
  static constexpr StatsdLogging STATSD_LOGGING_UNSPECIFIED = TraceConfig_StatsdLogging_STATSD_LOGGING_UNSPECIFIED;
  static constexpr StatsdLogging STATSD_LOGGING_ENABLED = TraceConfig_StatsdLogging_STATSD_LOGGING_ENABLED;
  static constexpr StatsdLogging STATSD_LOGGING_DISABLED = TraceConfig_StatsdLogging_STATSD_LOGGING_DISABLED;
  static inline bool StatsdLogging_IsValid(int value) {
    return TraceConfig_StatsdLogging_IsValid(value);
  }
  static constexpr StatsdLogging StatsdLogging_MIN = TraceConfig_StatsdLogging_StatsdLogging_MIN;
  static constexpr StatsdLogging StatsdLogging_MAX = TraceConfig_StatsdLogging_StatsdLogging_MAX;
  static constexpr int StatsdLogging_ARRAYSIZE = TraceConfig_StatsdLogging_StatsdLogging_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatsdLogging_descriptor() {
    return TraceConfig_StatsdLogging_descriptor();
  }
  template <typename T>
  static inline const std::string& StatsdLogging_Name(T value) {
    return TraceConfig_StatsdLogging_Name(value);
  }
  static inline bool StatsdLogging_Parse(absl::string_view name, StatsdLogging* value) {
    return TraceConfig_StatsdLogging_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBuffersFieldNumber = 1,
    kDataSourcesFieldNumber = 2,
    kProducersFieldNumber = 6,
    kActivateTriggersFieldNumber = 18,
    kUniqueSessionNameFieldNumber = 22,
    kOutputPathFieldNumber = 29,
    kStatsdMetadataFieldNumber = 7,
    kGuardrailOverridesFieldNumber = 11,
    kTriggerConfigFieldNumber = 17,
    kBuiltinDataSourcesFieldNumber = 20,
    kIncrementalStateConfigFieldNumber = 21,
    kIncidentReportConfigFieldNumber = 25,
    kTraceFilterFieldNumber = 33,
    kAndroidReportConfigFieldNumber = 34,
    kCmdTraceStartDelayFieldNumber = 35,
    kDurationMsFieldNumber = 3,
    kLockdownModeFieldNumber = 5,
    kMaxFileSizeBytesFieldNumber = 10,
    kFileWritePeriodMsFieldNumber = 9,
    kFlushPeriodMsFieldNumber = 13,
    kFlushTimeoutMsFieldNumber = 14,
    kPreferSuspendClockForDurationFieldNumber = 36,
    kEnableExtraGuardrailsFieldNumber = 4,
    kWriteIntoFileFieldNumber = 8,
    kDeferredStartFieldNumber = 12,
    kDataSourceStopTimeoutMsFieldNumber = 23,
    kCompressionTypeFieldNumber = 24,
    kNotifyTraceurFieldNumber = 16,
    kAllowUserBuildTracingFieldNumber = 19,
    kCompressFromCliFieldNumber = 37,
    kBugreportScoreFieldNumber = 30,
    kTraceUuidMsbFieldNumber = 27,
    kTraceUuidLsbFieldNumber = 28,
    kStatsdLoggingFieldNumber = 31,
  };
  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  int buffers_size() const;
  private:
  int _internal_buffers_size() const;

  public:
  void clear_buffers() ;
  ::perfetto::protos::TraceConfig_BufferConfig* mutable_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >*
      mutable_buffers();
  private:
  const ::perfetto::protos::TraceConfig_BufferConfig& _internal_buffers(int index) const;
  ::perfetto::protos::TraceConfig_BufferConfig* _internal_add_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_BufferConfig>& _internal_buffers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_BufferConfig>* _internal_mutable_buffers();
  public:
  const ::perfetto::protos::TraceConfig_BufferConfig& buffers(int index) const;
  ::perfetto::protos::TraceConfig_BufferConfig* add_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >&
      buffers() const;
  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  int data_sources_size() const;
  private:
  int _internal_data_sources_size() const;

  public:
  void clear_data_sources() ;
  ::perfetto::protos::TraceConfig_DataSource* mutable_data_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >*
      mutable_data_sources();
  private:
  const ::perfetto::protos::TraceConfig_DataSource& _internal_data_sources(int index) const;
  ::perfetto::protos::TraceConfig_DataSource* _internal_add_data_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_DataSource>& _internal_data_sources() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_DataSource>* _internal_mutable_data_sources();
  public:
  const ::perfetto::protos::TraceConfig_DataSource& data_sources(int index) const;
  ::perfetto::protos::TraceConfig_DataSource* add_data_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >&
      data_sources() const;
  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  int producers_size() const;
  private:
  int _internal_producers_size() const;

  public:
  void clear_producers() ;
  ::perfetto::protos::TraceConfig_ProducerConfig* mutable_producers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >*
      mutable_producers();
  private:
  const ::perfetto::protos::TraceConfig_ProducerConfig& _internal_producers(int index) const;
  ::perfetto::protos::TraceConfig_ProducerConfig* _internal_add_producers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_ProducerConfig>& _internal_producers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_ProducerConfig>* _internal_mutable_producers();
  public:
  const ::perfetto::protos::TraceConfig_ProducerConfig& producers(int index) const;
  ::perfetto::protos::TraceConfig_ProducerConfig* add_producers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >&
      producers() const;
  // repeated string activate_triggers = 18;
  int activate_triggers_size() const;
  private:
  int _internal_activate_triggers_size() const;

  public:
  void clear_activate_triggers() ;
  const std::string& activate_triggers(int index) const;
  std::string* mutable_activate_triggers(int index);
  void set_activate_triggers(int index, const std::string& value);
  void set_activate_triggers(int index, std::string&& value);
  void set_activate_triggers(int index, const char* value);
  void set_activate_triggers(int index, const char* value, std::size_t size);
  void set_activate_triggers(int index, absl::string_view value);
  std::string* add_activate_triggers();
  void add_activate_triggers(const std::string& value);
  void add_activate_triggers(std::string&& value);
  void add_activate_triggers(const char* value);
  void add_activate_triggers(const char* value, std::size_t size);
  void add_activate_triggers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& activate_triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_activate_triggers();

  private:
  const std::string& _internal_activate_triggers(int index) const;
  std::string* _internal_add_activate_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_activate_triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_activate_triggers();

  public:
  // optional string unique_session_name = 22;
  bool has_unique_session_name() const;
  void clear_unique_session_name() ;
  const std::string& unique_session_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_session_name(Arg_&& arg, Args_... args);
  std::string* mutable_unique_session_name();
  PROTOBUF_NODISCARD std::string* release_unique_session_name();
  void set_allocated_unique_session_name(std::string* ptr);

  private:
  const std::string& _internal_unique_session_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_session_name(
      const std::string& value);
  std::string* _internal_mutable_unique_session_name();

  public:
  // optional string output_path = 29;
  bool has_output_path() const;
  void clear_output_path() ;
  const std::string& output_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_path(Arg_&& arg, Args_... args);
  std::string* mutable_output_path();
  PROTOBUF_NODISCARD std::string* release_output_path();
  void set_allocated_output_path(std::string* ptr);

  private:
  const std::string& _internal_output_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_path(
      const std::string& value);
  std::string* _internal_mutable_output_path();

  public:
  // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
  bool has_statsd_metadata() const;
  void clear_statsd_metadata() ;
  const ::perfetto::protos::TraceConfig_StatsdMetadata& statsd_metadata() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_StatsdMetadata* release_statsd_metadata();
  ::perfetto::protos::TraceConfig_StatsdMetadata* mutable_statsd_metadata();
  void set_allocated_statsd_metadata(::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata);
  private:
  const ::perfetto::protos::TraceConfig_StatsdMetadata& _internal_statsd_metadata() const;
  ::perfetto::protos::TraceConfig_StatsdMetadata* _internal_mutable_statsd_metadata();
  public:
  void unsafe_arena_set_allocated_statsd_metadata(
      ::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata);
  ::perfetto::protos::TraceConfig_StatsdMetadata* unsafe_arena_release_statsd_metadata();
  // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
  bool has_guardrail_overrides() const;
  void clear_guardrail_overrides() ;
  const ::perfetto::protos::TraceConfig_GuardrailOverrides& guardrail_overrides() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_GuardrailOverrides* release_guardrail_overrides();
  ::perfetto::protos::TraceConfig_GuardrailOverrides* mutable_guardrail_overrides();
  void set_allocated_guardrail_overrides(::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides);
  private:
  const ::perfetto::protos::TraceConfig_GuardrailOverrides& _internal_guardrail_overrides() const;
  ::perfetto::protos::TraceConfig_GuardrailOverrides* _internal_mutable_guardrail_overrides();
  public:
  void unsafe_arena_set_allocated_guardrail_overrides(
      ::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides);
  ::perfetto::protos::TraceConfig_GuardrailOverrides* unsafe_arena_release_guardrail_overrides();
  // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
  bool has_trigger_config() const;
  void clear_trigger_config() ;
  const ::perfetto::protos::TraceConfig_TriggerConfig& trigger_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_TriggerConfig* release_trigger_config();
  ::perfetto::protos::TraceConfig_TriggerConfig* mutable_trigger_config();
  void set_allocated_trigger_config(::perfetto::protos::TraceConfig_TriggerConfig* trigger_config);
  private:
  const ::perfetto::protos::TraceConfig_TriggerConfig& _internal_trigger_config() const;
  ::perfetto::protos::TraceConfig_TriggerConfig* _internal_mutable_trigger_config();
  public:
  void unsafe_arena_set_allocated_trigger_config(
      ::perfetto::protos::TraceConfig_TriggerConfig* trigger_config);
  ::perfetto::protos::TraceConfig_TriggerConfig* unsafe_arena_release_trigger_config();
  // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
  bool has_builtin_data_sources() const;
  void clear_builtin_data_sources() ;
  const ::perfetto::protos::TraceConfig_BuiltinDataSource& builtin_data_sources() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_BuiltinDataSource* release_builtin_data_sources();
  ::perfetto::protos::TraceConfig_BuiltinDataSource* mutable_builtin_data_sources();
  void set_allocated_builtin_data_sources(::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources);
  private:
  const ::perfetto::protos::TraceConfig_BuiltinDataSource& _internal_builtin_data_sources() const;
  ::perfetto::protos::TraceConfig_BuiltinDataSource* _internal_mutable_builtin_data_sources();
  public:
  void unsafe_arena_set_allocated_builtin_data_sources(
      ::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources);
  ::perfetto::protos::TraceConfig_BuiltinDataSource* unsafe_arena_release_builtin_data_sources();
  // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
  bool has_incremental_state_config() const;
  void clear_incremental_state_config() ;
  const ::perfetto::protos::TraceConfig_IncrementalStateConfig& incremental_state_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_IncrementalStateConfig* release_incremental_state_config();
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* mutable_incremental_state_config();
  void set_allocated_incremental_state_config(::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config);
  private:
  const ::perfetto::protos::TraceConfig_IncrementalStateConfig& _internal_incremental_state_config() const;
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* _internal_mutable_incremental_state_config();
  public:
  void unsafe_arena_set_allocated_incremental_state_config(
      ::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config);
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* unsafe_arena_release_incremental_state_config();
  // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
  bool has_incident_report_config() const;
  void clear_incident_report_config() ;
  const ::perfetto::protos::TraceConfig_IncidentReportConfig& incident_report_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_IncidentReportConfig* release_incident_report_config();
  ::perfetto::protos::TraceConfig_IncidentReportConfig* mutable_incident_report_config();
  void set_allocated_incident_report_config(::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config);
  private:
  const ::perfetto::protos::TraceConfig_IncidentReportConfig& _internal_incident_report_config() const;
  ::perfetto::protos::TraceConfig_IncidentReportConfig* _internal_mutable_incident_report_config();
  public:
  void unsafe_arena_set_allocated_incident_report_config(
      ::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config);
  ::perfetto::protos::TraceConfig_IncidentReportConfig* unsafe_arena_release_incident_report_config();
  // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
  bool has_trace_filter() const;
  void clear_trace_filter() ;
  const ::perfetto::protos::TraceConfig_TraceFilter& trace_filter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_TraceFilter* release_trace_filter();
  ::perfetto::protos::TraceConfig_TraceFilter* mutable_trace_filter();
  void set_allocated_trace_filter(::perfetto::protos::TraceConfig_TraceFilter* trace_filter);
  private:
  const ::perfetto::protos::TraceConfig_TraceFilter& _internal_trace_filter() const;
  ::perfetto::protos::TraceConfig_TraceFilter* _internal_mutable_trace_filter();
  public:
  void unsafe_arena_set_allocated_trace_filter(
      ::perfetto::protos::TraceConfig_TraceFilter* trace_filter);
  ::perfetto::protos::TraceConfig_TraceFilter* unsafe_arena_release_trace_filter();
  // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
  bool has_android_report_config() const;
  void clear_android_report_config() ;
  const ::perfetto::protos::TraceConfig_AndroidReportConfig& android_report_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_AndroidReportConfig* release_android_report_config();
  ::perfetto::protos::TraceConfig_AndroidReportConfig* mutable_android_report_config();
  void set_allocated_android_report_config(::perfetto::protos::TraceConfig_AndroidReportConfig* android_report_config);
  private:
  const ::perfetto::protos::TraceConfig_AndroidReportConfig& _internal_android_report_config() const;
  ::perfetto::protos::TraceConfig_AndroidReportConfig* _internal_mutable_android_report_config();
  public:
  void unsafe_arena_set_allocated_android_report_config(
      ::perfetto::protos::TraceConfig_AndroidReportConfig* android_report_config);
  ::perfetto::protos::TraceConfig_AndroidReportConfig* unsafe_arena_release_android_report_config();
  // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
  bool has_cmd_trace_start_delay() const;
  void clear_cmd_trace_start_delay() ;
  const ::perfetto::protos::TraceConfig_CmdTraceStartDelay& cmd_trace_start_delay() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig_CmdTraceStartDelay* release_cmd_trace_start_delay();
  ::perfetto::protos::TraceConfig_CmdTraceStartDelay* mutable_cmd_trace_start_delay();
  void set_allocated_cmd_trace_start_delay(::perfetto::protos::TraceConfig_CmdTraceStartDelay* cmd_trace_start_delay);
  private:
  const ::perfetto::protos::TraceConfig_CmdTraceStartDelay& _internal_cmd_trace_start_delay() const;
  ::perfetto::protos::TraceConfig_CmdTraceStartDelay* _internal_mutable_cmd_trace_start_delay();
  public:
  void unsafe_arena_set_allocated_cmd_trace_start_delay(
      ::perfetto::protos::TraceConfig_CmdTraceStartDelay* cmd_trace_start_delay);
  ::perfetto::protos::TraceConfig_CmdTraceStartDelay* unsafe_arena_release_cmd_trace_start_delay();
  // optional uint32 duration_ms = 3;
  bool has_duration_ms() const;
  void clear_duration_ms() ;
  ::uint32_t duration_ms() const;
  void set_duration_ms(::uint32_t value);

  private:
  ::uint32_t _internal_duration_ms() const;
  void _internal_set_duration_ms(::uint32_t value);

  public:
  // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
  bool has_lockdown_mode() const;
  void clear_lockdown_mode() ;
  ::perfetto::protos::TraceConfig_LockdownModeOperation lockdown_mode() const;
  void set_lockdown_mode(::perfetto::protos::TraceConfig_LockdownModeOperation value);

  private:
  ::perfetto::protos::TraceConfig_LockdownModeOperation _internal_lockdown_mode() const;
  void _internal_set_lockdown_mode(::perfetto::protos::TraceConfig_LockdownModeOperation value);

  public:
  // optional uint64 max_file_size_bytes = 10;
  bool has_max_file_size_bytes() const;
  void clear_max_file_size_bytes() ;
  ::uint64_t max_file_size_bytes() const;
  void set_max_file_size_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_max_file_size_bytes() const;
  void _internal_set_max_file_size_bytes(::uint64_t value);

  public:
  // optional uint32 file_write_period_ms = 9;
  bool has_file_write_period_ms() const;
  void clear_file_write_period_ms() ;
  ::uint32_t file_write_period_ms() const;
  void set_file_write_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_file_write_period_ms() const;
  void _internal_set_file_write_period_ms(::uint32_t value);

  public:
  // optional uint32 flush_period_ms = 13;
  bool has_flush_period_ms() const;
  void clear_flush_period_ms() ;
  ::uint32_t flush_period_ms() const;
  void set_flush_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_flush_period_ms() const;
  void _internal_set_flush_period_ms(::uint32_t value);

  public:
  // optional uint32 flush_timeout_ms = 14;
  bool has_flush_timeout_ms() const;
  void clear_flush_timeout_ms() ;
  ::uint32_t flush_timeout_ms() const;
  void set_flush_timeout_ms(::uint32_t value);

  private:
  ::uint32_t _internal_flush_timeout_ms() const;
  void _internal_set_flush_timeout_ms(::uint32_t value);

  public:
  // optional bool prefer_suspend_clock_for_duration = 36;
  bool has_prefer_suspend_clock_for_duration() const;
  void clear_prefer_suspend_clock_for_duration() ;
  bool prefer_suspend_clock_for_duration() const;
  void set_prefer_suspend_clock_for_duration(bool value);

  private:
  bool _internal_prefer_suspend_clock_for_duration() const;
  void _internal_set_prefer_suspend_clock_for_duration(bool value);

  public:
  // optional bool enable_extra_guardrails = 4;
  bool has_enable_extra_guardrails() const;
  void clear_enable_extra_guardrails() ;
  bool enable_extra_guardrails() const;
  void set_enable_extra_guardrails(bool value);

  private:
  bool _internal_enable_extra_guardrails() const;
  void _internal_set_enable_extra_guardrails(bool value);

  public:
  // optional bool write_into_file = 8;
  bool has_write_into_file() const;
  void clear_write_into_file() ;
  bool write_into_file() const;
  void set_write_into_file(bool value);

  private:
  bool _internal_write_into_file() const;
  void _internal_set_write_into_file(bool value);

  public:
  // optional bool deferred_start = 12;
  bool has_deferred_start() const;
  void clear_deferred_start() ;
  bool deferred_start() const;
  void set_deferred_start(bool value);

  private:
  bool _internal_deferred_start() const;
  void _internal_set_deferred_start(bool value);

  public:
  // optional uint32 data_source_stop_timeout_ms = 23;
  bool has_data_source_stop_timeout_ms() const;
  void clear_data_source_stop_timeout_ms() ;
  ::uint32_t data_source_stop_timeout_ms() const;
  void set_data_source_stop_timeout_ms(::uint32_t value);

  private:
  ::uint32_t _internal_data_source_stop_timeout_ms() const;
  void _internal_set_data_source_stop_timeout_ms(::uint32_t value);

  public:
  // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
  bool has_compression_type() const;
  void clear_compression_type() ;
  ::perfetto::protos::TraceConfig_CompressionType compression_type() const;
  void set_compression_type(::perfetto::protos::TraceConfig_CompressionType value);

  private:
  ::perfetto::protos::TraceConfig_CompressionType _internal_compression_type() const;
  void _internal_set_compression_type(::perfetto::protos::TraceConfig_CompressionType value);

  public:
  // optional bool notify_traceur = 16;
  bool has_notify_traceur() const;
  void clear_notify_traceur() ;
  bool notify_traceur() const;
  void set_notify_traceur(bool value);

  private:
  bool _internal_notify_traceur() const;
  void _internal_set_notify_traceur(bool value);

  public:
  // optional bool allow_user_build_tracing = 19;
  bool has_allow_user_build_tracing() const;
  void clear_allow_user_build_tracing() ;
  bool allow_user_build_tracing() const;
  void set_allow_user_build_tracing(bool value);

  private:
  bool _internal_allow_user_build_tracing() const;
  void _internal_set_allow_user_build_tracing(bool value);

  public:
  // optional bool compress_from_cli = 37;
  bool has_compress_from_cli() const;
  void clear_compress_from_cli() ;
  bool compress_from_cli() const;
  void set_compress_from_cli(bool value);

  private:
  bool _internal_compress_from_cli() const;
  void _internal_set_compress_from_cli(bool value);

  public:
  // optional int32 bugreport_score = 30;
  bool has_bugreport_score() const;
  void clear_bugreport_score() ;
  ::int32_t bugreport_score() const;
  void set_bugreport_score(::int32_t value);

  private:
  ::int32_t _internal_bugreport_score() const;
  void _internal_set_bugreport_score(::int32_t value);

  public:
  // optional int64 trace_uuid_msb = 27 [deprecated = true];
  [[deprecated]]  bool has_trace_uuid_msb() const;
  [[deprecated]]  void clear_trace_uuid_msb() ;
  [[deprecated]] ::int64_t trace_uuid_msb() const;
  [[deprecated]] void set_trace_uuid_msb(::int64_t value);

  private:
  ::int64_t _internal_trace_uuid_msb() const;
  void _internal_set_trace_uuid_msb(::int64_t value);

  public:
  // optional int64 trace_uuid_lsb = 28 [deprecated = true];
  [[deprecated]]  bool has_trace_uuid_lsb() const;
  [[deprecated]]  void clear_trace_uuid_lsb() ;
  [[deprecated]] ::int64_t trace_uuid_lsb() const;
  [[deprecated]] void set_trace_uuid_lsb(::int64_t value);

  private:
  ::int64_t _internal_trace_uuid_lsb() const;
  void _internal_set_trace_uuid_lsb(::int64_t value);

  public:
  // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
  bool has_statsd_logging() const;
  void clear_statsd_logging() ;
  ::perfetto::protos::TraceConfig_StatsdLogging statsd_logging() const;
  void set_statsd_logging(::perfetto::protos::TraceConfig_StatsdLogging value);

  private:
  ::perfetto::protos::TraceConfig_StatsdLogging _internal_statsd_logging() const;
  void _internal_set_statsd_logging(::perfetto::protos::TraceConfig_StatsdLogging value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TraceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig > buffers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource > data_sources_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig > producers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> activate_triggers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_session_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_path_;
    ::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata_;
    ::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides_;
    ::perfetto::protos::TraceConfig_TriggerConfig* trigger_config_;
    ::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources_;
    ::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config_;
    ::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config_;
    ::perfetto::protos::TraceConfig_TraceFilter* trace_filter_;
    ::perfetto::protos::TraceConfig_AndroidReportConfig* android_report_config_;
    ::perfetto::protos::TraceConfig_CmdTraceStartDelay* cmd_trace_start_delay_;
    ::uint32_t duration_ms_;
    int lockdown_mode_;
    ::uint64_t max_file_size_bytes_;
    ::uint32_t file_write_period_ms_;
    ::uint32_t flush_period_ms_;
    ::uint32_t flush_timeout_ms_;
    bool prefer_suspend_clock_for_duration_;
    bool enable_extra_guardrails_;
    bool write_into_file_;
    bool deferred_start_;
    ::uint32_t data_source_stop_timeout_ms_;
    int compression_type_;
    bool notify_traceur_;
    bool allow_user_build_tracing_;
    bool compress_from_cli_;
    ::int32_t bugreport_score_;
    ::int64_t trace_uuid_msb_;
    ::int64_t trace_uuid_lsb_;
    int statsd_logging_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TraceConfig_BufferConfig

// optional uint32 size_kb = 1;
inline bool TraceConfig_BufferConfig::has_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_BufferConfig::clear_size_kb() {
  _impl_.size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t TraceConfig_BufferConfig::size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BufferConfig.size_kb)
  return _internal_size_kb();
}
inline void TraceConfig_BufferConfig::set_size_kb(::uint32_t value) {
  _internal_set_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BufferConfig.size_kb)
}
inline ::uint32_t TraceConfig_BufferConfig::_internal_size_kb() const {
  return _impl_.size_kb_;
}
inline void TraceConfig_BufferConfig::_internal_set_size_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.size_kb_ = value;
}

// optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
inline bool TraceConfig_BufferConfig::has_fill_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_BufferConfig::clear_fill_policy() {
  _impl_.fill_policy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::fill_policy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BufferConfig.fill_policy)
  return _internal_fill_policy();
}
inline void TraceConfig_BufferConfig::set_fill_policy(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy value) {
   _internal_set_fill_policy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BufferConfig.fill_policy)
}
inline ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::_internal_fill_policy() const {
  return static_cast<::perfetto::protos::TraceConfig_BufferConfig_FillPolicy>(_impl_.fill_policy_);
}
inline void TraceConfig_BufferConfig::_internal_set_fill_policy(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy value) {
  assert(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fill_policy_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_DataSource

// optional .perfetto.protos.DataSourceConfig config = 1;
inline bool TraceConfig_DataSource::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline const ::perfetto::protos::DataSourceConfig& TraceConfig_DataSource::_internal_config() const {
  const ::perfetto::protos::DataSourceConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::DataSourceConfig&>(
      ::perfetto::protos::_DataSourceConfig_default_instance_);
}
inline const ::perfetto::protos::DataSourceConfig& TraceConfig_DataSource::config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.DataSource.config)
  return _internal_config();
}
inline void TraceConfig_DataSource::unsafe_arena_set_allocated_config(
    ::perfetto::protos::DataSourceConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.DataSource.config)
}
inline ::perfetto::protos::DataSourceConfig* TraceConfig_DataSource::release_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::DataSourceConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::DataSourceConfig* TraceConfig_DataSource::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.DataSource.config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::DataSourceConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::DataSourceConfig* TraceConfig_DataSource::_internal_mutable_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::DataSourceConfig>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::perfetto::protos::DataSourceConfig* TraceConfig_DataSource::mutable_config() {
  ::perfetto::protos::DataSourceConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.DataSource.config)
  return _msg;
}
inline void TraceConfig_DataSource::set_allocated_config(::perfetto::protos::DataSourceConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.DataSource.config)
}

// repeated string producer_name_filter = 2;
inline int TraceConfig_DataSource::_internal_producer_name_filter_size() const {
  return _impl_.producer_name_filter_.size();
}
inline int TraceConfig_DataSource::producer_name_filter_size() const {
  return _internal_producer_name_filter_size();
}
inline void TraceConfig_DataSource::clear_producer_name_filter() {
  _internal_mutable_producer_name_filter()->Clear();
}
inline std::string* TraceConfig_DataSource::add_producer_name_filter() {
  std::string* _s = _internal_add_producer_name_filter();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return _s;
}
inline const std::string& TraceConfig_DataSource::producer_name_filter(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return _internal_producer_name_filter(index);
}
inline std::string* TraceConfig_DataSource::mutable_producer_name_filter(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return _internal_mutable_producer_name_filter()->Mutable(index);
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, const std::string& value) {
  _internal_mutable_producer_name_filter()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, std::string&& value) {
  _internal_mutable_producer_name_filter()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_producer_name_filter()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_producer_name_filter()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::set_producer_name_filter(int index, absl::string_view value) {
  _internal_mutable_producer_name_filter()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(const std::string& value) {
  _internal_mutable_producer_name_filter()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(std::string&& value) {
  _internal_mutable_producer_name_filter()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_producer_name_filter()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(const char* value, std::size_t size) {
  _internal_mutable_producer_name_filter()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline void TraceConfig_DataSource::add_producer_name_filter(absl::string_view value) {
  _internal_mutable_producer_name_filter()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig_DataSource::producer_name_filter() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return _internal_producer_name_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TraceConfig_DataSource::mutable_producer_name_filter() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.DataSource.producer_name_filter)
  return _internal_mutable_producer_name_filter();
}
inline const std::string& TraceConfig_DataSource::_internal_producer_name_filter(int index) const {
  return _internal_producer_name_filter().Get(index);
}
inline std::string* TraceConfig_DataSource::_internal_add_producer_name_filter() {
  return _internal_mutable_producer_name_filter()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig_DataSource::_internal_producer_name_filter() const {
  return _impl_.producer_name_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceConfig_DataSource::_internal_mutable_producer_name_filter() {
  return &_impl_.producer_name_filter_;
}

// repeated string producer_name_regex_filter = 3;
inline int TraceConfig_DataSource::_internal_producer_name_regex_filter_size() const {
  return _impl_.producer_name_regex_filter_.size();
}
inline int TraceConfig_DataSource::producer_name_regex_filter_size() const {
  return _internal_producer_name_regex_filter_size();
}
inline void TraceConfig_DataSource::clear_producer_name_regex_filter() {
  _internal_mutable_producer_name_regex_filter()->Clear();
}
inline std::string* TraceConfig_DataSource::add_producer_name_regex_filter() {
  std::string* _s = _internal_add_producer_name_regex_filter();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return _s;
}
inline const std::string& TraceConfig_DataSource::producer_name_regex_filter(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return _internal_producer_name_regex_filter(index);
}
inline std::string* TraceConfig_DataSource::mutable_producer_name_regex_filter(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return _internal_mutable_producer_name_regex_filter()->Mutable(index);
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, const std::string& value) {
  _internal_mutable_producer_name_regex_filter()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, std::string&& value) {
  _internal_mutable_producer_name_regex_filter()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_producer_name_regex_filter()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_producer_name_regex_filter()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::set_producer_name_regex_filter(int index, absl::string_view value) {
  _internal_mutable_producer_name_regex_filter()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(const std::string& value) {
  _internal_mutable_producer_name_regex_filter()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(std::string&& value) {
  _internal_mutable_producer_name_regex_filter()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_producer_name_regex_filter()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(const char* value, std::size_t size) {
  _internal_mutable_producer_name_regex_filter()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline void TraceConfig_DataSource::add_producer_name_regex_filter(absl::string_view value) {
  _internal_mutable_producer_name_regex_filter()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig_DataSource::producer_name_regex_filter() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return _internal_producer_name_regex_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TraceConfig_DataSource::mutable_producer_name_regex_filter() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter)
  return _internal_mutable_producer_name_regex_filter();
}
inline const std::string& TraceConfig_DataSource::_internal_producer_name_regex_filter(int index) const {
  return _internal_producer_name_regex_filter().Get(index);
}
inline std::string* TraceConfig_DataSource::_internal_add_producer_name_regex_filter() {
  return _internal_mutable_producer_name_regex_filter()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig_DataSource::_internal_producer_name_regex_filter() const {
  return _impl_.producer_name_regex_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceConfig_DataSource::_internal_mutable_producer_name_regex_filter() {
  return &_impl_.producer_name_regex_filter_;
}

// -------------------------------------------------------------------

// TraceConfig_BuiltinDataSource

// optional bool disable_clock_snapshotting = 1;
inline bool TraceConfig_BuiltinDataSource::has_disable_clock_snapshotting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_clock_snapshotting() {
  _impl_.disable_clock_snapshotting_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool TraceConfig_BuiltinDataSource::disable_clock_snapshotting() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_clock_snapshotting)
  return _internal_disable_clock_snapshotting();
}
inline void TraceConfig_BuiltinDataSource::set_disable_clock_snapshotting(bool value) {
  _internal_set_disable_clock_snapshotting(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_clock_snapshotting)
}
inline bool TraceConfig_BuiltinDataSource::_internal_disable_clock_snapshotting() const {
  return _impl_.disable_clock_snapshotting_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_disable_clock_snapshotting(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.disable_clock_snapshotting_ = value;
}

// optional bool disable_trace_config = 2;
inline bool TraceConfig_BuiltinDataSource::has_disable_trace_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_trace_config() {
  _impl_.disable_trace_config_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool TraceConfig_BuiltinDataSource::disable_trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_trace_config)
  return _internal_disable_trace_config();
}
inline void TraceConfig_BuiltinDataSource::set_disable_trace_config(bool value) {
  _internal_set_disable_trace_config(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_trace_config)
}
inline bool TraceConfig_BuiltinDataSource::_internal_disable_trace_config() const {
  return _impl_.disable_trace_config_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_disable_trace_config(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.disable_trace_config_ = value;
}

// optional bool disable_system_info = 3;
inline bool TraceConfig_BuiltinDataSource::has_disable_system_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_system_info() {
  _impl_.disable_system_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TraceConfig_BuiltinDataSource::disable_system_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_system_info)
  return _internal_disable_system_info();
}
inline void TraceConfig_BuiltinDataSource::set_disable_system_info(bool value) {
  _internal_set_disable_system_info(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_system_info)
}
inline bool TraceConfig_BuiltinDataSource::_internal_disable_system_info() const {
  return _impl_.disable_system_info_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_disable_system_info(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.disable_system_info_ = value;
}

// optional bool disable_service_events = 4;
inline bool TraceConfig_BuiltinDataSource::has_disable_service_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_service_events() {
  _impl_.disable_service_events_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TraceConfig_BuiltinDataSource::disable_service_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_service_events)
  return _internal_disable_service_events();
}
inline void TraceConfig_BuiltinDataSource::set_disable_service_events(bool value) {
  _internal_set_disable_service_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_service_events)
}
inline bool TraceConfig_BuiltinDataSource::_internal_disable_service_events() const {
  return _impl_.disable_service_events_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_disable_service_events(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.disable_service_events_ = value;
}

// optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
inline bool TraceConfig_BuiltinDataSource::has_primary_trace_clock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_primary_trace_clock() {
  _impl_.primary_trace_clock_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::BuiltinClock TraceConfig_BuiltinDataSource::primary_trace_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.primary_trace_clock)
  return _internal_primary_trace_clock();
}
inline void TraceConfig_BuiltinDataSource::set_primary_trace_clock(::perfetto::protos::BuiltinClock value) {
   _internal_set_primary_trace_clock(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.primary_trace_clock)
}
inline ::perfetto::protos::BuiltinClock TraceConfig_BuiltinDataSource::_internal_primary_trace_clock() const {
  return static_cast<::perfetto::protos::BuiltinClock>(_impl_.primary_trace_clock_);
}
inline void TraceConfig_BuiltinDataSource::_internal_set_primary_trace_clock(::perfetto::protos::BuiltinClock value) {
  assert(::perfetto::protos::BuiltinClock_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.primary_trace_clock_ = value;
}

// optional uint32 snapshot_interval_ms = 6;
inline bool TraceConfig_BuiltinDataSource::has_snapshot_interval_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_snapshot_interval_ms() {
  _impl_.snapshot_interval_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t TraceConfig_BuiltinDataSource::snapshot_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.snapshot_interval_ms)
  return _internal_snapshot_interval_ms();
}
inline void TraceConfig_BuiltinDataSource::set_snapshot_interval_ms(::uint32_t value) {
  _internal_set_snapshot_interval_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.snapshot_interval_ms)
}
inline ::uint32_t TraceConfig_BuiltinDataSource::_internal_snapshot_interval_ms() const {
  return _impl_.snapshot_interval_ms_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_snapshot_interval_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.snapshot_interval_ms_ = value;
}

// optional bool prefer_suspend_clock_for_snapshot = 7;
inline bool TraceConfig_BuiltinDataSource::has_prefer_suspend_clock_for_snapshot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_prefer_suspend_clock_for_snapshot() {
  _impl_.prefer_suspend_clock_for_snapshot_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool TraceConfig_BuiltinDataSource::prefer_suspend_clock_for_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.prefer_suspend_clock_for_snapshot)
  return _internal_prefer_suspend_clock_for_snapshot();
}
inline void TraceConfig_BuiltinDataSource::set_prefer_suspend_clock_for_snapshot(bool value) {
  _internal_set_prefer_suspend_clock_for_snapshot(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.prefer_suspend_clock_for_snapshot)
}
inline bool TraceConfig_BuiltinDataSource::_internal_prefer_suspend_clock_for_snapshot() const {
  return _impl_.prefer_suspend_clock_for_snapshot_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_prefer_suspend_clock_for_snapshot(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.prefer_suspend_clock_for_snapshot_ = value;
}

// optional bool disable_chunk_usage_histograms = 8;
inline bool TraceConfig_BuiltinDataSource::has_disable_chunk_usage_histograms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void TraceConfig_BuiltinDataSource::clear_disable_chunk_usage_histograms() {
  _impl_.disable_chunk_usage_histograms_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool TraceConfig_BuiltinDataSource::disable_chunk_usage_histograms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.BuiltinDataSource.disable_chunk_usage_histograms)
  return _internal_disable_chunk_usage_histograms();
}
inline void TraceConfig_BuiltinDataSource::set_disable_chunk_usage_histograms(bool value) {
  _internal_set_disable_chunk_usage_histograms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.BuiltinDataSource.disable_chunk_usage_histograms)
}
inline bool TraceConfig_BuiltinDataSource::_internal_disable_chunk_usage_histograms() const {
  return _impl_.disable_chunk_usage_histograms_;
}
inline void TraceConfig_BuiltinDataSource::_internal_set_disable_chunk_usage_histograms(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.disable_chunk_usage_histograms_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_ProducerConfig

// optional string producer_name = 1;
inline bool TraceConfig_ProducerConfig::has_producer_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_ProducerConfig::clear_producer_name() {
  _impl_.producer_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_ProducerConfig::producer_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
  return _internal_producer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_ProducerConfig::set_producer_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.producer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}
inline std::string* TraceConfig_ProducerConfig::mutable_producer_name() {
  std::string* _s = _internal_mutable_producer_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
  return _s;
}
inline const std::string& TraceConfig_ProducerConfig::_internal_producer_name() const {
  return _impl_.producer_name_.Get();
}
inline void TraceConfig_ProducerConfig::_internal_set_producer_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.producer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_ProducerConfig::_internal_mutable_producer_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.producer_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_ProducerConfig::release_producer_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.producer_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_ProducerConfig::set_allocated_producer_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.producer_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.producer_name_.IsDefault()) {
          _impl_.producer_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.ProducerConfig.producer_name)
}

// optional uint32 shm_size_kb = 2;
inline bool TraceConfig_ProducerConfig::has_shm_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_ProducerConfig::clear_shm_size_kb() {
  _impl_.shm_size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TraceConfig_ProducerConfig::shm_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.ProducerConfig.shm_size_kb)
  return _internal_shm_size_kb();
}
inline void TraceConfig_ProducerConfig::set_shm_size_kb(::uint32_t value) {
  _internal_set_shm_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.ProducerConfig.shm_size_kb)
}
inline ::uint32_t TraceConfig_ProducerConfig::_internal_shm_size_kb() const {
  return _impl_.shm_size_kb_;
}
inline void TraceConfig_ProducerConfig::_internal_set_shm_size_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shm_size_kb_ = value;
}

// optional uint32 page_size_kb = 3;
inline bool TraceConfig_ProducerConfig::has_page_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_ProducerConfig::clear_page_size_kb() {
  _impl_.page_size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TraceConfig_ProducerConfig::page_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.ProducerConfig.page_size_kb)
  return _internal_page_size_kb();
}
inline void TraceConfig_ProducerConfig::set_page_size_kb(::uint32_t value) {
  _internal_set_page_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.ProducerConfig.page_size_kb)
}
inline ::uint32_t TraceConfig_ProducerConfig::_internal_page_size_kb() const {
  return _impl_.page_size_kb_;
}
inline void TraceConfig_ProducerConfig::_internal_set_page_size_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.page_size_kb_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_StatsdMetadata

// optional int64 triggering_alert_id = 1;
inline bool TraceConfig_StatsdMetadata::has_triggering_alert_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_alert_id() {
  _impl_.triggering_alert_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t TraceConfig_StatsdMetadata::triggering_alert_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_alert_id)
  return _internal_triggering_alert_id();
}
inline void TraceConfig_StatsdMetadata::set_triggering_alert_id(::int64_t value) {
  _internal_set_triggering_alert_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_alert_id)
}
inline ::int64_t TraceConfig_StatsdMetadata::_internal_triggering_alert_id() const {
  return _impl_.triggering_alert_id_;
}
inline void TraceConfig_StatsdMetadata::_internal_set_triggering_alert_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.triggering_alert_id_ = value;
}

// optional int32 triggering_config_uid = 2;
inline bool TraceConfig_StatsdMetadata::has_triggering_config_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_config_uid() {
  _impl_.triggering_config_uid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t TraceConfig_StatsdMetadata::triggering_config_uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_uid)
  return _internal_triggering_config_uid();
}
inline void TraceConfig_StatsdMetadata::set_triggering_config_uid(::int32_t value) {
  _internal_set_triggering_config_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_uid)
}
inline ::int32_t TraceConfig_StatsdMetadata::_internal_triggering_config_uid() const {
  return _impl_.triggering_config_uid_;
}
inline void TraceConfig_StatsdMetadata::_internal_set_triggering_config_uid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.triggering_config_uid_ = value;
}

// optional int64 triggering_config_id = 3;
inline bool TraceConfig_StatsdMetadata::has_triggering_config_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_config_id() {
  _impl_.triggering_config_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t TraceConfig_StatsdMetadata::triggering_config_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_id)
  return _internal_triggering_config_id();
}
inline void TraceConfig_StatsdMetadata::set_triggering_config_id(::int64_t value) {
  _internal_set_triggering_config_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_config_id)
}
inline ::int64_t TraceConfig_StatsdMetadata::_internal_triggering_config_id() const {
  return _impl_.triggering_config_id_;
}
inline void TraceConfig_StatsdMetadata::_internal_set_triggering_config_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.triggering_config_id_ = value;
}

// optional int64 triggering_subscription_id = 4;
inline bool TraceConfig_StatsdMetadata::has_triggering_subscription_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_StatsdMetadata::clear_triggering_subscription_id() {
  _impl_.triggering_subscription_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t TraceConfig_StatsdMetadata::triggering_subscription_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.StatsdMetadata.triggering_subscription_id)
  return _internal_triggering_subscription_id();
}
inline void TraceConfig_StatsdMetadata::set_triggering_subscription_id(::int64_t value) {
  _internal_set_triggering_subscription_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.StatsdMetadata.triggering_subscription_id)
}
inline ::int64_t TraceConfig_StatsdMetadata::_internal_triggering_subscription_id() const {
  return _impl_.triggering_subscription_id_;
}
inline void TraceConfig_StatsdMetadata::_internal_set_triggering_subscription_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.triggering_subscription_id_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_GuardrailOverrides

// optional uint64 max_upload_per_day_bytes = 1;
inline bool TraceConfig_GuardrailOverrides::has_max_upload_per_day_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_GuardrailOverrides::clear_max_upload_per_day_bytes() {
  _impl_.max_upload_per_day_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TraceConfig_GuardrailOverrides::max_upload_per_day_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.GuardrailOverrides.max_upload_per_day_bytes)
  return _internal_max_upload_per_day_bytes();
}
inline void TraceConfig_GuardrailOverrides::set_max_upload_per_day_bytes(::uint64_t value) {
  _internal_set_max_upload_per_day_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.GuardrailOverrides.max_upload_per_day_bytes)
}
inline ::uint64_t TraceConfig_GuardrailOverrides::_internal_max_upload_per_day_bytes() const {
  return _impl_.max_upload_per_day_bytes_;
}
inline void TraceConfig_GuardrailOverrides::_internal_set_max_upload_per_day_bytes(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_upload_per_day_bytes_ = value;
}

// optional uint32 max_tracing_buffer_size_kb = 2;
inline bool TraceConfig_GuardrailOverrides::has_max_tracing_buffer_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_GuardrailOverrides::clear_max_tracing_buffer_size_kb() {
  _impl_.max_tracing_buffer_size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TraceConfig_GuardrailOverrides::max_tracing_buffer_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.GuardrailOverrides.max_tracing_buffer_size_kb)
  return _internal_max_tracing_buffer_size_kb();
}
inline void TraceConfig_GuardrailOverrides::set_max_tracing_buffer_size_kb(::uint32_t value) {
  _internal_set_max_tracing_buffer_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.GuardrailOverrides.max_tracing_buffer_size_kb)
}
inline ::uint32_t TraceConfig_GuardrailOverrides::_internal_max_tracing_buffer_size_kb() const {
  return _impl_.max_tracing_buffer_size_kb_;
}
inline void TraceConfig_GuardrailOverrides::_internal_set_max_tracing_buffer_size_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_tracing_buffer_size_kb_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_TriggerConfig_Trigger

// optional string name = 1;
inline bool TraceConfig_TriggerConfig_Trigger::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_TriggerConfig_Trigger::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_TriggerConfig_Trigger::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}
inline std::string* TraceConfig_TriggerConfig_Trigger::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
  return _s;
}
inline const std::string& TraceConfig_TriggerConfig_Trigger::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TraceConfig_TriggerConfig_Trigger::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_TriggerConfig_Trigger::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_TriggerConfig_Trigger::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_TriggerConfig_Trigger::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TriggerConfig.Trigger.name)
}

// optional string producer_name_regex = 2;
inline bool TraceConfig_TriggerConfig_Trigger::has_producer_name_regex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_producer_name_regex() {
  _impl_.producer_name_regex_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_TriggerConfig_Trigger::producer_name_regex() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
  return _internal_producer_name_regex();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_TriggerConfig_Trigger::set_producer_name_regex(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.producer_name_regex_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}
inline std::string* TraceConfig_TriggerConfig_Trigger::mutable_producer_name_regex() {
  std::string* _s = _internal_mutable_producer_name_regex();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
  return _s;
}
inline const std::string& TraceConfig_TriggerConfig_Trigger::_internal_producer_name_regex() const {
  return _impl_.producer_name_regex_.Get();
}
inline void TraceConfig_TriggerConfig_Trigger::_internal_set_producer_name_regex(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.producer_name_regex_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_TriggerConfig_Trigger::_internal_mutable_producer_name_regex() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.producer_name_regex_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_TriggerConfig_Trigger::release_producer_name_regex() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.producer_name_regex_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_name_regex_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_TriggerConfig_Trigger::set_allocated_producer_name_regex(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.producer_name_regex_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.producer_name_regex_.IsDefault()) {
          _impl_.producer_name_regex_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex)
}

// optional uint32 stop_delay_ms = 3;
inline bool TraceConfig_TriggerConfig_Trigger::has_stop_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_stop_delay_ms() {
  _impl_.stop_delay_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TraceConfig_TriggerConfig_Trigger::stop_delay_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.stop_delay_ms)
  return _internal_stop_delay_ms();
}
inline void TraceConfig_TriggerConfig_Trigger::set_stop_delay_ms(::uint32_t value) {
  _internal_set_stop_delay_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.stop_delay_ms)
}
inline ::uint32_t TraceConfig_TriggerConfig_Trigger::_internal_stop_delay_ms() const {
  return _impl_.stop_delay_ms_;
}
inline void TraceConfig_TriggerConfig_Trigger::_internal_set_stop_delay_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stop_delay_ms_ = value;
}

// optional uint32 max_per_24_h = 4;
inline bool TraceConfig_TriggerConfig_Trigger::has_max_per_24_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_max_per_24_h() {
  _impl_.max_per_24_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t TraceConfig_TriggerConfig_Trigger::max_per_24_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.max_per_24_h)
  return _internal_max_per_24_h();
}
inline void TraceConfig_TriggerConfig_Trigger::set_max_per_24_h(::uint32_t value) {
  _internal_set_max_per_24_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.max_per_24_h)
}
inline ::uint32_t TraceConfig_TriggerConfig_Trigger::_internal_max_per_24_h() const {
  return _impl_.max_per_24_h_;
}
inline void TraceConfig_TriggerConfig_Trigger::_internal_set_max_per_24_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_per_24_h_ = value;
}

// optional double skip_probability = 5;
inline bool TraceConfig_TriggerConfig_Trigger::has_skip_probability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig_Trigger::clear_skip_probability() {
  _impl_.skip_probability_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double TraceConfig_TriggerConfig_Trigger::skip_probability() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.Trigger.skip_probability)
  return _internal_skip_probability();
}
inline void TraceConfig_TriggerConfig_Trigger::set_skip_probability(double value) {
  _internal_set_skip_probability(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.Trigger.skip_probability)
}
inline double TraceConfig_TriggerConfig_Trigger::_internal_skip_probability() const {
  return _impl_.skip_probability_;
}
inline void TraceConfig_TriggerConfig_Trigger::_internal_set_skip_probability(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.skip_probability_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_TriggerConfig

// optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
inline bool TraceConfig_TriggerConfig::has_trigger_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig::clear_trigger_mode() {
  _impl_.trigger_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::trigger_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.trigger_mode)
  return _internal_trigger_mode();
}
inline void TraceConfig_TriggerConfig::set_trigger_mode(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode value) {
   _internal_set_trigger_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.trigger_mode)
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::_internal_trigger_mode() const {
  return static_cast<::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode>(_impl_.trigger_mode_);
}
inline void TraceConfig_TriggerConfig::_internal_set_trigger_mode(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode value) {
  assert(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trigger_mode_ = value;
}

// optional bool use_clone_snapshot_if_available = 4;
inline bool TraceConfig_TriggerConfig::has_use_clone_snapshot_if_available() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig::clear_use_clone_snapshot_if_available() {
  _impl_.use_clone_snapshot_if_available_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TraceConfig_TriggerConfig::use_clone_snapshot_if_available() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.use_clone_snapshot_if_available)
  return _internal_use_clone_snapshot_if_available();
}
inline void TraceConfig_TriggerConfig::set_use_clone_snapshot_if_available(bool value) {
  _internal_set_use_clone_snapshot_if_available(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.use_clone_snapshot_if_available)
}
inline bool TraceConfig_TriggerConfig::_internal_use_clone_snapshot_if_available() const {
  return _impl_.use_clone_snapshot_if_available_;
}
inline void TraceConfig_TriggerConfig::_internal_set_use_clone_snapshot_if_available(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.use_clone_snapshot_if_available_ = value;
}

// repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
inline int TraceConfig_TriggerConfig::_internal_triggers_size() const {
  return _impl_.triggers_.size();
}
inline int TraceConfig_TriggerConfig::triggers_size() const {
  return _internal_triggers_size();
}
inline void TraceConfig_TriggerConfig::clear_triggers() {
  _internal_mutable_triggers()->Clear();
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* TraceConfig_TriggerConfig::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return _internal_mutable_triggers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >*
TraceConfig_TriggerConfig::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return _internal_mutable_triggers();
}
inline const ::perfetto::protos::TraceConfig_TriggerConfig_Trigger& TraceConfig_TriggerConfig::_internal_triggers(int index) const {
  return _internal_triggers().Get(index);
}
inline const ::perfetto::protos::TraceConfig_TriggerConfig_Trigger& TraceConfig_TriggerConfig::triggers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return _internal_triggers(index);
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* TraceConfig_TriggerConfig::_internal_add_triggers() {
  return _internal_mutable_triggers()->Add();
}
inline ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* TraceConfig_TriggerConfig::add_triggers() {
  ::perfetto::protos::TraceConfig_TriggerConfig_Trigger* _add = _internal_add_triggers();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >&
TraceConfig_TriggerConfig::triggers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.TriggerConfig.triggers)
  return _internal_triggers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TriggerConfig_Trigger>&
TraceConfig_TriggerConfig::_internal_triggers() const {
  return _impl_.triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TriggerConfig_Trigger>*
TraceConfig_TriggerConfig::_internal_mutable_triggers() {
  return &_impl_.triggers_;
}

// optional uint32 trigger_timeout_ms = 3;
inline bool TraceConfig_TriggerConfig::has_trigger_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_TriggerConfig::clear_trigger_timeout_ms() {
  _impl_.trigger_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TraceConfig_TriggerConfig::trigger_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TriggerConfig.trigger_timeout_ms)
  return _internal_trigger_timeout_ms();
}
inline void TraceConfig_TriggerConfig::set_trigger_timeout_ms(::uint32_t value) {
  _internal_set_trigger_timeout_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TriggerConfig.trigger_timeout_ms)
}
inline ::uint32_t TraceConfig_TriggerConfig::_internal_trigger_timeout_ms() const {
  return _impl_.trigger_timeout_ms_;
}
inline void TraceConfig_TriggerConfig::_internal_set_trigger_timeout_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trigger_timeout_ms_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_IncrementalStateConfig

// optional uint32 clear_period_ms = 1;
inline bool TraceConfig_IncrementalStateConfig::has_clear_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_IncrementalStateConfig::clear_clear_period_ms() {
  _impl_.clear_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t TraceConfig_IncrementalStateConfig::clear_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncrementalStateConfig.clear_period_ms)
  return _internal_clear_period_ms();
}
inline void TraceConfig_IncrementalStateConfig::set_clear_period_ms(::uint32_t value) {
  _internal_set_clear_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncrementalStateConfig.clear_period_ms)
}
inline ::uint32_t TraceConfig_IncrementalStateConfig::_internal_clear_period_ms() const {
  return _impl_.clear_period_ms_;
}
inline void TraceConfig_IncrementalStateConfig::_internal_set_clear_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clear_period_ms_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_IncidentReportConfig

// optional string destination_package = 1;
inline bool TraceConfig_IncidentReportConfig::has_destination_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_IncidentReportConfig::clear_destination_package() {
  _impl_.destination_package_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_IncidentReportConfig::destination_package() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
  return _internal_destination_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_IncidentReportConfig::set_destination_package(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.destination_package_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}
inline std::string* TraceConfig_IncidentReportConfig::mutable_destination_package() {
  std::string* _s = _internal_mutable_destination_package();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
  return _s;
}
inline const std::string& TraceConfig_IncidentReportConfig::_internal_destination_package() const {
  return _impl_.destination_package_.Get();
}
inline void TraceConfig_IncidentReportConfig::_internal_set_destination_package(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.destination_package_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_IncidentReportConfig::_internal_mutable_destination_package() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.destination_package_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_IncidentReportConfig::release_destination_package() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.destination_package_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_IncidentReportConfig::set_allocated_destination_package(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.destination_package_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.destination_package_.IsDefault()) {
          _impl_.destination_package_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.IncidentReportConfig.destination_package)
}

// optional string destination_class = 2;
inline bool TraceConfig_IncidentReportConfig::has_destination_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_IncidentReportConfig::clear_destination_class() {
  _impl_.destination_class_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_IncidentReportConfig::destination_class() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
  return _internal_destination_class();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_IncidentReportConfig::set_destination_class(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.destination_class_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}
inline std::string* TraceConfig_IncidentReportConfig::mutable_destination_class() {
  std::string* _s = _internal_mutable_destination_class();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
  return _s;
}
inline const std::string& TraceConfig_IncidentReportConfig::_internal_destination_class() const {
  return _impl_.destination_class_.Get();
}
inline void TraceConfig_IncidentReportConfig::_internal_set_destination_class(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.destination_class_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_IncidentReportConfig::_internal_mutable_destination_class() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.destination_class_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_IncidentReportConfig::release_destination_class() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.destination_class_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_IncidentReportConfig::set_allocated_destination_class(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.destination_class_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.destination_class_.IsDefault()) {
          _impl_.destination_class_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.IncidentReportConfig.destination_class)
}

// optional int32 privacy_level = 3;
inline bool TraceConfig_IncidentReportConfig::has_privacy_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_IncidentReportConfig::clear_privacy_level() {
  _impl_.privacy_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TraceConfig_IncidentReportConfig::privacy_level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.privacy_level)
  return _internal_privacy_level();
}
inline void TraceConfig_IncidentReportConfig::set_privacy_level(::int32_t value) {
  _internal_set_privacy_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.privacy_level)
}
inline ::int32_t TraceConfig_IncidentReportConfig::_internal_privacy_level() const {
  return _impl_.privacy_level_;
}
inline void TraceConfig_IncidentReportConfig::_internal_set_privacy_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.privacy_level_ = value;
}

// optional bool skip_incidentd = 5;
inline bool TraceConfig_IncidentReportConfig::has_skip_incidentd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TraceConfig_IncidentReportConfig::clear_skip_incidentd() {
  _impl_.skip_incidentd_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TraceConfig_IncidentReportConfig::skip_incidentd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.skip_incidentd)
  return _internal_skip_incidentd();
}
inline void TraceConfig_IncidentReportConfig::set_skip_incidentd(bool value) {
  _internal_set_skip_incidentd(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.skip_incidentd)
}
inline bool TraceConfig_IncidentReportConfig::_internal_skip_incidentd() const {
  return _impl_.skip_incidentd_;
}
inline void TraceConfig_IncidentReportConfig::_internal_set_skip_incidentd(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skip_incidentd_ = value;
}

// optional bool skip_dropbox = 4 [deprecated = true];
inline bool TraceConfig_IncidentReportConfig::has_skip_dropbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TraceConfig_IncidentReportConfig::clear_skip_dropbox() {
  _impl_.skip_dropbox_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TraceConfig_IncidentReportConfig::skip_dropbox() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox)
  return _internal_skip_dropbox();
}
inline void TraceConfig_IncidentReportConfig::set_skip_dropbox(bool value) {
  _internal_set_skip_dropbox(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.IncidentReportConfig.skip_dropbox)
}
inline bool TraceConfig_IncidentReportConfig::_internal_skip_dropbox() const {
  return _impl_.skip_dropbox_;
}
inline void TraceConfig_IncidentReportConfig::_internal_set_skip_dropbox(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.skip_dropbox_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_TraceFilter_StringFilterRule

// optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
inline bool TraceConfig_TraceFilter_StringFilterRule::has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_TraceFilter_StringFilterRule::clear_policy() {
  _impl_.policy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter_StringFilterRule::policy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.policy)
  return _internal_policy();
}
inline void TraceConfig_TraceFilter_StringFilterRule::set_policy(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy value) {
   _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.policy)
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter_StringFilterRule::_internal_policy() const {
  return static_cast<::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy>(_impl_.policy_);
}
inline void TraceConfig_TraceFilter_StringFilterRule::_internal_set_policy(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy value) {
  assert(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.policy_ = value;
}

// optional string regex_pattern = 2;
inline bool TraceConfig_TraceFilter_StringFilterRule::has_regex_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_TraceFilter_StringFilterRule::clear_regex_pattern() {
  _impl_.regex_pattern_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_TraceFilter_StringFilterRule::regex_pattern() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern)
  return _internal_regex_pattern();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_TraceFilter_StringFilterRule::set_regex_pattern(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.regex_pattern_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern)
}
inline std::string* TraceConfig_TraceFilter_StringFilterRule::mutable_regex_pattern() {
  std::string* _s = _internal_mutable_regex_pattern();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern)
  return _s;
}
inline const std::string& TraceConfig_TraceFilter_StringFilterRule::_internal_regex_pattern() const {
  return _impl_.regex_pattern_.Get();
}
inline void TraceConfig_TraceFilter_StringFilterRule::_internal_set_regex_pattern(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.regex_pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter_StringFilterRule::_internal_mutable_regex_pattern() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.regex_pattern_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter_StringFilterRule::release_regex_pattern() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.regex_pattern_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.regex_pattern_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_TraceFilter_StringFilterRule::set_allocated_regex_pattern(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.regex_pattern_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.regex_pattern_.IsDefault()) {
          _impl_.regex_pattern_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern)
}

// optional string atrace_payload_starts_with = 3;
inline bool TraceConfig_TraceFilter_StringFilterRule::has_atrace_payload_starts_with() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_TraceFilter_StringFilterRule::clear_atrace_payload_starts_with() {
  _impl_.atrace_payload_starts_with_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_TraceFilter_StringFilterRule::atrace_payload_starts_with() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with)
  return _internal_atrace_payload_starts_with();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_TraceFilter_StringFilterRule::set_atrace_payload_starts_with(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.atrace_payload_starts_with_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with)
}
inline std::string* TraceConfig_TraceFilter_StringFilterRule::mutable_atrace_payload_starts_with() {
  std::string* _s = _internal_mutable_atrace_payload_starts_with();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with)
  return _s;
}
inline const std::string& TraceConfig_TraceFilter_StringFilterRule::_internal_atrace_payload_starts_with() const {
  return _impl_.atrace_payload_starts_with_.Get();
}
inline void TraceConfig_TraceFilter_StringFilterRule::_internal_set_atrace_payload_starts_with(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.atrace_payload_starts_with_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter_StringFilterRule::_internal_mutable_atrace_payload_starts_with() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.atrace_payload_starts_with_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter_StringFilterRule::release_atrace_payload_starts_with() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.atrace_payload_starts_with_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atrace_payload_starts_with_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_TraceFilter_StringFilterRule::set_allocated_atrace_payload_starts_with(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.atrace_payload_starts_with_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.atrace_payload_starts_with_.IsDefault()) {
          _impl_.atrace_payload_starts_with_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with)
}

// -------------------------------------------------------------------

// TraceConfig_TraceFilter_StringFilterChain

// repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
inline int TraceConfig_TraceFilter_StringFilterChain::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int TraceConfig_TraceFilter_StringFilterChain::rules_size() const {
  return _internal_rules_size();
}
inline void TraceConfig_TraceFilter_StringFilterChain::clear_rules() {
  _internal_mutable_rules()->Clear();
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* TraceConfig_TraceFilter_StringFilterChain::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >*
TraceConfig_TraceFilter_StringFilterChain::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules)
  return _internal_mutable_rules();
}
inline const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule& TraceConfig_TraceFilter_StringFilterChain::_internal_rules(int index) const {
  return _internal_rules().Get(index);
}
inline const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule& TraceConfig_TraceFilter_StringFilterChain::rules(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules)
  return _internal_rules(index);
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* TraceConfig_TraceFilter_StringFilterChain::_internal_add_rules() {
  return _internal_mutable_rules()->Add();
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* TraceConfig_TraceFilter_StringFilterChain::add_rules() {
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >&
TraceConfig_TraceFilter_StringFilterChain::rules() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules)
  return _internal_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule>&
TraceConfig_TraceFilter_StringFilterChain::_internal_rules() const {
  return _impl_.rules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule>*
TraceConfig_TraceFilter_StringFilterChain::_internal_mutable_rules() {
  return &_impl_.rules_;
}

// -------------------------------------------------------------------

// TraceConfig_TraceFilter

// optional bytes bytecode = 1;
inline bool TraceConfig_TraceFilter::has_bytecode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_TraceFilter::clear_bytecode() {
  _impl_.bytecode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_TraceFilter::bytecode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.bytecode)
  return _internal_bytecode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_TraceFilter::set_bytecode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bytecode_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TraceFilter.bytecode)
}
inline std::string* TraceConfig_TraceFilter::mutable_bytecode() {
  std::string* _s = _internal_mutable_bytecode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TraceFilter.bytecode)
  return _s;
}
inline const std::string& TraceConfig_TraceFilter::_internal_bytecode() const {
  return _impl_.bytecode_.Get();
}
inline void TraceConfig_TraceFilter::_internal_set_bytecode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.bytecode_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter::_internal_mutable_bytecode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.bytecode_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter::release_bytecode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TraceFilter.bytecode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.bytecode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytecode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_TraceFilter::set_allocated_bytecode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bytecode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytecode_.IsDefault()) {
          _impl_.bytecode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TraceFilter.bytecode)
}

// optional bytes bytecode_v2 = 2;
inline bool TraceConfig_TraceFilter::has_bytecode_v2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_TraceFilter::clear_bytecode_v2() {
  _impl_.bytecode_v2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_TraceFilter::bytecode_v2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.bytecode_v2)
  return _internal_bytecode_v2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_TraceFilter::set_bytecode_v2(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bytecode_v2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.TraceFilter.bytecode_v2)
}
inline std::string* TraceConfig_TraceFilter::mutable_bytecode_v2() {
  std::string* _s = _internal_mutable_bytecode_v2();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TraceFilter.bytecode_v2)
  return _s;
}
inline const std::string& TraceConfig_TraceFilter::_internal_bytecode_v2() const {
  return _impl_.bytecode_v2_.Get();
}
inline void TraceConfig_TraceFilter::_internal_set_bytecode_v2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.bytecode_v2_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter::_internal_mutable_bytecode_v2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.bytecode_v2_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_TraceFilter::release_bytecode_v2() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TraceFilter.bytecode_v2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.bytecode_v2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytecode_v2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_TraceFilter::set_allocated_bytecode_v2(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bytecode_v2_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytecode_v2_.IsDefault()) {
          _impl_.bytecode_v2_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TraceFilter.bytecode_v2)
}

// optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
inline bool TraceConfig_TraceFilter::has_string_filter_chain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.string_filter_chain_ != nullptr);
  return value;
}
inline void TraceConfig_TraceFilter::clear_string_filter_chain() {
  if (_impl_.string_filter_chain_ != nullptr) _impl_.string_filter_chain_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain& TraceConfig_TraceFilter::_internal_string_filter_chain() const {
  const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* p = _impl_.string_filter_chain_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain&>(
      ::perfetto::protos::_TraceConfig_TraceFilter_StringFilterChain_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain& TraceConfig_TraceFilter::string_filter_chain() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.TraceFilter.string_filter_chain)
  return _internal_string_filter_chain();
}
inline void TraceConfig_TraceFilter::unsafe_arena_set_allocated_string_filter_chain(
    ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* string_filter_chain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.string_filter_chain_);
  }
  _impl_.string_filter_chain_ = string_filter_chain;
  if (string_filter_chain) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.TraceFilter.string_filter_chain)
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* TraceConfig_TraceFilter::release_string_filter_chain() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* temp = _impl_.string_filter_chain_;
  _impl_.string_filter_chain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* TraceConfig_TraceFilter::unsafe_arena_release_string_filter_chain() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.TraceFilter.string_filter_chain)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* temp = _impl_.string_filter_chain_;
  _impl_.string_filter_chain_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* TraceConfig_TraceFilter::_internal_mutable_string_filter_chain() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.string_filter_chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain>(GetArenaForAllocation());
    _impl_.string_filter_chain_ = p;
  }
  return _impl_.string_filter_chain_;
}
inline ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* TraceConfig_TraceFilter::mutable_string_filter_chain() {
  ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* _msg = _internal_mutable_string_filter_chain();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.TraceFilter.string_filter_chain)
  return _msg;
}
inline void TraceConfig_TraceFilter::set_allocated_string_filter_chain(::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain* string_filter_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.string_filter_chain_;
  }
  if (string_filter_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_filter_chain);
    if (message_arena != submessage_arena) {
      string_filter_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_filter_chain, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.string_filter_chain_ = string_filter_chain;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.TraceFilter.string_filter_chain)
}

// -------------------------------------------------------------------

// TraceConfig_AndroidReportConfig

// optional string reporter_service_package = 1;
inline bool TraceConfig_AndroidReportConfig::has_reporter_service_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_AndroidReportConfig::clear_reporter_service_package() {
  _impl_.reporter_service_package_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig_AndroidReportConfig::reporter_service_package() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package)
  return _internal_reporter_service_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_AndroidReportConfig::set_reporter_service_package(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reporter_service_package_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package)
}
inline std::string* TraceConfig_AndroidReportConfig::mutable_reporter_service_package() {
  std::string* _s = _internal_mutable_reporter_service_package();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package)
  return _s;
}
inline const std::string& TraceConfig_AndroidReportConfig::_internal_reporter_service_package() const {
  return _impl_.reporter_service_package_.Get();
}
inline void TraceConfig_AndroidReportConfig::_internal_set_reporter_service_package(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.reporter_service_package_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_AndroidReportConfig::_internal_mutable_reporter_service_package() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reporter_service_package_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_AndroidReportConfig::release_reporter_service_package() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reporter_service_package_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reporter_service_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_AndroidReportConfig::set_allocated_reporter_service_package(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reporter_service_package_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reporter_service_package_.IsDefault()) {
          _impl_.reporter_service_package_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package)
}

// optional string reporter_service_class = 2;
inline bool TraceConfig_AndroidReportConfig::has_reporter_service_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_AndroidReportConfig::clear_reporter_service_class() {
  _impl_.reporter_service_class_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig_AndroidReportConfig::reporter_service_class() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class)
  return _internal_reporter_service_class();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig_AndroidReportConfig::set_reporter_service_class(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reporter_service_class_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class)
}
inline std::string* TraceConfig_AndroidReportConfig::mutable_reporter_service_class() {
  std::string* _s = _internal_mutable_reporter_service_class();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class)
  return _s;
}
inline const std::string& TraceConfig_AndroidReportConfig::_internal_reporter_service_class() const {
  return _impl_.reporter_service_class_.Get();
}
inline void TraceConfig_AndroidReportConfig::_internal_set_reporter_service_class(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.reporter_service_class_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig_AndroidReportConfig::_internal_mutable_reporter_service_class() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.reporter_service_class_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig_AndroidReportConfig::release_reporter_service_class() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.reporter_service_class_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reporter_service_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig_AndroidReportConfig::set_allocated_reporter_service_class(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reporter_service_class_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reporter_service_class_.IsDefault()) {
          _impl_.reporter_service_class_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class)
}

// optional bool skip_report = 3;
inline bool TraceConfig_AndroidReportConfig::has_skip_report() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TraceConfig_AndroidReportConfig::clear_skip_report() {
  _impl_.skip_report_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TraceConfig_AndroidReportConfig::skip_report() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.AndroidReportConfig.skip_report)
  return _internal_skip_report();
}
inline void TraceConfig_AndroidReportConfig::set_skip_report(bool value) {
  _internal_set_skip_report(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.AndroidReportConfig.skip_report)
}
inline bool TraceConfig_AndroidReportConfig::_internal_skip_report() const {
  return _impl_.skip_report_;
}
inline void TraceConfig_AndroidReportConfig::_internal_set_skip_report(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.skip_report_ = value;
}

// optional bool use_pipe_in_framework_for_testing = 4;
inline bool TraceConfig_AndroidReportConfig::has_use_pipe_in_framework_for_testing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TraceConfig_AndroidReportConfig::clear_use_pipe_in_framework_for_testing() {
  _impl_.use_pipe_in_framework_for_testing_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TraceConfig_AndroidReportConfig::use_pipe_in_framework_for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.AndroidReportConfig.use_pipe_in_framework_for_testing)
  return _internal_use_pipe_in_framework_for_testing();
}
inline void TraceConfig_AndroidReportConfig::set_use_pipe_in_framework_for_testing(bool value) {
  _internal_set_use_pipe_in_framework_for_testing(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.AndroidReportConfig.use_pipe_in_framework_for_testing)
}
inline bool TraceConfig_AndroidReportConfig::_internal_use_pipe_in_framework_for_testing() const {
  return _impl_.use_pipe_in_framework_for_testing_;
}
inline void TraceConfig_AndroidReportConfig::_internal_set_use_pipe_in_framework_for_testing(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.use_pipe_in_framework_for_testing_ = value;
}

// -------------------------------------------------------------------

// TraceConfig_CmdTraceStartDelay

// optional uint32 min_delay_ms = 1;
inline bool TraceConfig_CmdTraceStartDelay::has_min_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig_CmdTraceStartDelay::clear_min_delay_ms() {
  _impl_.min_delay_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t TraceConfig_CmdTraceStartDelay::min_delay_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.CmdTraceStartDelay.min_delay_ms)
  return _internal_min_delay_ms();
}
inline void TraceConfig_CmdTraceStartDelay::set_min_delay_ms(::uint32_t value) {
  _internal_set_min_delay_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.CmdTraceStartDelay.min_delay_ms)
}
inline ::uint32_t TraceConfig_CmdTraceStartDelay::_internal_min_delay_ms() const {
  return _impl_.min_delay_ms_;
}
inline void TraceConfig_CmdTraceStartDelay::_internal_set_min_delay_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_delay_ms_ = value;
}

// optional uint32 max_delay_ms = 2;
inline bool TraceConfig_CmdTraceStartDelay::has_max_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig_CmdTraceStartDelay::clear_max_delay_ms() {
  _impl_.max_delay_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TraceConfig_CmdTraceStartDelay::max_delay_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.CmdTraceStartDelay.max_delay_ms)
  return _internal_max_delay_ms();
}
inline void TraceConfig_CmdTraceStartDelay::set_max_delay_ms(::uint32_t value) {
  _internal_set_max_delay_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.CmdTraceStartDelay.max_delay_ms)
}
inline ::uint32_t TraceConfig_CmdTraceStartDelay::_internal_max_delay_ms() const {
  return _impl_.max_delay_ms_;
}
inline void TraceConfig_CmdTraceStartDelay::_internal_set_max_delay_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_delay_ms_ = value;
}

// -------------------------------------------------------------------

// TraceConfig

// repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
inline int TraceConfig::_internal_buffers_size() const {
  return _impl_.buffers_.size();
}
inline int TraceConfig::buffers_size() const {
  return _internal_buffers_size();
}
inline void TraceConfig::clear_buffers() {
  _internal_mutable_buffers()->Clear();
}
inline ::perfetto::protos::TraceConfig_BufferConfig* TraceConfig::mutable_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.buffers)
  return _internal_mutable_buffers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >*
TraceConfig::mutable_buffers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.buffers)
  return _internal_mutable_buffers();
}
inline const ::perfetto::protos::TraceConfig_BufferConfig& TraceConfig::_internal_buffers(int index) const {
  return _internal_buffers().Get(index);
}
inline const ::perfetto::protos::TraceConfig_BufferConfig& TraceConfig::buffers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.buffers)
  return _internal_buffers(index);
}
inline ::perfetto::protos::TraceConfig_BufferConfig* TraceConfig::_internal_add_buffers() {
  return _internal_mutable_buffers()->Add();
}
inline ::perfetto::protos::TraceConfig_BufferConfig* TraceConfig::add_buffers() {
  ::perfetto::protos::TraceConfig_BufferConfig* _add = _internal_add_buffers();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.buffers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_BufferConfig >&
TraceConfig::buffers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.buffers)
  return _internal_buffers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_BufferConfig>&
TraceConfig::_internal_buffers() const {
  return _impl_.buffers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_BufferConfig>*
TraceConfig::_internal_mutable_buffers() {
  return &_impl_.buffers_;
}

// repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
inline int TraceConfig::_internal_data_sources_size() const {
  return _impl_.data_sources_.size();
}
inline int TraceConfig::data_sources_size() const {
  return _internal_data_sources_size();
}
inline void TraceConfig::clear_data_sources() {
  _internal_mutable_data_sources()->Clear();
}
inline ::perfetto::protos::TraceConfig_DataSource* TraceConfig::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.data_sources)
  return _internal_mutable_data_sources()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >*
TraceConfig::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.data_sources)
  return _internal_mutable_data_sources();
}
inline const ::perfetto::protos::TraceConfig_DataSource& TraceConfig::_internal_data_sources(int index) const {
  return _internal_data_sources().Get(index);
}
inline const ::perfetto::protos::TraceConfig_DataSource& TraceConfig::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.data_sources)
  return _internal_data_sources(index);
}
inline ::perfetto::protos::TraceConfig_DataSource* TraceConfig::_internal_add_data_sources() {
  return _internal_mutable_data_sources()->Add();
}
inline ::perfetto::protos::TraceConfig_DataSource* TraceConfig::add_data_sources() {
  ::perfetto::protos::TraceConfig_DataSource* _add = _internal_add_data_sources();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.data_sources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_DataSource >&
TraceConfig::data_sources() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.data_sources)
  return _internal_data_sources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_DataSource>&
TraceConfig::_internal_data_sources() const {
  return _impl_.data_sources_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_DataSource>*
TraceConfig::_internal_mutable_data_sources() {
  return &_impl_.data_sources_;
}

// optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
inline bool TraceConfig::has_builtin_data_sources() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.builtin_data_sources_ != nullptr);
  return value;
}
inline void TraceConfig::clear_builtin_data_sources() {
  if (_impl_.builtin_data_sources_ != nullptr) _impl_.builtin_data_sources_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::perfetto::protos::TraceConfig_BuiltinDataSource& TraceConfig::_internal_builtin_data_sources() const {
  const ::perfetto::protos::TraceConfig_BuiltinDataSource* p = _impl_.builtin_data_sources_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_BuiltinDataSource&>(
      ::perfetto::protos::_TraceConfig_BuiltinDataSource_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_BuiltinDataSource& TraceConfig::builtin_data_sources() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.builtin_data_sources)
  return _internal_builtin_data_sources();
}
inline void TraceConfig::unsafe_arena_set_allocated_builtin_data_sources(
    ::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.builtin_data_sources_);
  }
  _impl_.builtin_data_sources_ = builtin_data_sources;
  if (builtin_data_sources) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.builtin_data_sources)
}
inline ::perfetto::protos::TraceConfig_BuiltinDataSource* TraceConfig::release_builtin_data_sources() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::TraceConfig_BuiltinDataSource* temp = _impl_.builtin_data_sources_;
  _impl_.builtin_data_sources_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_BuiltinDataSource* TraceConfig::unsafe_arena_release_builtin_data_sources() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.builtin_data_sources)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::perfetto::protos::TraceConfig_BuiltinDataSource* temp = _impl_.builtin_data_sources_;
  _impl_.builtin_data_sources_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_BuiltinDataSource* TraceConfig::_internal_mutable_builtin_data_sources() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.builtin_data_sources_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_BuiltinDataSource>(GetArenaForAllocation());
    _impl_.builtin_data_sources_ = p;
  }
  return _impl_.builtin_data_sources_;
}
inline ::perfetto::protos::TraceConfig_BuiltinDataSource* TraceConfig::mutable_builtin_data_sources() {
  ::perfetto::protos::TraceConfig_BuiltinDataSource* _msg = _internal_mutable_builtin_data_sources();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.builtin_data_sources)
  return _msg;
}
inline void TraceConfig::set_allocated_builtin_data_sources(::perfetto::protos::TraceConfig_BuiltinDataSource* builtin_data_sources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.builtin_data_sources_;
  }
  if (builtin_data_sources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(builtin_data_sources);
    if (message_arena != submessage_arena) {
      builtin_data_sources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, builtin_data_sources, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.builtin_data_sources_ = builtin_data_sources;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.builtin_data_sources)
}

// optional uint32 duration_ms = 3;
inline bool TraceConfig::has_duration_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void TraceConfig::clear_duration_ms() {
  _impl_.duration_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t TraceConfig::duration_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.duration_ms)
  return _internal_duration_ms();
}
inline void TraceConfig::set_duration_ms(::uint32_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.duration_ms)
}
inline ::uint32_t TraceConfig::_internal_duration_ms() const {
  return _impl_.duration_ms_;
}
inline void TraceConfig::_internal_set_duration_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.duration_ms_ = value;
}

// optional bool prefer_suspend_clock_for_duration = 36;
inline bool TraceConfig::has_prefer_suspend_clock_for_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void TraceConfig::clear_prefer_suspend_clock_for_duration() {
  _impl_.prefer_suspend_clock_for_duration_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool TraceConfig::prefer_suspend_clock_for_duration() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.prefer_suspend_clock_for_duration)
  return _internal_prefer_suspend_clock_for_duration();
}
inline void TraceConfig::set_prefer_suspend_clock_for_duration(bool value) {
  _internal_set_prefer_suspend_clock_for_duration(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.prefer_suspend_clock_for_duration)
}
inline bool TraceConfig::_internal_prefer_suspend_clock_for_duration() const {
  return _impl_.prefer_suspend_clock_for_duration_;
}
inline void TraceConfig::_internal_set_prefer_suspend_clock_for_duration(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.prefer_suspend_clock_for_duration_ = value;
}

// optional bool enable_extra_guardrails = 4;
inline bool TraceConfig::has_enable_extra_guardrails() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void TraceConfig::clear_enable_extra_guardrails() {
  _impl_.enable_extra_guardrails_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool TraceConfig::enable_extra_guardrails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.enable_extra_guardrails)
  return _internal_enable_extra_guardrails();
}
inline void TraceConfig::set_enable_extra_guardrails(bool value) {
  _internal_set_enable_extra_guardrails(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.enable_extra_guardrails)
}
inline bool TraceConfig::_internal_enable_extra_guardrails() const {
  return _impl_.enable_extra_guardrails_;
}
inline void TraceConfig::_internal_set_enable_extra_guardrails(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.enable_extra_guardrails_ = value;
}

// optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
inline bool TraceConfig::has_lockdown_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void TraceConfig::clear_lockdown_mode() {
  _impl_.lockdown_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::perfetto::protos::TraceConfig_LockdownModeOperation TraceConfig::lockdown_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.lockdown_mode)
  return _internal_lockdown_mode();
}
inline void TraceConfig::set_lockdown_mode(::perfetto::protos::TraceConfig_LockdownModeOperation value) {
   _internal_set_lockdown_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.lockdown_mode)
}
inline ::perfetto::protos::TraceConfig_LockdownModeOperation TraceConfig::_internal_lockdown_mode() const {
  return static_cast<::perfetto::protos::TraceConfig_LockdownModeOperation>(_impl_.lockdown_mode_);
}
inline void TraceConfig::_internal_set_lockdown_mode(::perfetto::protos::TraceConfig_LockdownModeOperation value) {
  assert(::perfetto::protos::TraceConfig_LockdownModeOperation_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.lockdown_mode_ = value;
}

// repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
inline int TraceConfig::_internal_producers_size() const {
  return _impl_.producers_.size();
}
inline int TraceConfig::producers_size() const {
  return _internal_producers_size();
}
inline void TraceConfig::clear_producers() {
  _internal_mutable_producers()->Clear();
}
inline ::perfetto::protos::TraceConfig_ProducerConfig* TraceConfig::mutable_producers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.producers)
  return _internal_mutable_producers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >*
TraceConfig::mutable_producers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.producers)
  return _internal_mutable_producers();
}
inline const ::perfetto::protos::TraceConfig_ProducerConfig& TraceConfig::_internal_producers(int index) const {
  return _internal_producers().Get(index);
}
inline const ::perfetto::protos::TraceConfig_ProducerConfig& TraceConfig::producers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.producers)
  return _internal_producers(index);
}
inline ::perfetto::protos::TraceConfig_ProducerConfig* TraceConfig::_internal_add_producers() {
  return _internal_mutable_producers()->Add();
}
inline ::perfetto::protos::TraceConfig_ProducerConfig* TraceConfig::add_producers() {
  ::perfetto::protos::TraceConfig_ProducerConfig* _add = _internal_add_producers();
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.producers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::TraceConfig_ProducerConfig >&
TraceConfig::producers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.producers)
  return _internal_producers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_ProducerConfig>&
TraceConfig::_internal_producers() const {
  return _impl_.producers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::TraceConfig_ProducerConfig>*
TraceConfig::_internal_mutable_producers() {
  return &_impl_.producers_;
}

// optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
inline bool TraceConfig::has_statsd_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statsd_metadata_ != nullptr);
  return value;
}
inline void TraceConfig::clear_statsd_metadata() {
  if (_impl_.statsd_metadata_ != nullptr) _impl_.statsd_metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::TraceConfig_StatsdMetadata& TraceConfig::_internal_statsd_metadata() const {
  const ::perfetto::protos::TraceConfig_StatsdMetadata* p = _impl_.statsd_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_StatsdMetadata&>(
      ::perfetto::protos::_TraceConfig_StatsdMetadata_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_StatsdMetadata& TraceConfig::statsd_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.statsd_metadata)
  return _internal_statsd_metadata();
}
inline void TraceConfig::unsafe_arena_set_allocated_statsd_metadata(
    ::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statsd_metadata_);
  }
  _impl_.statsd_metadata_ = statsd_metadata;
  if (statsd_metadata) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.statsd_metadata)
}
inline ::perfetto::protos::TraceConfig_StatsdMetadata* TraceConfig::release_statsd_metadata() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::TraceConfig_StatsdMetadata* temp = _impl_.statsd_metadata_;
  _impl_.statsd_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_StatsdMetadata* TraceConfig::unsafe_arena_release_statsd_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.statsd_metadata)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::TraceConfig_StatsdMetadata* temp = _impl_.statsd_metadata_;
  _impl_.statsd_metadata_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_StatsdMetadata* TraceConfig::_internal_mutable_statsd_metadata() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.statsd_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_StatsdMetadata>(GetArenaForAllocation());
    _impl_.statsd_metadata_ = p;
  }
  return _impl_.statsd_metadata_;
}
inline ::perfetto::protos::TraceConfig_StatsdMetadata* TraceConfig::mutable_statsd_metadata() {
  ::perfetto::protos::TraceConfig_StatsdMetadata* _msg = _internal_mutable_statsd_metadata();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.statsd_metadata)
  return _msg;
}
inline void TraceConfig::set_allocated_statsd_metadata(::perfetto::protos::TraceConfig_StatsdMetadata* statsd_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.statsd_metadata_;
  }
  if (statsd_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statsd_metadata);
    if (message_arena != submessage_arena) {
      statsd_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statsd_metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.statsd_metadata_ = statsd_metadata;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.statsd_metadata)
}

// optional bool write_into_file = 8;
inline bool TraceConfig::has_write_into_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void TraceConfig::clear_write_into_file() {
  _impl_.write_into_file_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool TraceConfig::write_into_file() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.write_into_file)
  return _internal_write_into_file();
}
inline void TraceConfig::set_write_into_file(bool value) {
  _internal_set_write_into_file(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.write_into_file)
}
inline bool TraceConfig::_internal_write_into_file() const {
  return _impl_.write_into_file_;
}
inline void TraceConfig::_internal_set_write_into_file(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.write_into_file_ = value;
}

// optional string output_path = 29;
inline bool TraceConfig::has_output_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TraceConfig::clear_output_path() {
  _impl_.output_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TraceConfig::output_path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.output_path)
  return _internal_output_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig::set_output_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.output_path)
}
inline std::string* TraceConfig::mutable_output_path() {
  std::string* _s = _internal_mutable_output_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.output_path)
  return _s;
}
inline const std::string& TraceConfig::_internal_output_path() const {
  return _impl_.output_path_.Get();
}
inline void TraceConfig::_internal_set_output_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.output_path_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig::_internal_mutable_output_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.output_path_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig::release_output_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.output_path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.output_path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig::set_allocated_output_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_path_.IsDefault()) {
          _impl_.output_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.output_path)
}

// optional uint32 file_write_period_ms = 9;
inline bool TraceConfig::has_file_write_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void TraceConfig::clear_file_write_period_ms() {
  _impl_.file_write_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t TraceConfig::file_write_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.file_write_period_ms)
  return _internal_file_write_period_ms();
}
inline void TraceConfig::set_file_write_period_ms(::uint32_t value) {
  _internal_set_file_write_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.file_write_period_ms)
}
inline ::uint32_t TraceConfig::_internal_file_write_period_ms() const {
  return _impl_.file_write_period_ms_;
}
inline void TraceConfig::_internal_set_file_write_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.file_write_period_ms_ = value;
}

// optional uint64 max_file_size_bytes = 10;
inline bool TraceConfig::has_max_file_size_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void TraceConfig::clear_max_file_size_bytes() {
  _impl_.max_file_size_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint64_t TraceConfig::max_file_size_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.max_file_size_bytes)
  return _internal_max_file_size_bytes();
}
inline void TraceConfig::set_max_file_size_bytes(::uint64_t value) {
  _internal_set_max_file_size_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.max_file_size_bytes)
}
inline ::uint64_t TraceConfig::_internal_max_file_size_bytes() const {
  return _impl_.max_file_size_bytes_;
}
inline void TraceConfig::_internal_set_max_file_size_bytes(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.max_file_size_bytes_ = value;
}

// optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
inline bool TraceConfig::has_guardrail_overrides() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.guardrail_overrides_ != nullptr);
  return value;
}
inline void TraceConfig::clear_guardrail_overrides() {
  if (_impl_.guardrail_overrides_ != nullptr) _impl_.guardrail_overrides_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::perfetto::protos::TraceConfig_GuardrailOverrides& TraceConfig::_internal_guardrail_overrides() const {
  const ::perfetto::protos::TraceConfig_GuardrailOverrides* p = _impl_.guardrail_overrides_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_GuardrailOverrides&>(
      ::perfetto::protos::_TraceConfig_GuardrailOverrides_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_GuardrailOverrides& TraceConfig::guardrail_overrides() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.guardrail_overrides)
  return _internal_guardrail_overrides();
}
inline void TraceConfig::unsafe_arena_set_allocated_guardrail_overrides(
    ::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guardrail_overrides_);
  }
  _impl_.guardrail_overrides_ = guardrail_overrides;
  if (guardrail_overrides) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.guardrail_overrides)
}
inline ::perfetto::protos::TraceConfig_GuardrailOverrides* TraceConfig::release_guardrail_overrides() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TraceConfig_GuardrailOverrides* temp = _impl_.guardrail_overrides_;
  _impl_.guardrail_overrides_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_GuardrailOverrides* TraceConfig::unsafe_arena_release_guardrail_overrides() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.guardrail_overrides)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::TraceConfig_GuardrailOverrides* temp = _impl_.guardrail_overrides_;
  _impl_.guardrail_overrides_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_GuardrailOverrides* TraceConfig::_internal_mutable_guardrail_overrides() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.guardrail_overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_GuardrailOverrides>(GetArenaForAllocation());
    _impl_.guardrail_overrides_ = p;
  }
  return _impl_.guardrail_overrides_;
}
inline ::perfetto::protos::TraceConfig_GuardrailOverrides* TraceConfig::mutable_guardrail_overrides() {
  ::perfetto::protos::TraceConfig_GuardrailOverrides* _msg = _internal_mutable_guardrail_overrides();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.guardrail_overrides)
  return _msg;
}
inline void TraceConfig::set_allocated_guardrail_overrides(::perfetto::protos::TraceConfig_GuardrailOverrides* guardrail_overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.guardrail_overrides_;
  }
  if (guardrail_overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(guardrail_overrides);
    if (message_arena != submessage_arena) {
      guardrail_overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guardrail_overrides, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.guardrail_overrides_ = guardrail_overrides;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.guardrail_overrides)
}

// optional bool deferred_start = 12;
inline bool TraceConfig::has_deferred_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void TraceConfig::clear_deferred_start() {
  _impl_.deferred_start_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool TraceConfig::deferred_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.deferred_start)
  return _internal_deferred_start();
}
inline void TraceConfig::set_deferred_start(bool value) {
  _internal_set_deferred_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.deferred_start)
}
inline bool TraceConfig::_internal_deferred_start() const {
  return _impl_.deferred_start_;
}
inline void TraceConfig::_internal_set_deferred_start(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.deferred_start_ = value;
}

// optional uint32 flush_period_ms = 13;
inline bool TraceConfig::has_flush_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void TraceConfig::clear_flush_period_ms() {
  _impl_.flush_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t TraceConfig::flush_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.flush_period_ms)
  return _internal_flush_period_ms();
}
inline void TraceConfig::set_flush_period_ms(::uint32_t value) {
  _internal_set_flush_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.flush_period_ms)
}
inline ::uint32_t TraceConfig::_internal_flush_period_ms() const {
  return _impl_.flush_period_ms_;
}
inline void TraceConfig::_internal_set_flush_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.flush_period_ms_ = value;
}

// optional uint32 flush_timeout_ms = 14;
inline bool TraceConfig::has_flush_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void TraceConfig::clear_flush_timeout_ms() {
  _impl_.flush_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t TraceConfig::flush_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.flush_timeout_ms)
  return _internal_flush_timeout_ms();
}
inline void TraceConfig::set_flush_timeout_ms(::uint32_t value) {
  _internal_set_flush_timeout_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.flush_timeout_ms)
}
inline ::uint32_t TraceConfig::_internal_flush_timeout_ms() const {
  return _impl_.flush_timeout_ms_;
}
inline void TraceConfig::_internal_set_flush_timeout_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.flush_timeout_ms_ = value;
}

// optional uint32 data_source_stop_timeout_ms = 23;
inline bool TraceConfig::has_data_source_stop_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void TraceConfig::clear_data_source_stop_timeout_ms() {
  _impl_.data_source_stop_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint32_t TraceConfig::data_source_stop_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.data_source_stop_timeout_ms)
  return _internal_data_source_stop_timeout_ms();
}
inline void TraceConfig::set_data_source_stop_timeout_ms(::uint32_t value) {
  _internal_set_data_source_stop_timeout_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.data_source_stop_timeout_ms)
}
inline ::uint32_t TraceConfig::_internal_data_source_stop_timeout_ms() const {
  return _impl_.data_source_stop_timeout_ms_;
}
inline void TraceConfig::_internal_set_data_source_stop_timeout_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.data_source_stop_timeout_ms_ = value;
}

// optional bool notify_traceur = 16;
inline bool TraceConfig::has_notify_traceur() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void TraceConfig::clear_notify_traceur() {
  _impl_.notify_traceur_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool TraceConfig::notify_traceur() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.notify_traceur)
  return _internal_notify_traceur();
}
inline void TraceConfig::set_notify_traceur(bool value) {
  _internal_set_notify_traceur(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.notify_traceur)
}
inline bool TraceConfig::_internal_notify_traceur() const {
  return _impl_.notify_traceur_;
}
inline void TraceConfig::_internal_set_notify_traceur(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.notify_traceur_ = value;
}

// optional int32 bugreport_score = 30;
inline bool TraceConfig::has_bugreport_score() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void TraceConfig::clear_bugreport_score() {
  _impl_.bugreport_score_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::int32_t TraceConfig::bugreport_score() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.bugreport_score)
  return _internal_bugreport_score();
}
inline void TraceConfig::set_bugreport_score(::int32_t value) {
  _internal_set_bugreport_score(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.bugreport_score)
}
inline ::int32_t TraceConfig::_internal_bugreport_score() const {
  return _impl_.bugreport_score_;
}
inline void TraceConfig::_internal_set_bugreport_score(::int32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.bugreport_score_ = value;
}

// optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
inline bool TraceConfig::has_trigger_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trigger_config_ != nullptr);
  return value;
}
inline void TraceConfig::clear_trigger_config() {
  if (_impl_.trigger_config_ != nullptr) _impl_.trigger_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::perfetto::protos::TraceConfig_TriggerConfig& TraceConfig::_internal_trigger_config() const {
  const ::perfetto::protos::TraceConfig_TriggerConfig* p = _impl_.trigger_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_TriggerConfig&>(
      ::perfetto::protos::_TraceConfig_TriggerConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_TriggerConfig& TraceConfig::trigger_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trigger_config)
  return _internal_trigger_config();
}
inline void TraceConfig::unsafe_arena_set_allocated_trigger_config(
    ::perfetto::protos::TraceConfig_TriggerConfig* trigger_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_config_);
  }
  _impl_.trigger_config_ = trigger_config;
  if (trigger_config) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.trigger_config)
}
inline ::perfetto::protos::TraceConfig_TriggerConfig* TraceConfig::release_trigger_config() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::TraceConfig_TriggerConfig* temp = _impl_.trigger_config_;
  _impl_.trigger_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_TriggerConfig* TraceConfig::unsafe_arena_release_trigger_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.trigger_config)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::TraceConfig_TriggerConfig* temp = _impl_.trigger_config_;
  _impl_.trigger_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_TriggerConfig* TraceConfig::_internal_mutable_trigger_config() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.trigger_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_TriggerConfig>(GetArenaForAllocation());
    _impl_.trigger_config_ = p;
  }
  return _impl_.trigger_config_;
}
inline ::perfetto::protos::TraceConfig_TriggerConfig* TraceConfig::mutable_trigger_config() {
  ::perfetto::protos::TraceConfig_TriggerConfig* _msg = _internal_mutable_trigger_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.trigger_config)
  return _msg;
}
inline void TraceConfig::set_allocated_trigger_config(::perfetto::protos::TraceConfig_TriggerConfig* trigger_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trigger_config_;
  }
  if (trigger_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trigger_config);
    if (message_arena != submessage_arena) {
      trigger_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.trigger_config_ = trigger_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.trigger_config)
}

// repeated string activate_triggers = 18;
inline int TraceConfig::_internal_activate_triggers_size() const {
  return _impl_.activate_triggers_.size();
}
inline int TraceConfig::activate_triggers_size() const {
  return _internal_activate_triggers_size();
}
inline void TraceConfig::clear_activate_triggers() {
  _internal_mutable_activate_triggers()->Clear();
}
inline std::string* TraceConfig::add_activate_triggers() {
  std::string* _s = _internal_add_activate_triggers();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.TraceConfig.activate_triggers)
  return _s;
}
inline const std::string& TraceConfig::activate_triggers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.activate_triggers)
  return _internal_activate_triggers(index);
}
inline std::string* TraceConfig::mutable_activate_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.activate_triggers)
  return _internal_mutable_activate_triggers()->Mutable(index);
}
inline void TraceConfig::set_activate_triggers(int index, const std::string& value) {
  _internal_mutable_activate_triggers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::set_activate_triggers(int index, std::string&& value) {
  _internal_mutable_activate_triggers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::set_activate_triggers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_activate_triggers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::set_activate_triggers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_activate_triggers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::set_activate_triggers(int index, absl::string_view value) {
  _internal_mutable_activate_triggers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(const std::string& value) {
  _internal_mutable_activate_triggers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(std::string&& value) {
  _internal_mutable_activate_triggers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_activate_triggers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(const char* value, std::size_t size) {
  _internal_mutable_activate_triggers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.TraceConfig.activate_triggers)
}
inline void TraceConfig::add_activate_triggers(absl::string_view value) {
  _internal_mutable_activate_triggers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.TraceConfig.activate_triggers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig::activate_triggers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.TraceConfig.activate_triggers)
  return _internal_activate_triggers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TraceConfig::mutable_activate_triggers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.TraceConfig.activate_triggers)
  return _internal_mutable_activate_triggers();
}
inline const std::string& TraceConfig::_internal_activate_triggers(int index) const {
  return _internal_activate_triggers().Get(index);
}
inline std::string* TraceConfig::_internal_add_activate_triggers() {
  return _internal_mutable_activate_triggers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceConfig::_internal_activate_triggers() const {
  return _impl_.activate_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceConfig::_internal_mutable_activate_triggers() {
  return &_impl_.activate_triggers_;
}

// optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
inline bool TraceConfig::has_incremental_state_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.incremental_state_config_ != nullptr);
  return value;
}
inline void TraceConfig::clear_incremental_state_config() {
  if (_impl_.incremental_state_config_ != nullptr) _impl_.incremental_state_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::perfetto::protos::TraceConfig_IncrementalStateConfig& TraceConfig::_internal_incremental_state_config() const {
  const ::perfetto::protos::TraceConfig_IncrementalStateConfig* p = _impl_.incremental_state_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_IncrementalStateConfig&>(
      ::perfetto::protos::_TraceConfig_IncrementalStateConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_IncrementalStateConfig& TraceConfig::incremental_state_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.incremental_state_config)
  return _internal_incremental_state_config();
}
inline void TraceConfig::unsafe_arena_set_allocated_incremental_state_config(
    ::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incremental_state_config_);
  }
  _impl_.incremental_state_config_ = incremental_state_config;
  if (incremental_state_config) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.incremental_state_config)
}
inline ::perfetto::protos::TraceConfig_IncrementalStateConfig* TraceConfig::release_incremental_state_config() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* temp = _impl_.incremental_state_config_;
  _impl_.incremental_state_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_IncrementalStateConfig* TraceConfig::unsafe_arena_release_incremental_state_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.incremental_state_config)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* temp = _impl_.incremental_state_config_;
  _impl_.incremental_state_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_IncrementalStateConfig* TraceConfig::_internal_mutable_incremental_state_config() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.incremental_state_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_IncrementalStateConfig>(GetArenaForAllocation());
    _impl_.incremental_state_config_ = p;
  }
  return _impl_.incremental_state_config_;
}
inline ::perfetto::protos::TraceConfig_IncrementalStateConfig* TraceConfig::mutable_incremental_state_config() {
  ::perfetto::protos::TraceConfig_IncrementalStateConfig* _msg = _internal_mutable_incremental_state_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.incremental_state_config)
  return _msg;
}
inline void TraceConfig::set_allocated_incremental_state_config(::perfetto::protos::TraceConfig_IncrementalStateConfig* incremental_state_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.incremental_state_config_;
  }
  if (incremental_state_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(incremental_state_config);
    if (message_arena != submessage_arena) {
      incremental_state_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incremental_state_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.incremental_state_config_ = incremental_state_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.incremental_state_config)
}

// optional bool allow_user_build_tracing = 19;
inline bool TraceConfig::has_allow_user_build_tracing() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void TraceConfig::clear_allow_user_build_tracing() {
  _impl_.allow_user_build_tracing_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool TraceConfig::allow_user_build_tracing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.allow_user_build_tracing)
  return _internal_allow_user_build_tracing();
}
inline void TraceConfig::set_allow_user_build_tracing(bool value) {
  _internal_set_allow_user_build_tracing(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.allow_user_build_tracing)
}
inline bool TraceConfig::_internal_allow_user_build_tracing() const {
  return _impl_.allow_user_build_tracing_;
}
inline void TraceConfig::_internal_set_allow_user_build_tracing(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.allow_user_build_tracing_ = value;
}

// optional string unique_session_name = 22;
inline bool TraceConfig::has_unique_session_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TraceConfig::clear_unique_session_name() {
  _impl_.unique_session_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceConfig::unique_session_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.unique_session_name)
  return _internal_unique_session_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TraceConfig::set_unique_session_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unique_session_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.unique_session_name)
}
inline std::string* TraceConfig::mutable_unique_session_name() {
  std::string* _s = _internal_mutable_unique_session_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.unique_session_name)
  return _s;
}
inline const std::string& TraceConfig::_internal_unique_session_name() const {
  return _impl_.unique_session_name_.Get();
}
inline void TraceConfig::_internal_set_unique_session_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.unique_session_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceConfig::_internal_mutable_unique_session_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.unique_session_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TraceConfig::release_unique_session_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.unique_session_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.unique_session_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unique_session_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TraceConfig::set_allocated_unique_session_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unique_session_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_session_name_.IsDefault()) {
          _impl_.unique_session_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.unique_session_name)
}

// optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
inline bool TraceConfig::has_compression_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void TraceConfig::clear_compression_type() {
  _impl_.compression_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::perfetto::protos::TraceConfig_CompressionType TraceConfig::compression_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.compression_type)
  return _internal_compression_type();
}
inline void TraceConfig::set_compression_type(::perfetto::protos::TraceConfig_CompressionType value) {
   _internal_set_compression_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.compression_type)
}
inline ::perfetto::protos::TraceConfig_CompressionType TraceConfig::_internal_compression_type() const {
  return static_cast<::perfetto::protos::TraceConfig_CompressionType>(_impl_.compression_type_);
}
inline void TraceConfig::_internal_set_compression_type(::perfetto::protos::TraceConfig_CompressionType value) {
  assert(::perfetto::protos::TraceConfig_CompressionType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.compression_type_ = value;
}

// optional bool compress_from_cli = 37;
inline bool TraceConfig::has_compress_from_cli() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void TraceConfig::clear_compress_from_cli() {
  _impl_.compress_from_cli_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool TraceConfig::compress_from_cli() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.compress_from_cli)
  return _internal_compress_from_cli();
}
inline void TraceConfig::set_compress_from_cli(bool value) {
  _internal_set_compress_from_cli(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.compress_from_cli)
}
inline bool TraceConfig::_internal_compress_from_cli() const {
  return _impl_.compress_from_cli_;
}
inline void TraceConfig::_internal_set_compress_from_cli(bool value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.compress_from_cli_ = value;
}

// optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
inline bool TraceConfig::has_incident_report_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.incident_report_config_ != nullptr);
  return value;
}
inline void TraceConfig::clear_incident_report_config() {
  if (_impl_.incident_report_config_ != nullptr) _impl_.incident_report_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::perfetto::protos::TraceConfig_IncidentReportConfig& TraceConfig::_internal_incident_report_config() const {
  const ::perfetto::protos::TraceConfig_IncidentReportConfig* p = _impl_.incident_report_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_IncidentReportConfig&>(
      ::perfetto::protos::_TraceConfig_IncidentReportConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_IncidentReportConfig& TraceConfig::incident_report_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.incident_report_config)
  return _internal_incident_report_config();
}
inline void TraceConfig::unsafe_arena_set_allocated_incident_report_config(
    ::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incident_report_config_);
  }
  _impl_.incident_report_config_ = incident_report_config;
  if (incident_report_config) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.incident_report_config)
}
inline ::perfetto::protos::TraceConfig_IncidentReportConfig* TraceConfig::release_incident_report_config() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::TraceConfig_IncidentReportConfig* temp = _impl_.incident_report_config_;
  _impl_.incident_report_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_IncidentReportConfig* TraceConfig::unsafe_arena_release_incident_report_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.incident_report_config)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::perfetto::protos::TraceConfig_IncidentReportConfig* temp = _impl_.incident_report_config_;
  _impl_.incident_report_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_IncidentReportConfig* TraceConfig::_internal_mutable_incident_report_config() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.incident_report_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_IncidentReportConfig>(GetArenaForAllocation());
    _impl_.incident_report_config_ = p;
  }
  return _impl_.incident_report_config_;
}
inline ::perfetto::protos::TraceConfig_IncidentReportConfig* TraceConfig::mutable_incident_report_config() {
  ::perfetto::protos::TraceConfig_IncidentReportConfig* _msg = _internal_mutable_incident_report_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.incident_report_config)
  return _msg;
}
inline void TraceConfig::set_allocated_incident_report_config(::perfetto::protos::TraceConfig_IncidentReportConfig* incident_report_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.incident_report_config_;
  }
  if (incident_report_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(incident_report_config);
    if (message_arena != submessage_arena) {
      incident_report_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incident_report_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.incident_report_config_ = incident_report_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.incident_report_config)
}

// optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
inline bool TraceConfig::has_statsd_logging() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void TraceConfig::clear_statsd_logging() {
  _impl_.statsd_logging_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::perfetto::protos::TraceConfig_StatsdLogging TraceConfig::statsd_logging() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.statsd_logging)
  return _internal_statsd_logging();
}
inline void TraceConfig::set_statsd_logging(::perfetto::protos::TraceConfig_StatsdLogging value) {
   _internal_set_statsd_logging(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.statsd_logging)
}
inline ::perfetto::protos::TraceConfig_StatsdLogging TraceConfig::_internal_statsd_logging() const {
  return static_cast<::perfetto::protos::TraceConfig_StatsdLogging>(_impl_.statsd_logging_);
}
inline void TraceConfig::_internal_set_statsd_logging(::perfetto::protos::TraceConfig_StatsdLogging value) {
  assert(::perfetto::protos::TraceConfig_StatsdLogging_IsValid(value));
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.statsd_logging_ = value;
}

// optional int64 trace_uuid_msb = 27 [deprecated = true];
inline bool TraceConfig::has_trace_uuid_msb() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void TraceConfig::clear_trace_uuid_msb() {
  _impl_.trace_uuid_msb_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::int64_t TraceConfig::trace_uuid_msb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trace_uuid_msb)
  return _internal_trace_uuid_msb();
}
inline void TraceConfig::set_trace_uuid_msb(::int64_t value) {
  _internal_set_trace_uuid_msb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.trace_uuid_msb)
}
inline ::int64_t TraceConfig::_internal_trace_uuid_msb() const {
  return _impl_.trace_uuid_msb_;
}
inline void TraceConfig::_internal_set_trace_uuid_msb(::int64_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.trace_uuid_msb_ = value;
}

// optional int64 trace_uuid_lsb = 28 [deprecated = true];
inline bool TraceConfig::has_trace_uuid_lsb() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void TraceConfig::clear_trace_uuid_lsb() {
  _impl_.trace_uuid_lsb_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int64_t TraceConfig::trace_uuid_lsb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trace_uuid_lsb)
  return _internal_trace_uuid_lsb();
}
inline void TraceConfig::set_trace_uuid_lsb(::int64_t value) {
  _internal_set_trace_uuid_lsb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TraceConfig.trace_uuid_lsb)
}
inline ::int64_t TraceConfig::_internal_trace_uuid_lsb() const {
  return _impl_.trace_uuid_lsb_;
}
inline void TraceConfig::_internal_set_trace_uuid_lsb(::int64_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.trace_uuid_lsb_ = value;
}

// optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
inline bool TraceConfig::has_trace_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trace_filter_ != nullptr);
  return value;
}
inline void TraceConfig::clear_trace_filter() {
  if (_impl_.trace_filter_ != nullptr) _impl_.trace_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::perfetto::protos::TraceConfig_TraceFilter& TraceConfig::_internal_trace_filter() const {
  const ::perfetto::protos::TraceConfig_TraceFilter* p = _impl_.trace_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_TraceFilter&>(
      ::perfetto::protos::_TraceConfig_TraceFilter_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_TraceFilter& TraceConfig::trace_filter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.trace_filter)
  return _internal_trace_filter();
}
inline void TraceConfig::unsafe_arena_set_allocated_trace_filter(
    ::perfetto::protos::TraceConfig_TraceFilter* trace_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trace_filter_);
  }
  _impl_.trace_filter_ = trace_filter;
  if (trace_filter) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.trace_filter)
}
inline ::perfetto::protos::TraceConfig_TraceFilter* TraceConfig::release_trace_filter() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::TraceConfig_TraceFilter* temp = _impl_.trace_filter_;
  _impl_.trace_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_TraceFilter* TraceConfig::unsafe_arena_release_trace_filter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.trace_filter)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::perfetto::protos::TraceConfig_TraceFilter* temp = _impl_.trace_filter_;
  _impl_.trace_filter_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_TraceFilter* TraceConfig::_internal_mutable_trace_filter() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.trace_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_TraceFilter>(GetArenaForAllocation());
    _impl_.trace_filter_ = p;
  }
  return _impl_.trace_filter_;
}
inline ::perfetto::protos::TraceConfig_TraceFilter* TraceConfig::mutable_trace_filter() {
  ::perfetto::protos::TraceConfig_TraceFilter* _msg = _internal_mutable_trace_filter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.trace_filter)
  return _msg;
}
inline void TraceConfig::set_allocated_trace_filter(::perfetto::protos::TraceConfig_TraceFilter* trace_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trace_filter_;
  }
  if (trace_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trace_filter);
    if (message_arena != submessage_arena) {
      trace_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.trace_filter_ = trace_filter;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.trace_filter)
}

// optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
inline bool TraceConfig::has_android_report_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.android_report_config_ != nullptr);
  return value;
}
inline void TraceConfig::clear_android_report_config() {
  if (_impl_.android_report_config_ != nullptr) _impl_.android_report_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::perfetto::protos::TraceConfig_AndroidReportConfig& TraceConfig::_internal_android_report_config() const {
  const ::perfetto::protos::TraceConfig_AndroidReportConfig* p = _impl_.android_report_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_AndroidReportConfig&>(
      ::perfetto::protos::_TraceConfig_AndroidReportConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_AndroidReportConfig& TraceConfig::android_report_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.android_report_config)
  return _internal_android_report_config();
}
inline void TraceConfig::unsafe_arena_set_allocated_android_report_config(
    ::perfetto::protos::TraceConfig_AndroidReportConfig* android_report_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.android_report_config_);
  }
  _impl_.android_report_config_ = android_report_config;
  if (android_report_config) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.android_report_config)
}
inline ::perfetto::protos::TraceConfig_AndroidReportConfig* TraceConfig::release_android_report_config() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::TraceConfig_AndroidReportConfig* temp = _impl_.android_report_config_;
  _impl_.android_report_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_AndroidReportConfig* TraceConfig::unsafe_arena_release_android_report_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.android_report_config)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::perfetto::protos::TraceConfig_AndroidReportConfig* temp = _impl_.android_report_config_;
  _impl_.android_report_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_AndroidReportConfig* TraceConfig::_internal_mutable_android_report_config() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.android_report_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_AndroidReportConfig>(GetArenaForAllocation());
    _impl_.android_report_config_ = p;
  }
  return _impl_.android_report_config_;
}
inline ::perfetto::protos::TraceConfig_AndroidReportConfig* TraceConfig::mutable_android_report_config() {
  ::perfetto::protos::TraceConfig_AndroidReportConfig* _msg = _internal_mutable_android_report_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.android_report_config)
  return _msg;
}
inline void TraceConfig::set_allocated_android_report_config(::perfetto::protos::TraceConfig_AndroidReportConfig* android_report_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.android_report_config_;
  }
  if (android_report_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(android_report_config);
    if (message_arena != submessage_arena) {
      android_report_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_report_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.android_report_config_ = android_report_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.android_report_config)
}

// optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
inline bool TraceConfig::has_cmd_trace_start_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cmd_trace_start_delay_ != nullptr);
  return value;
}
inline void TraceConfig::clear_cmd_trace_start_delay() {
  if (_impl_.cmd_trace_start_delay_ != nullptr) _impl_.cmd_trace_start_delay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::perfetto::protos::TraceConfig_CmdTraceStartDelay& TraceConfig::_internal_cmd_trace_start_delay() const {
  const ::perfetto::protos::TraceConfig_CmdTraceStartDelay* p = _impl_.cmd_trace_start_delay_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig_CmdTraceStartDelay&>(
      ::perfetto::protos::_TraceConfig_CmdTraceStartDelay_default_instance_);
}
inline const ::perfetto::protos::TraceConfig_CmdTraceStartDelay& TraceConfig::cmd_trace_start_delay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TraceConfig.cmd_trace_start_delay)
  return _internal_cmd_trace_start_delay();
}
inline void TraceConfig::unsafe_arena_set_allocated_cmd_trace_start_delay(
    ::perfetto::protos::TraceConfig_CmdTraceStartDelay* cmd_trace_start_delay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cmd_trace_start_delay_);
  }
  _impl_.cmd_trace_start_delay_ = cmd_trace_start_delay;
  if (cmd_trace_start_delay) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TraceConfig.cmd_trace_start_delay)
}
inline ::perfetto::protos::TraceConfig_CmdTraceStartDelay* TraceConfig::release_cmd_trace_start_delay() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::TraceConfig_CmdTraceStartDelay* temp = _impl_.cmd_trace_start_delay_;
  _impl_.cmd_trace_start_delay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TraceConfig_CmdTraceStartDelay* TraceConfig::unsafe_arena_release_cmd_trace_start_delay() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TraceConfig.cmd_trace_start_delay)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::perfetto::protos::TraceConfig_CmdTraceStartDelay* temp = _impl_.cmd_trace_start_delay_;
  _impl_.cmd_trace_start_delay_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig_CmdTraceStartDelay* TraceConfig::_internal_mutable_cmd_trace_start_delay() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.cmd_trace_start_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig_CmdTraceStartDelay>(GetArenaForAllocation());
    _impl_.cmd_trace_start_delay_ = p;
  }
  return _impl_.cmd_trace_start_delay_;
}
inline ::perfetto::protos::TraceConfig_CmdTraceStartDelay* TraceConfig::mutable_cmd_trace_start_delay() {
  ::perfetto::protos::TraceConfig_CmdTraceStartDelay* _msg = _internal_mutable_cmd_trace_start_delay();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TraceConfig.cmd_trace_start_delay)
  return _msg;
}
inline void TraceConfig::set_allocated_cmd_trace_start_delay(::perfetto::protos::TraceConfig_CmdTraceStartDelay* cmd_trace_start_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cmd_trace_start_delay_;
  }
  if (cmd_trace_start_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cmd_trace_start_delay);
    if (message_arena != submessage_arena) {
      cmd_trace_start_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd_trace_start_delay, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.cmd_trace_start_delay_ = cmd_trace_start_delay;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TraceConfig.cmd_trace_start_delay)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::TraceConfig_BufferConfig_FillPolicy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TraceConfig_BufferConfig_FillPolicy>() {
  return ::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode>() {
  return ::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy>() {
  return ::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::TraceConfig_LockdownModeOperation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TraceConfig_LockdownModeOperation>() {
  return ::perfetto::protos::TraceConfig_LockdownModeOperation_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::TraceConfig_CompressionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TraceConfig_CompressionType>() {
  return ::perfetto::protos::TraceConfig_CompressionType_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::TraceConfig_StatsdLogging> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TraceConfig_StatsdLogging>() {
  return ::perfetto::protos::TraceConfig_StatsdLogging_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_2epb_2eh
