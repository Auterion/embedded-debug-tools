// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/ftrace/ftrace_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class FtraceConfig;
struct FtraceConfigDefaultTypeInternal;
extern FtraceConfigDefaultTypeInternal _FtraceConfig_default_instance_;
class FtraceConfig_CompactSchedConfig;
struct FtraceConfig_CompactSchedConfigDefaultTypeInternal;
extern FtraceConfig_CompactSchedConfigDefaultTypeInternal _FtraceConfig_CompactSchedConfig_default_instance_;
class FtraceConfig_PrintFilter;
struct FtraceConfig_PrintFilterDefaultTypeInternal;
extern FtraceConfig_PrintFilterDefaultTypeInternal _FtraceConfig_PrintFilter_default_instance_;
class FtraceConfig_PrintFilter_Rule;
struct FtraceConfig_PrintFilter_RuleDefaultTypeInternal;
extern FtraceConfig_PrintFilter_RuleDefaultTypeInternal _FtraceConfig_PrintFilter_Rule_default_instance_;
class FtraceConfig_PrintFilter_Rule_AtraceMessage;
struct FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal;
extern FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal _FtraceConfig_PrintFilter_Rule_AtraceMessage_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig>(Arena*);
template <>
::perfetto::protos::FtraceConfig_CompactSchedConfig* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig_CompactSchedConfig>(Arena*);
template <>
::perfetto::protos::FtraceConfig_PrintFilter* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig_PrintFilter>(Arena*);
template <>
::perfetto::protos::FtraceConfig_PrintFilter_Rule* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig_PrintFilter_Rule>(Arena*);
template <>
::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* Arena::CreateMaybeMessage<::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum FtraceConfig_KsymsMemPolicy : int {
  FtraceConfig_KsymsMemPolicy_KSYMS_UNSPECIFIED = 0,
  FtraceConfig_KsymsMemPolicy_KSYMS_CLEANUP_ON_STOP = 1,
  FtraceConfig_KsymsMemPolicy_KSYMS_RETAIN = 2,
};

bool FtraceConfig_KsymsMemPolicy_IsValid(int value);
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig_KsymsMemPolicy_KsymsMemPolicy_MIN = static_cast<FtraceConfig_KsymsMemPolicy>(0);
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig_KsymsMemPolicy_KsymsMemPolicy_MAX = static_cast<FtraceConfig_KsymsMemPolicy>(2);
constexpr int FtraceConfig_KsymsMemPolicy_KsymsMemPolicy_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FtraceConfig_KsymsMemPolicy_descriptor();
template <typename T>
const std::string& FtraceConfig_KsymsMemPolicy_Name(T value) {
  static_assert(std::is_same<T, FtraceConfig_KsymsMemPolicy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to KsymsMemPolicy_Name().");
  return FtraceConfig_KsymsMemPolicy_Name(static_cast<FtraceConfig_KsymsMemPolicy>(value));
}
template <>
inline const std::string& FtraceConfig_KsymsMemPolicy_Name(FtraceConfig_KsymsMemPolicy value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FtraceConfig_KsymsMemPolicy_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool FtraceConfig_KsymsMemPolicy_Parse(absl::string_view name, FtraceConfig_KsymsMemPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FtraceConfig_KsymsMemPolicy>(
      FtraceConfig_KsymsMemPolicy_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FtraceConfig_CompactSchedConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig.CompactSchedConfig) */ {
 public:
  inline FtraceConfig_CompactSchedConfig() : FtraceConfig_CompactSchedConfig(nullptr) {}
  ~FtraceConfig_CompactSchedConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceConfig_CompactSchedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from);
  FtraceConfig_CompactSchedConfig(FtraceConfig_CompactSchedConfig&& from) noexcept
    : FtraceConfig_CompactSchedConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig_CompactSchedConfig& operator=(const FtraceConfig_CompactSchedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig_CompactSchedConfig& operator=(FtraceConfig_CompactSchedConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceConfig_CompactSchedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceConfig_CompactSchedConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig_CompactSchedConfig*>(
               &_FtraceConfig_CompactSchedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceConfig_CompactSchedConfig& a, FtraceConfig_CompactSchedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig_CompactSchedConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceConfig_CompactSchedConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceConfig_CompactSchedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceConfig_CompactSchedConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceConfig_CompactSchedConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceConfig_CompactSchedConfig& from) {
    FtraceConfig_CompactSchedConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceConfig_CompactSchedConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceConfig.CompactSchedConfig";
  }
  protected:
  explicit FtraceConfig_CompactSchedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig.CompactSchedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class FtraceConfig_PrintFilter_Rule_AtraceMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage) */ {
 public:
  inline FtraceConfig_PrintFilter_Rule_AtraceMessage() : FtraceConfig_PrintFilter_Rule_AtraceMessage(nullptr) {}
  ~FtraceConfig_PrintFilter_Rule_AtraceMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule_AtraceMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceConfig_PrintFilter_Rule_AtraceMessage(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from);
  FtraceConfig_PrintFilter_Rule_AtraceMessage(FtraceConfig_PrintFilter_Rule_AtraceMessage&& from) noexcept
    : FtraceConfig_PrintFilter_Rule_AtraceMessage() {
    *this = ::std::move(from);
  }

  inline FtraceConfig_PrintFilter_Rule_AtraceMessage& operator=(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig_PrintFilter_Rule_AtraceMessage& operator=(FtraceConfig_PrintFilter_Rule_AtraceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceConfig_PrintFilter_Rule_AtraceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceConfig_PrintFilter_Rule_AtraceMessage* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig_PrintFilter_Rule_AtraceMessage*>(
               &_FtraceConfig_PrintFilter_Rule_AtraceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtraceConfig_PrintFilter_Rule_AtraceMessage& a, FtraceConfig_PrintFilter_Rule_AtraceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig_PrintFilter_Rule_AtraceMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceConfig_PrintFilter_Rule_AtraceMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceConfig_PrintFilter_Rule_AtraceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceConfig_PrintFilter_Rule_AtraceMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceConfig_PrintFilter_Rule_AtraceMessage& from) {
    FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceConfig_PrintFilter_Rule_AtraceMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage";
  }
  protected:
  explicit FtraceConfig_PrintFilter_Rule_AtraceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPrefixFieldNumber = 2,
  };
  // optional string type = 1;
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional string prefix = 2;
  bool has_prefix() const;
  void clear_prefix() ;
  const std::string& prefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* ptr);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class FtraceConfig_PrintFilter_Rule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig.PrintFilter.Rule) */ {
 public:
  inline FtraceConfig_PrintFilter_Rule() : FtraceConfig_PrintFilter_Rule(nullptr) {}
  ~FtraceConfig_PrintFilter_Rule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceConfig_PrintFilter_Rule(const FtraceConfig_PrintFilter_Rule& from);
  FtraceConfig_PrintFilter_Rule(FtraceConfig_PrintFilter_Rule&& from) noexcept
    : FtraceConfig_PrintFilter_Rule() {
    *this = ::std::move(from);
  }

  inline FtraceConfig_PrintFilter_Rule& operator=(const FtraceConfig_PrintFilter_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig_PrintFilter_Rule& operator=(FtraceConfig_PrintFilter_Rule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceConfig_PrintFilter_Rule& default_instance() {
    return *internal_default_instance();
  }
  enum MatchCase {
    kPrefix = 1,
    kAtraceMsg = 3,
    MATCH_NOT_SET = 0,
  };

  static inline const FtraceConfig_PrintFilter_Rule* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig_PrintFilter_Rule*>(
               &_FtraceConfig_PrintFilter_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FtraceConfig_PrintFilter_Rule& a, FtraceConfig_PrintFilter_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig_PrintFilter_Rule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceConfig_PrintFilter_Rule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceConfig_PrintFilter_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceConfig_PrintFilter_Rule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceConfig_PrintFilter_Rule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceConfig_PrintFilter_Rule& from) {
    FtraceConfig_PrintFilter_Rule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceConfig_PrintFilter_Rule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceConfig.PrintFilter.Rule";
  }
  protected:
  explicit FtraceConfig_PrintFilter_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FtraceConfig_PrintFilter_Rule_AtraceMessage AtraceMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kAllowFieldNumber = 2,
    kPrefixFieldNumber = 1,
    kAtraceMsgFieldNumber = 3,
  };
  // optional bool allow = 2;
  bool has_allow() const;
  void clear_allow() ;
  bool allow() const;
  void set_allow(bool value);

  private:
  bool _internal_allow() const;
  void _internal_set_allow(bool value);

  public:
  // string prefix = 1;
  bool has_prefix() const;
  void clear_prefix() ;
  const std::string& prefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* ptr);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
  bool has_atrace_msg() const;
  private:
  bool _internal_has_atrace_msg() const;

  public:
  void clear_atrace_msg() ;
  const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage& atrace_msg() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* release_atrace_msg();
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* mutable_atrace_msg();
  void set_allocated_atrace_msg(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* atrace_msg);
  private:
  const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage& _internal_atrace_msg() const;
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* _internal_mutable_atrace_msg();
  public:
  void unsafe_arena_set_allocated_atrace_msg(
      ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* atrace_msg);
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* unsafe_arena_release_atrace_msg();
  void clear_match();
  MatchCase match_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig.PrintFilter.Rule)
 private:
  class _Internal;
  void set_has_prefix();
  void set_has_atrace_msg();

  inline bool has_match() const;
  inline void clear_has_match();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool allow_;
    union MatchUnion {
      constexpr MatchUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
      ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* atrace_msg_;
    } match_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class FtraceConfig_PrintFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig.PrintFilter) */ {
 public:
  inline FtraceConfig_PrintFilter() : FtraceConfig_PrintFilter(nullptr) {}
  ~FtraceConfig_PrintFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceConfig_PrintFilter(const FtraceConfig_PrintFilter& from);
  FtraceConfig_PrintFilter(FtraceConfig_PrintFilter&& from) noexcept
    : FtraceConfig_PrintFilter() {
    *this = ::std::move(from);
  }

  inline FtraceConfig_PrintFilter& operator=(const FtraceConfig_PrintFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig_PrintFilter& operator=(FtraceConfig_PrintFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceConfig_PrintFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceConfig_PrintFilter* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig_PrintFilter*>(
               &_FtraceConfig_PrintFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FtraceConfig_PrintFilter& a, FtraceConfig_PrintFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig_PrintFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceConfig_PrintFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceConfig_PrintFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceConfig_PrintFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceConfig_PrintFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceConfig_PrintFilter& from) {
    FtraceConfig_PrintFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceConfig_PrintFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceConfig.PrintFilter";
  }
  protected:
  explicit FtraceConfig_PrintFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FtraceConfig_PrintFilter_Rule Rule;

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >*
      mutable_rules();
  private:
  const ::perfetto::protos::FtraceConfig_PrintFilter_Rule& _internal_rules(int index) const;
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule* _internal_add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceConfig_PrintFilter_Rule>& _internal_rules() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceConfig_PrintFilter_Rule>* _internal_mutable_rules();
  public:
  const ::perfetto::protos::FtraceConfig_PrintFilter_Rule& rules(int index) const;
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >&
      rules() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig.PrintFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceConfig_PrintFilter_Rule > rules_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};// -------------------------------------------------------------------

class FtraceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceConfig) */ {
 public:
  inline FtraceConfig() : FtraceConfig(nullptr) {}
  ~FtraceConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceConfig(const FtraceConfig& from);
  FtraceConfig(FtraceConfig&& from) noexcept
    : FtraceConfig() {
    *this = ::std::move(from);
  }

  inline FtraceConfig& operator=(const FtraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceConfig& operator=(FtraceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceConfig* internal_default_instance() {
    return reinterpret_cast<const FtraceConfig*>(
               &_FtraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FtraceConfig& a, FtraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceConfig& from) {
    FtraceConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceConfig";
  }
  protected:
  explicit FtraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FtraceConfig_CompactSchedConfig CompactSchedConfig;
  typedef FtraceConfig_PrintFilter PrintFilter;

  using KsymsMemPolicy = FtraceConfig_KsymsMemPolicy;
  static constexpr KsymsMemPolicy KSYMS_UNSPECIFIED = FtraceConfig_KsymsMemPolicy_KSYMS_UNSPECIFIED;
  static constexpr KsymsMemPolicy KSYMS_CLEANUP_ON_STOP = FtraceConfig_KsymsMemPolicy_KSYMS_CLEANUP_ON_STOP;
  static constexpr KsymsMemPolicy KSYMS_RETAIN = FtraceConfig_KsymsMemPolicy_KSYMS_RETAIN;
  static inline bool KsymsMemPolicy_IsValid(int value) {
    return FtraceConfig_KsymsMemPolicy_IsValid(value);
  }
  static constexpr KsymsMemPolicy KsymsMemPolicy_MIN = FtraceConfig_KsymsMemPolicy_KsymsMemPolicy_MIN;
  static constexpr KsymsMemPolicy KsymsMemPolicy_MAX = FtraceConfig_KsymsMemPolicy_KsymsMemPolicy_MAX;
  static constexpr int KsymsMemPolicy_ARRAYSIZE = FtraceConfig_KsymsMemPolicy_KsymsMemPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KsymsMemPolicy_descriptor() {
    return FtraceConfig_KsymsMemPolicy_descriptor();
  }
  template <typename T>
  static inline const std::string& KsymsMemPolicy_Name(T value) {
    return FtraceConfig_KsymsMemPolicy_Name(value);
  }
  static inline bool KsymsMemPolicy_Parse(absl::string_view name, KsymsMemPolicy* value) {
    return FtraceConfig_KsymsMemPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFtraceEventsFieldNumber = 1,
    kAtraceCategoriesFieldNumber = 2,
    kAtraceAppsFieldNumber = 3,
    kSyscallEventsFieldNumber = 18,
    kFunctionFiltersFieldNumber = 20,
    kFunctionGraphRootsFieldNumber = 21,
    kInstanceNameFieldNumber = 25,
    kCompactSchedFieldNumber = 12,
    kPrintFilterFieldNumber = 22,
    kBufferSizeKbFieldNumber = 10,
    kDrainPeriodMsFieldNumber = 11,
    kSymbolizeKsymsFieldNumber = 13,
    kInitializeKsymsSynchronouslyForTestingFieldNumber = 14,
    kThrottleRssStatFieldNumber = 15,
    kDisableGenericEventsFieldNumber = 16,
    kKsymsMemPolicyFieldNumber = 17,
    kEnableFunctionGraphFieldNumber = 19,
    kPreserveFtraceBufferFieldNumber = 23,
    kUseMonotonicRawClockFieldNumber = 24,
  };
  // repeated string ftrace_events = 1;
  int ftrace_events_size() const;
  private:
  int _internal_ftrace_events_size() const;

  public:
  void clear_ftrace_events() ;
  const std::string& ftrace_events(int index) const;
  std::string* mutable_ftrace_events(int index);
  void set_ftrace_events(int index, const std::string& value);
  void set_ftrace_events(int index, std::string&& value);
  void set_ftrace_events(int index, const char* value);
  void set_ftrace_events(int index, const char* value, std::size_t size);
  void set_ftrace_events(int index, absl::string_view value);
  std::string* add_ftrace_events();
  void add_ftrace_events(const std::string& value);
  void add_ftrace_events(std::string&& value);
  void add_ftrace_events(const char* value);
  void add_ftrace_events(const char* value, std::size_t size);
  void add_ftrace_events(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ftrace_events();

  private:
  const std::string& _internal_ftrace_events(int index) const;
  std::string* _internal_add_ftrace_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_ftrace_events();

  public:
  // repeated string atrace_categories = 2;
  int atrace_categories_size() const;
  private:
  int _internal_atrace_categories_size() const;

  public:
  void clear_atrace_categories() ;
  const std::string& atrace_categories(int index) const;
  std::string* mutable_atrace_categories(int index);
  void set_atrace_categories(int index, const std::string& value);
  void set_atrace_categories(int index, std::string&& value);
  void set_atrace_categories(int index, const char* value);
  void set_atrace_categories(int index, const char* value, std::size_t size);
  void set_atrace_categories(int index, absl::string_view value);
  std::string* add_atrace_categories();
  void add_atrace_categories(const std::string& value);
  void add_atrace_categories(std::string&& value);
  void add_atrace_categories(const char* value);
  void add_atrace_categories(const char* value, std::size_t size);
  void add_atrace_categories(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atrace_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atrace_categories();

  private:
  const std::string& _internal_atrace_categories(int index) const;
  std::string* _internal_add_atrace_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_atrace_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_atrace_categories();

  public:
  // repeated string atrace_apps = 3;
  int atrace_apps_size() const;
  private:
  int _internal_atrace_apps_size() const;

  public:
  void clear_atrace_apps() ;
  const std::string& atrace_apps(int index) const;
  std::string* mutable_atrace_apps(int index);
  void set_atrace_apps(int index, const std::string& value);
  void set_atrace_apps(int index, std::string&& value);
  void set_atrace_apps(int index, const char* value);
  void set_atrace_apps(int index, const char* value, std::size_t size);
  void set_atrace_apps(int index, absl::string_view value);
  std::string* add_atrace_apps();
  void add_atrace_apps(const std::string& value);
  void add_atrace_apps(std::string&& value);
  void add_atrace_apps(const char* value);
  void add_atrace_apps(const char* value, std::size_t size);
  void add_atrace_apps(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& atrace_apps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_atrace_apps();

  private:
  const std::string& _internal_atrace_apps(int index) const;
  std::string* _internal_add_atrace_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_atrace_apps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_atrace_apps();

  public:
  // repeated string syscall_events = 18;
  int syscall_events_size() const;
  private:
  int _internal_syscall_events_size() const;

  public:
  void clear_syscall_events() ;
  const std::string& syscall_events(int index) const;
  std::string* mutable_syscall_events(int index);
  void set_syscall_events(int index, const std::string& value);
  void set_syscall_events(int index, std::string&& value);
  void set_syscall_events(int index, const char* value);
  void set_syscall_events(int index, const char* value, std::size_t size);
  void set_syscall_events(int index, absl::string_view value);
  std::string* add_syscall_events();
  void add_syscall_events(const std::string& value);
  void add_syscall_events(std::string&& value);
  void add_syscall_events(const char* value);
  void add_syscall_events(const char* value, std::size_t size);
  void add_syscall_events(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& syscall_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_syscall_events();

  private:
  const std::string& _internal_syscall_events(int index) const;
  std::string* _internal_add_syscall_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_syscall_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_syscall_events();

  public:
  // repeated string function_filters = 20;
  int function_filters_size() const;
  private:
  int _internal_function_filters_size() const;

  public:
  void clear_function_filters() ;
  const std::string& function_filters(int index) const;
  std::string* mutable_function_filters(int index);
  void set_function_filters(int index, const std::string& value);
  void set_function_filters(int index, std::string&& value);
  void set_function_filters(int index, const char* value);
  void set_function_filters(int index, const char* value, std::size_t size);
  void set_function_filters(int index, absl::string_view value);
  std::string* add_function_filters();
  void add_function_filters(const std::string& value);
  void add_function_filters(std::string&& value);
  void add_function_filters(const char* value);
  void add_function_filters(const char* value, std::size_t size);
  void add_function_filters(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& function_filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_function_filters();

  private:
  const std::string& _internal_function_filters(int index) const;
  std::string* _internal_add_function_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_function_filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_function_filters();

  public:
  // repeated string function_graph_roots = 21;
  int function_graph_roots_size() const;
  private:
  int _internal_function_graph_roots_size() const;

  public:
  void clear_function_graph_roots() ;
  const std::string& function_graph_roots(int index) const;
  std::string* mutable_function_graph_roots(int index);
  void set_function_graph_roots(int index, const std::string& value);
  void set_function_graph_roots(int index, std::string&& value);
  void set_function_graph_roots(int index, const char* value);
  void set_function_graph_roots(int index, const char* value, std::size_t size);
  void set_function_graph_roots(int index, absl::string_view value);
  std::string* add_function_graph_roots();
  void add_function_graph_roots(const std::string& value);
  void add_function_graph_roots(std::string&& value);
  void add_function_graph_roots(const char* value);
  void add_function_graph_roots(const char* value, std::size_t size);
  void add_function_graph_roots(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& function_graph_roots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_function_graph_roots();

  private:
  const std::string& _internal_function_graph_roots(int index) const;
  std::string* _internal_add_function_graph_roots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_function_graph_roots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_function_graph_roots();

  public:
  // optional string instance_name = 25;
  bool has_instance_name() const;
  void clear_instance_name() ;
  const std::string& instance_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instance_name(Arg_&& arg, Args_... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* ptr);

  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(
      const std::string& value);
  std::string* _internal_mutable_instance_name();

  public:
  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  bool has_compact_sched() const;
  void clear_compact_sched() ;
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceConfig_CompactSchedConfig* release_compact_sched();
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* mutable_compact_sched();
  void set_allocated_compact_sched(::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched);
  private:
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig& _internal_compact_sched() const;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* _internal_mutable_compact_sched();
  public:
  void unsafe_arena_set_allocated_compact_sched(
      ::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched);
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* unsafe_arena_release_compact_sched();
  // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
  bool has_print_filter() const;
  void clear_print_filter() ;
  const ::perfetto::protos::FtraceConfig_PrintFilter& print_filter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceConfig_PrintFilter* release_print_filter();
  ::perfetto::protos::FtraceConfig_PrintFilter* mutable_print_filter();
  void set_allocated_print_filter(::perfetto::protos::FtraceConfig_PrintFilter* print_filter);
  private:
  const ::perfetto::protos::FtraceConfig_PrintFilter& _internal_print_filter() const;
  ::perfetto::protos::FtraceConfig_PrintFilter* _internal_mutable_print_filter();
  public:
  void unsafe_arena_set_allocated_print_filter(
      ::perfetto::protos::FtraceConfig_PrintFilter* print_filter);
  ::perfetto::protos::FtraceConfig_PrintFilter* unsafe_arena_release_print_filter();
  // optional uint32 buffer_size_kb = 10;
  bool has_buffer_size_kb() const;
  void clear_buffer_size_kb() ;
  ::uint32_t buffer_size_kb() const;
  void set_buffer_size_kb(::uint32_t value);

  private:
  ::uint32_t _internal_buffer_size_kb() const;
  void _internal_set_buffer_size_kb(::uint32_t value);

  public:
  // optional uint32 drain_period_ms = 11;
  bool has_drain_period_ms() const;
  void clear_drain_period_ms() ;
  ::uint32_t drain_period_ms() const;
  void set_drain_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_drain_period_ms() const;
  void _internal_set_drain_period_ms(::uint32_t value);

  public:
  // optional bool symbolize_ksyms = 13;
  bool has_symbolize_ksyms() const;
  void clear_symbolize_ksyms() ;
  bool symbolize_ksyms() const;
  void set_symbolize_ksyms(bool value);

  private:
  bool _internal_symbolize_ksyms() const;
  void _internal_set_symbolize_ksyms(bool value);

  public:
  // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
  [[deprecated]]  bool has_initialize_ksyms_synchronously_for_testing() const;
  [[deprecated]]  void clear_initialize_ksyms_synchronously_for_testing() ;
  [[deprecated]] bool initialize_ksyms_synchronously_for_testing() const;
  [[deprecated]] void set_initialize_ksyms_synchronously_for_testing(bool value);

  private:
  bool _internal_initialize_ksyms_synchronously_for_testing() const;
  void _internal_set_initialize_ksyms_synchronously_for_testing(bool value);

  public:
  // optional bool throttle_rss_stat = 15;
  bool has_throttle_rss_stat() const;
  void clear_throttle_rss_stat() ;
  bool throttle_rss_stat() const;
  void set_throttle_rss_stat(bool value);

  private:
  bool _internal_throttle_rss_stat() const;
  void _internal_set_throttle_rss_stat(bool value);

  public:
  // optional bool disable_generic_events = 16;
  bool has_disable_generic_events() const;
  void clear_disable_generic_events() ;
  bool disable_generic_events() const;
  void set_disable_generic_events(bool value);

  private:
  bool _internal_disable_generic_events() const;
  void _internal_set_disable_generic_events(bool value);

  public:
  // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
  bool has_ksyms_mem_policy() const;
  void clear_ksyms_mem_policy() ;
  ::perfetto::protos::FtraceConfig_KsymsMemPolicy ksyms_mem_policy() const;
  void set_ksyms_mem_policy(::perfetto::protos::FtraceConfig_KsymsMemPolicy value);

  private:
  ::perfetto::protos::FtraceConfig_KsymsMemPolicy _internal_ksyms_mem_policy() const;
  void _internal_set_ksyms_mem_policy(::perfetto::protos::FtraceConfig_KsymsMemPolicy value);

  public:
  // optional bool enable_function_graph = 19;
  bool has_enable_function_graph() const;
  void clear_enable_function_graph() ;
  bool enable_function_graph() const;
  void set_enable_function_graph(bool value);

  private:
  bool _internal_enable_function_graph() const;
  void _internal_set_enable_function_graph(bool value);

  public:
  // optional bool preserve_ftrace_buffer = 23;
  bool has_preserve_ftrace_buffer() const;
  void clear_preserve_ftrace_buffer() ;
  bool preserve_ftrace_buffer() const;
  void set_preserve_ftrace_buffer(bool value);

  private:
  bool _internal_preserve_ftrace_buffer() const;
  void _internal_set_preserve_ftrace_buffer(bool value);

  public:
  // optional bool use_monotonic_raw_clock = 24;
  bool has_use_monotonic_raw_clock() const;
  void clear_use_monotonic_raw_clock() ;
  bool use_monotonic_raw_clock() const;
  void set_use_monotonic_raw_clock(bool value);

  private:
  bool _internal_use_monotonic_raw_clock() const;
  void _internal_set_use_monotonic_raw_clock(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ftrace_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atrace_categories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> atrace_apps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> syscall_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> function_filters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> function_graph_roots_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
    ::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched_;
    ::perfetto::protos::FtraceConfig_PrintFilter* print_filter_;
    ::uint32_t buffer_size_kb_;
    ::uint32_t drain_period_ms_;
    bool symbolize_ksyms_;
    bool initialize_ksyms_synchronously_for_testing_;
    bool throttle_rss_stat_;
    bool disable_generic_events_;
    int ksyms_mem_policy_;
    bool enable_function_graph_;
    bool preserve_ftrace_buffer_;
    bool use_monotonic_raw_clock_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FtraceConfig_CompactSchedConfig

// optional bool enabled = 1;
inline bool FtraceConfig_CompactSchedConfig::has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceConfig_CompactSchedConfig::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FtraceConfig_CompactSchedConfig::enabled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.CompactSchedConfig.enabled)
  return _internal_enabled();
}
inline void FtraceConfig_CompactSchedConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.CompactSchedConfig.enabled)
}
inline bool FtraceConfig_CompactSchedConfig::_internal_enabled() const {
  return _impl_.enabled_;
}
inline void FtraceConfig_CompactSchedConfig::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}

// -------------------------------------------------------------------

// FtraceConfig_PrintFilter_Rule_AtraceMessage

// optional string type = 1;
inline bool FtraceConfig_PrintFilter_Rule_AtraceMessage::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FtraceConfig_PrintFilter_Rule_AtraceMessage::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FtraceConfig_PrintFilter_Rule_AtraceMessage::set_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type)
}
inline std::string* FtraceConfig_PrintFilter_Rule_AtraceMessage::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type)
  return _s;
}
inline const std::string& FtraceConfig_PrintFilter_Rule_AtraceMessage::_internal_type() const {
  return _impl_.type_.Get();
}
inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* FtraceConfig_PrintFilter_Rule_AtraceMessage::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* FtraceConfig_PrintFilter_Rule_AtraceMessage::release_type() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::set_allocated_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type)
}

// optional string prefix = 2;
inline bool FtraceConfig_PrintFilter_Rule_AtraceMessage::has_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FtraceConfig_PrintFilter_Rule_AtraceMessage::prefix() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FtraceConfig_PrintFilter_Rule_AtraceMessage::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix)
}
inline std::string* FtraceConfig_PrintFilter_Rule_AtraceMessage::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix)
  return _s;
}
inline const std::string& FtraceConfig_PrintFilter_Rule_AtraceMessage::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::_internal_set_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* FtraceConfig_PrintFilter_Rule_AtraceMessage::_internal_mutable_prefix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* FtraceConfig_PrintFilter_Rule_AtraceMessage::release_prefix() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::set_allocated_prefix(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefix_.IsDefault()) {
          _impl_.prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix)
}

// -------------------------------------------------------------------

// FtraceConfig_PrintFilter_Rule

// string prefix = 1;
inline bool FtraceConfig_PrintFilter_Rule::has_prefix() const {
  return match_case() == kPrefix;
}
inline void FtraceConfig_PrintFilter_Rule::set_has_prefix() {
  _impl_._oneof_case_[0] = kPrefix;
}
inline void FtraceConfig_PrintFilter_Rule::clear_prefix() {
  if (match_case() == kPrefix) {
    _impl_.match_.prefix_.Destroy();
    clear_has_match();
  }
}
inline const std::string& FtraceConfig_PrintFilter_Rule::prefix() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FtraceConfig_PrintFilter_Rule::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  if (match_case() != kPrefix) {
    clear_match();

    set_has_prefix();
    _impl_.match_.prefix_.InitDefault();
  }
  _impl_.match_.prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix)
}
inline std::string* FtraceConfig_PrintFilter_Rule::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix)
  return _s;
}
inline const std::string& FtraceConfig_PrintFilter_Rule::_internal_prefix() const {
  if (match_case() != kPrefix) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.match_.prefix_.Get();
}
inline void FtraceConfig_PrintFilter_Rule::_internal_set_prefix(const std::string& value) {
  if (match_case() != kPrefix) {
    clear_match();

    set_has_prefix();
    _impl_.match_.prefix_.InitDefault();
  }


  _impl_.match_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* FtraceConfig_PrintFilter_Rule::_internal_mutable_prefix() {
  if (match_case() != kPrefix) {
    clear_match();

    set_has_prefix();
    _impl_.match_.prefix_.InitDefault();
  }
  return _impl_.match_.prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* FtraceConfig_PrintFilter_Rule::release_prefix() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix)
  if (match_case() != kPrefix) {
    return nullptr;
  }
  clear_has_match();
  return _impl_.match_.prefix_.Release();
}
inline void FtraceConfig_PrintFilter_Rule::set_allocated_prefix(std::string* value) {
  if (has_match()) {
    clear_match();
  }
  if (value != nullptr) {
    set_has_prefix();
    _impl_.match_.prefix_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix)
}

// .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
inline bool FtraceConfig_PrintFilter_Rule::has_atrace_msg() const {
  return match_case() == kAtraceMsg;
}
inline bool FtraceConfig_PrintFilter_Rule::_internal_has_atrace_msg() const {
  return match_case() == kAtraceMsg;
}
inline void FtraceConfig_PrintFilter_Rule::set_has_atrace_msg() {
  _impl_._oneof_case_[0] = kAtraceMsg;
}
inline void FtraceConfig_PrintFilter_Rule::clear_atrace_msg() {
  if (match_case() == kAtraceMsg) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.match_.atrace_msg_;
    }
    clear_has_match();
  }
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* FtraceConfig_PrintFilter_Rule::release_atrace_msg() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
  if (match_case() == kAtraceMsg) {
    clear_has_match();
    ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* temp = _impl_.match_.atrace_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.match_.atrace_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage& FtraceConfig_PrintFilter_Rule::_internal_atrace_msg() const {
  return match_case() == kAtraceMsg
      ? *_impl_.match_.atrace_msg_
      : reinterpret_cast<::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage&>(::perfetto::protos::_FtraceConfig_PrintFilter_Rule_AtraceMessage_default_instance_);
}
inline const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage& FtraceConfig_PrintFilter_Rule::atrace_msg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
  return _internal_atrace_msg();
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* FtraceConfig_PrintFilter_Rule::unsafe_arena_release_atrace_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
  if (match_case() == kAtraceMsg) {
    clear_has_match();
    ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* temp = _impl_.match_.atrace_msg_;
    _impl_.match_.atrace_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceConfig_PrintFilter_Rule::unsafe_arena_set_allocated_atrace_msg(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* atrace_msg) {
  clear_match();
  if (atrace_msg) {
    set_has_atrace_msg();
    _impl_.match_.atrace_msg_ = atrace_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* FtraceConfig_PrintFilter_Rule::_internal_mutable_atrace_msg() {
  if (match_case() != kAtraceMsg) {
    clear_match();
    set_has_atrace_msg();
    _impl_.match_.atrace_msg_ = CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage >(GetArenaForAllocation());
  }
  return _impl_.match_.atrace_msg_;
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* FtraceConfig_PrintFilter_Rule::mutable_atrace_msg() {
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* _msg = _internal_mutable_atrace_msg();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
  return _msg;
}

// optional bool allow = 2;
inline bool FtraceConfig_PrintFilter_Rule::has_allow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceConfig_PrintFilter_Rule::clear_allow() {
  _impl_.allow_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FtraceConfig_PrintFilter_Rule::allow() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.PrintFilter.Rule.allow)
  return _internal_allow();
}
inline void FtraceConfig_PrintFilter_Rule::set_allow(bool value) {
  _internal_set_allow(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.PrintFilter.Rule.allow)
}
inline bool FtraceConfig_PrintFilter_Rule::_internal_allow() const {
  return _impl_.allow_;
}
inline void FtraceConfig_PrintFilter_Rule::_internal_set_allow(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allow_ = value;
}

inline bool FtraceConfig_PrintFilter_Rule::has_match() const {
  return match_case() != MATCH_NOT_SET;
}
inline void FtraceConfig_PrintFilter_Rule::clear_has_match() {
  _impl_._oneof_case_[0] = MATCH_NOT_SET;
}
inline FtraceConfig_PrintFilter_Rule::MatchCase FtraceConfig_PrintFilter_Rule::match_case() const {
  return FtraceConfig_PrintFilter_Rule::MatchCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FtraceConfig_PrintFilter

// repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
inline int FtraceConfig_PrintFilter::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int FtraceConfig_PrintFilter::rules_size() const {
  return _internal_rules_size();
}
inline void FtraceConfig_PrintFilter::clear_rules() {
  _internal_mutable_rules()->Clear();
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule* FtraceConfig_PrintFilter::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.PrintFilter.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >*
FtraceConfig_PrintFilter::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.PrintFilter.rules)
  return _internal_mutable_rules();
}
inline const ::perfetto::protos::FtraceConfig_PrintFilter_Rule& FtraceConfig_PrintFilter::_internal_rules(int index) const {
  return _internal_rules().Get(index);
}
inline const ::perfetto::protos::FtraceConfig_PrintFilter_Rule& FtraceConfig_PrintFilter::rules(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.PrintFilter.rules)
  return _internal_rules(index);
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule* FtraceConfig_PrintFilter::_internal_add_rules() {
  return _internal_mutable_rules()->Add();
}
inline ::perfetto::protos::FtraceConfig_PrintFilter_Rule* FtraceConfig_PrintFilter::add_rules() {
  ::perfetto::protos::FtraceConfig_PrintFilter_Rule* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.PrintFilter.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >&
FtraceConfig_PrintFilter::rules() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.PrintFilter.rules)
  return _internal_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceConfig_PrintFilter_Rule>&
FtraceConfig_PrintFilter::_internal_rules() const {
  return _impl_.rules_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceConfig_PrintFilter_Rule>*
FtraceConfig_PrintFilter::_internal_mutable_rules() {
  return &_impl_.rules_;
}

// -------------------------------------------------------------------

// FtraceConfig

// repeated string ftrace_events = 1;
inline int FtraceConfig::_internal_ftrace_events_size() const {
  return _impl_.ftrace_events_.size();
}
inline int FtraceConfig::ftrace_events_size() const {
  return _internal_ftrace_events_size();
}
inline void FtraceConfig::clear_ftrace_events() {
  _internal_mutable_ftrace_events()->Clear();
}
inline std::string* FtraceConfig::add_ftrace_events() {
  std::string* _s = _internal_add_ftrace_events();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return _s;
}
inline const std::string& FtraceConfig::ftrace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.ftrace_events)
  return _internal_ftrace_events(index);
}
inline std::string* FtraceConfig::mutable_ftrace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.ftrace_events)
  return _internal_mutable_ftrace_events()->Mutable(index);
}
inline void FtraceConfig::set_ftrace_events(int index, const std::string& value) {
  _internal_mutable_ftrace_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, std::string&& value) {
  _internal_mutable_ftrace_events()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ftrace_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_ftrace_events()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::set_ftrace_events(int index, absl::string_view value) {
  _internal_mutable_ftrace_events()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const std::string& value) {
  _internal_mutable_ftrace_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(std::string&& value) {
  _internal_mutable_ftrace_events()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ftrace_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(const char* value, std::size_t size) {
  _internal_mutable_ftrace_events()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.ftrace_events)
}
inline void FtraceConfig::add_ftrace_events(absl::string_view value) {
  _internal_mutable_ftrace_events()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceConfig.ftrace_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::ftrace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.ftrace_events)
  return _internal_ftrace_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceConfig::mutable_ftrace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.ftrace_events)
  return _internal_mutable_ftrace_events();
}
inline const std::string& FtraceConfig::_internal_ftrace_events(int index) const {
  return _internal_ftrace_events().Get(index);
}
inline std::string* FtraceConfig::_internal_add_ftrace_events() {
  return _internal_mutable_ftrace_events()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::_internal_ftrace_events() const {
  return _impl_.ftrace_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::_internal_mutable_ftrace_events() {
  return &_impl_.ftrace_events_;
}

// repeated string atrace_categories = 2;
inline int FtraceConfig::_internal_atrace_categories_size() const {
  return _impl_.atrace_categories_.size();
}
inline int FtraceConfig::atrace_categories_size() const {
  return _internal_atrace_categories_size();
}
inline void FtraceConfig::clear_atrace_categories() {
  _internal_mutable_atrace_categories()->Clear();
}
inline std::string* FtraceConfig::add_atrace_categories() {
  std::string* _s = _internal_add_atrace_categories();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return _s;
}
inline const std::string& FtraceConfig::atrace_categories(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_categories)
  return _internal_atrace_categories(index);
}
inline std::string* FtraceConfig::mutable_atrace_categories(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_categories)
  return _internal_mutable_atrace_categories()->Mutable(index);
}
inline void FtraceConfig::set_atrace_categories(int index, const std::string& value) {
  _internal_mutable_atrace_categories()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, std::string&& value) {
  _internal_mutable_atrace_categories()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_atrace_categories()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_atrace_categories()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::set_atrace_categories(int index, absl::string_view value) {
  _internal_mutable_atrace_categories()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const std::string& value) {
  _internal_mutable_atrace_categories()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(std::string&& value) {
  _internal_mutable_atrace_categories()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_atrace_categories()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(const char* value, std::size_t size) {
  _internal_mutable_atrace_categories()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_categories)
}
inline void FtraceConfig::add_atrace_categories(absl::string_view value) {
  _internal_mutable_atrace_categories()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceConfig.atrace_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::atrace_categories() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_categories)
  return _internal_atrace_categories();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceConfig::mutable_atrace_categories() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_categories)
  return _internal_mutable_atrace_categories();
}
inline const std::string& FtraceConfig::_internal_atrace_categories(int index) const {
  return _internal_atrace_categories().Get(index);
}
inline std::string* FtraceConfig::_internal_add_atrace_categories() {
  return _internal_mutable_atrace_categories()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::_internal_atrace_categories() const {
  return _impl_.atrace_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::_internal_mutable_atrace_categories() {
  return &_impl_.atrace_categories_;
}

// repeated string atrace_apps = 3;
inline int FtraceConfig::_internal_atrace_apps_size() const {
  return _impl_.atrace_apps_.size();
}
inline int FtraceConfig::atrace_apps_size() const {
  return _internal_atrace_apps_size();
}
inline void FtraceConfig::clear_atrace_apps() {
  _internal_mutable_atrace_apps()->Clear();
}
inline std::string* FtraceConfig::add_atrace_apps() {
  std::string* _s = _internal_add_atrace_apps();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return _s;
}
inline const std::string& FtraceConfig::atrace_apps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.atrace_apps)
  return _internal_atrace_apps(index);
}
inline std::string* FtraceConfig::mutable_atrace_apps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.atrace_apps)
  return _internal_mutable_atrace_apps()->Mutable(index);
}
inline void FtraceConfig::set_atrace_apps(int index, const std::string& value) {
  _internal_mutable_atrace_apps()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, std::string&& value) {
  _internal_mutable_atrace_apps()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_atrace_apps()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_atrace_apps()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::set_atrace_apps(int index, absl::string_view value) {
  _internal_mutable_atrace_apps()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const std::string& value) {
  _internal_mutable_atrace_apps()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(std::string&& value) {
  _internal_mutable_atrace_apps()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_atrace_apps()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(const char* value, std::size_t size) {
  _internal_mutable_atrace_apps()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.atrace_apps)
}
inline void FtraceConfig::add_atrace_apps(absl::string_view value) {
  _internal_mutable_atrace_apps()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceConfig.atrace_apps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::atrace_apps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.atrace_apps)
  return _internal_atrace_apps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceConfig::mutable_atrace_apps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.atrace_apps)
  return _internal_mutable_atrace_apps();
}
inline const std::string& FtraceConfig::_internal_atrace_apps(int index) const {
  return _internal_atrace_apps().Get(index);
}
inline std::string* FtraceConfig::_internal_add_atrace_apps() {
  return _internal_mutable_atrace_apps()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::_internal_atrace_apps() const {
  return _impl_.atrace_apps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::_internal_mutable_atrace_apps() {
  return &_impl_.atrace_apps_;
}

// optional uint32 buffer_size_kb = 10;
inline bool FtraceConfig::has_buffer_size_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FtraceConfig::clear_buffer_size_kb() {
  _impl_.buffer_size_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FtraceConfig::buffer_size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.buffer_size_kb)
  return _internal_buffer_size_kb();
}
inline void FtraceConfig::set_buffer_size_kb(::uint32_t value) {
  _internal_set_buffer_size_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.buffer_size_kb)
}
inline ::uint32_t FtraceConfig::_internal_buffer_size_kb() const {
  return _impl_.buffer_size_kb_;
}
inline void FtraceConfig::_internal_set_buffer_size_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.buffer_size_kb_ = value;
}

// optional uint32 drain_period_ms = 11;
inline bool FtraceConfig::has_drain_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FtraceConfig::clear_drain_period_ms() {
  _impl_.drain_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t FtraceConfig::drain_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.drain_period_ms)
  return _internal_drain_period_ms();
}
inline void FtraceConfig::set_drain_period_ms(::uint32_t value) {
  _internal_set_drain_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.drain_period_ms)
}
inline ::uint32_t FtraceConfig::_internal_drain_period_ms() const {
  return _impl_.drain_period_ms_;
}
inline void FtraceConfig::_internal_set_drain_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.drain_period_ms_ = value;
}

// optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
inline bool FtraceConfig::has_compact_sched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compact_sched_ != nullptr);
  return value;
}
inline void FtraceConfig::clear_compact_sched() {
  if (_impl_.compact_sched_ != nullptr) _impl_.compact_sched_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::FtraceConfig_CompactSchedConfig& FtraceConfig::_internal_compact_sched() const {
  const ::perfetto::protos::FtraceConfig_CompactSchedConfig* p = _impl_.compact_sched_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FtraceConfig_CompactSchedConfig&>(
      ::perfetto::protos::_FtraceConfig_CompactSchedConfig_default_instance_);
}
inline const ::perfetto::protos::FtraceConfig_CompactSchedConfig& FtraceConfig::compact_sched() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.compact_sched)
  return _internal_compact_sched();
}
inline void FtraceConfig::unsafe_arena_set_allocated_compact_sched(
    ::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compact_sched_);
  }
  _impl_.compact_sched_ = compact_sched;
  if (compact_sched) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceConfig.compact_sched)
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::release_compact_sched() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* temp = _impl_.compact_sched_;
  _impl_.compact_sched_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::unsafe_arena_release_compact_sched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.compact_sched)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* temp = _impl_.compact_sched_;
  _impl_.compact_sched_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::_internal_mutable_compact_sched() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.compact_sched_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceConfig_CompactSchedConfig>(GetArenaForAllocation());
    _impl_.compact_sched_ = p;
  }
  return _impl_.compact_sched_;
}
inline ::perfetto::protos::FtraceConfig_CompactSchedConfig* FtraceConfig::mutable_compact_sched() {
  ::perfetto::protos::FtraceConfig_CompactSchedConfig* _msg = _internal_mutable_compact_sched();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.compact_sched)
  return _msg;
}
inline void FtraceConfig::set_allocated_compact_sched(::perfetto::protos::FtraceConfig_CompactSchedConfig* compact_sched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compact_sched_;
  }
  if (compact_sched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compact_sched);
    if (message_arena != submessage_arena) {
      compact_sched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_sched, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.compact_sched_ = compact_sched;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.compact_sched)
}

// optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
inline bool FtraceConfig::has_print_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.print_filter_ != nullptr);
  return value;
}
inline void FtraceConfig::clear_print_filter() {
  if (_impl_.print_filter_ != nullptr) _impl_.print_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::FtraceConfig_PrintFilter& FtraceConfig::_internal_print_filter() const {
  const ::perfetto::protos::FtraceConfig_PrintFilter* p = _impl_.print_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FtraceConfig_PrintFilter&>(
      ::perfetto::protos::_FtraceConfig_PrintFilter_default_instance_);
}
inline const ::perfetto::protos::FtraceConfig_PrintFilter& FtraceConfig::print_filter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.print_filter)
  return _internal_print_filter();
}
inline void FtraceConfig::unsafe_arena_set_allocated_print_filter(
    ::perfetto::protos::FtraceConfig_PrintFilter* print_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.print_filter_);
  }
  _impl_.print_filter_ = print_filter;
  if (print_filter) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceConfig.print_filter)
}
inline ::perfetto::protos::FtraceConfig_PrintFilter* FtraceConfig::release_print_filter() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::FtraceConfig_PrintFilter* temp = _impl_.print_filter_;
  _impl_.print_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FtraceConfig_PrintFilter* FtraceConfig::unsafe_arena_release_print_filter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.print_filter)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::FtraceConfig_PrintFilter* temp = _impl_.print_filter_;
  _impl_.print_filter_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceConfig_PrintFilter* FtraceConfig::_internal_mutable_print_filter() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.print_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceConfig_PrintFilter>(GetArenaForAllocation());
    _impl_.print_filter_ = p;
  }
  return _impl_.print_filter_;
}
inline ::perfetto::protos::FtraceConfig_PrintFilter* FtraceConfig::mutable_print_filter() {
  ::perfetto::protos::FtraceConfig_PrintFilter* _msg = _internal_mutable_print_filter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.print_filter)
  return _msg;
}
inline void FtraceConfig::set_allocated_print_filter(::perfetto::protos::FtraceConfig_PrintFilter* print_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.print_filter_;
  }
  if (print_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(print_filter);
    if (message_arena != submessage_arena) {
      print_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.print_filter_ = print_filter;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.print_filter)
}

// optional bool symbolize_ksyms = 13;
inline bool FtraceConfig::has_symbolize_ksyms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FtraceConfig::clear_symbolize_ksyms() {
  _impl_.symbolize_ksyms_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FtraceConfig::symbolize_ksyms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.symbolize_ksyms)
  return _internal_symbolize_ksyms();
}
inline void FtraceConfig::set_symbolize_ksyms(bool value) {
  _internal_set_symbolize_ksyms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.symbolize_ksyms)
}
inline bool FtraceConfig::_internal_symbolize_ksyms() const {
  return _impl_.symbolize_ksyms_;
}
inline void FtraceConfig::_internal_set_symbolize_ksyms(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.symbolize_ksyms_ = value;
}

// optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
inline bool FtraceConfig::has_ksyms_mem_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void FtraceConfig::clear_ksyms_mem_policy() {
  _impl_.ksyms_mem_policy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::perfetto::protos::FtraceConfig_KsymsMemPolicy FtraceConfig::ksyms_mem_policy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.ksyms_mem_policy)
  return _internal_ksyms_mem_policy();
}
inline void FtraceConfig::set_ksyms_mem_policy(::perfetto::protos::FtraceConfig_KsymsMemPolicy value) {
   _internal_set_ksyms_mem_policy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.ksyms_mem_policy)
}
inline ::perfetto::protos::FtraceConfig_KsymsMemPolicy FtraceConfig::_internal_ksyms_mem_policy() const {
  return static_cast<::perfetto::protos::FtraceConfig_KsymsMemPolicy>(_impl_.ksyms_mem_policy_);
}
inline void FtraceConfig::_internal_set_ksyms_mem_policy(::perfetto::protos::FtraceConfig_KsymsMemPolicy value) {
  assert(::perfetto::protos::FtraceConfig_KsymsMemPolicy_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.ksyms_mem_policy_ = value;
}

// optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
inline bool FtraceConfig::has_initialize_ksyms_synchronously_for_testing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FtraceConfig::clear_initialize_ksyms_synchronously_for_testing() {
  _impl_.initialize_ksyms_synchronously_for_testing_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool FtraceConfig::initialize_ksyms_synchronously_for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.initialize_ksyms_synchronously_for_testing)
  return _internal_initialize_ksyms_synchronously_for_testing();
}
inline void FtraceConfig::set_initialize_ksyms_synchronously_for_testing(bool value) {
  _internal_set_initialize_ksyms_synchronously_for_testing(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.initialize_ksyms_synchronously_for_testing)
}
inline bool FtraceConfig::_internal_initialize_ksyms_synchronously_for_testing() const {
  return _impl_.initialize_ksyms_synchronously_for_testing_;
}
inline void FtraceConfig::_internal_set_initialize_ksyms_synchronously_for_testing(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.initialize_ksyms_synchronously_for_testing_ = value;
}

// optional bool throttle_rss_stat = 15;
inline bool FtraceConfig::has_throttle_rss_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FtraceConfig::clear_throttle_rss_stat() {
  _impl_.throttle_rss_stat_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool FtraceConfig::throttle_rss_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.throttle_rss_stat)
  return _internal_throttle_rss_stat();
}
inline void FtraceConfig::set_throttle_rss_stat(bool value) {
  _internal_set_throttle_rss_stat(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.throttle_rss_stat)
}
inline bool FtraceConfig::_internal_throttle_rss_stat() const {
  return _impl_.throttle_rss_stat_;
}
inline void FtraceConfig::_internal_set_throttle_rss_stat(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.throttle_rss_stat_ = value;
}

// optional bool disable_generic_events = 16;
inline bool FtraceConfig::has_disable_generic_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void FtraceConfig::clear_disable_generic_events() {
  _impl_.disable_generic_events_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool FtraceConfig::disable_generic_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.disable_generic_events)
  return _internal_disable_generic_events();
}
inline void FtraceConfig::set_disable_generic_events(bool value) {
  _internal_set_disable_generic_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.disable_generic_events)
}
inline bool FtraceConfig::_internal_disable_generic_events() const {
  return _impl_.disable_generic_events_;
}
inline void FtraceConfig::_internal_set_disable_generic_events(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.disable_generic_events_ = value;
}

// repeated string syscall_events = 18;
inline int FtraceConfig::_internal_syscall_events_size() const {
  return _impl_.syscall_events_.size();
}
inline int FtraceConfig::syscall_events_size() const {
  return _internal_syscall_events_size();
}
inline void FtraceConfig::clear_syscall_events() {
  _internal_mutable_syscall_events()->Clear();
}
inline std::string* FtraceConfig::add_syscall_events() {
  std::string* _s = _internal_add_syscall_events();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.syscall_events)
  return _s;
}
inline const std::string& FtraceConfig::syscall_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.syscall_events)
  return _internal_syscall_events(index);
}
inline std::string* FtraceConfig::mutable_syscall_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.syscall_events)
  return _internal_mutable_syscall_events()->Mutable(index);
}
inline void FtraceConfig::set_syscall_events(int index, const std::string& value) {
  _internal_mutable_syscall_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::set_syscall_events(int index, std::string&& value) {
  _internal_mutable_syscall_events()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::set_syscall_events(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_syscall_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::set_syscall_events(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_syscall_events()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::set_syscall_events(int index, absl::string_view value) {
  _internal_mutable_syscall_events()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::add_syscall_events(const std::string& value) {
  _internal_mutable_syscall_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::add_syscall_events(std::string&& value) {
  _internal_mutable_syscall_events()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::add_syscall_events(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_syscall_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::add_syscall_events(const char* value, std::size_t size) {
  _internal_mutable_syscall_events()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.syscall_events)
}
inline void FtraceConfig::add_syscall_events(absl::string_view value) {
  _internal_mutable_syscall_events()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceConfig.syscall_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::syscall_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.syscall_events)
  return _internal_syscall_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceConfig::mutable_syscall_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.syscall_events)
  return _internal_mutable_syscall_events();
}
inline const std::string& FtraceConfig::_internal_syscall_events(int index) const {
  return _internal_syscall_events().Get(index);
}
inline std::string* FtraceConfig::_internal_add_syscall_events() {
  return _internal_mutable_syscall_events()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::_internal_syscall_events() const {
  return _impl_.syscall_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::_internal_mutable_syscall_events() {
  return &_impl_.syscall_events_;
}

// optional bool enable_function_graph = 19;
inline bool FtraceConfig::has_enable_function_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void FtraceConfig::clear_enable_function_graph() {
  _impl_.enable_function_graph_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool FtraceConfig::enable_function_graph() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.enable_function_graph)
  return _internal_enable_function_graph();
}
inline void FtraceConfig::set_enable_function_graph(bool value) {
  _internal_set_enable_function_graph(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.enable_function_graph)
}
inline bool FtraceConfig::_internal_enable_function_graph() const {
  return _impl_.enable_function_graph_;
}
inline void FtraceConfig::_internal_set_enable_function_graph(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.enable_function_graph_ = value;
}

// repeated string function_filters = 20;
inline int FtraceConfig::_internal_function_filters_size() const {
  return _impl_.function_filters_.size();
}
inline int FtraceConfig::function_filters_size() const {
  return _internal_function_filters_size();
}
inline void FtraceConfig::clear_function_filters() {
  _internal_mutable_function_filters()->Clear();
}
inline std::string* FtraceConfig::add_function_filters() {
  std::string* _s = _internal_add_function_filters();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.function_filters)
  return _s;
}
inline const std::string& FtraceConfig::function_filters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.function_filters)
  return _internal_function_filters(index);
}
inline std::string* FtraceConfig::mutable_function_filters(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.function_filters)
  return _internal_mutable_function_filters()->Mutable(index);
}
inline void FtraceConfig::set_function_filters(int index, const std::string& value) {
  _internal_mutable_function_filters()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::set_function_filters(int index, std::string&& value) {
  _internal_mutable_function_filters()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::set_function_filters(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_function_filters()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::set_function_filters(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_function_filters()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::set_function_filters(int index, absl::string_view value) {
  _internal_mutable_function_filters()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::add_function_filters(const std::string& value) {
  _internal_mutable_function_filters()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::add_function_filters(std::string&& value) {
  _internal_mutable_function_filters()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::add_function_filters(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_function_filters()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::add_function_filters(const char* value, std::size_t size) {
  _internal_mutable_function_filters()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.function_filters)
}
inline void FtraceConfig::add_function_filters(absl::string_view value) {
  _internal_mutable_function_filters()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceConfig.function_filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::function_filters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.function_filters)
  return _internal_function_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceConfig::mutable_function_filters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.function_filters)
  return _internal_mutable_function_filters();
}
inline const std::string& FtraceConfig::_internal_function_filters(int index) const {
  return _internal_function_filters().Get(index);
}
inline std::string* FtraceConfig::_internal_add_function_filters() {
  return _internal_mutable_function_filters()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::_internal_function_filters() const {
  return _impl_.function_filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::_internal_mutable_function_filters() {
  return &_impl_.function_filters_;
}

// repeated string function_graph_roots = 21;
inline int FtraceConfig::_internal_function_graph_roots_size() const {
  return _impl_.function_graph_roots_.size();
}
inline int FtraceConfig::function_graph_roots_size() const {
  return _internal_function_graph_roots_size();
}
inline void FtraceConfig::clear_function_graph_roots() {
  _internal_mutable_function_graph_roots()->Clear();
}
inline std::string* FtraceConfig::add_function_graph_roots() {
  std::string* _s = _internal_add_function_graph_roots();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceConfig.function_graph_roots)
  return _s;
}
inline const std::string& FtraceConfig::function_graph_roots(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.function_graph_roots)
  return _internal_function_graph_roots(index);
}
inline std::string* FtraceConfig::mutable_function_graph_roots(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.function_graph_roots)
  return _internal_mutable_function_graph_roots()->Mutable(index);
}
inline void FtraceConfig::set_function_graph_roots(int index, const std::string& value) {
  _internal_mutable_function_graph_roots()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::set_function_graph_roots(int index, std::string&& value) {
  _internal_mutable_function_graph_roots()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::set_function_graph_roots(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_function_graph_roots()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::set_function_graph_roots(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_function_graph_roots()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::set_function_graph_roots(int index, absl::string_view value) {
  _internal_mutable_function_graph_roots()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::add_function_graph_roots(const std::string& value) {
  _internal_mutable_function_graph_roots()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::add_function_graph_roots(std::string&& value) {
  _internal_mutable_function_graph_roots()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::add_function_graph_roots(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_function_graph_roots()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::add_function_graph_roots(const char* value, std::size_t size) {
  _internal_mutable_function_graph_roots()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline void FtraceConfig::add_function_graph_roots(absl::string_view value) {
  _internal_mutable_function_graph_roots()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceConfig.function_graph_roots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::function_graph_roots() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceConfig.function_graph_roots)
  return _internal_function_graph_roots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceConfig::mutable_function_graph_roots() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceConfig.function_graph_roots)
  return _internal_mutable_function_graph_roots();
}
inline const std::string& FtraceConfig::_internal_function_graph_roots(int index) const {
  return _internal_function_graph_roots().Get(index);
}
inline std::string* FtraceConfig::_internal_add_function_graph_roots() {
  return _internal_mutable_function_graph_roots()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceConfig::_internal_function_graph_roots() const {
  return _impl_.function_graph_roots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceConfig::_internal_mutable_function_graph_roots() {
  return &_impl_.function_graph_roots_;
}

// optional bool preserve_ftrace_buffer = 23;
inline bool FtraceConfig::has_preserve_ftrace_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void FtraceConfig::clear_preserve_ftrace_buffer() {
  _impl_.preserve_ftrace_buffer_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool FtraceConfig::preserve_ftrace_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.preserve_ftrace_buffer)
  return _internal_preserve_ftrace_buffer();
}
inline void FtraceConfig::set_preserve_ftrace_buffer(bool value) {
  _internal_set_preserve_ftrace_buffer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.preserve_ftrace_buffer)
}
inline bool FtraceConfig::_internal_preserve_ftrace_buffer() const {
  return _impl_.preserve_ftrace_buffer_;
}
inline void FtraceConfig::_internal_set_preserve_ftrace_buffer(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.preserve_ftrace_buffer_ = value;
}

// optional bool use_monotonic_raw_clock = 24;
inline bool FtraceConfig::has_use_monotonic_raw_clock() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void FtraceConfig::clear_use_monotonic_raw_clock() {
  _impl_.use_monotonic_raw_clock_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool FtraceConfig::use_monotonic_raw_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.use_monotonic_raw_clock)
  return _internal_use_monotonic_raw_clock();
}
inline void FtraceConfig::set_use_monotonic_raw_clock(bool value) {
  _internal_set_use_monotonic_raw_clock(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.use_monotonic_raw_clock)
}
inline bool FtraceConfig::_internal_use_monotonic_raw_clock() const {
  return _impl_.use_monotonic_raw_clock_;
}
inline void FtraceConfig::_internal_set_use_monotonic_raw_clock(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.use_monotonic_raw_clock_ = value;
}

// optional string instance_name = 25;
inline bool FtraceConfig::has_instance_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceConfig::clear_instance_name() {
  _impl_.instance_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FtraceConfig::instance_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceConfig.instance_name)
  return _internal_instance_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FtraceConfig::set_instance_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceConfig.instance_name)
}
inline std::string* FtraceConfig::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceConfig.instance_name)
  return _s;
}
inline const std::string& FtraceConfig::_internal_instance_name() const {
  return _impl_.instance_name_.Get();
}
inline void FtraceConfig::_internal_set_instance_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FtraceConfig::_internal_mutable_instance_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instance_name_.Mutable( GetArenaForAllocation());
}
inline std::string* FtraceConfig::release_instance_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceConfig.instance_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.instance_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FtraceConfig::set_allocated_instance_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instance_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instance_name_.IsDefault()) {
          _impl_.instance_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.instance_name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::FtraceConfig_KsymsMemPolicy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FtraceConfig_KsymsMemPolicy>() {
  return ::perfetto::protos::FtraceConfig_KsymsMemPolicy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_2epb_2eh
