// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/ftrace/ftrace_config.proto

#include "protos/perfetto/config/ftrace/ftrace_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_)*/ false
} {}
struct FtraceConfig_CompactSchedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_CompactSchedConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_CompactSchedConfigDefaultTypeInternal() {}
  union {
    FtraceConfig_CompactSchedConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_CompactSchedConfigDefaultTypeInternal _FtraceConfig_CompactSchedConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule_AtraceMessage::FtraceConfig_PrintFilter_Rule_AtraceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.prefix_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal() {}
  union {
    FtraceConfig_PrintFilter_Rule_AtraceMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_PrintFilter_Rule_AtraceMessageDefaultTypeInternal _FtraceConfig_PrintFilter_Rule_AtraceMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_Rule::FtraceConfig_PrintFilter_Rule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allow_)*/ false

  , /*decltype(_impl_.match_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FtraceConfig_PrintFilter_RuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter_RuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_PrintFilter_RuleDefaultTypeInternal() {}
  union {
    FtraceConfig_PrintFilter_Rule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_PrintFilter_RuleDefaultTypeInternal _FtraceConfig_PrintFilter_Rule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FtraceConfig_PrintFilter::FtraceConfig_PrintFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FtraceConfig_PrintFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfig_PrintFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfig_PrintFilterDefaultTypeInternal() {}
  union {
    FtraceConfig_PrintFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfig_PrintFilterDefaultTypeInternal _FtraceConfig_PrintFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FtraceConfig::FtraceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ftrace_events_)*/{}
  , /*decltype(_impl_.atrace_categories_)*/{}
  , /*decltype(_impl_.atrace_apps_)*/{}
  , /*decltype(_impl_.syscall_events_)*/{}
  , /*decltype(_impl_.function_filters_)*/{}
  , /*decltype(_impl_.function_graph_roots_)*/{}
  , /*decltype(_impl_.instance_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.compact_sched_)*/nullptr
  , /*decltype(_impl_.print_filter_)*/nullptr
  , /*decltype(_impl_.buffer_size_kb_)*/ 0u

  , /*decltype(_impl_.drain_period_ms_)*/ 0u

  , /*decltype(_impl_.symbolize_ksyms_)*/ false

  , /*decltype(_impl_.initialize_ksyms_synchronously_for_testing_)*/ false

  , /*decltype(_impl_.throttle_rss_stat_)*/ false

  , /*decltype(_impl_.disable_generic_events_)*/ false

  , /*decltype(_impl_.ksyms_mem_policy_)*/ 0

  , /*decltype(_impl_.enable_function_graph_)*/ false

  , /*decltype(_impl_.preserve_ftrace_buffer_)*/ false

  , /*decltype(_impl_.use_monotonic_raw_clock_)*/ false
} {}
struct FtraceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceConfigDefaultTypeInternal() {}
  union {
    FtraceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceConfigDefaultTypeInternal _FtraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_CompactSchedConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_CompactSchedConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_CompactSchedConfig, _impl_.enabled_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage, _impl_.prefix_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule, _impl_.allow_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule, _impl_.match_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter, _impl_.rules_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.ftrace_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.atrace_categories_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.atrace_apps_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.buffer_size_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.drain_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.compact_sched_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.print_filter_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.symbolize_ksyms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.ksyms_mem_policy_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.initialize_ksyms_synchronously_for_testing_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.throttle_rss_stat_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.disable_generic_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.syscall_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.enable_function_graph_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.function_filters_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.function_graph_roots_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.preserve_ftrace_buffer_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.use_monotonic_raw_clock_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig, _impl_.instance_name_),
    ~0u,
    ~0u,
    ~0u,
    3,
    4,
    1,
    2,
    5,
    9,
    6,
    7,
    8,
    ~0u,
    10,
    ~0u,
    ~0u,
    11,
    12,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::perfetto::protos::FtraceConfig_CompactSchedConfig)},
        { 10, 20, -1, sizeof(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage)},
        { 22, 34, -1, sizeof(::perfetto::protos::FtraceConfig_PrintFilter_Rule)},
        { 37, -1, -1, sizeof(::perfetto::protos::FtraceConfig_PrintFilter)},
        { 46, 73, -1, sizeof(::perfetto::protos::FtraceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_FtraceConfig_CompactSchedConfig_default_instance_._instance,
    &::perfetto::protos::_FtraceConfig_PrintFilter_Rule_AtraceMessage_default_instance_._instance,
    &::perfetto::protos::_FtraceConfig_PrintFilter_Rule_default_instance_._instance,
    &::perfetto::protos::_FtraceConfig_PrintFilter_default_instance_._instance,
    &::perfetto::protos::_FtraceConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1protos/perfetto/config/ftrace/ftrace_c"
    "onfig.proto\022\017perfetto.protos\"\255\010\n\014FtraceC"
    "onfig\022\025\n\rftrace_events\030\001 \003(\t\022\031\n\021atrace_c"
    "ategories\030\002 \003(\t\022\023\n\013atrace_apps\030\003 \003(\t\022\026\n\016"
    "buffer_size_kb\030\n \001(\r\022\027\n\017drain_period_ms\030"
    "\013 \001(\r\022G\n\rcompact_sched\030\014 \001(\01320.perfetto."
    "protos.FtraceConfig.CompactSchedConfig\022\?"
    "\n\014print_filter\030\026 \001(\0132).perfetto.protos.F"
    "traceConfig.PrintFilter\022\027\n\017symbolize_ksy"
    "ms\030\r \001(\010\022F\n\020ksyms_mem_policy\030\021 \001(\0162,.per"
    "fetto.protos.FtraceConfig.KsymsMemPolicy"
    "\0226\n*initialize_ksyms_synchronously_for_t"
    "esting\030\016 \001(\010B\002\030\001\022\031\n\021throttle_rss_stat\030\017 "
    "\001(\010\022\036\n\026disable_generic_events\030\020 \001(\010\022\026\n\016s"
    "yscall_events\030\022 \003(\t\022\035\n\025enable_function_g"
    "raph\030\023 \001(\010\022\030\n\020function_filters\030\024 \003(\t\022\034\n\024"
    "function_graph_roots\030\025 \003(\t\022\036\n\026preserve_f"
    "trace_buffer\030\027 \001(\010\022\037\n\027use_monotonic_raw_"
    "clock\030\030 \001(\010\022\025\n\rinstance_name\030\031 \001(\t\032%\n\022Co"
    "mpactSchedConfig\022\017\n\007enabled\030\001 \001(\010\032\202\002\n\013Pr"
    "intFilter\022=\n\005rules\030\001 \003(\0132..perfetto.prot"
    "os.FtraceConfig.PrintFilter.Rule\032\263\001\n\004Rul"
    "e\022\020\n\006prefix\030\001 \001(\tH\000\022R\n\natrace_msg\030\003 \001(\0132"
    "<.perfetto.protos.FtraceConfig.PrintFilt"
    "er.Rule.AtraceMessageH\000\022\r\n\005allow\030\002 \001(\010\032-"
    "\n\rAtraceMessage\022\014\n\004type\030\001 \001(\t\022\016\n\006prefix\030"
    "\002 \001(\tB\007\n\005match\"T\n\016KsymsMemPolicy\022\025\n\021KSYM"
    "S_UNSPECIFIED\020\000\022\031\n\025KSYMS_CLEANUP_ON_STOP"
    "\020\001\022\020\n\014KSYMS_RETAIN\020\002"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto = {
    false,
    false,
    1140,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto,
    "protos/perfetto/config/ftrace/ftrace_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FtraceConfig_KsymsMemPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[0];
}
bool FtraceConfig_KsymsMemPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KSYMS_UNSPECIFIED;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KSYMS_CLEANUP_ON_STOP;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KSYMS_RETAIN;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KsymsMemPolicy_MIN;
constexpr FtraceConfig_KsymsMemPolicy FtraceConfig::KsymsMemPolicy_MAX;
constexpr int FtraceConfig::KsymsMemPolicy_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class FtraceConfig_CompactSchedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_CompactSchedConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceConfig_CompactSchedConfig, _impl_._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}
FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}

inline void FtraceConfig_CompactSchedConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_) { false }

  };
}

FtraceConfig_CompactSchedConfig::~FtraceConfig_CompactSchedConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_CompactSchedConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtraceConfig_CompactSchedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceConfig_CompactSchedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceConfig_CompactSchedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceConfig_CompactSchedConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.CompactSchedConfig)
  return target;
}

::size_t FtraceConfig_CompactSchedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceConfig_CompactSchedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceConfig_CompactSchedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceConfig_CompactSchedConfig::GetClassData() const { return &_class_data_; }


void FtraceConfig_CompactSchedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceConfig_CompactSchedConfig*>(&to_msg);
  auto& from = static_cast<const FtraceConfig_CompactSchedConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceConfig_CompactSchedConfig::CopyFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_CompactSchedConfig::IsInitialized() const {
  return true;
}

void FtraceConfig_CompactSchedConfig::InternalSwap(FtraceConfig_CompactSchedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.enabled_, other->_impl_.enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceConfig_CompactSchedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[0]);
}
// ===================================================================

class FtraceConfig_PrintFilter_Rule_AtraceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_PrintFilter_Rule_AtraceMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceConfig_PrintFilter_Rule_AtraceMessage, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FtraceConfig_PrintFilter_Rule_AtraceMessage::FtraceConfig_PrintFilter_Rule_AtraceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
}
FtraceConfig_PrintFilter_Rule_AtraceMessage::FtraceConfig_PrintFilter_Rule_AtraceMessage(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceConfig_PrintFilter_Rule_AtraceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.prefix_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
}

inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.prefix_) {}

  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FtraceConfig_PrintFilter_Rule_AtraceMessage::~FtraceConfig_PrintFilter_Rule_AtraceMessage() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_PrintFilter_Rule_AtraceMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.prefix_.Destroy();
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.prefix_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceConfig_PrintFilter_Rule_AtraceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceConfig_PrintFilter_Rule_AtraceMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_prefix();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.prefix");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  return target;
}

::size_t FtraceConfig_PrintFilter_Rule_AtraceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_type());
    }

    // optional string prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_prefix());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceConfig_PrintFilter_Rule_AtraceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceConfig_PrintFilter_Rule_AtraceMessage::GetClassData() const { return &_class_data_; }


void FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceConfig_PrintFilter_Rule_AtraceMessage*>(&to_msg);
  auto& from = static_cast<const FtraceConfig_PrintFilter_Rule_AtraceMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_prefix(from._internal_prefix());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::CopyFrom(const FtraceConfig_PrintFilter_Rule_AtraceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_PrintFilter_Rule_AtraceMessage::IsInitialized() const {
  return true;
}

void FtraceConfig_PrintFilter_Rule_AtraceMessage::InternalSwap(FtraceConfig_PrintFilter_Rule_AtraceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prefix_, lhs_arena,
                                       &other->_impl_.prefix_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceConfig_PrintFilter_Rule_AtraceMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[1]);
}
// ===================================================================

class FtraceConfig_PrintFilter_Rule::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_PrintFilter_Rule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceConfig_PrintFilter_Rule, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceConfig_PrintFilter_Rule, _impl_._oneof_case_);
  static const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage& atrace_msg(const FtraceConfig_PrintFilter_Rule* msg);
  static void set_has_allow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage&
FtraceConfig_PrintFilter_Rule::_Internal::atrace_msg(const FtraceConfig_PrintFilter_Rule* msg) {
  return *msg->_impl_.match_.atrace_msg_;
}
void FtraceConfig_PrintFilter_Rule::set_allocated_atrace_msg(::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage* atrace_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (atrace_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(atrace_msg);
    if (message_arena != submessage_arena) {
      atrace_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atrace_msg, submessage_arena);
    }
    set_has_atrace_msg();
    _impl_.match_.atrace_msg_ = atrace_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceConfig.PrintFilter.Rule.atrace_msg)
}
FtraceConfig_PrintFilter_Rule::FtraceConfig_PrintFilter_Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule)
}
FtraceConfig_PrintFilter_Rule::FtraceConfig_PrintFilter_Rule(const FtraceConfig_PrintFilter_Rule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceConfig_PrintFilter_Rule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allow_) {}

    , decltype(_impl_.match_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.allow_ = from._impl_.allow_;
  clear_has_match();
  switch (from.match_case()) {
    case kPrefix: {
      _this->_internal_set_prefix(from._internal_prefix());
      break;
    }
    case kAtraceMsg: {
      _this->_internal_mutable_atrace_msg()->::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeFrom(
          from._internal_atrace_msg());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.PrintFilter.Rule)
}

inline void FtraceConfig_PrintFilter_Rule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allow_) { false }

    , decltype(_impl_.match_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_match();
}

FtraceConfig_PrintFilter_Rule::~FtraceConfig_PrintFilter_Rule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_PrintFilter_Rule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_match()) {
    clear_match();
  }
}

void FtraceConfig_PrintFilter_Rule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceConfig_PrintFilter_Rule::clear_match() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  switch (match_case()) {
    case kPrefix: {
      _impl_.match_.prefix_.Destroy();
      break;
    }
    case kAtraceMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.match_.atrace_msg_;
      }
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MATCH_NOT_SET;
}


void FtraceConfig_PrintFilter_Rule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allow_ = false;
  clear_match();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceConfig_PrintFilter_Rule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool allow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_allow(&has_bits);
          _impl_.allow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_atrace_msg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceConfig_PrintFilter_Rule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (match_case() == kPrefix) {
    const std::string& _s = this->_internal_prefix();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.PrintFilter.Rule.prefix");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allow = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_allow(), target);
  }

  // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
  if (match_case() == kAtraceMsg) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::atrace_msg(this),
        _Internal::atrace_msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  return target;
}

::size_t FtraceConfig_PrintFilter_Rule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool allow = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  switch (match_case()) {
    // string prefix = 1;
    case kPrefix: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_prefix());
      break;
    }
    // .perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage atrace_msg = 3;
    case kAtraceMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_.atrace_msg_);
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceConfig_PrintFilter_Rule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceConfig_PrintFilter_Rule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceConfig_PrintFilter_Rule::GetClassData() const { return &_class_data_; }


void FtraceConfig_PrintFilter_Rule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceConfig_PrintFilter_Rule*>(&to_msg);
  auto& from = static_cast<const FtraceConfig_PrintFilter_Rule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_allow(from._internal_allow());
  }
  switch (from.match_case()) {
    case kPrefix: {
      _this->_internal_set_prefix(from._internal_prefix());
      break;
    }
    case kAtraceMsg: {
      _this->_internal_mutable_atrace_msg()->::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage::MergeFrom(
          from._internal_atrace_msg());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceConfig_PrintFilter_Rule::CopyFrom(const FtraceConfig_PrintFilter_Rule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.PrintFilter.Rule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_PrintFilter_Rule::IsInitialized() const {
  return true;
}

void FtraceConfig_PrintFilter_Rule::InternalSwap(FtraceConfig_PrintFilter_Rule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.allow_, other->_impl_.allow_);
  swap(_impl_.match_, other->_impl_.match_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceConfig_PrintFilter_Rule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[2]);
}
// ===================================================================

class FtraceConfig_PrintFilter::_Internal {
 public:
};

FtraceConfig_PrintFilter::FtraceConfig_PrintFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.PrintFilter)
}
FtraceConfig_PrintFilter::FtraceConfig_PrintFilter(const FtraceConfig_PrintFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceConfig_PrintFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.PrintFilter)
}

inline void FtraceConfig_PrintFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FtraceConfig_PrintFilter::~FtraceConfig_PrintFilter() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.PrintFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig_PrintFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rules()->~RepeatedPtrField();
}

void FtraceConfig_PrintFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceConfig_PrintFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.PrintFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rules()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceConfig_PrintFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceConfig_PrintFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.PrintFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.PrintFilter)
  return target;
}

::size_t FtraceConfig_PrintFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.PrintFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceConfig.PrintFilter.Rule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_internal_rules()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceConfig_PrintFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceConfig_PrintFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceConfig_PrintFilter::GetClassData() const { return &_class_data_; }


void FtraceConfig_PrintFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceConfig_PrintFilter*>(&to_msg);
  auto& from = static_cast<const FtraceConfig_PrintFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.PrintFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rules()->MergeFrom(from._internal_rules());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceConfig_PrintFilter::CopyFrom(const FtraceConfig_PrintFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.PrintFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_PrintFilter::IsInitialized() const {
  return true;
}

void FtraceConfig_PrintFilter::InternalSwap(FtraceConfig_PrintFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rules()->InternalSwap(other->_internal_mutable_rules());
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceConfig_PrintFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[3]);
}
// ===================================================================

class FtraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceConfig, _impl_._has_bits_);
  static void set_has_buffer_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_drain_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched(const FtraceConfig* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::FtraceConfig_PrintFilter& print_filter(const FtraceConfig* msg);
  static void set_has_print_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_symbolize_ksyms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ksyms_mem_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_initialize_ksyms_synchronously_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_throttle_rss_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_disable_generic_events(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enable_function_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_preserve_ftrace_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_monotonic_raw_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_instance_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::FtraceConfig_CompactSchedConfig&
FtraceConfig::_Internal::compact_sched(const FtraceConfig* msg) {
  return *msg->_impl_.compact_sched_;
}
const ::perfetto::protos::FtraceConfig_PrintFilter&
FtraceConfig::_Internal::print_filter(const FtraceConfig* msg) {
  return *msg->_impl_.print_filter_;
}
FtraceConfig::FtraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig)
}
FtraceConfig::FtraceConfig(const FtraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ftrace_events_){from._impl_.ftrace_events_}
    , decltype(_impl_.atrace_categories_){from._impl_.atrace_categories_}
    , decltype(_impl_.atrace_apps_){from._impl_.atrace_apps_}
    , decltype(_impl_.syscall_events_){from._impl_.syscall_events_}
    , decltype(_impl_.function_filters_){from._impl_.function_filters_}
    , decltype(_impl_.function_graph_roots_){from._impl_.function_graph_roots_}
    , decltype(_impl_.instance_name_) {}

    , decltype(_impl_.compact_sched_){nullptr}
    , decltype(_impl_.print_filter_){nullptr}
    , decltype(_impl_.buffer_size_kb_) {}

    , decltype(_impl_.drain_period_ms_) {}

    , decltype(_impl_.symbolize_ksyms_) {}

    , decltype(_impl_.initialize_ksyms_synchronously_for_testing_) {}

    , decltype(_impl_.throttle_rss_stat_) {}

    , decltype(_impl_.disable_generic_events_) {}

    , decltype(_impl_.ksyms_mem_policy_) {}

    , decltype(_impl_.enable_function_graph_) {}

    , decltype(_impl_.preserve_ftrace_buffer_) {}

    , decltype(_impl_.use_monotonic_raw_clock_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.instance_name_.Set(from._internal_instance_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.compact_sched_ = new ::perfetto::protos::FtraceConfig_CompactSchedConfig(*from._impl_.compact_sched_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.print_filter_ = new ::perfetto::protos::FtraceConfig_PrintFilter(*from._impl_.print_filter_);
  }
  ::memcpy(&_impl_.buffer_size_kb_, &from._impl_.buffer_size_kb_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.use_monotonic_raw_clock_) -
    reinterpret_cast<char*>(&_impl_.buffer_size_kb_)) + sizeof(_impl_.use_monotonic_raw_clock_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig)
}

inline void FtraceConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ftrace_events_){arena}
    , decltype(_impl_.atrace_categories_){arena}
    , decltype(_impl_.atrace_apps_){arena}
    , decltype(_impl_.syscall_events_){arena}
    , decltype(_impl_.function_filters_){arena}
    , decltype(_impl_.function_graph_roots_){arena}
    , decltype(_impl_.instance_name_) {}

    , decltype(_impl_.compact_sched_){nullptr}
    , decltype(_impl_.print_filter_){nullptr}
    , decltype(_impl_.buffer_size_kb_) { 0u }

    , decltype(_impl_.drain_period_ms_) { 0u }

    , decltype(_impl_.symbolize_ksyms_) { false }

    , decltype(_impl_.initialize_ksyms_synchronously_for_testing_) { false }

    , decltype(_impl_.throttle_rss_stat_) { false }

    , decltype(_impl_.disable_generic_events_) { false }

    , decltype(_impl_.ksyms_mem_policy_) { 0 }

    , decltype(_impl_.enable_function_graph_) { false }

    , decltype(_impl_.preserve_ftrace_buffer_) { false }

    , decltype(_impl_.use_monotonic_raw_clock_) { false }

  };
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FtraceConfig::~FtraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ftrace_events()->~RepeatedPtrField();
  _internal_mutable_atrace_categories()->~RepeatedPtrField();
  _internal_mutable_atrace_apps()->~RepeatedPtrField();
  _internal_mutable_syscall_events()->~RepeatedPtrField();
  _internal_mutable_function_filters()->~RepeatedPtrField();
  _internal_mutable_function_graph_roots()->~RepeatedPtrField();
  _impl_.instance_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.compact_sched_;
  if (this != internal_default_instance()) delete _impl_.print_filter_;
}

void FtraceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ftrace_events()->Clear();
  _internal_mutable_atrace_categories()->Clear();
  _internal_mutable_atrace_apps()->Clear();
  _internal_mutable_syscall_events()->Clear();
  _internal_mutable_function_filters()->Clear();
  _internal_mutable_function_graph_roots()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.compact_sched_ != nullptr);
      _impl_.compact_sched_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.print_filter_ != nullptr);
      _impl_.print_filter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.buffer_size_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.throttle_rss_stat_) -
        reinterpret_cast<char*>(&_impl_.buffer_size_kb_)) + sizeof(_impl_.throttle_rss_stat_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.disable_generic_events_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_monotonic_raw_clock_) -
        reinterpret_cast<char*>(&_impl_.disable_generic_events_)) + sizeof(_impl_.use_monotonic_raw_clock_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ftrace_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ftrace_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.ftrace_events");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string atrace_categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atrace_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.atrace_categories");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string atrace_apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atrace_apps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.atrace_apps");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 buffer_size_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_buffer_size_kb(&has_bits);
          _impl_.buffer_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 drain_period_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_drain_period_ms(&has_bits);
          _impl_.drain_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool symbolize_ksyms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_symbolize_ksyms(&has_bits);
          _impl_.symbolize_ksyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_initialize_ksyms_synchronously_for_testing(&has_bits);
          _impl_.initialize_ksyms_synchronously_for_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool throttle_rss_stat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_throttle_rss_stat(&has_bits);
          _impl_.throttle_rss_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_generic_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_disable_generic_events(&has_bits);
          _impl_.disable_generic_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceConfig_KsymsMemPolicy_IsValid(static_cast<int>(val)))) {
            _internal_set_ksyms_mem_policy(static_cast<::perfetto::protos::FtraceConfig_KsymsMemPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string syscall_events = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_syscall_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.syscall_events");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_function_graph = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_enable_function_graph(&has_bits);
          _impl_.enable_function_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string function_filters = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_function_filters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.function_filters");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string function_graph_roots = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_function_graph_roots();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.function_graph_roots");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_print_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool preserve_ftrace_buffer = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_preserve_ftrace_buffer(&has_bits);
          _impl_.preserve_ftrace_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool use_monotonic_raw_clock = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          _Internal::set_has_use_monotonic_raw_clock(&has_bits);
          _impl_.use_monotonic_raw_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string instance_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceConfig.instance_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  for (int i = 0, n = this->_internal_ftrace_events_size(); i < n; ++i) {
    const auto& s = this->_internal_ftrace_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.ftrace_events");
    target = stream->WriteString(1, s, target);
  }

  // repeated string atrace_categories = 2;
  for (int i = 0, n = this->_internal_atrace_categories_size(); i < n; ++i) {
    const auto& s = this->_internal_atrace_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.atrace_categories");
    target = stream->WriteString(2, s, target);
  }

  // repeated string atrace_apps = 3;
  for (int i = 0, n = this->_internal_atrace_apps_size(); i < n; ++i) {
    const auto& s = this->_internal_atrace_apps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.atrace_apps");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 buffer_size_kb = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_buffer_size_kb(), target);
  }

  // optional uint32 drain_period_ms = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_drain_period_ms(), target);
  }

  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::compact_sched(this),
        _Internal::compact_sched(this).GetCachedSize(), target, stream);
  }

  // optional bool symbolize_ksyms = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_symbolize_ksyms(), target);
  }

  // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_initialize_ksyms_synchronously_for_testing(), target);
  }

  // optional bool throttle_rss_stat = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_throttle_rss_stat(), target);
  }

  // optional bool disable_generic_events = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_disable_generic_events(), target);
  }

  // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        17, this->_internal_ksyms_mem_policy(), target);
  }

  // repeated string syscall_events = 18;
  for (int i = 0, n = this->_internal_syscall_events_size(); i < n; ++i) {
    const auto& s = this->_internal_syscall_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.syscall_events");
    target = stream->WriteString(18, s, target);
  }

  // optional bool enable_function_graph = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_enable_function_graph(), target);
  }

  // repeated string function_filters = 20;
  for (int i = 0, n = this->_internal_function_filters_size(); i < n; ++i) {
    const auto& s = this->_internal_function_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.function_filters");
    target = stream->WriteString(20, s, target);
  }

  // repeated string function_graph_roots = 21;
  for (int i = 0, n = this->_internal_function_graph_roots_size(); i < n; ++i) {
    const auto& s = this->_internal_function_graph_roots(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.function_graph_roots");
    target = stream->WriteString(21, s, target);
  }

  // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::print_filter(this),
        _Internal::print_filter(this).GetCachedSize(), target, stream);
  }

  // optional bool preserve_ftrace_buffer = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_preserve_ftrace_buffer(), target);
  }

  // optional bool use_monotonic_raw_clock = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        24, this->_internal_use_monotonic_raw_clock(), target);
  }

  // optional string instance_name = 25;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_instance_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceConfig.instance_name");
    target = stream->WriteStringMaybeAliased(25, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig)
  return target;
}

::size_t FtraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_ftrace_events().size());
  for (int i = 0, n = _internal_ftrace_events().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_ftrace_events().Get(i));
  }

  // repeated string atrace_categories = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_atrace_categories().size());
  for (int i = 0, n = _internal_atrace_categories().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_atrace_categories().Get(i));
  }

  // repeated string atrace_apps = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_atrace_apps().size());
  for (int i = 0, n = _internal_atrace_apps().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_atrace_apps().Get(i));
  }

  // repeated string syscall_events = 18;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_syscall_events().size());
  for (int i = 0, n = _internal_syscall_events().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_syscall_events().Get(i));
  }

  // repeated string function_filters = 20;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_function_filters().size());
  for (int i = 0, n = _internal_function_filters().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_function_filters().Get(i));
  }

  // repeated string function_graph_roots = 21;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_function_graph_roots().size());
  for (int i = 0, n = _internal_function_graph_roots().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_function_graph_roots().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string instance_name = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_instance_name());
    }

    // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.compact_sched_);
    }

    // optional .perfetto.protos.FtraceConfig.PrintFilter print_filter = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.print_filter_);
    }

    // optional uint32 buffer_size_kb = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_buffer_size_kb());
    }

    // optional uint32 drain_period_ms = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_drain_period_ms());
    }

    // optional bool symbolize_ksyms = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool initialize_ksyms_synchronously_for_testing = 14 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool throttle_rss_stat = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool disable_generic_events = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3;
    }

    // optional .perfetto.protos.FtraceConfig.KsymsMemPolicy ksyms_mem_policy = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_ksyms_mem_policy());
    }

    // optional bool enable_function_graph = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3;
    }

    // optional bool preserve_ftrace_buffer = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3;
    }

    // optional bool use_monotonic_raw_clock = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceConfig::GetClassData() const { return &_class_data_; }


void FtraceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceConfig*>(&to_msg);
  auto& from = static_cast<const FtraceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ftrace_events()->MergeFrom(from._internal_ftrace_events());
  _this->_internal_mutable_atrace_categories()->MergeFrom(from._internal_atrace_categories());
  _this->_internal_mutable_atrace_apps()->MergeFrom(from._internal_atrace_apps());
  _this->_internal_mutable_syscall_events()->MergeFrom(from._internal_syscall_events());
  _this->_internal_mutable_function_filters()->MergeFrom(from._internal_function_filters());
  _this->_internal_mutable_function_graph_roots()->MergeFrom(from._internal_function_graph_roots());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_name(from._internal_instance_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_compact_sched()->::perfetto::protos::FtraceConfig_CompactSchedConfig::MergeFrom(
          from._internal_compact_sched());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_print_filter()->::perfetto::protos::FtraceConfig_PrintFilter::MergeFrom(
          from._internal_print_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.buffer_size_kb_ = from._impl_.buffer_size_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.drain_period_ms_ = from._impl_.drain_period_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.symbolize_ksyms_ = from._impl_.symbolize_ksyms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.initialize_ksyms_synchronously_for_testing_ = from._impl_.initialize_ksyms_synchronously_for_testing_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.throttle_rss_stat_ = from._impl_.throttle_rss_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.disable_generic_events_ = from._impl_.disable_generic_events_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ksyms_mem_policy_ = from._impl_.ksyms_mem_policy_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.enable_function_graph_ = from._impl_.enable_function_graph_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.preserve_ftrace_buffer_ = from._impl_.preserve_ftrace_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.use_monotonic_raw_clock_ = from._impl_.use_monotonic_raw_clock_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceConfig::CopyFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig::IsInitialized() const {
  return true;
}

void FtraceConfig::InternalSwap(FtraceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_ftrace_events()->InternalSwap(
      other->_internal_mutable_ftrace_events());
  _internal_mutable_atrace_categories()->InternalSwap(
      other->_internal_mutable_atrace_categories());
  _internal_mutable_atrace_apps()->InternalSwap(
      other->_internal_mutable_atrace_apps());
  _internal_mutable_syscall_events()->InternalSwap(
      other->_internal_mutable_syscall_events());
  _internal_mutable_function_filters()->InternalSwap(
      other->_internal_mutable_function_filters());
  _internal_mutable_function_graph_roots()->InternalSwap(
      other->_internal_mutable_function_graph_roots());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instance_name_, lhs_arena,
                                       &other->_impl_.instance_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceConfig, _impl_.use_monotonic_raw_clock_)
      + sizeof(FtraceConfig::_impl_.use_monotonic_raw_clock_)
      - PROTOBUF_FIELD_OFFSET(FtraceConfig, _impl_.compact_sched_)>(
          reinterpret_cast<char*>(&_impl_.compact_sched_),
          reinterpret_cast<char*>(&other->_impl_.compact_sched_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_CompactSchedConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_PrintFilter_Rule_AtraceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_PrintFilter_Rule*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_PrintFilter_Rule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_PrintFilter*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_PrintFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_PrintFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
