// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/inode_file/inode_file_config.proto

#include "protos/perfetto/config/inode_file/inode_file_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR InodeFileConfig_MountPointMappingEntry::InodeFileConfig_MountPointMappingEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scan_roots_)*/{}
  , /*decltype(_impl_.mountpoint_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InodeFileConfig_MountPointMappingEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InodeFileConfig_MountPointMappingEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InodeFileConfig_MountPointMappingEntryDefaultTypeInternal() {}
  union {
    InodeFileConfig_MountPointMappingEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InodeFileConfig_MountPointMappingEntryDefaultTypeInternal _InodeFileConfig_MountPointMappingEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InodeFileConfig::InodeFileConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scan_mount_points_)*/{}
  , /*decltype(_impl_.mount_point_mapping_)*/{}
  , /*decltype(_impl_.scan_interval_ms_)*/ 0u

  , /*decltype(_impl_.scan_delay_ms_)*/ 0u

  , /*decltype(_impl_.scan_batch_size_)*/ 0u

  , /*decltype(_impl_.do_not_scan_)*/ false
} {}
struct InodeFileConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InodeFileConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InodeFileConfigDefaultTypeInternal() {}
  union {
    InodeFileConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InodeFileConfigDefaultTypeInternal _InodeFileConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig_MountPointMappingEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig_MountPointMappingEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig_MountPointMappingEntry, _impl_.mountpoint_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig_MountPointMappingEntry, _impl_.scan_roots_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_.scan_interval_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_.scan_delay_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_.scan_batch_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_.do_not_scan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_.scan_mount_points_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InodeFileConfig, _impl_.mount_point_mapping_),
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::InodeFileConfig_MountPointMappingEntry)},
        { 12, 26, -1, sizeof(::perfetto::protos::InodeFileConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_InodeFileConfig_MountPointMappingEntry_default_instance_._instance,
    &::perfetto::protos::_InodeFileConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n9protos/perfetto/config/inode_file/inod"
    "e_file_config.proto\022\017perfetto.protos\"\243\002\n"
    "\017InodeFileConfig\022\030\n\020scan_interval_ms\030\001 \001"
    "(\r\022\025\n\rscan_delay_ms\030\002 \001(\r\022\027\n\017scan_batch_"
    "size\030\003 \001(\r\022\023\n\013do_not_scan\030\004 \001(\010\022\031\n\021scan_"
    "mount_points\030\005 \003(\t\022T\n\023mount_point_mappin"
    "g\030\006 \003(\01327.perfetto.protos.InodeFileConfi"
    "g.MountPointMappingEntry\032@\n\026MountPointMa"
    "ppingEntry\022\022\n\nmountpoint\030\001 \001(\t\022\022\n\nscan_r"
    "oots\030\002 \003(\t"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto = {
    false,
    false,
    370,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto,
    "protos/perfetto/config/inode_file/inode_file_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class InodeFileConfig_MountPointMappingEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileConfig_MountPointMappingEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InodeFileConfig_MountPointMappingEntry, _impl_._has_bits_);
  static void set_has_mountpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InodeFileConfig_MountPointMappingEntry::InodeFileConfig_MountPointMappingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
}
InodeFileConfig_MountPointMappingEntry::InodeFileConfig_MountPointMappingEntry(const InodeFileConfig_MountPointMappingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InodeFileConfig_MountPointMappingEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scan_roots_){from._impl_.scan_roots_}
    , decltype(_impl_.mountpoint_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mountpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mountpoint_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mountpoint_.Set(from._internal_mountpoint(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
}

inline void InodeFileConfig_MountPointMappingEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scan_roots_){arena}
    , decltype(_impl_.mountpoint_) {}

  };
  _impl_.mountpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mountpoint_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InodeFileConfig_MountPointMappingEntry::~InodeFileConfig_MountPointMappingEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InodeFileConfig_MountPointMappingEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_scan_roots()->~RepeatedPtrField();
  _impl_.mountpoint_.Destroy();
}

void InodeFileConfig_MountPointMappingEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InodeFileConfig_MountPointMappingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_scan_roots()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mountpoint_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InodeFileConfig_MountPointMappingEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mountpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mountpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string scan_roots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scan_roots();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InodeFileConfig_MountPointMappingEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string mountpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_mountpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string scan_roots = 2;
  for (int i = 0, n = this->_internal_scan_roots_size(); i < n; ++i) {
    const auto& s = this->_internal_scan_roots(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  return target;
}

::size_t InodeFileConfig_MountPointMappingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scan_roots = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_scan_roots().size());
  for (int i = 0, n = _internal_scan_roots().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_scan_roots().Get(i));
  }

  // optional string mountpoint = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mountpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InodeFileConfig_MountPointMappingEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InodeFileConfig_MountPointMappingEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InodeFileConfig_MountPointMappingEntry::GetClassData() const { return &_class_data_; }


void InodeFileConfig_MountPointMappingEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InodeFileConfig_MountPointMappingEntry*>(&to_msg);
  auto& from = static_cast<const InodeFileConfig_MountPointMappingEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scan_roots()->MergeFrom(from._internal_scan_roots());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_mountpoint(from._internal_mountpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InodeFileConfig_MountPointMappingEntry::CopyFrom(const InodeFileConfig_MountPointMappingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileConfig_MountPointMappingEntry::IsInitialized() const {
  return true;
}

void InodeFileConfig_MountPointMappingEntry::InternalSwap(InodeFileConfig_MountPointMappingEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_scan_roots()->InternalSwap(
      other->_internal_mutable_scan_roots());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mountpoint_, lhs_arena,
                                       &other->_impl_.mountpoint_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata InodeFileConfig_MountPointMappingEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto[0]);
}
// ===================================================================

class InodeFileConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<InodeFileConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InodeFileConfig, _impl_._has_bits_);
  static void set_has_scan_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scan_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scan_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_do_not_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

InodeFileConfig::InodeFileConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InodeFileConfig)
}
InodeFileConfig::InodeFileConfig(const InodeFileConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InodeFileConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scan_mount_points_){from._impl_.scan_mount_points_}
    , decltype(_impl_.mount_point_mapping_){from._impl_.mount_point_mapping_}
    , decltype(_impl_.scan_interval_ms_) {}

    , decltype(_impl_.scan_delay_ms_) {}

    , decltype(_impl_.scan_batch_size_) {}

    , decltype(_impl_.do_not_scan_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scan_interval_ms_, &from._impl_.scan_interval_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.do_not_scan_) -
    reinterpret_cast<char*>(&_impl_.scan_interval_ms_)) + sizeof(_impl_.do_not_scan_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InodeFileConfig)
}

inline void InodeFileConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scan_mount_points_){arena}
    , decltype(_impl_.mount_point_mapping_){arena}
    , decltype(_impl_.scan_interval_ms_) { 0u }

    , decltype(_impl_.scan_delay_ms_) { 0u }

    , decltype(_impl_.scan_batch_size_) { 0u }

    , decltype(_impl_.do_not_scan_) { false }

  };
}

InodeFileConfig::~InodeFileConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InodeFileConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InodeFileConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_scan_mount_points()->~RepeatedPtrField();
  _internal_mutable_mount_point_mapping()->~RepeatedPtrField();
}

void InodeFileConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InodeFileConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InodeFileConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_scan_mount_points()->Clear();
  _internal_mutable_mount_point_mapping()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.scan_interval_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.do_not_scan_) -
        reinterpret_cast<char*>(&_impl_.scan_interval_ms_)) + sizeof(_impl_.do_not_scan_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InodeFileConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 scan_interval_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_scan_interval_ms(&has_bits);
          _impl_.scan_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 scan_delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_scan_delay_ms(&has_bits);
          _impl_.scan_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 scan_batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_scan_batch_size(&has_bits);
          _impl_.scan_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool do_not_scan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_do_not_scan(&has_bits);
          _impl_.do_not_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string scan_mount_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scan_mount_points();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.InodeFileConfig.scan_mount_points");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mount_point_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InodeFileConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InodeFileConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 scan_interval_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_scan_interval_ms(), target);
  }

  // optional uint32 scan_delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_scan_delay_ms(), target);
  }

  // optional uint32 scan_batch_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_scan_batch_size(), target);
  }

  // optional bool do_not_scan = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_do_not_scan(), target);
  }

  // repeated string scan_mount_points = 5;
  for (int i = 0, n = this->_internal_scan_mount_points_size(); i < n; ++i) {
    const auto& s = this->_internal_scan_mount_points(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.InodeFileConfig.scan_mount_points");
    target = stream->WriteString(5, s, target);
  }

  // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mount_point_mapping_size()); i < n; i++) {
    const auto& repfield = this->_internal_mount_point_mapping(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InodeFileConfig)
  return target;
}

::size_t InodeFileConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InodeFileConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scan_mount_points = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_scan_mount_points().size());
  for (int i = 0, n = _internal_scan_mount_points().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_scan_mount_points().Get(i));
  }

  // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
  total_size += 1UL * this->_internal_mount_point_mapping_size();
  for (const auto& msg : this->_internal_mount_point_mapping()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 scan_interval_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scan_interval_ms());
    }

    // optional uint32 scan_delay_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scan_delay_ms());
    }

    // optional uint32 scan_batch_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scan_batch_size());
    }

    // optional bool do_not_scan = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InodeFileConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InodeFileConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InodeFileConfig::GetClassData() const { return &_class_data_; }


void InodeFileConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InodeFileConfig*>(&to_msg);
  auto& from = static_cast<const InodeFileConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InodeFileConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scan_mount_points()->MergeFrom(from._internal_scan_mount_points());
  _this->_internal_mutable_mount_point_mapping()->MergeFrom(from._internal_mount_point_mapping());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.scan_interval_ms_ = from._impl_.scan_interval_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scan_delay_ms_ = from._impl_.scan_delay_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scan_batch_size_ = from._impl_.scan_batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.do_not_scan_ = from._impl_.do_not_scan_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InodeFileConfig::CopyFrom(const InodeFileConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InodeFileConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InodeFileConfig::IsInitialized() const {
  return true;
}

void InodeFileConfig::InternalSwap(InodeFileConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_scan_mount_points()->InternalSwap(
      other->_internal_mutable_scan_mount_points());
  _internal_mutable_mount_point_mapping()->InternalSwap(other->_internal_mutable_mount_point_mapping());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InodeFileConfig, _impl_.do_not_scan_)
      + sizeof(InodeFileConfig::_impl_.do_not_scan_)
      - PROTOBUF_FIELD_OFFSET(InodeFileConfig, _impl_.scan_interval_ms_)>(
          reinterpret_cast<char*>(&_impl_.scan_interval_ms_),
          reinterpret_cast<char*>(&other->_impl_.scan_interval_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InodeFileConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileConfig_MountPointMappingEntry*
Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::InodeFileConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::InodeFileConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InodeFileConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
