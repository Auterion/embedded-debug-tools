// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/inode_file/inode_file_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class InodeFileConfig;
struct InodeFileConfigDefaultTypeInternal;
extern InodeFileConfigDefaultTypeInternal _InodeFileConfig_default_instance_;
class InodeFileConfig_MountPointMappingEntry;
struct InodeFileConfig_MountPointMappingEntryDefaultTypeInternal;
extern InodeFileConfig_MountPointMappingEntryDefaultTypeInternal _InodeFileConfig_MountPointMappingEntry_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::InodeFileConfig* Arena::CreateMaybeMessage<::perfetto::protos::InodeFileConfig>(Arena*);
template <>
::perfetto::protos::InodeFileConfig_MountPointMappingEntry* Arena::CreateMaybeMessage<::perfetto::protos::InodeFileConfig_MountPointMappingEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class InodeFileConfig_MountPointMappingEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.InodeFileConfig.MountPointMappingEntry) */ {
 public:
  inline InodeFileConfig_MountPointMappingEntry() : InodeFileConfig_MountPointMappingEntry(nullptr) {}
  ~InodeFileConfig_MountPointMappingEntry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InodeFileConfig_MountPointMappingEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InodeFileConfig_MountPointMappingEntry(const InodeFileConfig_MountPointMappingEntry& from);
  InodeFileConfig_MountPointMappingEntry(InodeFileConfig_MountPointMappingEntry&& from) noexcept
    : InodeFileConfig_MountPointMappingEntry() {
    *this = ::std::move(from);
  }

  inline InodeFileConfig_MountPointMappingEntry& operator=(const InodeFileConfig_MountPointMappingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InodeFileConfig_MountPointMappingEntry& operator=(InodeFileConfig_MountPointMappingEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InodeFileConfig_MountPointMappingEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const InodeFileConfig_MountPointMappingEntry* internal_default_instance() {
    return reinterpret_cast<const InodeFileConfig_MountPointMappingEntry*>(
               &_InodeFileConfig_MountPointMappingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InodeFileConfig_MountPointMappingEntry& a, InodeFileConfig_MountPointMappingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InodeFileConfig_MountPointMappingEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InodeFileConfig_MountPointMappingEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InodeFileConfig_MountPointMappingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InodeFileConfig_MountPointMappingEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InodeFileConfig_MountPointMappingEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InodeFileConfig_MountPointMappingEntry& from) {
    InodeFileConfig_MountPointMappingEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InodeFileConfig_MountPointMappingEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.InodeFileConfig.MountPointMappingEntry";
  }
  protected:
  explicit InodeFileConfig_MountPointMappingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanRootsFieldNumber = 2,
    kMountpointFieldNumber = 1,
  };
  // repeated string scan_roots = 2;
  int scan_roots_size() const;
  private:
  int _internal_scan_roots_size() const;

  public:
  void clear_scan_roots() ;
  const std::string& scan_roots(int index) const;
  std::string* mutable_scan_roots(int index);
  void set_scan_roots(int index, const std::string& value);
  void set_scan_roots(int index, std::string&& value);
  void set_scan_roots(int index, const char* value);
  void set_scan_roots(int index, const char* value, std::size_t size);
  void set_scan_roots(int index, absl::string_view value);
  std::string* add_scan_roots();
  void add_scan_roots(const std::string& value);
  void add_scan_roots(std::string&& value);
  void add_scan_roots(const char* value);
  void add_scan_roots(const char* value, std::size_t size);
  void add_scan_roots(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scan_roots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scan_roots();

  private:
  const std::string& _internal_scan_roots(int index) const;
  std::string* _internal_add_scan_roots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_scan_roots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_scan_roots();

  public:
  // optional string mountpoint = 1;
  bool has_mountpoint() const;
  void clear_mountpoint() ;
  const std::string& mountpoint() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mountpoint(Arg_&& arg, Args_... args);
  std::string* mutable_mountpoint();
  PROTOBUF_NODISCARD std::string* release_mountpoint();
  void set_allocated_mountpoint(std::string* ptr);

  private:
  const std::string& _internal_mountpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mountpoint(
      const std::string& value);
  std::string* _internal_mutable_mountpoint();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.InodeFileConfig.MountPointMappingEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scan_roots_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mountpoint_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto;
};// -------------------------------------------------------------------

class InodeFileConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.InodeFileConfig) */ {
 public:
  inline InodeFileConfig() : InodeFileConfig(nullptr) {}
  ~InodeFileConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InodeFileConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InodeFileConfig(const InodeFileConfig& from);
  InodeFileConfig(InodeFileConfig&& from) noexcept
    : InodeFileConfig() {
    *this = ::std::move(from);
  }

  inline InodeFileConfig& operator=(const InodeFileConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InodeFileConfig& operator=(InodeFileConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InodeFileConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InodeFileConfig* internal_default_instance() {
    return reinterpret_cast<const InodeFileConfig*>(
               &_InodeFileConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InodeFileConfig& a, InodeFileConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InodeFileConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InodeFileConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InodeFileConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InodeFileConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InodeFileConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InodeFileConfig& from) {
    InodeFileConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InodeFileConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.InodeFileConfig";
  }
  protected:
  explicit InodeFileConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InodeFileConfig_MountPointMappingEntry MountPointMappingEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kScanMountPointsFieldNumber = 5,
    kMountPointMappingFieldNumber = 6,
    kScanIntervalMsFieldNumber = 1,
    kScanDelayMsFieldNumber = 2,
    kScanBatchSizeFieldNumber = 3,
    kDoNotScanFieldNumber = 4,
  };
  // repeated string scan_mount_points = 5;
  int scan_mount_points_size() const;
  private:
  int _internal_scan_mount_points_size() const;

  public:
  void clear_scan_mount_points() ;
  const std::string& scan_mount_points(int index) const;
  std::string* mutable_scan_mount_points(int index);
  void set_scan_mount_points(int index, const std::string& value);
  void set_scan_mount_points(int index, std::string&& value);
  void set_scan_mount_points(int index, const char* value);
  void set_scan_mount_points(int index, const char* value, std::size_t size);
  void set_scan_mount_points(int index, absl::string_view value);
  std::string* add_scan_mount_points();
  void add_scan_mount_points(const std::string& value);
  void add_scan_mount_points(std::string&& value);
  void add_scan_mount_points(const char* value);
  void add_scan_mount_points(const char* value, std::size_t size);
  void add_scan_mount_points(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scan_mount_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scan_mount_points();

  private:
  const std::string& _internal_scan_mount_points(int index) const;
  std::string* _internal_add_scan_mount_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_scan_mount_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_scan_mount_points();

  public:
  // repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
  int mount_point_mapping_size() const;
  private:
  int _internal_mount_point_mapping_size() const;

  public:
  void clear_mount_point_mapping() ;
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* mutable_mount_point_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >*
      mutable_mount_point_mapping();
  private:
  const ::perfetto::protos::InodeFileConfig_MountPointMappingEntry& _internal_mount_point_mapping(int index) const;
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* _internal_add_mount_point_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileConfig_MountPointMappingEntry>& _internal_mount_point_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileConfig_MountPointMappingEntry>* _internal_mutable_mount_point_mapping();
  public:
  const ::perfetto::protos::InodeFileConfig_MountPointMappingEntry& mount_point_mapping(int index) const;
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* add_mount_point_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >&
      mount_point_mapping() const;
  // optional uint32 scan_interval_ms = 1;
  bool has_scan_interval_ms() const;
  void clear_scan_interval_ms() ;
  ::uint32_t scan_interval_ms() const;
  void set_scan_interval_ms(::uint32_t value);

  private:
  ::uint32_t _internal_scan_interval_ms() const;
  void _internal_set_scan_interval_ms(::uint32_t value);

  public:
  // optional uint32 scan_delay_ms = 2;
  bool has_scan_delay_ms() const;
  void clear_scan_delay_ms() ;
  ::uint32_t scan_delay_ms() const;
  void set_scan_delay_ms(::uint32_t value);

  private:
  ::uint32_t _internal_scan_delay_ms() const;
  void _internal_set_scan_delay_ms(::uint32_t value);

  public:
  // optional uint32 scan_batch_size = 3;
  bool has_scan_batch_size() const;
  void clear_scan_batch_size() ;
  ::uint32_t scan_batch_size() const;
  void set_scan_batch_size(::uint32_t value);

  private:
  ::uint32_t _internal_scan_batch_size() const;
  void _internal_set_scan_batch_size(::uint32_t value);

  public:
  // optional bool do_not_scan = 4;
  bool has_do_not_scan() const;
  void clear_do_not_scan() ;
  bool do_not_scan() const;
  void set_do_not_scan(bool value);

  private:
  bool _internal_do_not_scan() const;
  void _internal_set_do_not_scan(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.InodeFileConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scan_mount_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry > mount_point_mapping_;
    ::uint32_t scan_interval_ms_;
    ::uint32_t scan_delay_ms_;
    ::uint32_t scan_batch_size_;
    bool do_not_scan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InodeFileConfig_MountPointMappingEntry

// optional string mountpoint = 1;
inline bool InodeFileConfig_MountPointMappingEntry::has_mountpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InodeFileConfig_MountPointMappingEntry::clear_mountpoint() {
  _impl_.mountpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InodeFileConfig_MountPointMappingEntry::mountpoint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
  return _internal_mountpoint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InodeFileConfig_MountPointMappingEntry::set_mountpoint(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mountpoint_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}
inline std::string* InodeFileConfig_MountPointMappingEntry::mutable_mountpoint() {
  std::string* _s = _internal_mutable_mountpoint();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
  return _s;
}
inline const std::string& InodeFileConfig_MountPointMappingEntry::_internal_mountpoint() const {
  return _impl_.mountpoint_.Get();
}
inline void InodeFileConfig_MountPointMappingEntry::_internal_set_mountpoint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.mountpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* InodeFileConfig_MountPointMappingEntry::_internal_mutable_mountpoint() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mountpoint_.Mutable( GetArenaForAllocation());
}
inline std::string* InodeFileConfig_MountPointMappingEntry::release_mountpoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.mountpoint_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mountpoint_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InodeFileConfig_MountPointMappingEntry::set_allocated_mountpoint(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mountpoint_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mountpoint_.IsDefault()) {
          _impl_.mountpoint_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.InodeFileConfig.MountPointMappingEntry.mountpoint)
}

// repeated string scan_roots = 2;
inline int InodeFileConfig_MountPointMappingEntry::_internal_scan_roots_size() const {
  return _impl_.scan_roots_.size();
}
inline int InodeFileConfig_MountPointMappingEntry::scan_roots_size() const {
  return _internal_scan_roots_size();
}
inline void InodeFileConfig_MountPointMappingEntry::clear_scan_roots() {
  _internal_mutable_scan_roots()->Clear();
}
inline std::string* InodeFileConfig_MountPointMappingEntry::add_scan_roots() {
  std::string* _s = _internal_add_scan_roots();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return _s;
}
inline const std::string& InodeFileConfig_MountPointMappingEntry::scan_roots(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return _internal_scan_roots(index);
}
inline std::string* InodeFileConfig_MountPointMappingEntry::mutable_scan_roots(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return _internal_mutable_scan_roots()->Mutable(index);
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, const std::string& value) {
  _internal_mutable_scan_roots()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, std::string&& value) {
  _internal_mutable_scan_roots()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scan_roots()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_scan_roots()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::set_scan_roots(int index, absl::string_view value) {
  _internal_mutable_scan_roots()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(const std::string& value) {
  _internal_mutable_scan_roots()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(std::string&& value) {
  _internal_mutable_scan_roots()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scan_roots()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(const char* value, std::size_t size) {
  _internal_mutable_scan_roots()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline void InodeFileConfig_MountPointMappingEntry::add_scan_roots(absl::string_view value) {
  _internal_mutable_scan_roots()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileConfig_MountPointMappingEntry::scan_roots() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return _internal_scan_roots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* InodeFileConfig_MountPointMappingEntry::mutable_scan_roots() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileConfig.MountPointMappingEntry.scan_roots)
  return _internal_mutable_scan_roots();
}
inline const std::string& InodeFileConfig_MountPointMappingEntry::_internal_scan_roots(int index) const {
  return _internal_scan_roots().Get(index);
}
inline std::string* InodeFileConfig_MountPointMappingEntry::_internal_add_scan_roots() {
  return _internal_mutable_scan_roots()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileConfig_MountPointMappingEntry::_internal_scan_roots() const {
  return _impl_.scan_roots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InodeFileConfig_MountPointMappingEntry::_internal_mutable_scan_roots() {
  return &_impl_.scan_roots_;
}

// -------------------------------------------------------------------

// InodeFileConfig

// optional uint32 scan_interval_ms = 1;
inline bool InodeFileConfig::has_scan_interval_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InodeFileConfig::clear_scan_interval_ms() {
  _impl_.scan_interval_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t InodeFileConfig::scan_interval_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_interval_ms)
  return _internal_scan_interval_ms();
}
inline void InodeFileConfig::set_scan_interval_ms(::uint32_t value) {
  _internal_set_scan_interval_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_interval_ms)
}
inline ::uint32_t InodeFileConfig::_internal_scan_interval_ms() const {
  return _impl_.scan_interval_ms_;
}
inline void InodeFileConfig::_internal_set_scan_interval_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scan_interval_ms_ = value;
}

// optional uint32 scan_delay_ms = 2;
inline bool InodeFileConfig::has_scan_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InodeFileConfig::clear_scan_delay_ms() {
  _impl_.scan_delay_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t InodeFileConfig::scan_delay_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_delay_ms)
  return _internal_scan_delay_ms();
}
inline void InodeFileConfig::set_scan_delay_ms(::uint32_t value) {
  _internal_set_scan_delay_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_delay_ms)
}
inline ::uint32_t InodeFileConfig::_internal_scan_delay_ms() const {
  return _impl_.scan_delay_ms_;
}
inline void InodeFileConfig::_internal_set_scan_delay_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scan_delay_ms_ = value;
}

// optional uint32 scan_batch_size = 3;
inline bool InodeFileConfig::has_scan_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InodeFileConfig::clear_scan_batch_size() {
  _impl_.scan_batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t InodeFileConfig::scan_batch_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_batch_size)
  return _internal_scan_batch_size();
}
inline void InodeFileConfig::set_scan_batch_size(::uint32_t value) {
  _internal_set_scan_batch_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_batch_size)
}
inline ::uint32_t InodeFileConfig::_internal_scan_batch_size() const {
  return _impl_.scan_batch_size_;
}
inline void InodeFileConfig::_internal_set_scan_batch_size(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scan_batch_size_ = value;
}

// optional bool do_not_scan = 4;
inline bool InodeFileConfig::has_do_not_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void InodeFileConfig::clear_do_not_scan() {
  _impl_.do_not_scan_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool InodeFileConfig::do_not_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.do_not_scan)
  return _internal_do_not_scan();
}
inline void InodeFileConfig::set_do_not_scan(bool value) {
  _internal_set_do_not_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.do_not_scan)
}
inline bool InodeFileConfig::_internal_do_not_scan() const {
  return _impl_.do_not_scan_;
}
inline void InodeFileConfig::_internal_set_do_not_scan(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.do_not_scan_ = value;
}

// repeated string scan_mount_points = 5;
inline int InodeFileConfig::_internal_scan_mount_points_size() const {
  return _impl_.scan_mount_points_.size();
}
inline int InodeFileConfig::scan_mount_points_size() const {
  return _internal_scan_mount_points_size();
}
inline void InodeFileConfig::clear_scan_mount_points() {
  _internal_mutable_scan_mount_points()->Clear();
}
inline std::string* InodeFileConfig::add_scan_mount_points() {
  std::string* _s = _internal_add_scan_mount_points();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.InodeFileConfig.scan_mount_points)
  return _s;
}
inline const std::string& InodeFileConfig::scan_mount_points(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.scan_mount_points)
  return _internal_scan_mount_points(index);
}
inline std::string* InodeFileConfig::mutable_scan_mount_points(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.scan_mount_points)
  return _internal_mutable_scan_mount_points()->Mutable(index);
}
inline void InodeFileConfig::set_scan_mount_points(int index, const std::string& value) {
  _internal_mutable_scan_mount_points()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::set_scan_mount_points(int index, std::string&& value) {
  _internal_mutable_scan_mount_points()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::set_scan_mount_points(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scan_mount_points()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::set_scan_mount_points(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_scan_mount_points()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::set_scan_mount_points(int index, absl::string_view value) {
  _internal_mutable_scan_mount_points()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(const std::string& value) {
  _internal_mutable_scan_mount_points()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(std::string&& value) {
  _internal_mutable_scan_mount_points()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_scan_mount_points()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(const char* value, std::size_t size) {
  _internal_mutable_scan_mount_points()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline void InodeFileConfig::add_scan_mount_points(absl::string_view value) {
  _internal_mutable_scan_mount_points()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.InodeFileConfig.scan_mount_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileConfig::scan_mount_points() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileConfig.scan_mount_points)
  return _internal_scan_mount_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* InodeFileConfig::mutable_scan_mount_points() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileConfig.scan_mount_points)
  return _internal_mutable_scan_mount_points();
}
inline const std::string& InodeFileConfig::_internal_scan_mount_points(int index) const {
  return _internal_scan_mount_points().Get(index);
}
inline std::string* InodeFileConfig::_internal_add_scan_mount_points() {
  return _internal_mutable_scan_mount_points()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileConfig::_internal_scan_mount_points() const {
  return _impl_.scan_mount_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InodeFileConfig::_internal_mutable_scan_mount_points() {
  return &_impl_.scan_mount_points_;
}

// repeated .perfetto.protos.InodeFileConfig.MountPointMappingEntry mount_point_mapping = 6;
inline int InodeFileConfig::_internal_mount_point_mapping_size() const {
  return _impl_.mount_point_mapping_.size();
}
inline int InodeFileConfig::mount_point_mapping_size() const {
  return _internal_mount_point_mapping_size();
}
inline void InodeFileConfig::clear_mount_point_mapping() {
  _internal_mutable_mount_point_mapping()->Clear();
}
inline ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* InodeFileConfig::mutable_mount_point_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return _internal_mutable_mount_point_mapping()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >*
InodeFileConfig::mutable_mount_point_mapping() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return _internal_mutable_mount_point_mapping();
}
inline const ::perfetto::protos::InodeFileConfig_MountPointMappingEntry& InodeFileConfig::_internal_mount_point_mapping(int index) const {
  return _internal_mount_point_mapping().Get(index);
}
inline const ::perfetto::protos::InodeFileConfig_MountPointMappingEntry& InodeFileConfig::mount_point_mapping(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return _internal_mount_point_mapping(index);
}
inline ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* InodeFileConfig::_internal_add_mount_point_mapping() {
  return _internal_mutable_mount_point_mapping()->Add();
}
inline ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* InodeFileConfig::add_mount_point_mapping() {
  ::perfetto::protos::InodeFileConfig_MountPointMappingEntry* _add = _internal_add_mount_point_mapping();
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileConfig_MountPointMappingEntry >&
InodeFileConfig::mount_point_mapping() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileConfig.mount_point_mapping)
  return _internal_mount_point_mapping();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileConfig_MountPointMappingEntry>&
InodeFileConfig::_internal_mount_point_mapping() const {
  return _impl_.mount_point_mapping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileConfig_MountPointMappingEntry>*
InodeFileConfig::_internal_mutable_mount_point_mapping() {
  return &_impl_.mount_point_mapping_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2finode_5ffile_2finode_5ffile_5fconfig_2eproto_2epb_2eh
