// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/statsd/statsd_tracing_config.proto

#include "protos/perfetto/config/statsd/statsd_tracing_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR StatsdTracingConfig::StatsdTracingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.push_atom_id_)*/ {}

  , /*decltype(_impl_.raw_push_atom_id_)*/ {}

  , /*decltype(_impl_.pull_config_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsdTracingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsdTracingConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsdTracingConfigDefaultTypeInternal() {}
  union {
    StatsdTracingConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsdTracingConfigDefaultTypeInternal _StatsdTracingConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StatsdPullAtomConfig::StatsdPullAtomConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pull_atom_id_)*/ {}

  , /*decltype(_impl_.raw_pull_atom_id_)*/ {}

  , /*decltype(_impl_.packages_)*/{}
  , /*decltype(_impl_.pull_frequency_ms_)*/ 0
} {}
struct StatsdPullAtomConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsdPullAtomConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsdPullAtomConfigDefaultTypeInternal() {}
  union {
    StatsdPullAtomConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsdPullAtomConfigDefaultTypeInternal _StatsdPullAtomConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdTracingConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdTracingConfig, _impl_.push_atom_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdTracingConfig, _impl_.raw_push_atom_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdTracingConfig, _impl_.pull_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdPullAtomConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdPullAtomConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdPullAtomConfig, _impl_.pull_atom_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdPullAtomConfig, _impl_.raw_pull_atom_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdPullAtomConfig, _impl_.pull_frequency_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StatsdPullAtomConfig, _impl_.packages_),
    ~0u,
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::perfetto::protos::StatsdTracingConfig)},
        { 11, 23, -1, sizeof(::perfetto::protos::StatsdPullAtomConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_StatsdTracingConfig_default_instance_._instance,
    &::perfetto::protos::_StatsdPullAtomConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n9protos/perfetto/config/statsd/statsd_t"
    "racing_config.proto\022\017perfetto.protos\032,pr"
    "otos/perfetto/config/statsd/atom_ids.pro"
    "to\"\232\001\n\023StatsdTracingConfig\022-\n\014push_atom_"
    "id\030\001 \003(\0162\027.perfetto.protos.AtomId\022\030\n\020raw"
    "_push_atom_id\030\002 \003(\005\022:\n\013pull_config\030\003 \003(\013"
    "2%.perfetto.protos.StatsdPullAtomConfig\""
    "\214\001\n\024StatsdPullAtomConfig\022-\n\014pull_atom_id"
    "\030\001 \003(\0162\027.perfetto.protos.AtomId\022\030\n\020raw_p"
    "ull_atom_id\030\002 \003(\005\022\031\n\021pull_frequency_ms\030\003"
    " \001(\005\022\020\n\010packages\030\004 \003(\t"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fatom_5fids_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto = {
    false,
    false,
    422,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto,
    "protos/perfetto/config/statsd/statsd_tracing_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_once,
    descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class StatsdTracingConfig::_Internal {
 public:
};

StatsdTracingConfig::StatsdTracingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StatsdTracingConfig)
}
StatsdTracingConfig::StatsdTracingConfig(const StatsdTracingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsdTracingConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.push_atom_id_) { from._internal_push_atom_id() }

    , decltype(_impl_.raw_push_atom_id_) { from._impl_.raw_push_atom_id_ }

    , decltype(_impl_.pull_config_){from._impl_.pull_config_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StatsdTracingConfig)
}

inline void StatsdTracingConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.push_atom_id_) { arena }

    , decltype(_impl_.raw_push_atom_id_) { arena }

    , decltype(_impl_.pull_config_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatsdTracingConfig::~StatsdTracingConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StatsdTracingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsdTracingConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_push_atom_id()->~RepeatedField();
  _impl_.raw_push_atom_id_.~RepeatedField();
  _internal_mutable_pull_config()->~RepeatedPtrField();
}

void StatsdTracingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsdTracingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StatsdTracingConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_push_atom_id()->Clear();
  _internal_mutable_raw_push_atom_id()->Clear();
  _internal_mutable_pull_config()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsdTracingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AtomId push_atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AtomId_IsValid(static_cast<int>(val)))) {
              _internal_add_push_atom_id(static_cast<::perfetto::protos::AtomId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_push_atom_id(), ptr, ctx, ::perfetto::protos::AtomId_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 raw_push_atom_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_raw_push_atom_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_raw_push_atom_id(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.StatsdPullAtomConfig pull_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pull_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StatsdTracingConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StatsdTracingConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId push_atom_id = 1;
  for (int i = 0, n = this->_internal_push_atom_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_push_atom_id(i), target);
  }

  // repeated int32 raw_push_atom_id = 2;
  for (int i = 0, n = this->_internal_raw_push_atom_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_raw_push_atom_id(i), target);
  }

  // repeated .perfetto.protos.StatsdPullAtomConfig pull_config = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pull_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_pull_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StatsdTracingConfig)
  return target;
}

::size_t StatsdTracingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StatsdTracingConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId push_atom_id = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_push_atom_id_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_push_atom_id(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated int32 raw_push_atom_id = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_raw_push_atom_id())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_raw_push_atom_id_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .perfetto.protos.StatsdPullAtomConfig pull_config = 3;
  total_size += 1UL * this->_internal_pull_config_size();
  for (const auto& msg : this->_internal_pull_config()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsdTracingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsdTracingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsdTracingConfig::GetClassData() const { return &_class_data_; }


void StatsdTracingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsdTracingConfig*>(&to_msg);
  auto& from = static_cast<const StatsdTracingConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StatsdTracingConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_push_atom_id()->MergeFrom(from._internal_push_atom_id());
  _this->_impl_.raw_push_atom_id_.MergeFrom(from._impl_.raw_push_atom_id_);
  _this->_internal_mutable_pull_config()->MergeFrom(from._internal_pull_config());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsdTracingConfig::CopyFrom(const StatsdTracingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StatsdTracingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdTracingConfig::IsInitialized() const {
  return true;
}

void StatsdTracingConfig::InternalSwap(StatsdTracingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_push_atom_id()->InternalSwap(
      other->_internal_mutable_push_atom_id());
  _impl_.raw_push_atom_id_.InternalSwap(&other->_impl_.raw_push_atom_id_);
  _internal_mutable_pull_config()->InternalSwap(other->_internal_mutable_pull_config());
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsdTracingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto[0]);
}
// ===================================================================

class StatsdPullAtomConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StatsdPullAtomConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StatsdPullAtomConfig, _impl_._has_bits_);
  static void set_has_pull_frequency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StatsdPullAtomConfig::StatsdPullAtomConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StatsdPullAtomConfig)
}
StatsdPullAtomConfig::StatsdPullAtomConfig(const StatsdPullAtomConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsdPullAtomConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pull_atom_id_) { from._internal_pull_atom_id() }

    , decltype(_impl_.raw_pull_atom_id_) { from._impl_.raw_pull_atom_id_ }

    , decltype(_impl_.packages_){from._impl_.packages_}
    , decltype(_impl_.pull_frequency_ms_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pull_frequency_ms_ = from._impl_.pull_frequency_ms_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StatsdPullAtomConfig)
}

inline void StatsdPullAtomConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pull_atom_id_) { arena }

    , decltype(_impl_.raw_pull_atom_id_) { arena }

    , decltype(_impl_.packages_){arena}
    , decltype(_impl_.pull_frequency_ms_) { 0 }

  };
}

StatsdPullAtomConfig::~StatsdPullAtomConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StatsdPullAtomConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsdPullAtomConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_pull_atom_id()->~RepeatedField();
  _impl_.raw_pull_atom_id_.~RepeatedField();
  _internal_mutable_packages()->~RepeatedPtrField();
}

void StatsdPullAtomConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsdPullAtomConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StatsdPullAtomConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pull_atom_id()->Clear();
  _internal_mutable_raw_pull_atom_id()->Clear();
  _internal_mutable_packages()->Clear();
  _impl_.pull_frequency_ms_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsdPullAtomConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AtomId pull_atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AtomId_IsValid(static_cast<int>(val)))) {
              _internal_add_pull_atom_id(static_cast<::perfetto::protos::AtomId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_pull_atom_id(), ptr, ctx, ::perfetto::protos::AtomId_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 raw_pull_atom_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_raw_pull_atom_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_raw_pull_atom_id(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pull_frequency_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pull_frequency_ms(&has_bits);
          _impl_.pull_frequency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string packages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_packages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.StatsdPullAtomConfig.packages");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StatsdPullAtomConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StatsdPullAtomConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId pull_atom_id = 1;
  for (int i = 0, n = this->_internal_pull_atom_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_pull_atom_id(i), target);
  }

  // repeated int32 raw_pull_atom_id = 2;
  for (int i = 0, n = this->_internal_raw_pull_atom_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_raw_pull_atom_id(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pull_frequency_ms = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pull_frequency_ms(), target);
  }

  // repeated string packages = 4;
  for (int i = 0, n = this->_internal_packages_size(); i < n; ++i) {
    const auto& s = this->_internal_packages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.StatsdPullAtomConfig.packages");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StatsdPullAtomConfig)
  return target;
}

::size_t StatsdPullAtomConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StatsdPullAtomConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AtomId pull_atom_id = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_pull_atom_id_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_pull_atom_id(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated int32 raw_pull_atom_id = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_raw_pull_atom_id())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_raw_pull_atom_id_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated string packages = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_packages().size());
  for (int i = 0, n = _internal_packages().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_packages().Get(i));
  }

  // optional int32 pull_frequency_ms = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pull_frequency_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsdPullAtomConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsdPullAtomConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsdPullAtomConfig::GetClassData() const { return &_class_data_; }


void StatsdPullAtomConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsdPullAtomConfig*>(&to_msg);
  auto& from = static_cast<const StatsdPullAtomConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StatsdPullAtomConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pull_atom_id()->MergeFrom(from._internal_pull_atom_id());
  _this->_impl_.raw_pull_atom_id_.MergeFrom(from._impl_.raw_pull_atom_id_);
  _this->_internal_mutable_packages()->MergeFrom(from._internal_packages());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_pull_frequency_ms(from._internal_pull_frequency_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsdPullAtomConfig::CopyFrom(const StatsdPullAtomConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StatsdPullAtomConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdPullAtomConfig::IsInitialized() const {
  return true;
}

void StatsdPullAtomConfig::InternalSwap(StatsdPullAtomConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_pull_atom_id()->InternalSwap(
      other->_internal_mutable_pull_atom_id());
  _impl_.raw_pull_atom_id_.InternalSwap(&other->_impl_.raw_pull_atom_id_);
  _internal_mutable_packages()->InternalSwap(
      other->_internal_mutable_packages());

  swap(_impl_.pull_frequency_ms_, other->_impl_.pull_frequency_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsdPullAtomConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fstatsd_2fstatsd_5ftracing_5fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::StatsdTracingConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::StatsdTracingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StatsdTracingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StatsdPullAtomConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::StatsdPullAtomConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StatsdPullAtomConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
