// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/power/android_power_config.proto

#include "protos/perfetto/config/power/android_power_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR AndroidPowerConfig::AndroidPowerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.battery_counters_)*/ {}

  , /*decltype(_impl_.battery_poll_ms_)*/ 0u

  , /*decltype(_impl_.collect_power_rails_)*/ false

  , /*decltype(_impl_.collect_energy_estimation_breakdown_)*/ false

  , /*decltype(_impl_.collect_entity_state_residency_)*/ false
} {}
struct AndroidPowerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidPowerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidPowerConfigDefaultTypeInternal() {}
  union {
    AndroidPowerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidPowerConfigDefaultTypeInternal _AndroidPowerConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _impl_.battery_poll_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _impl_.battery_counters_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _impl_.collect_power_rails_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _impl_.collect_energy_estimation_breakdown_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidPowerConfig, _impl_.collect_entity_state_residency_),
    0,
    ~0u,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::AndroidPowerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_AndroidPowerConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n7protos/perfetto/config/power/android_p"
    "ower_config.proto\022\017perfetto.protos\"\243\003\n\022A"
    "ndroidPowerConfig\022\027\n\017battery_poll_ms\030\001 \001"
    "(\r\022M\n\020battery_counters\030\002 \003(\01623.perfetto."
    "protos.AndroidPowerConfig.BatteryCounter"
    "s\022\033\n\023collect_power_rails\030\003 \001(\010\022+\n#collec"
    "t_energy_estimation_breakdown\030\004 \001(\010\022&\n\036c"
    "ollect_entity_state_residency\030\005 \001(\010\"\262\001\n\017"
    "BatteryCounters\022\037\n\033BATTERY_COUNTER_UNSPE"
    "CIFIED\020\000\022\032\n\026BATTERY_COUNTER_CHARGE\020\001\022$\n "
    "BATTERY_COUNTER_CAPACITY_PERCENT\020\002\022\033\n\027BA"
    "TTERY_COUNTER_CURRENT\020\003\022\037\n\033BATTERY_COUNT"
    "ER_CURRENT_AVG\020\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto = {
    false,
    false,
    496,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto,
    "protos/perfetto/config/power/android_power_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AndroidPowerConfig_BatteryCounters_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto[0];
}
bool AndroidPowerConfig_BatteryCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_UNSPECIFIED;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CHARGE;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CAPACITY_PERCENT;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CURRENT;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BATTERY_COUNTER_CURRENT_AVG;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BatteryCounters_MIN;
constexpr AndroidPowerConfig_BatteryCounters AndroidPowerConfig::BatteryCounters_MAX;
constexpr int AndroidPowerConfig::BatteryCounters_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class AndroidPowerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidPowerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidPowerConfig, _impl_._has_bits_);
  static void set_has_battery_poll_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collect_power_rails(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_collect_energy_estimation_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collect_entity_state_residency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AndroidPowerConfig::AndroidPowerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidPowerConfig)
}
AndroidPowerConfig::AndroidPowerConfig(const AndroidPowerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidPowerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battery_counters_) { from._internal_battery_counters() }

    , decltype(_impl_.battery_poll_ms_) {}

    , decltype(_impl_.collect_power_rails_) {}

    , decltype(_impl_.collect_energy_estimation_breakdown_) {}

    , decltype(_impl_.collect_entity_state_residency_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.battery_poll_ms_, &from._impl_.battery_poll_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.collect_entity_state_residency_) -
    reinterpret_cast<char*>(&_impl_.battery_poll_ms_)) + sizeof(_impl_.collect_entity_state_residency_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidPowerConfig)
}

inline void AndroidPowerConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.battery_counters_) { arena }

    , decltype(_impl_.battery_poll_ms_) { 0u }

    , decltype(_impl_.collect_power_rails_) { false }

    , decltype(_impl_.collect_energy_estimation_breakdown_) { false }

    , decltype(_impl_.collect_entity_state_residency_) { false }

  };
}

AndroidPowerConfig::~AndroidPowerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidPowerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidPowerConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_battery_counters()->~RepeatedField();
}

void AndroidPowerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidPowerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidPowerConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_battery_counters()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.battery_poll_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.collect_entity_state_residency_) -
        reinterpret_cast<char*>(&_impl_.battery_poll_ms_)) + sizeof(_impl_.collect_entity_state_residency_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidPowerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 battery_poll_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_battery_poll_ms(&has_bits);
          _impl_.battery_poll_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid(static_cast<int>(val)))) {
              _internal_add_battery_counters(static_cast<::perfetto::protos::AndroidPowerConfig_BatteryCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_battery_counters(), ptr, ctx, ::perfetto::protos::AndroidPowerConfig_BatteryCounters_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool collect_power_rails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_collect_power_rails(&has_bits);
          _impl_.collect_power_rails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool collect_energy_estimation_breakdown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_collect_energy_estimation_breakdown(&has_bits);
          _impl_.collect_energy_estimation_breakdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool collect_entity_state_residency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_collect_entity_state_residency(&has_bits);
          _impl_.collect_entity_state_residency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidPowerConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidPowerConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 battery_poll_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_battery_poll_ms(), target);
  }

  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  for (int i = 0, n = this->_internal_battery_counters_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_battery_counters(i), target);
  }

  // optional bool collect_power_rails = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_collect_power_rails(), target);
  }

  // optional bool collect_energy_estimation_breakdown = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_collect_energy_estimation_breakdown(), target);
  }

  // optional bool collect_entity_state_residency = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_collect_entity_state_residency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidPowerConfig)
  return target;
}

::size_t AndroidPowerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidPowerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidPowerConfig.BatteryCounters battery_counters = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_battery_counters_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_battery_counters(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 battery_poll_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_battery_poll_ms());
    }

    // optional bool collect_power_rails = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool collect_energy_estimation_breakdown = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool collect_entity_state_residency = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidPowerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidPowerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidPowerConfig::GetClassData() const { return &_class_data_; }


void AndroidPowerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidPowerConfig*>(&to_msg);
  auto& from = static_cast<const AndroidPowerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidPowerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_battery_counters()->MergeFrom(from._internal_battery_counters());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.battery_poll_ms_ = from._impl_.battery_poll_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.collect_power_rails_ = from._impl_.collect_power_rails_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.collect_energy_estimation_breakdown_ = from._impl_.collect_energy_estimation_breakdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.collect_entity_state_residency_ = from._impl_.collect_entity_state_residency_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidPowerConfig::CopyFrom(const AndroidPowerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidPowerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidPowerConfig::IsInitialized() const {
  return true;
}

void AndroidPowerConfig::InternalSwap(AndroidPowerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_battery_counters()->InternalSwap(
      other->_internal_mutable_battery_counters());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidPowerConfig, _impl_.collect_entity_state_residency_)
      + sizeof(AndroidPowerConfig::_impl_.collect_entity_state_residency_)
      - PROTOBUF_FIELD_OFFSET(AndroidPowerConfig, _impl_.battery_poll_ms_)>(
          reinterpret_cast<char*>(&_impl_.battery_poll_ms_),
          reinterpret_cast<char*>(&other->_impl_.battery_poll_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidPowerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fpower_2fandroid_5fpower_5fconfig_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidPowerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidPowerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidPowerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
