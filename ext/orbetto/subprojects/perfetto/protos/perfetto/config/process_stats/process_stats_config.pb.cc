// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/process_stats/process_stats_config.proto

#include "protos/perfetto/config/process_stats/process_stats_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ProcessStatsConfig::ProcessStatsConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quirks_)*/ {}

  , /*decltype(_impl_.proc_stats_poll_ms_)*/ 0u

  , /*decltype(_impl_.proc_stats_cache_ttl_ms_)*/ 0u

  , /*decltype(_impl_.scan_all_processes_on_start_)*/ false

  , /*decltype(_impl_.record_thread_names_)*/ false

  , /*decltype(_impl_.resolve_process_fds_)*/ false

  , /*decltype(_impl_.scan_smaps_rollup_)*/ false
} {}
struct ProcessStatsConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStatsConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStatsConfigDefaultTypeInternal() {}
  union {
    ProcessStatsConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStatsConfigDefaultTypeInternal _ProcessStatsConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.quirks_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.scan_all_processes_on_start_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.record_thread_names_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.proc_stats_poll_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.proc_stats_cache_ttl_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.resolve_process_fds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStatsConfig, _impl_.scan_smaps_rollup_),
    ~0u,
    2,
    3,
    0,
    1,
    4,
    5,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::perfetto::protos::ProcessStatsConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ProcessStatsConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\?protos/perfetto/config/process_stats/p"
    "rocess_stats_config.proto\022\017perfetto.prot"
    "os\"\352\002\n\022ProcessStatsConfig\022:\n\006quirks\030\001 \003("
    "\0162*.perfetto.protos.ProcessStatsConfig.Q"
    "uirks\022#\n\033scan_all_processes_on_start\030\002 \001"
    "(\010\022\033\n\023record_thread_names\030\003 \001(\010\022\032\n\022proc_"
    "stats_poll_ms\030\004 \001(\r\022\037\n\027proc_stats_cache_"
    "ttl_ms\030\006 \001(\r\022\033\n\023resolve_process_fds\030\t \001("
    "\010\022\031\n\021scan_smaps_rollup\030\n \001(\010\"U\n\006Quirks\022\026"
    "\n\022QUIRKS_UNSPECIFIED\020\000\022\034\n\024DISABLE_INITIA"
    "L_DUMP\020\001\032\002\010\001\022\025\n\021DISABLE_ON_DEMAND\020\002J\004\010\007\020"
    "\010J\004\010\010\020\t"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto = {
    false,
    false,
    447,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto,
    "protos/perfetto/config/process_stats/process_stats_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessStatsConfig_Quirks_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto[0];
}
bool ProcessStatsConfig_Quirks_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::QUIRKS_UNSPECIFIED;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::DISABLE_INITIAL_DUMP;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::DISABLE_ON_DEMAND;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::Quirks_MIN;
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig::Quirks_MAX;
constexpr int ProcessStatsConfig::Quirks_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ProcessStatsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStatsConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessStatsConfig, _impl_._has_bits_);
  static void set_has_scan_all_processes_on_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_record_thread_names(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_proc_stats_poll_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proc_stats_cache_ttl_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resolve_process_fds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scan_smaps_rollup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProcessStatsConfig::ProcessStatsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStatsConfig)
}
ProcessStatsConfig::ProcessStatsConfig(const ProcessStatsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessStatsConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quirks_) { from._internal_quirks() }

    , decltype(_impl_.proc_stats_poll_ms_) {}

    , decltype(_impl_.proc_stats_cache_ttl_ms_) {}

    , decltype(_impl_.scan_all_processes_on_start_) {}

    , decltype(_impl_.record_thread_names_) {}

    , decltype(_impl_.resolve_process_fds_) {}

    , decltype(_impl_.scan_smaps_rollup_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.proc_stats_poll_ms_, &from._impl_.proc_stats_poll_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.scan_smaps_rollup_) -
    reinterpret_cast<char*>(&_impl_.proc_stats_poll_ms_)) + sizeof(_impl_.scan_smaps_rollup_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStatsConfig)
}

inline void ProcessStatsConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quirks_) { arena }

    , decltype(_impl_.proc_stats_poll_ms_) { 0u }

    , decltype(_impl_.proc_stats_cache_ttl_ms_) { 0u }

    , decltype(_impl_.scan_all_processes_on_start_) { false }

    , decltype(_impl_.record_thread_names_) { false }

    , decltype(_impl_.resolve_process_fds_) { false }

    , decltype(_impl_.scan_smaps_rollup_) { false }

  };
}

ProcessStatsConfig::~ProcessStatsConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStatsConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStatsConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_quirks()->~RepeatedField();
}

void ProcessStatsConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStatsConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_quirks()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.proc_stats_poll_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.scan_smaps_rollup_) -
        reinterpret_cast<char*>(&_impl_.proc_stats_poll_ms_)) + sizeof(_impl_.scan_smaps_rollup_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStatsConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(static_cast<int>(val)))) {
              _internal_add_quirks(static_cast<::perfetto::protos::ProcessStatsConfig_Quirks>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_quirks(), ptr, ctx, ::perfetto::protos::ProcessStatsConfig_Quirks_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool scan_all_processes_on_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_scan_all_processes_on_start(&has_bits);
          _impl_.scan_all_processes_on_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool record_thread_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_record_thread_names(&has_bits);
          _impl_.record_thread_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 proc_stats_poll_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_proc_stats_poll_ms(&has_bits);
          _impl_.proc_stats_poll_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 proc_stats_cache_ttl_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_proc_stats_cache_ttl_ms(&has_bits);
          _impl_.proc_stats_cache_ttl_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool resolve_process_fds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_resolve_process_fds(&has_bits);
          _impl_.resolve_process_fds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool scan_smaps_rollup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_scan_smaps_rollup(&has_bits);
          _impl_.scan_smaps_rollup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessStatsConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStatsConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  for (int i = 0, n = this->_internal_quirks_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_quirks(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool scan_all_processes_on_start = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_scan_all_processes_on_start(), target);
  }

  // optional bool record_thread_names = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_record_thread_names(), target);
  }

  // optional uint32 proc_stats_poll_ms = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_proc_stats_poll_ms(), target);
  }

  // optional uint32 proc_stats_cache_ttl_ms = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_proc_stats_cache_ttl_ms(), target);
  }

  // optional bool resolve_process_fds = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_resolve_process_fds(), target);
  }

  // optional bool scan_smaps_rollup = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_scan_smaps_rollup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStatsConfig)
  return target;
}

::size_t ProcessStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStatsConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_quirks_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_quirks(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 proc_stats_poll_ms = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_proc_stats_poll_ms());
    }

    // optional uint32 proc_stats_cache_ttl_ms = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_proc_stats_cache_ttl_ms());
    }

    // optional bool scan_all_processes_on_start = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool record_thread_names = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool resolve_process_fds = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool scan_smaps_rollup = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStatsConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStatsConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStatsConfig::GetClassData() const { return &_class_data_; }


void ProcessStatsConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStatsConfig*>(&to_msg);
  auto& from = static_cast<const ProcessStatsConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStatsConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_quirks()->MergeFrom(from._internal_quirks());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.proc_stats_poll_ms_ = from._impl_.proc_stats_poll_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.proc_stats_cache_ttl_ms_ = from._impl_.proc_stats_cache_ttl_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scan_all_processes_on_start_ = from._impl_.scan_all_processes_on_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.record_thread_names_ = from._impl_.record_thread_names_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.resolve_process_fds_ = from._impl_.resolve_process_fds_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.scan_smaps_rollup_ = from._impl_.scan_smaps_rollup_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStatsConfig::CopyFrom(const ProcessStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatsConfig::IsInitialized() const {
  return true;
}

void ProcessStatsConfig::InternalSwap(ProcessStatsConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_quirks()->InternalSwap(
      other->_internal_mutable_quirks());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessStatsConfig, _impl_.scan_smaps_rollup_)
      + sizeof(ProcessStatsConfig::_impl_.scan_smaps_rollup_)
      - PROTOBUF_FIELD_OFFSET(ProcessStatsConfig, _impl_.proc_stats_poll_ms_)>(
          reinterpret_cast<char*>(&_impl_.proc_stats_poll_ms_),
          reinterpret_cast<char*>(&other->_impl_.proc_stats_poll_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStatsConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStatsConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStatsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStatsConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
