// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/process_stats/process_stats_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class ProcessStatsConfig;
struct ProcessStatsConfigDefaultTypeInternal;
extern ProcessStatsConfigDefaultTypeInternal _ProcessStatsConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ProcessStatsConfig* Arena::CreateMaybeMessage<::perfetto::protos::ProcessStatsConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ProcessStatsConfig_Quirks : int {
  ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED = 0,
  ProcessStatsConfig_Quirks_DISABLE_INITIAL_DUMP [[deprecated]] = 1,
  ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND = 2,
};

bool ProcessStatsConfig_Quirks_IsValid(int value);
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig_Quirks_Quirks_MIN = static_cast<ProcessStatsConfig_Quirks>(0);
constexpr ProcessStatsConfig_Quirks ProcessStatsConfig_Quirks_Quirks_MAX = static_cast<ProcessStatsConfig_Quirks>(2);
constexpr int ProcessStatsConfig_Quirks_Quirks_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ProcessStatsConfig_Quirks_descriptor();
template <typename T>
const std::string& ProcessStatsConfig_Quirks_Name(T value) {
  static_assert(std::is_same<T, ProcessStatsConfig_Quirks>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Quirks_Name().");
  return ProcessStatsConfig_Quirks_Name(static_cast<ProcessStatsConfig_Quirks>(value));
}
template <>
inline const std::string& ProcessStatsConfig_Quirks_Name(ProcessStatsConfig_Quirks value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ProcessStatsConfig_Quirks_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ProcessStatsConfig_Quirks_Parse(absl::string_view name, ProcessStatsConfig_Quirks* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessStatsConfig_Quirks>(
      ProcessStatsConfig_Quirks_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ProcessStatsConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessStatsConfig) */ {
 public:
  inline ProcessStatsConfig() : ProcessStatsConfig(nullptr) {}
  ~ProcessStatsConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessStatsConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStatsConfig(const ProcessStatsConfig& from);
  ProcessStatsConfig(ProcessStatsConfig&& from) noexcept
    : ProcessStatsConfig() {
    *this = ::std::move(from);
  }

  inline ProcessStatsConfig& operator=(const ProcessStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStatsConfig& operator=(ProcessStatsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessStatsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStatsConfig* internal_default_instance() {
    return reinterpret_cast<const ProcessStatsConfig*>(
               &_ProcessStatsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessStatsConfig& a, ProcessStatsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStatsConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStatsConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStatsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStatsConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessStatsConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessStatsConfig& from) {
    ProcessStatsConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessStatsConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProcessStatsConfig";
  }
  protected:
  explicit ProcessStatsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Quirks = ProcessStatsConfig_Quirks;
  static constexpr Quirks QUIRKS_UNSPECIFIED = ProcessStatsConfig_Quirks_QUIRKS_UNSPECIFIED;
  [[deprecated]] static constexpr Quirks DISABLE_INITIAL_DUMP = ProcessStatsConfig_Quirks_DISABLE_INITIAL_DUMP;
  static constexpr Quirks DISABLE_ON_DEMAND = ProcessStatsConfig_Quirks_DISABLE_ON_DEMAND;
  static inline bool Quirks_IsValid(int value) {
    return ProcessStatsConfig_Quirks_IsValid(value);
  }
  static constexpr Quirks Quirks_MIN = ProcessStatsConfig_Quirks_Quirks_MIN;
  static constexpr Quirks Quirks_MAX = ProcessStatsConfig_Quirks_Quirks_MAX;
  static constexpr int Quirks_ARRAYSIZE = ProcessStatsConfig_Quirks_Quirks_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Quirks_descriptor() {
    return ProcessStatsConfig_Quirks_descriptor();
  }
  template <typename T>
  static inline const std::string& Quirks_Name(T value) {
    return ProcessStatsConfig_Quirks_Name(value);
  }
  static inline bool Quirks_Parse(absl::string_view name, Quirks* value) {
    return ProcessStatsConfig_Quirks_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQuirksFieldNumber = 1,
    kProcStatsPollMsFieldNumber = 4,
    kProcStatsCacheTtlMsFieldNumber = 6,
    kScanAllProcessesOnStartFieldNumber = 2,
    kRecordThreadNamesFieldNumber = 3,
    kResolveProcessFdsFieldNumber = 9,
    kScanSmapsRollupFieldNumber = 10,
  };
  // repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
  int quirks_size() const;
  private:
  int _internal_quirks_size() const;

  public:
  void clear_quirks() ;
  public:
  ::perfetto::protos::ProcessStatsConfig_Quirks quirks(int index) const;
  void set_quirks(int index, ::perfetto::protos::ProcessStatsConfig_Quirks value);
  void add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& quirks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_quirks();

  private:
  ::perfetto::protos::ProcessStatsConfig_Quirks _internal_quirks(int index) const;
  void _internal_add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_quirks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_quirks();

  public:
  // optional uint32 proc_stats_poll_ms = 4;
  bool has_proc_stats_poll_ms() const;
  void clear_proc_stats_poll_ms() ;
  ::uint32_t proc_stats_poll_ms() const;
  void set_proc_stats_poll_ms(::uint32_t value);

  private:
  ::uint32_t _internal_proc_stats_poll_ms() const;
  void _internal_set_proc_stats_poll_ms(::uint32_t value);

  public:
  // optional uint32 proc_stats_cache_ttl_ms = 6;
  bool has_proc_stats_cache_ttl_ms() const;
  void clear_proc_stats_cache_ttl_ms() ;
  ::uint32_t proc_stats_cache_ttl_ms() const;
  void set_proc_stats_cache_ttl_ms(::uint32_t value);

  private:
  ::uint32_t _internal_proc_stats_cache_ttl_ms() const;
  void _internal_set_proc_stats_cache_ttl_ms(::uint32_t value);

  public:
  // optional bool scan_all_processes_on_start = 2;
  bool has_scan_all_processes_on_start() const;
  void clear_scan_all_processes_on_start() ;
  bool scan_all_processes_on_start() const;
  void set_scan_all_processes_on_start(bool value);

  private:
  bool _internal_scan_all_processes_on_start() const;
  void _internal_set_scan_all_processes_on_start(bool value);

  public:
  // optional bool record_thread_names = 3;
  bool has_record_thread_names() const;
  void clear_record_thread_names() ;
  bool record_thread_names() const;
  void set_record_thread_names(bool value);

  private:
  bool _internal_record_thread_names() const;
  void _internal_set_record_thread_names(bool value);

  public:
  // optional bool resolve_process_fds = 9;
  bool has_resolve_process_fds() const;
  void clear_resolve_process_fds() ;
  bool resolve_process_fds() const;
  void set_resolve_process_fds(bool value);

  private:
  bool _internal_resolve_process_fds() const;
  void _internal_set_resolve_process_fds(bool value);

  public:
  // optional bool scan_smaps_rollup = 10;
  bool has_scan_smaps_rollup() const;
  void clear_scan_smaps_rollup() ;
  bool scan_smaps_rollup() const;
  void set_scan_smaps_rollup(bool value);

  private:
  bool _internal_scan_smaps_rollup() const;
  void _internal_set_scan_smaps_rollup(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessStatsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> quirks_;
    ::uint32_t proc_stats_poll_ms_;
    ::uint32_t proc_stats_cache_ttl_ms_;
    bool scan_all_processes_on_start_;
    bool record_thread_names_;
    bool resolve_process_fds_;
    bool scan_smaps_rollup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessStatsConfig

// repeated .perfetto.protos.ProcessStatsConfig.Quirks quirks = 1;
inline int ProcessStatsConfig::_internal_quirks_size() const {
  return _impl_.quirks_.size();
}
inline int ProcessStatsConfig::quirks_size() const {
  return _internal_quirks_size();
}
inline void ProcessStatsConfig::clear_quirks() {
  _internal_mutable_quirks()->Clear();
}
inline ::perfetto::protos::ProcessStatsConfig_Quirks ProcessStatsConfig::quirks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.quirks)
  return _internal_quirks(index);
}
inline void ProcessStatsConfig::set_quirks(int index, ::perfetto::protos::ProcessStatsConfig_Quirks value) {
  assert(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value));
  _internal_mutable_quirks()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.quirks)
}
inline void ProcessStatsConfig::add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value) {
  _internal_add_quirks(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessStatsConfig.quirks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ProcessStatsConfig::quirks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessStatsConfig.quirks)
  return _internal_quirks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* ProcessStatsConfig::mutable_quirks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessStatsConfig.quirks)
  return _internal_mutable_quirks();
}
inline ::perfetto::protos::ProcessStatsConfig_Quirks ProcessStatsConfig::_internal_quirks(int index) const {
  return static_cast<::perfetto::protos::ProcessStatsConfig_Quirks>(_internal_quirks().Get(index));
}
inline void ProcessStatsConfig::_internal_add_quirks(::perfetto::protos::ProcessStatsConfig_Quirks value) {
  assert(::perfetto::protos::ProcessStatsConfig_Quirks_IsValid(value));
  _internal_mutable_quirks()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ProcessStatsConfig::_internal_quirks() const {
  return _impl_.quirks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* ProcessStatsConfig::_internal_mutable_quirks() {
  return &_impl_.quirks_;
}

// optional bool scan_all_processes_on_start = 2;
inline bool ProcessStatsConfig::has_scan_all_processes_on_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProcessStatsConfig::clear_scan_all_processes_on_start() {
  _impl_.scan_all_processes_on_start_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ProcessStatsConfig::scan_all_processes_on_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.scan_all_processes_on_start)
  return _internal_scan_all_processes_on_start();
}
inline void ProcessStatsConfig::set_scan_all_processes_on_start(bool value) {
  _internal_set_scan_all_processes_on_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.scan_all_processes_on_start)
}
inline bool ProcessStatsConfig::_internal_scan_all_processes_on_start() const {
  return _impl_.scan_all_processes_on_start_;
}
inline void ProcessStatsConfig::_internal_set_scan_all_processes_on_start(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scan_all_processes_on_start_ = value;
}

// optional bool record_thread_names = 3;
inline bool ProcessStatsConfig::has_record_thread_names() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProcessStatsConfig::clear_record_thread_names() {
  _impl_.record_thread_names_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ProcessStatsConfig::record_thread_names() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.record_thread_names)
  return _internal_record_thread_names();
}
inline void ProcessStatsConfig::set_record_thread_names(bool value) {
  _internal_set_record_thread_names(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.record_thread_names)
}
inline bool ProcessStatsConfig::_internal_record_thread_names() const {
  return _impl_.record_thread_names_;
}
inline void ProcessStatsConfig::_internal_set_record_thread_names(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.record_thread_names_ = value;
}

// optional uint32 proc_stats_poll_ms = 4;
inline bool ProcessStatsConfig::has_proc_stats_poll_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProcessStatsConfig::clear_proc_stats_poll_ms() {
  _impl_.proc_stats_poll_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ProcessStatsConfig::proc_stats_poll_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.proc_stats_poll_ms)
  return _internal_proc_stats_poll_ms();
}
inline void ProcessStatsConfig::set_proc_stats_poll_ms(::uint32_t value) {
  _internal_set_proc_stats_poll_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.proc_stats_poll_ms)
}
inline ::uint32_t ProcessStatsConfig::_internal_proc_stats_poll_ms() const {
  return _impl_.proc_stats_poll_ms_;
}
inline void ProcessStatsConfig::_internal_set_proc_stats_poll_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.proc_stats_poll_ms_ = value;
}

// optional uint32 proc_stats_cache_ttl_ms = 6;
inline bool ProcessStatsConfig::has_proc_stats_cache_ttl_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProcessStatsConfig::clear_proc_stats_cache_ttl_ms() {
  _impl_.proc_stats_cache_ttl_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ProcessStatsConfig::proc_stats_cache_ttl_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.proc_stats_cache_ttl_ms)
  return _internal_proc_stats_cache_ttl_ms();
}
inline void ProcessStatsConfig::set_proc_stats_cache_ttl_ms(::uint32_t value) {
  _internal_set_proc_stats_cache_ttl_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.proc_stats_cache_ttl_ms)
}
inline ::uint32_t ProcessStatsConfig::_internal_proc_stats_cache_ttl_ms() const {
  return _impl_.proc_stats_cache_ttl_ms_;
}
inline void ProcessStatsConfig::_internal_set_proc_stats_cache_ttl_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.proc_stats_cache_ttl_ms_ = value;
}

// optional bool resolve_process_fds = 9;
inline bool ProcessStatsConfig::has_resolve_process_fds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ProcessStatsConfig::clear_resolve_process_fds() {
  _impl_.resolve_process_fds_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ProcessStatsConfig::resolve_process_fds() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.resolve_process_fds)
  return _internal_resolve_process_fds();
}
inline void ProcessStatsConfig::set_resolve_process_fds(bool value) {
  _internal_set_resolve_process_fds(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.resolve_process_fds)
}
inline bool ProcessStatsConfig::_internal_resolve_process_fds() const {
  return _impl_.resolve_process_fds_;
}
inline void ProcessStatsConfig::_internal_set_resolve_process_fds(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.resolve_process_fds_ = value;
}

// optional bool scan_smaps_rollup = 10;
inline bool ProcessStatsConfig::has_scan_smaps_rollup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ProcessStatsConfig::clear_scan_smaps_rollup() {
  _impl_.scan_smaps_rollup_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ProcessStatsConfig::scan_smaps_rollup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessStatsConfig.scan_smaps_rollup)
  return _internal_scan_smaps_rollup();
}
inline void ProcessStatsConfig::set_scan_smaps_rollup(bool value) {
  _internal_set_scan_smaps_rollup(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessStatsConfig.scan_smaps_rollup)
}
inline bool ProcessStatsConfig::_internal_scan_smaps_rollup() const {
  return _impl_.scan_smaps_rollup_;
}
inline void ProcessStatsConfig::_internal_set_scan_smaps_rollup(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scan_smaps_rollup_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ProcessStatsConfig_Quirks> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ProcessStatsConfig_Quirks>() {
  return ::perfetto::protos::ProcessStatsConfig_Quirks_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprocess_5fstats_2fprocess_5fstats_5fconfig_2eproto_2epb_2eh
