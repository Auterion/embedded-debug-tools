// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/perf_event_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/common/perf_events.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class PerfEventConfig;
struct PerfEventConfigDefaultTypeInternal;
extern PerfEventConfigDefaultTypeInternal _PerfEventConfig_default_instance_;
class PerfEventConfig_CallstackSampling;
struct PerfEventConfig_CallstackSamplingDefaultTypeInternal;
extern PerfEventConfig_CallstackSamplingDefaultTypeInternal _PerfEventConfig_CallstackSampling_default_instance_;
class PerfEventConfig_Scope;
struct PerfEventConfig_ScopeDefaultTypeInternal;
extern PerfEventConfig_ScopeDefaultTypeInternal _PerfEventConfig_Scope_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::PerfEventConfig* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig>(Arena*);
template <>
::perfetto::protos::PerfEventConfig_CallstackSampling* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_CallstackSampling>(Arena*);
template <>
::perfetto::protos::PerfEventConfig_Scope* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Scope>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum PerfEventConfig_UnwindMode : int {
  PerfEventConfig_UnwindMode_UNWIND_UNKNOWN = 0,
  PerfEventConfig_UnwindMode_UNWIND_SKIP = 1,
  PerfEventConfig_UnwindMode_UNWIND_DWARF = 2,
};

bool PerfEventConfig_UnwindMode_IsValid(int value);
constexpr PerfEventConfig_UnwindMode PerfEventConfig_UnwindMode_UnwindMode_MIN = static_cast<PerfEventConfig_UnwindMode>(0);
constexpr PerfEventConfig_UnwindMode PerfEventConfig_UnwindMode_UnwindMode_MAX = static_cast<PerfEventConfig_UnwindMode>(2);
constexpr int PerfEventConfig_UnwindMode_UnwindMode_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PerfEventConfig_UnwindMode_descriptor();
template <typename T>
const std::string& PerfEventConfig_UnwindMode_Name(T value) {
  static_assert(std::is_same<T, PerfEventConfig_UnwindMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UnwindMode_Name().");
  return PerfEventConfig_UnwindMode_Name(static_cast<PerfEventConfig_UnwindMode>(value));
}
template <>
inline const std::string& PerfEventConfig_UnwindMode_Name(PerfEventConfig_UnwindMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PerfEventConfig_UnwindMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PerfEventConfig_UnwindMode_Parse(absl::string_view name, PerfEventConfig_UnwindMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerfEventConfig_UnwindMode>(
      PerfEventConfig_UnwindMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PerfEventConfig_CallstackSampling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.CallstackSampling) */ {
 public:
  inline PerfEventConfig_CallstackSampling() : PerfEventConfig_CallstackSampling(nullptr) {}
  ~PerfEventConfig_CallstackSampling() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfEventConfig_CallstackSampling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from);
  PerfEventConfig_CallstackSampling(PerfEventConfig_CallstackSampling&& from) noexcept
    : PerfEventConfig_CallstackSampling() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_CallstackSampling& operator=(const PerfEventConfig_CallstackSampling& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_CallstackSampling& operator=(PerfEventConfig_CallstackSampling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfEventConfig_CallstackSampling& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfEventConfig_CallstackSampling* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_CallstackSampling*>(
               &_PerfEventConfig_CallstackSampling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfEventConfig_CallstackSampling& a, PerfEventConfig_CallstackSampling& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_CallstackSampling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfEventConfig_CallstackSampling* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfEventConfig_CallstackSampling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfEventConfig_CallstackSampling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfEventConfig_CallstackSampling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfEventConfig_CallstackSampling& from) {
    PerfEventConfig_CallstackSampling::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfEventConfig_CallstackSampling* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfEventConfig.CallstackSampling";
  }
  protected:
  explicit PerfEventConfig_CallstackSampling(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeFieldNumber = 1,
    kKernelFramesFieldNumber = 2,
    kUserFramesFieldNumber = 3,
  };
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  bool has_scope() const;
  void clear_scope() ;
  const ::perfetto::protos::PerfEventConfig_Scope& scope() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfEventConfig_Scope* release_scope();
  ::perfetto::protos::PerfEventConfig_Scope* mutable_scope();
  void set_allocated_scope(::perfetto::protos::PerfEventConfig_Scope* scope);
  private:
  const ::perfetto::protos::PerfEventConfig_Scope& _internal_scope() const;
  ::perfetto::protos::PerfEventConfig_Scope* _internal_mutable_scope();
  public:
  void unsafe_arena_set_allocated_scope(
      ::perfetto::protos::PerfEventConfig_Scope* scope);
  ::perfetto::protos::PerfEventConfig_Scope* unsafe_arena_release_scope();
  // optional bool kernel_frames = 2;
  bool has_kernel_frames() const;
  void clear_kernel_frames() ;
  bool kernel_frames() const;
  void set_kernel_frames(bool value);

  private:
  bool _internal_kernel_frames() const;
  void _internal_set_kernel_frames(bool value);

  public:
  // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
  bool has_user_frames() const;
  void clear_user_frames() ;
  ::perfetto::protos::PerfEventConfig_UnwindMode user_frames() const;
  void set_user_frames(::perfetto::protos::PerfEventConfig_UnwindMode value);

  private:
  ::perfetto::protos::PerfEventConfig_UnwindMode _internal_user_frames() const;
  void _internal_set_user_frames(::perfetto::protos::PerfEventConfig_UnwindMode value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.CallstackSampling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::PerfEventConfig_Scope* scope_;
    bool kernel_frames_;
    int user_frames_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
};// -------------------------------------------------------------------

class PerfEventConfig_Scope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.Scope) */ {
 public:
  inline PerfEventConfig_Scope() : PerfEventConfig_Scope(nullptr) {}
  ~PerfEventConfig_Scope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfEventConfig_Scope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfEventConfig_Scope(const PerfEventConfig_Scope& from);
  PerfEventConfig_Scope(PerfEventConfig_Scope&& from) noexcept
    : PerfEventConfig_Scope() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_Scope& operator=(const PerfEventConfig_Scope& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_Scope& operator=(PerfEventConfig_Scope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfEventConfig_Scope& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfEventConfig_Scope* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_Scope*>(
               &_PerfEventConfig_Scope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfEventConfig_Scope& a, PerfEventConfig_Scope& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_Scope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfEventConfig_Scope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfEventConfig_Scope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfEventConfig_Scope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfEventConfig_Scope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfEventConfig_Scope& from) {
    PerfEventConfig_Scope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfEventConfig_Scope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfEventConfig.Scope";
  }
  protected:
  explicit PerfEventConfig_Scope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 1,
    kTargetCmdlineFieldNumber = 2,
    kExcludePidFieldNumber = 3,
    kExcludeCmdlineFieldNumber = 4,
    kAdditionalCmdlineCountFieldNumber = 5,
    kProcessShardCountFieldNumber = 6,
  };
  // repeated int32 target_pid = 1;
  int target_pid_size() const;
  private:
  int _internal_target_pid_size() const;

  public:
  void clear_target_pid() ;
  ::int32_t target_pid(int index) const;
  void set_target_pid(int index, ::int32_t value);
  void add_target_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_target_pid();

  private:
  ::int32_t _internal_target_pid(int index) const;
  void _internal_add_target_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_target_pid();

  public:
  // repeated string target_cmdline = 2;
  int target_cmdline_size() const;
  private:
  int _internal_target_cmdline_size() const;

  public:
  void clear_target_cmdline() ;
  const std::string& target_cmdline(int index) const;
  std::string* mutable_target_cmdline(int index);
  void set_target_cmdline(int index, const std::string& value);
  void set_target_cmdline(int index, std::string&& value);
  void set_target_cmdline(int index, const char* value);
  void set_target_cmdline(int index, const char* value, std::size_t size);
  void set_target_cmdline(int index, absl::string_view value);
  std::string* add_target_cmdline();
  void add_target_cmdline(const std::string& value);
  void add_target_cmdline(std::string&& value);
  void add_target_cmdline(const char* value);
  void add_target_cmdline(const char* value, std::size_t size);
  void add_target_cmdline(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_cmdline();

  private:
  const std::string& _internal_target_cmdline(int index) const;
  std::string* _internal_add_target_cmdline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_target_cmdline();

  public:
  // repeated int32 exclude_pid = 3;
  int exclude_pid_size() const;
  private:
  int _internal_exclude_pid_size() const;

  public:
  void clear_exclude_pid() ;
  ::int32_t exclude_pid(int index) const;
  void set_exclude_pid(int index, ::int32_t value);
  void add_exclude_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_exclude_pid();

  private:
  ::int32_t _internal_exclude_pid(int index) const;
  void _internal_add_exclude_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_exclude_pid();

  public:
  // repeated string exclude_cmdline = 4;
  int exclude_cmdline_size() const;
  private:
  int _internal_exclude_cmdline_size() const;

  public:
  void clear_exclude_cmdline() ;
  const std::string& exclude_cmdline(int index) const;
  std::string* mutable_exclude_cmdline(int index);
  void set_exclude_cmdline(int index, const std::string& value);
  void set_exclude_cmdline(int index, std::string&& value);
  void set_exclude_cmdline(int index, const char* value);
  void set_exclude_cmdline(int index, const char* value, std::size_t size);
  void set_exclude_cmdline(int index, absl::string_view value);
  std::string* add_exclude_cmdline();
  void add_exclude_cmdline(const std::string& value);
  void add_exclude_cmdline(std::string&& value);
  void add_exclude_cmdline(const char* value);
  void add_exclude_cmdline(const char* value, std::size_t size);
  void add_exclude_cmdline(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_cmdline();

  private:
  const std::string& _internal_exclude_cmdline(int index) const;
  std::string* _internal_add_exclude_cmdline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_exclude_cmdline();

  public:
  // optional uint32 additional_cmdline_count = 5;
  bool has_additional_cmdline_count() const;
  void clear_additional_cmdline_count() ;
  ::uint32_t additional_cmdline_count() const;
  void set_additional_cmdline_count(::uint32_t value);

  private:
  ::uint32_t _internal_additional_cmdline_count() const;
  void _internal_set_additional_cmdline_count(::uint32_t value);

  public:
  // optional uint32 process_shard_count = 6;
  bool has_process_shard_count() const;
  void clear_process_shard_count() ;
  ::uint32_t process_shard_count() const;
  void set_process_shard_count(::uint32_t value);

  private:
  ::uint32_t _internal_process_shard_count() const;
  void _internal_set_process_shard_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.Scope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> target_pid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_cmdline_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> exclude_pid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_cmdline_;
    ::uint32_t additional_cmdline_count_;
    ::uint32_t process_shard_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
};// -------------------------------------------------------------------

class PerfEventConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig) */ {
 public:
  inline PerfEventConfig() : PerfEventConfig(nullptr) {}
  ~PerfEventConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfEventConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfEventConfig(const PerfEventConfig& from);
  PerfEventConfig(PerfEventConfig&& from) noexcept
    : PerfEventConfig() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig& operator=(const PerfEventConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig& operator=(PerfEventConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfEventConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfEventConfig* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig*>(
               &_PerfEventConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerfEventConfig& a, PerfEventConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfEventConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfEventConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfEventConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfEventConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfEventConfig& from) {
    PerfEventConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfEventConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfEventConfig";
  }
  protected:
  explicit PerfEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerfEventConfig_CallstackSampling CallstackSampling;
  typedef PerfEventConfig_Scope Scope;

  using UnwindMode = PerfEventConfig_UnwindMode;
  static constexpr UnwindMode UNWIND_UNKNOWN = PerfEventConfig_UnwindMode_UNWIND_UNKNOWN;
  static constexpr UnwindMode UNWIND_SKIP = PerfEventConfig_UnwindMode_UNWIND_SKIP;
  static constexpr UnwindMode UNWIND_DWARF = PerfEventConfig_UnwindMode_UNWIND_DWARF;
  static inline bool UnwindMode_IsValid(int value) {
    return PerfEventConfig_UnwindMode_IsValid(value);
  }
  static constexpr UnwindMode UnwindMode_MIN = PerfEventConfig_UnwindMode_UnwindMode_MIN;
  static constexpr UnwindMode UnwindMode_MAX = PerfEventConfig_UnwindMode_UnwindMode_MAX;
  static constexpr int UnwindMode_ARRAYSIZE = PerfEventConfig_UnwindMode_UnwindMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnwindMode_descriptor() {
    return PerfEventConfig_UnwindMode_descriptor();
  }
  template <typename T>
  static inline const std::string& UnwindMode_Name(T value) {
    return PerfEventConfig_UnwindMode_Name(value);
  }
  static inline bool UnwindMode_Parse(absl::string_view name, UnwindMode* value) {
    return PerfEventConfig_UnwindMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 4,
    kTargetCmdlineFieldNumber = 5,
    kExcludePidFieldNumber = 6,
    kExcludeCmdlineFieldNumber = 7,
    kTargetInstalledByFieldNumber = 18,
    kTimebaseFieldNumber = 15,
    kCallstackSamplingFieldNumber = 16,
    kSamplingFrequencyFieldNumber = 2,
    kRingBufferPagesFieldNumber = 3,
    kAllCpusFieldNumber = 1,
    kKernelFramesFieldNumber = 12,
    kRingBufferReadPeriodMsFieldNumber = 8,
    kRemoteDescriptorTimeoutMsFieldNumber = 9,
    kUnwindStateClearPeriodMsFieldNumber = 10,
    kAdditionalCmdlineCountFieldNumber = 11,
    kMaxDaemonMemoryKbFieldNumber = 13,
    kMaxEnqueuedFootprintKbFieldNumber = 17,
  };
  // repeated int32 target_pid = 4;
  int target_pid_size() const;
  private:
  int _internal_target_pid_size() const;

  public:
  void clear_target_pid() ;
  ::int32_t target_pid(int index) const;
  void set_target_pid(int index, ::int32_t value);
  void add_target_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_target_pid();

  private:
  ::int32_t _internal_target_pid(int index) const;
  void _internal_add_target_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_target_pid();

  public:
  // repeated string target_cmdline = 5;
  int target_cmdline_size() const;
  private:
  int _internal_target_cmdline_size() const;

  public:
  void clear_target_cmdline() ;
  const std::string& target_cmdline(int index) const;
  std::string* mutable_target_cmdline(int index);
  void set_target_cmdline(int index, const std::string& value);
  void set_target_cmdline(int index, std::string&& value);
  void set_target_cmdline(int index, const char* value);
  void set_target_cmdline(int index, const char* value, std::size_t size);
  void set_target_cmdline(int index, absl::string_view value);
  std::string* add_target_cmdline();
  void add_target_cmdline(const std::string& value);
  void add_target_cmdline(std::string&& value);
  void add_target_cmdline(const char* value);
  void add_target_cmdline(const char* value, std::size_t size);
  void add_target_cmdline(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_cmdline();

  private:
  const std::string& _internal_target_cmdline(int index) const;
  std::string* _internal_add_target_cmdline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_target_cmdline();

  public:
  // repeated int32 exclude_pid = 6;
  int exclude_pid_size() const;
  private:
  int _internal_exclude_pid_size() const;

  public:
  void clear_exclude_pid() ;
  ::int32_t exclude_pid(int index) const;
  void set_exclude_pid(int index, ::int32_t value);
  void add_exclude_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_exclude_pid();

  private:
  ::int32_t _internal_exclude_pid(int index) const;
  void _internal_add_exclude_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_exclude_pid();

  public:
  // repeated string exclude_cmdline = 7;
  int exclude_cmdline_size() const;
  private:
  int _internal_exclude_cmdline_size() const;

  public:
  void clear_exclude_cmdline() ;
  const std::string& exclude_cmdline(int index) const;
  std::string* mutable_exclude_cmdline(int index);
  void set_exclude_cmdline(int index, const std::string& value);
  void set_exclude_cmdline(int index, std::string&& value);
  void set_exclude_cmdline(int index, const char* value);
  void set_exclude_cmdline(int index, const char* value, std::size_t size);
  void set_exclude_cmdline(int index, absl::string_view value);
  std::string* add_exclude_cmdline();
  void add_exclude_cmdline(const std::string& value);
  void add_exclude_cmdline(std::string&& value);
  void add_exclude_cmdline(const char* value);
  void add_exclude_cmdline(const char* value, std::size_t size);
  void add_exclude_cmdline(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_cmdline();

  private:
  const std::string& _internal_exclude_cmdline(int index) const;
  std::string* _internal_add_exclude_cmdline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_exclude_cmdline();

  public:
  // repeated string target_installed_by = 18;
  int target_installed_by_size() const;
  private:
  int _internal_target_installed_by_size() const;

  public:
  void clear_target_installed_by() ;
  const std::string& target_installed_by(int index) const;
  std::string* mutable_target_installed_by(int index);
  void set_target_installed_by(int index, const std::string& value);
  void set_target_installed_by(int index, std::string&& value);
  void set_target_installed_by(int index, const char* value);
  void set_target_installed_by(int index, const char* value, std::size_t size);
  void set_target_installed_by(int index, absl::string_view value);
  std::string* add_target_installed_by();
  void add_target_installed_by(const std::string& value);
  void add_target_installed_by(std::string&& value);
  void add_target_installed_by(const char* value);
  void add_target_installed_by(const char* value, std::size_t size);
  void add_target_installed_by(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_installed_by() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_installed_by();

  private:
  const std::string& _internal_target_installed_by(int index) const;
  std::string* _internal_add_target_installed_by();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_target_installed_by() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_target_installed_by();

  public:
  // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
  bool has_timebase() const;
  void clear_timebase() ;
  const ::perfetto::protos::PerfEvents_Timebase& timebase() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfEvents_Timebase* release_timebase();
  ::perfetto::protos::PerfEvents_Timebase* mutable_timebase();
  void set_allocated_timebase(::perfetto::protos::PerfEvents_Timebase* timebase);
  private:
  const ::perfetto::protos::PerfEvents_Timebase& _internal_timebase() const;
  ::perfetto::protos::PerfEvents_Timebase* _internal_mutable_timebase();
  public:
  void unsafe_arena_set_allocated_timebase(
      ::perfetto::protos::PerfEvents_Timebase* timebase);
  ::perfetto::protos::PerfEvents_Timebase* unsafe_arena_release_timebase();
  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  bool has_callstack_sampling() const;
  void clear_callstack_sampling() ;
  const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfEventConfig_CallstackSampling* release_callstack_sampling();
  ::perfetto::protos::PerfEventConfig_CallstackSampling* mutable_callstack_sampling();
  void set_allocated_callstack_sampling(::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling);
  private:
  const ::perfetto::protos::PerfEventConfig_CallstackSampling& _internal_callstack_sampling() const;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* _internal_mutable_callstack_sampling();
  public:
  void unsafe_arena_set_allocated_callstack_sampling(
      ::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling);
  ::perfetto::protos::PerfEventConfig_CallstackSampling* unsafe_arena_release_callstack_sampling();
  // optional uint32 sampling_frequency = 2;
  bool has_sampling_frequency() const;
  void clear_sampling_frequency() ;
  ::uint32_t sampling_frequency() const;
  void set_sampling_frequency(::uint32_t value);

  private:
  ::uint32_t _internal_sampling_frequency() const;
  void _internal_set_sampling_frequency(::uint32_t value);

  public:
  // optional uint32 ring_buffer_pages = 3;
  bool has_ring_buffer_pages() const;
  void clear_ring_buffer_pages() ;
  ::uint32_t ring_buffer_pages() const;
  void set_ring_buffer_pages(::uint32_t value);

  private:
  ::uint32_t _internal_ring_buffer_pages() const;
  void _internal_set_ring_buffer_pages(::uint32_t value);

  public:
  // optional bool all_cpus = 1;
  bool has_all_cpus() const;
  void clear_all_cpus() ;
  bool all_cpus() const;
  void set_all_cpus(bool value);

  private:
  bool _internal_all_cpus() const;
  void _internal_set_all_cpus(bool value);

  public:
  // optional bool kernel_frames = 12;
  bool has_kernel_frames() const;
  void clear_kernel_frames() ;
  bool kernel_frames() const;
  void set_kernel_frames(bool value);

  private:
  bool _internal_kernel_frames() const;
  void _internal_set_kernel_frames(bool value);

  public:
  // optional uint32 ring_buffer_read_period_ms = 8;
  bool has_ring_buffer_read_period_ms() const;
  void clear_ring_buffer_read_period_ms() ;
  ::uint32_t ring_buffer_read_period_ms() const;
  void set_ring_buffer_read_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_ring_buffer_read_period_ms() const;
  void _internal_set_ring_buffer_read_period_ms(::uint32_t value);

  public:
  // optional uint32 remote_descriptor_timeout_ms = 9;
  bool has_remote_descriptor_timeout_ms() const;
  void clear_remote_descriptor_timeout_ms() ;
  ::uint32_t remote_descriptor_timeout_ms() const;
  void set_remote_descriptor_timeout_ms(::uint32_t value);

  private:
  ::uint32_t _internal_remote_descriptor_timeout_ms() const;
  void _internal_set_remote_descriptor_timeout_ms(::uint32_t value);

  public:
  // optional uint32 unwind_state_clear_period_ms = 10;
  bool has_unwind_state_clear_period_ms() const;
  void clear_unwind_state_clear_period_ms() ;
  ::uint32_t unwind_state_clear_period_ms() const;
  void set_unwind_state_clear_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_unwind_state_clear_period_ms() const;
  void _internal_set_unwind_state_clear_period_ms(::uint32_t value);

  public:
  // optional uint32 additional_cmdline_count = 11;
  bool has_additional_cmdline_count() const;
  void clear_additional_cmdline_count() ;
  ::uint32_t additional_cmdline_count() const;
  void set_additional_cmdline_count(::uint32_t value);

  private:
  ::uint32_t _internal_additional_cmdline_count() const;
  void _internal_set_additional_cmdline_count(::uint32_t value);

  public:
  // optional uint32 max_daemon_memory_kb = 13;
  bool has_max_daemon_memory_kb() const;
  void clear_max_daemon_memory_kb() ;
  ::uint32_t max_daemon_memory_kb() const;
  void set_max_daemon_memory_kb(::uint32_t value);

  private:
  ::uint32_t _internal_max_daemon_memory_kb() const;
  void _internal_set_max_daemon_memory_kb(::uint32_t value);

  public:
  // optional uint64 max_enqueued_footprint_kb = 17;
  bool has_max_enqueued_footprint_kb() const;
  void clear_max_enqueued_footprint_kb() ;
  ::uint64_t max_enqueued_footprint_kb() const;
  void set_max_enqueued_footprint_kb(::uint64_t value);

  private:
  ::uint64_t _internal_max_enqueued_footprint_kb() const;
  void _internal_set_max_enqueued_footprint_kb(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> target_pid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_cmdline_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> exclude_pid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_cmdline_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_installed_by_;
    ::perfetto::protos::PerfEvents_Timebase* timebase_;
    ::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling_;
    ::uint32_t sampling_frequency_;
    ::uint32_t ring_buffer_pages_;
    bool all_cpus_;
    bool kernel_frames_;
    ::uint32_t ring_buffer_read_period_ms_;
    ::uint32_t remote_descriptor_timeout_ms_;
    ::uint32_t unwind_state_clear_period_ms_;
    ::uint32_t additional_cmdline_count_;
    ::uint32_t max_daemon_memory_kb_;
    ::uint64_t max_enqueued_footprint_kb_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PerfEventConfig_CallstackSampling

// optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
inline bool PerfEventConfig_CallstackSampling::has_scope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scope_ != nullptr);
  return value;
}
inline void PerfEventConfig_CallstackSampling::clear_scope() {
  if (_impl_.scope_ != nullptr) _impl_.scope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::PerfEventConfig_Scope& PerfEventConfig_CallstackSampling::_internal_scope() const {
  const ::perfetto::protos::PerfEventConfig_Scope* p = _impl_.scope_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PerfEventConfig_Scope&>(
      ::perfetto::protos::_PerfEventConfig_Scope_default_instance_);
}
inline const ::perfetto::protos::PerfEventConfig_Scope& PerfEventConfig_CallstackSampling::scope() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  return _internal_scope();
}
inline void PerfEventConfig_CallstackSampling::unsafe_arena_set_allocated_scope(
    ::perfetto::protos::PerfEventConfig_Scope* scope) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scope_);
  }
  _impl_.scope_ = scope;
  if (scope) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::release_scope() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEventConfig_Scope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::unsafe_arena_release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEventConfig_Scope* temp = _impl_.scope_;
  _impl_.scope_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::_internal_mutable_scope() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scope_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Scope>(GetArenaForAllocation());
    _impl_.scope_ = p;
  }
  return _impl_.scope_;
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::mutable_scope() {
  ::perfetto::protos::PerfEventConfig_Scope* _msg = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  return _msg;
}
inline void PerfEventConfig_CallstackSampling::set_allocated_scope(::perfetto::protos::PerfEventConfig_Scope* scope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scope_;
  }
  if (scope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scope);
    if (message_arena != submessage_arena) {
      scope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
}

// optional bool kernel_frames = 2;
inline bool PerfEventConfig_CallstackSampling::has_kernel_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PerfEventConfig_CallstackSampling::clear_kernel_frames() {
  _impl_.kernel_frames_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PerfEventConfig_CallstackSampling::kernel_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.kernel_frames)
  return _internal_kernel_frames();
}
inline void PerfEventConfig_CallstackSampling::set_kernel_frames(bool value) {
  _internal_set_kernel_frames(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.CallstackSampling.kernel_frames)
}
inline bool PerfEventConfig_CallstackSampling::_internal_kernel_frames() const {
  return _impl_.kernel_frames_;
}
inline void PerfEventConfig_CallstackSampling::_internal_set_kernel_frames(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kernel_frames_ = value;
}

// optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
inline bool PerfEventConfig_CallstackSampling::has_user_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PerfEventConfig_CallstackSampling::clear_user_frames() {
  _impl_.user_frames_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::PerfEventConfig_UnwindMode PerfEventConfig_CallstackSampling::user_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.user_frames)
  return _internal_user_frames();
}
inline void PerfEventConfig_CallstackSampling::set_user_frames(::perfetto::protos::PerfEventConfig_UnwindMode value) {
   _internal_set_user_frames(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.CallstackSampling.user_frames)
}
inline ::perfetto::protos::PerfEventConfig_UnwindMode PerfEventConfig_CallstackSampling::_internal_user_frames() const {
  return static_cast<::perfetto::protos::PerfEventConfig_UnwindMode>(_impl_.user_frames_);
}
inline void PerfEventConfig_CallstackSampling::_internal_set_user_frames(::perfetto::protos::PerfEventConfig_UnwindMode value) {
  assert(::perfetto::protos::PerfEventConfig_UnwindMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_frames_ = value;
}

// -------------------------------------------------------------------

// PerfEventConfig_Scope

// repeated int32 target_pid = 1;
inline int PerfEventConfig_Scope::_internal_target_pid_size() const {
  return _impl_.target_pid_.size();
}
inline int PerfEventConfig_Scope::target_pid_size() const {
  return _internal_target_pid_size();
}
inline void PerfEventConfig_Scope::clear_target_pid() {
  _internal_mutable_target_pid()->Clear();
}
inline ::int32_t PerfEventConfig_Scope::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return _internal_target_pid(index);
}
inline void PerfEventConfig_Scope::set_target_pid(int index, ::int32_t value) {
  _internal_mutable_target_pid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_pid)
}
inline void PerfEventConfig_Scope::add_target_pid(::int32_t value) {
  _internal_add_target_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig_Scope::target_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return _internal_target_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig_Scope::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return _internal_mutable_target_pid();
}

inline ::int32_t PerfEventConfig_Scope::_internal_target_pid(int index) const {
  return _internal_target_pid().Get(index);
}
inline void PerfEventConfig_Scope::_internal_add_target_pid(::int32_t value) {
  _internal_mutable_target_pid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig_Scope::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig_Scope::_internal_mutable_target_pid() {
  return &_impl_.target_pid_;
}

// repeated string target_cmdline = 2;
inline int PerfEventConfig_Scope::_internal_target_cmdline_size() const {
  return _impl_.target_cmdline_.size();
}
inline int PerfEventConfig_Scope::target_cmdline_size() const {
  return _internal_target_cmdline_size();
}
inline void PerfEventConfig_Scope::clear_target_cmdline() {
  _internal_mutable_target_cmdline()->Clear();
}
inline std::string* PerfEventConfig_Scope::add_target_cmdline() {
  std::string* _s = _internal_add_target_cmdline();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return _s;
}
inline const std::string& PerfEventConfig_Scope::target_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return _internal_target_cmdline(index);
}
inline std::string* PerfEventConfig_Scope::mutable_target_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return _internal_mutable_target_cmdline()->Mutable(index);
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const std::string& value) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, std::string&& value) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, absl::string_view value) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const std::string& value) {
  _internal_mutable_target_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(std::string&& value) {
  _internal_mutable_target_cmdline()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const char* value, std::size_t size) {
  _internal_mutable_target_cmdline()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(absl::string_view value) {
  _internal_mutable_target_cmdline()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::target_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return _internal_target_cmdline();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PerfEventConfig_Scope::mutable_target_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return _internal_mutable_target_cmdline();
}
inline const std::string& PerfEventConfig_Scope::_internal_target_cmdline(int index) const {
  return _internal_target_cmdline().Get(index);
}
inline std::string* PerfEventConfig_Scope::_internal_add_target_cmdline() {
  return _internal_mutable_target_cmdline()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::_internal_target_cmdline() const {
  return _impl_.target_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig_Scope::_internal_mutable_target_cmdline() {
  return &_impl_.target_cmdline_;
}

// repeated int32 exclude_pid = 3;
inline int PerfEventConfig_Scope::_internal_exclude_pid_size() const {
  return _impl_.exclude_pid_.size();
}
inline int PerfEventConfig_Scope::exclude_pid_size() const {
  return _internal_exclude_pid_size();
}
inline void PerfEventConfig_Scope::clear_exclude_pid() {
  _internal_mutable_exclude_pid()->Clear();
}
inline ::int32_t PerfEventConfig_Scope::exclude_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return _internal_exclude_pid(index);
}
inline void PerfEventConfig_Scope::set_exclude_pid(int index, ::int32_t value) {
  _internal_mutable_exclude_pid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
}
inline void PerfEventConfig_Scope::add_exclude_pid(::int32_t value) {
  _internal_add_exclude_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig_Scope::exclude_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return _internal_exclude_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig_Scope::mutable_exclude_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return _internal_mutable_exclude_pid();
}

inline ::int32_t PerfEventConfig_Scope::_internal_exclude_pid(int index) const {
  return _internal_exclude_pid().Get(index);
}
inline void PerfEventConfig_Scope::_internal_add_exclude_pid(::int32_t value) {
  _internal_mutable_exclude_pid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig_Scope::_internal_exclude_pid() const {
  return _impl_.exclude_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig_Scope::_internal_mutable_exclude_pid() {
  return &_impl_.exclude_pid_;
}

// repeated string exclude_cmdline = 4;
inline int PerfEventConfig_Scope::_internal_exclude_cmdline_size() const {
  return _impl_.exclude_cmdline_.size();
}
inline int PerfEventConfig_Scope::exclude_cmdline_size() const {
  return _internal_exclude_cmdline_size();
}
inline void PerfEventConfig_Scope::clear_exclude_cmdline() {
  _internal_mutable_exclude_cmdline()->Clear();
}
inline std::string* PerfEventConfig_Scope::add_exclude_cmdline() {
  std::string* _s = _internal_add_exclude_cmdline();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return _s;
}
inline const std::string& PerfEventConfig_Scope::exclude_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return _internal_exclude_cmdline(index);
}
inline std::string* PerfEventConfig_Scope::mutable_exclude_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return _internal_mutable_exclude_cmdline()->Mutable(index);
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const std::string& value) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, std::string&& value) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, absl::string_view value) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const std::string& value) {
  _internal_mutable_exclude_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(std::string&& value) {
  _internal_mutable_exclude_cmdline()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_exclude_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const char* value, std::size_t size) {
  _internal_mutable_exclude_cmdline()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(absl::string_view value) {
  _internal_mutable_exclude_cmdline()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::exclude_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return _internal_exclude_cmdline();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PerfEventConfig_Scope::mutable_exclude_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return _internal_mutable_exclude_cmdline();
}
inline const std::string& PerfEventConfig_Scope::_internal_exclude_cmdline(int index) const {
  return _internal_exclude_cmdline().Get(index);
}
inline std::string* PerfEventConfig_Scope::_internal_add_exclude_cmdline() {
  return _internal_mutable_exclude_cmdline()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::_internal_exclude_cmdline() const {
  return _impl_.exclude_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig_Scope::_internal_mutable_exclude_cmdline() {
  return &_impl_.exclude_cmdline_;
}

// optional uint32 additional_cmdline_count = 5;
inline bool PerfEventConfig_Scope::has_additional_cmdline_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PerfEventConfig_Scope::clear_additional_cmdline_count() {
  _impl_.additional_cmdline_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t PerfEventConfig_Scope::additional_cmdline_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.additional_cmdline_count)
  return _internal_additional_cmdline_count();
}
inline void PerfEventConfig_Scope::set_additional_cmdline_count(::uint32_t value) {
  _internal_set_additional_cmdline_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.additional_cmdline_count)
}
inline ::uint32_t PerfEventConfig_Scope::_internal_additional_cmdline_count() const {
  return _impl_.additional_cmdline_count_;
}
inline void PerfEventConfig_Scope::_internal_set_additional_cmdline_count(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.additional_cmdline_count_ = value;
}

// optional uint32 process_shard_count = 6;
inline bool PerfEventConfig_Scope::has_process_shard_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PerfEventConfig_Scope::clear_process_shard_count() {
  _impl_.process_shard_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PerfEventConfig_Scope::process_shard_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.process_shard_count)
  return _internal_process_shard_count();
}
inline void PerfEventConfig_Scope::set_process_shard_count(::uint32_t value) {
  _internal_set_process_shard_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.process_shard_count)
}
inline ::uint32_t PerfEventConfig_Scope::_internal_process_shard_count() const {
  return _impl_.process_shard_count_;
}
inline void PerfEventConfig_Scope::_internal_set_process_shard_count(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.process_shard_count_ = value;
}

// -------------------------------------------------------------------

// PerfEventConfig

// optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
inline bool PerfEventConfig::has_timebase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timebase_ != nullptr);
  return value;
}
inline const ::perfetto::protos::PerfEvents_Timebase& PerfEventConfig::_internal_timebase() const {
  const ::perfetto::protos::PerfEvents_Timebase* p = _impl_.timebase_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PerfEvents_Timebase&>(
      ::perfetto::protos::_PerfEvents_Timebase_default_instance_);
}
inline const ::perfetto::protos::PerfEvents_Timebase& PerfEventConfig::timebase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.timebase)
  return _internal_timebase();
}
inline void PerfEventConfig::unsafe_arena_set_allocated_timebase(
    ::perfetto::protos::PerfEvents_Timebase* timebase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timebase_);
  }
  _impl_.timebase_ = timebase;
  if (timebase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.PerfEventConfig.timebase)
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfEventConfig::release_timebase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEvents_Timebase* temp = _impl_.timebase_;
  _impl_.timebase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfEventConfig::unsafe_arena_release_timebase() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.timebase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEvents_Timebase* temp = _impl_.timebase_;
  _impl_.timebase_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfEventConfig::_internal_mutable_timebase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timebase_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEvents_Timebase>(GetArenaForAllocation());
    _impl_.timebase_ = p;
  }
  return _impl_.timebase_;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfEventConfig::mutable_timebase() {
  ::perfetto::protos::PerfEvents_Timebase* _msg = _internal_mutable_timebase();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.timebase)
  return _msg;
}
inline void PerfEventConfig::set_allocated_timebase(::perfetto::protos::PerfEvents_Timebase* timebase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timebase_);
  }
  if (timebase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timebase));
    if (message_arena != submessage_arena) {
      timebase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timebase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timebase_ = timebase;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.timebase)
}

// optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
inline bool PerfEventConfig::has_callstack_sampling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.callstack_sampling_ != nullptr);
  return value;
}
inline void PerfEventConfig::clear_callstack_sampling() {
  if (_impl_.callstack_sampling_ != nullptr) _impl_.callstack_sampling_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::PerfEventConfig_CallstackSampling& PerfEventConfig::_internal_callstack_sampling() const {
  const ::perfetto::protos::PerfEventConfig_CallstackSampling* p = _impl_.callstack_sampling_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PerfEventConfig_CallstackSampling&>(
      ::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_);
}
inline const ::perfetto::protos::PerfEventConfig_CallstackSampling& PerfEventConfig::callstack_sampling() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.callstack_sampling)
  return _internal_callstack_sampling();
}
inline void PerfEventConfig::unsafe_arena_set_allocated_callstack_sampling(
    ::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callstack_sampling_);
  }
  _impl_.callstack_sampling_ = callstack_sampling;
  if (callstack_sampling) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.PerfEventConfig.callstack_sampling)
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::release_callstack_sampling() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* temp = _impl_.callstack_sampling_;
  _impl_.callstack_sampling_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::unsafe_arena_release_callstack_sampling() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.callstack_sampling)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* temp = _impl_.callstack_sampling_;
  _impl_.callstack_sampling_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::_internal_mutable_callstack_sampling() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.callstack_sampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_CallstackSampling>(GetArenaForAllocation());
    _impl_.callstack_sampling_ = p;
  }
  return _impl_.callstack_sampling_;
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::mutable_callstack_sampling() {
  ::perfetto::protos::PerfEventConfig_CallstackSampling* _msg = _internal_mutable_callstack_sampling();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.callstack_sampling)
  return _msg;
}
inline void PerfEventConfig::set_allocated_callstack_sampling(::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.callstack_sampling_;
  }
  if (callstack_sampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callstack_sampling);
    if (message_arena != submessage_arena) {
      callstack_sampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callstack_sampling, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.callstack_sampling_ = callstack_sampling;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.callstack_sampling)
}

// optional uint32 ring_buffer_read_period_ms = 8;
inline bool PerfEventConfig::has_ring_buffer_read_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PerfEventConfig::clear_ring_buffer_read_period_ms() {
  _impl_.ring_buffer_read_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t PerfEventConfig::ring_buffer_read_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.ring_buffer_read_period_ms)
  return _internal_ring_buffer_read_period_ms();
}
inline void PerfEventConfig::set_ring_buffer_read_period_ms(::uint32_t value) {
  _internal_set_ring_buffer_read_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.ring_buffer_read_period_ms)
}
inline ::uint32_t PerfEventConfig::_internal_ring_buffer_read_period_ms() const {
  return _impl_.ring_buffer_read_period_ms_;
}
inline void PerfEventConfig::_internal_set_ring_buffer_read_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ring_buffer_read_period_ms_ = value;
}

// optional uint32 ring_buffer_pages = 3;
inline bool PerfEventConfig::has_ring_buffer_pages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PerfEventConfig::clear_ring_buffer_pages() {
  _impl_.ring_buffer_pages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t PerfEventConfig::ring_buffer_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.ring_buffer_pages)
  return _internal_ring_buffer_pages();
}
inline void PerfEventConfig::set_ring_buffer_pages(::uint32_t value) {
  _internal_set_ring_buffer_pages(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.ring_buffer_pages)
}
inline ::uint32_t PerfEventConfig::_internal_ring_buffer_pages() const {
  return _impl_.ring_buffer_pages_;
}
inline void PerfEventConfig::_internal_set_ring_buffer_pages(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ring_buffer_pages_ = value;
}

// optional uint64 max_enqueued_footprint_kb = 17;
inline bool PerfEventConfig::has_max_enqueued_footprint_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void PerfEventConfig::clear_max_enqueued_footprint_kb() {
  _impl_.max_enqueued_footprint_kb_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t PerfEventConfig::max_enqueued_footprint_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.max_enqueued_footprint_kb)
  return _internal_max_enqueued_footprint_kb();
}
inline void PerfEventConfig::set_max_enqueued_footprint_kb(::uint64_t value) {
  _internal_set_max_enqueued_footprint_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.max_enqueued_footprint_kb)
}
inline ::uint64_t PerfEventConfig::_internal_max_enqueued_footprint_kb() const {
  return _impl_.max_enqueued_footprint_kb_;
}
inline void PerfEventConfig::_internal_set_max_enqueued_footprint_kb(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.max_enqueued_footprint_kb_ = value;
}

// optional uint32 max_daemon_memory_kb = 13;
inline bool PerfEventConfig::has_max_daemon_memory_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void PerfEventConfig::clear_max_daemon_memory_kb() {
  _impl_.max_daemon_memory_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t PerfEventConfig::max_daemon_memory_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.max_daemon_memory_kb)
  return _internal_max_daemon_memory_kb();
}
inline void PerfEventConfig::set_max_daemon_memory_kb(::uint32_t value) {
  _internal_set_max_daemon_memory_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.max_daemon_memory_kb)
}
inline ::uint32_t PerfEventConfig::_internal_max_daemon_memory_kb() const {
  return _impl_.max_daemon_memory_kb_;
}
inline void PerfEventConfig::_internal_set_max_daemon_memory_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.max_daemon_memory_kb_ = value;
}

// optional uint32 remote_descriptor_timeout_ms = 9;
inline bool PerfEventConfig::has_remote_descriptor_timeout_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PerfEventConfig::clear_remote_descriptor_timeout_ms() {
  _impl_.remote_descriptor_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t PerfEventConfig::remote_descriptor_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.remote_descriptor_timeout_ms)
  return _internal_remote_descriptor_timeout_ms();
}
inline void PerfEventConfig::set_remote_descriptor_timeout_ms(::uint32_t value) {
  _internal_set_remote_descriptor_timeout_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.remote_descriptor_timeout_ms)
}
inline ::uint32_t PerfEventConfig::_internal_remote_descriptor_timeout_ms() const {
  return _impl_.remote_descriptor_timeout_ms_;
}
inline void PerfEventConfig::_internal_set_remote_descriptor_timeout_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.remote_descriptor_timeout_ms_ = value;
}

// optional uint32 unwind_state_clear_period_ms = 10;
inline bool PerfEventConfig::has_unwind_state_clear_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PerfEventConfig::clear_unwind_state_clear_period_ms() {
  _impl_.unwind_state_clear_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t PerfEventConfig::unwind_state_clear_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.unwind_state_clear_period_ms)
  return _internal_unwind_state_clear_period_ms();
}
inline void PerfEventConfig::set_unwind_state_clear_period_ms(::uint32_t value) {
  _internal_set_unwind_state_clear_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.unwind_state_clear_period_ms)
}
inline ::uint32_t PerfEventConfig::_internal_unwind_state_clear_period_ms() const {
  return _impl_.unwind_state_clear_period_ms_;
}
inline void PerfEventConfig::_internal_set_unwind_state_clear_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.unwind_state_clear_period_ms_ = value;
}

// repeated string target_installed_by = 18;
inline int PerfEventConfig::_internal_target_installed_by_size() const {
  return _impl_.target_installed_by_.size();
}
inline int PerfEventConfig::target_installed_by_size() const {
  return _internal_target_installed_by_size();
}
inline void PerfEventConfig::clear_target_installed_by() {
  _internal_mutable_target_installed_by()->Clear();
}
inline std::string* PerfEventConfig::add_target_installed_by() {
  std::string* _s = _internal_add_target_installed_by();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.target_installed_by)
  return _s;
}
inline const std::string& PerfEventConfig::target_installed_by(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_installed_by)
  return _internal_target_installed_by(index);
}
inline std::string* PerfEventConfig::mutable_target_installed_by(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.target_installed_by)
  return _internal_mutable_target_installed_by()->Mutable(index);
}
inline void PerfEventConfig::set_target_installed_by(int index, const std::string& value) {
  _internal_mutable_target_installed_by()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::set_target_installed_by(int index, std::string&& value) {
  _internal_mutable_target_installed_by()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::set_target_installed_by(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target_installed_by()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::set_target_installed_by(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_target_installed_by()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::set_target_installed_by(int index, absl::string_view value) {
  _internal_mutable_target_installed_by()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(const std::string& value) {
  _internal_mutable_target_installed_by()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(std::string&& value) {
  _internal_mutable_target_installed_by()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target_installed_by()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(const char* value, std::size_t size) {
  _internal_mutable_target_installed_by()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(absl::string_view value) {
  _internal_mutable_target_installed_by()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::target_installed_by() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_installed_by)
  return _internal_target_installed_by();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PerfEventConfig::mutable_target_installed_by() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_installed_by)
  return _internal_mutable_target_installed_by();
}
inline const std::string& PerfEventConfig::_internal_target_installed_by(int index) const {
  return _internal_target_installed_by().Get(index);
}
inline std::string* PerfEventConfig::_internal_add_target_installed_by() {
  return _internal_mutable_target_installed_by()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::_internal_target_installed_by() const {
  return _impl_.target_installed_by_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::_internal_mutable_target_installed_by() {
  return &_impl_.target_installed_by_;
}

// optional bool all_cpus = 1;
inline bool PerfEventConfig::has_all_cpus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PerfEventConfig::clear_all_cpus() {
  _impl_.all_cpus_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool PerfEventConfig::all_cpus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.all_cpus)
  return _internal_all_cpus();
}
inline void PerfEventConfig::set_all_cpus(bool value) {
  _internal_set_all_cpus(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.all_cpus)
}
inline bool PerfEventConfig::_internal_all_cpus() const {
  return _impl_.all_cpus_;
}
inline void PerfEventConfig::_internal_set_all_cpus(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.all_cpus_ = value;
}

// optional uint32 sampling_frequency = 2;
inline bool PerfEventConfig::has_sampling_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PerfEventConfig::clear_sampling_frequency() {
  _impl_.sampling_frequency_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PerfEventConfig::sampling_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.sampling_frequency)
  return _internal_sampling_frequency();
}
inline void PerfEventConfig::set_sampling_frequency(::uint32_t value) {
  _internal_set_sampling_frequency(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.sampling_frequency)
}
inline ::uint32_t PerfEventConfig::_internal_sampling_frequency() const {
  return _impl_.sampling_frequency_;
}
inline void PerfEventConfig::_internal_set_sampling_frequency(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sampling_frequency_ = value;
}

// optional bool kernel_frames = 12;
inline bool PerfEventConfig::has_kernel_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PerfEventConfig::clear_kernel_frames() {
  _impl_.kernel_frames_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool PerfEventConfig::kernel_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.kernel_frames)
  return _internal_kernel_frames();
}
inline void PerfEventConfig::set_kernel_frames(bool value) {
  _internal_set_kernel_frames(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.kernel_frames)
}
inline bool PerfEventConfig::_internal_kernel_frames() const {
  return _impl_.kernel_frames_;
}
inline void PerfEventConfig::_internal_set_kernel_frames(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kernel_frames_ = value;
}

// repeated int32 target_pid = 4;
inline int PerfEventConfig::_internal_target_pid_size() const {
  return _impl_.target_pid_.size();
}
inline int PerfEventConfig::target_pid_size() const {
  return _internal_target_pid_size();
}
inline void PerfEventConfig::clear_target_pid() {
  _internal_mutable_target_pid()->Clear();
}
inline ::int32_t PerfEventConfig::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_pid)
  return _internal_target_pid(index);
}
inline void PerfEventConfig::set_target_pid(int index, ::int32_t value) {
  _internal_mutable_target_pid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_pid)
}
inline void PerfEventConfig::add_target_pid(::int32_t value) {
  _internal_add_target_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig::target_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_pid)
  return _internal_target_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_pid)
  return _internal_mutable_target_pid();
}

inline ::int32_t PerfEventConfig::_internal_target_pid(int index) const {
  return _internal_target_pid().Get(index);
}
inline void PerfEventConfig::_internal_add_target_pid(::int32_t value) {
  _internal_mutable_target_pid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig::_internal_target_pid() const {
  return _impl_.target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig::_internal_mutable_target_pid() {
  return &_impl_.target_pid_;
}

// repeated string target_cmdline = 5;
inline int PerfEventConfig::_internal_target_cmdline_size() const {
  return _impl_.target_cmdline_.size();
}
inline int PerfEventConfig::target_cmdline_size() const {
  return _internal_target_cmdline_size();
}
inline void PerfEventConfig::clear_target_cmdline() {
  _internal_mutable_target_cmdline()->Clear();
}
inline std::string* PerfEventConfig::add_target_cmdline() {
  std::string* _s = _internal_add_target_cmdline();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.target_cmdline)
  return _s;
}
inline const std::string& PerfEventConfig::target_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_cmdline)
  return _internal_target_cmdline(index);
}
inline std::string* PerfEventConfig::mutable_target_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.target_cmdline)
  return _internal_mutable_target_cmdline()->Mutable(index);
}
inline void PerfEventConfig::set_target_cmdline(int index, const std::string& value) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::set_target_cmdline(int index, std::string&& value) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::set_target_cmdline(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::set_target_cmdline(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::set_target_cmdline(int index, absl::string_view value) {
  _internal_mutable_target_cmdline()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const std::string& value) {
  _internal_mutable_target_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(std::string&& value) {
  _internal_mutable_target_cmdline()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_target_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const char* value, std::size_t size) {
  _internal_mutable_target_cmdline()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(absl::string_view value) {
  _internal_mutable_target_cmdline()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::target_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_cmdline)
  return _internal_target_cmdline();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PerfEventConfig::mutable_target_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_cmdline)
  return _internal_mutable_target_cmdline();
}
inline const std::string& PerfEventConfig::_internal_target_cmdline(int index) const {
  return _internal_target_cmdline().Get(index);
}
inline std::string* PerfEventConfig::_internal_add_target_cmdline() {
  return _internal_mutable_target_cmdline()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::_internal_target_cmdline() const {
  return _impl_.target_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::_internal_mutable_target_cmdline() {
  return &_impl_.target_cmdline_;
}

// repeated int32 exclude_pid = 6;
inline int PerfEventConfig::_internal_exclude_pid_size() const {
  return _impl_.exclude_pid_.size();
}
inline int PerfEventConfig::exclude_pid_size() const {
  return _internal_exclude_pid_size();
}
inline void PerfEventConfig::clear_exclude_pid() {
  _internal_mutable_exclude_pid()->Clear();
}
inline ::int32_t PerfEventConfig::exclude_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.exclude_pid)
  return _internal_exclude_pid(index);
}
inline void PerfEventConfig::set_exclude_pid(int index, ::int32_t value) {
  _internal_mutable_exclude_pid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_pid)
}
inline void PerfEventConfig::add_exclude_pid(::int32_t value) {
  _internal_add_exclude_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig::exclude_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.exclude_pid)
  return _internal_exclude_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig::mutable_exclude_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.exclude_pid)
  return _internal_mutable_exclude_pid();
}

inline ::int32_t PerfEventConfig::_internal_exclude_pid(int index) const {
  return _internal_exclude_pid().Get(index);
}
inline void PerfEventConfig::_internal_add_exclude_pid(::int32_t value) {
  _internal_mutable_exclude_pid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PerfEventConfig::_internal_exclude_pid() const {
  return _impl_.exclude_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PerfEventConfig::_internal_mutable_exclude_pid() {
  return &_impl_.exclude_pid_;
}

// repeated string exclude_cmdline = 7;
inline int PerfEventConfig::_internal_exclude_cmdline_size() const {
  return _impl_.exclude_cmdline_.size();
}
inline int PerfEventConfig::exclude_cmdline_size() const {
  return _internal_exclude_cmdline_size();
}
inline void PerfEventConfig::clear_exclude_cmdline() {
  _internal_mutable_exclude_cmdline()->Clear();
}
inline std::string* PerfEventConfig::add_exclude_cmdline() {
  std::string* _s = _internal_add_exclude_cmdline();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return _s;
}
inline const std::string& PerfEventConfig::exclude_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return _internal_exclude_cmdline(index);
}
inline std::string* PerfEventConfig::mutable_exclude_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return _internal_mutable_exclude_cmdline()->Mutable(index);
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const std::string& value) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::set_exclude_cmdline(int index, std::string&& value) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::set_exclude_cmdline(int index, absl::string_view value) {
  _internal_mutable_exclude_cmdline()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const std::string& value) {
  _internal_mutable_exclude_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(std::string&& value) {
  _internal_mutable_exclude_cmdline()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_exclude_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const char* value, std::size_t size) {
  _internal_mutable_exclude_cmdline()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(absl::string_view value) {
  _internal_mutable_exclude_cmdline()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::exclude_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return _internal_exclude_cmdline();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PerfEventConfig::mutable_exclude_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return _internal_mutable_exclude_cmdline();
}
inline const std::string& PerfEventConfig::_internal_exclude_cmdline(int index) const {
  return _internal_exclude_cmdline().Get(index);
}
inline std::string* PerfEventConfig::_internal_add_exclude_cmdline() {
  return _internal_mutable_exclude_cmdline()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::_internal_exclude_cmdline() const {
  return _impl_.exclude_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::_internal_mutable_exclude_cmdline() {
  return &_impl_.exclude_cmdline_;
}

// optional uint32 additional_cmdline_count = 11;
inline bool PerfEventConfig::has_additional_cmdline_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void PerfEventConfig::clear_additional_cmdline_count() {
  _impl_.additional_cmdline_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t PerfEventConfig::additional_cmdline_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.additional_cmdline_count)
  return _internal_additional_cmdline_count();
}
inline void PerfEventConfig::set_additional_cmdline_count(::uint32_t value) {
  _internal_set_additional_cmdline_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.additional_cmdline_count)
}
inline ::uint32_t PerfEventConfig::_internal_additional_cmdline_count() const {
  return _impl_.additional_cmdline_count_;
}
inline void PerfEventConfig::_internal_set_additional_cmdline_count(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.additional_cmdline_count_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::PerfEventConfig_UnwindMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::PerfEventConfig_UnwindMode>() {
  return ::perfetto::protos::PerfEventConfig_UnwindMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto_2epb_2eh
