// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/heapprofd_config.proto

#include "protos/perfetto/config/profiling/heapprofd_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dump_phase_ms_)*/ 0u

  , /*decltype(_impl_.dump_interval_ms_)*/ 0u
} {}
struct HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal() {}
  union {
    HeapprofdConfig_ContinuousDumpConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapprofdConfig_ContinuousDumpConfigDefaultTypeInternal _HeapprofdConfig_ContinuousDumpConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeapprofdConfig::HeapprofdConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.process_cmdline_)*/{}
  , /*decltype(_impl_.pid_)*/ {}

  , /*decltype(_impl_.skip_symbol_prefix_)*/{}
  , /*decltype(_impl_.heaps_)*/{}
  , /*decltype(_impl_.heap_sampling_intervals_)*/ {}

  , /*decltype(_impl_.target_installed_by_)*/{}
  , /*decltype(_impl_.exclude_heaps_)*/{}
  , /*decltype(_impl_.continuous_dump_config_)*/nullptr
  , /*decltype(_impl_.sampling_interval_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.shmem_size_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.no_startup_)*/ false

  , /*decltype(_impl_.no_running_)*/ false

  , /*decltype(_impl_.dump_at_max_)*/ false

  , /*decltype(_impl_.disable_fork_teardown_)*/ false

  , /*decltype(_impl_.block_client_timeout_us_)*/ 0u

  , /*decltype(_impl_.stream_allocations_)*/ false

  , /*decltype(_impl_.all_heaps_)*/ false

  , /*decltype(_impl_.all_)*/ false

  , /*decltype(_impl_.block_client_)*/ false

  , /*decltype(_impl_.min_anonymous_memory_kb_)*/ 0u

  , /*decltype(_impl_.max_heapprofd_cpu_secs_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_heapprofd_memory_kb_)*/ 0u

  , /*decltype(_impl_.disable_vfork_detection_)*/ false

  , /*decltype(_impl_.adaptive_sampling_shmem_threshold_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.adaptive_sampling_max_sampling_interval_bytes_)*/ ::uint64_t{0u}
} {}
struct HeapprofdConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapprofdConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapprofdConfigDefaultTypeInternal() {}
  union {
    HeapprofdConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapprofdConfigDefaultTypeInternal _HeapprofdConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig, _impl_.dump_phase_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig, _impl_.dump_interval_ms_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.sampling_interval_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.adaptive_sampling_shmem_threshold_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.adaptive_sampling_max_sampling_interval_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.process_cmdline_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.target_installed_by_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.heaps_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.exclude_heaps_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.stream_allocations_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.heap_sampling_intervals_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.all_heaps_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.all_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.min_anonymous_memory_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.max_heapprofd_memory_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.max_heapprofd_cpu_secs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.skip_symbol_prefix_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.continuous_dump_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.shmem_size_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.block_client_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.block_client_timeout_us_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.no_startup_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.no_running_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.dump_at_max_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.disable_fork_teardown_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapprofdConfig, _impl_.disable_vfork_detection_),
    1,
    16,
    17,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    8,
    ~0u,
    9,
    10,
    12,
    14,
    13,
    ~0u,
    0,
    2,
    11,
    7,
    3,
    4,
    5,
    6,
    15,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig)},
        { 12, 45, -1, sizeof(::perfetto::protos::HeapprofdConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_HeapprofdConfig_ContinuousDumpConfig_default_instance_._instance,
    &::perfetto::protos::_HeapprofdConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n7protos/perfetto/config/profiling/heapp"
    "rofd_config.proto\022\017perfetto.protos\"\314\006\n\017H"
    "eapprofdConfig\022\037\n\027sampling_interval_byte"
    "s\030\001 \001(\004\022)\n!adaptive_sampling_shmem_thres"
    "hold\030\030 \001(\004\0225\n-adaptive_sampling_max_samp"
    "ling_interval_bytes\030\031 \001(\004\022\027\n\017process_cmd"
    "line\030\002 \003(\t\022\013\n\003pid\030\004 \003(\004\022\033\n\023target_instal"
    "led_by\030\032 \003(\t\022\r\n\005heaps\030\024 \003(\t\022\025\n\rexclude_h"
    "eaps\030\033 \003(\t\022\032\n\022stream_allocations\030\027 \001(\010\022\037"
    "\n\027heap_sampling_intervals\030\026 \003(\004\022\021\n\tall_h"
    "eaps\030\025 \001(\010\022\013\n\003all\030\005 \001(\010\022\037\n\027min_anonymous"
    "_memory_kb\030\017 \001(\r\022\037\n\027max_heapprofd_memory"
    "_kb\030\020 \001(\r\022\036\n\026max_heapprofd_cpu_secs\030\021 \001("
    "\004\022\032\n\022skip_symbol_prefix\030\007 \003(\t\022U\n\026continu"
    "ous_dump_config\030\006 \001(\01325.perfetto.protos."
    "HeapprofdConfig.ContinuousDumpConfig\022\030\n\020"
    "shmem_size_bytes\030\010 \001(\004\022\024\n\014block_client\030\t"
    " \001(\010\022\037\n\027block_client_timeout_us\030\016 \001(\r\022\022\n"
    "\nno_startup\030\n \001(\010\022\022\n\nno_running\030\013 \001(\010\022\023\n"
    "\013dump_at_max\030\r \001(\010\022\035\n\025disable_fork_teard"
    "own\030\022 \001(\010\022\037\n\027disable_vfork_detection\030\023 \001"
    "(\010\032G\n\024ContinuousDumpConfig\022\025\n\rdump_phase"
    "_ms\030\005 \001(\r\022\030\n\020dump_interval_ms\030\006 \001(\rJ\004\010\014\020"
    "\r"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto = {
    false,
    false,
    921,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto,
    "protos/perfetto/config/profiling/heapprofd_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class HeapprofdConfig_ContinuousDumpConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig_ContinuousDumpConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeapprofdConfig_ContinuousDumpConfig, _impl_._has_bits_);
  static void set_has_dump_phase_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dump_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}
HeapprofdConfig_ContinuousDumpConfig::HeapprofdConfig_ContinuousDumpConfig(const HeapprofdConfig_ContinuousDumpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
}

inline void HeapprofdConfig_ContinuousDumpConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dump_phase_ms_) { 0u }

    , decltype(_impl_.dump_interval_ms_) { 0u }

  };
}

HeapprofdConfig_ContinuousDumpConfig::~HeapprofdConfig_ContinuousDumpConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapprofdConfig_ContinuousDumpConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeapprofdConfig_ContinuousDumpConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapprofdConfig_ContinuousDumpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.dump_phase_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dump_interval_ms_) -
        reinterpret_cast<char*>(&_impl_.dump_phase_ms_)) + sizeof(_impl_.dump_interval_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapprofdConfig_ContinuousDumpConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dump_phase_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_dump_phase_ms(&has_bits);
          _impl_.dump_phase_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 dump_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_dump_interval_ms(&has_bits);
          _impl_.dump_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeapprofdConfig_ContinuousDumpConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 dump_phase_ms = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_dump_phase_ms(), target);
  }

  // optional uint32 dump_interval_ms = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_dump_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  return target;
}

::size_t HeapprofdConfig_ContinuousDumpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dump_phase_ms = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_dump_phase_ms());
    }

    // optional uint32 dump_interval_ms = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_dump_interval_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapprofdConfig_ContinuousDumpConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapprofdConfig_ContinuousDumpConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapprofdConfig_ContinuousDumpConfig::GetClassData() const { return &_class_data_; }


void HeapprofdConfig_ContinuousDumpConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapprofdConfig_ContinuousDumpConfig*>(&to_msg);
  auto& from = static_cast<const HeapprofdConfig_ContinuousDumpConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dump_phase_ms_ = from._impl_.dump_phase_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dump_interval_ms_ = from._impl_.dump_interval_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapprofdConfig_ContinuousDumpConfig::CopyFrom(const HeapprofdConfig_ContinuousDumpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig_ContinuousDumpConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig_ContinuousDumpConfig::InternalSwap(HeapprofdConfig_ContinuousDumpConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapprofdConfig_ContinuousDumpConfig, _impl_.dump_interval_ms_)
      + sizeof(HeapprofdConfig_ContinuousDumpConfig::_impl_.dump_interval_ms_)
      - PROTOBUF_FIELD_OFFSET(HeapprofdConfig_ContinuousDumpConfig, _impl_.dump_phase_ms_)>(
          reinterpret_cast<char*>(&_impl_.dump_phase_ms_),
          reinterpret_cast<char*>(&other->_impl_.dump_phase_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapprofdConfig_ContinuousDumpConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto[0]);
}
// ===================================================================

class HeapprofdConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapprofdConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeapprofdConfig, _impl_._has_bits_);
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adaptive_sampling_shmem_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_adaptive_sampling_max_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_stream_allocations(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_heaps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_anonymous_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_heapprofd_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_heapprofd_cpu_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig& continuous_dump_config(const HeapprofdConfig* msg);
  static void set_has_continuous_dump_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shmem_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_client(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_block_client_timeout_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_no_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_no_running(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dump_at_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disable_fork_teardown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disable_vfork_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig&
HeapprofdConfig::_Internal::continuous_dump_config(const HeapprofdConfig* msg) {
  return *msg->_impl_.continuous_dump_config_;
}
HeapprofdConfig::HeapprofdConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapprofdConfig)
}
HeapprofdConfig::HeapprofdConfig(const HeapprofdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapprofdConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_cmdline_){from._impl_.process_cmdline_}
    , decltype(_impl_.pid_) { from._impl_.pid_ }

    , decltype(_impl_.skip_symbol_prefix_){from._impl_.skip_symbol_prefix_}
    , decltype(_impl_.heaps_){from._impl_.heaps_}
    , decltype(_impl_.heap_sampling_intervals_) { from._impl_.heap_sampling_intervals_ }

    , decltype(_impl_.target_installed_by_){from._impl_.target_installed_by_}
    , decltype(_impl_.exclude_heaps_){from._impl_.exclude_heaps_}
    , decltype(_impl_.continuous_dump_config_){nullptr}
    , decltype(_impl_.sampling_interval_bytes_) {}

    , decltype(_impl_.shmem_size_bytes_) {}

    , decltype(_impl_.no_startup_) {}

    , decltype(_impl_.no_running_) {}

    , decltype(_impl_.dump_at_max_) {}

    , decltype(_impl_.disable_fork_teardown_) {}

    , decltype(_impl_.block_client_timeout_us_) {}

    , decltype(_impl_.stream_allocations_) {}

    , decltype(_impl_.all_heaps_) {}

    , decltype(_impl_.all_) {}

    , decltype(_impl_.block_client_) {}

    , decltype(_impl_.min_anonymous_memory_kb_) {}

    , decltype(_impl_.max_heapprofd_cpu_secs_) {}

    , decltype(_impl_.max_heapprofd_memory_kb_) {}

    , decltype(_impl_.disable_vfork_detection_) {}

    , decltype(_impl_.adaptive_sampling_shmem_threshold_) {}

    , decltype(_impl_.adaptive_sampling_max_sampling_interval_bytes_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.continuous_dump_config_ = new ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig(*from._impl_.continuous_dump_config_);
  }
  ::memcpy(&_impl_.sampling_interval_bytes_, &from._impl_.sampling_interval_bytes_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.adaptive_sampling_max_sampling_interval_bytes_) -
    reinterpret_cast<char*>(&_impl_.sampling_interval_bytes_)) + sizeof(_impl_.adaptive_sampling_max_sampling_interval_bytes_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapprofdConfig)
}

inline void HeapprofdConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.process_cmdline_){arena}
    , decltype(_impl_.pid_) { arena }

    , decltype(_impl_.skip_symbol_prefix_){arena}
    , decltype(_impl_.heaps_){arena}
    , decltype(_impl_.heap_sampling_intervals_) { arena }

    , decltype(_impl_.target_installed_by_){arena}
    , decltype(_impl_.exclude_heaps_){arena}
    , decltype(_impl_.continuous_dump_config_){nullptr}
    , decltype(_impl_.sampling_interval_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.shmem_size_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.no_startup_) { false }

    , decltype(_impl_.no_running_) { false }

    , decltype(_impl_.dump_at_max_) { false }

    , decltype(_impl_.disable_fork_teardown_) { false }

    , decltype(_impl_.block_client_timeout_us_) { 0u }

    , decltype(_impl_.stream_allocations_) { false }

    , decltype(_impl_.all_heaps_) { false }

    , decltype(_impl_.all_) { false }

    , decltype(_impl_.block_client_) { false }

    , decltype(_impl_.min_anonymous_memory_kb_) { 0u }

    , decltype(_impl_.max_heapprofd_cpu_secs_) { ::uint64_t{0u} }

    , decltype(_impl_.max_heapprofd_memory_kb_) { 0u }

    , decltype(_impl_.disable_vfork_detection_) { false }

    , decltype(_impl_.adaptive_sampling_shmem_threshold_) { ::uint64_t{0u} }

    , decltype(_impl_.adaptive_sampling_max_sampling_interval_bytes_) { ::uint64_t{0u} }

  };
}

HeapprofdConfig::~HeapprofdConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapprofdConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapprofdConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_process_cmdline()->~RepeatedPtrField();
  _impl_.pid_.~RepeatedField();
  _internal_mutable_skip_symbol_prefix()->~RepeatedPtrField();
  _internal_mutable_heaps()->~RepeatedPtrField();
  _impl_.heap_sampling_intervals_.~RepeatedField();
  _internal_mutable_target_installed_by()->~RepeatedPtrField();
  _internal_mutable_exclude_heaps()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.continuous_dump_config_;
}

void HeapprofdConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapprofdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapprofdConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_process_cmdline()->Clear();
  _internal_mutable_pid()->Clear();
  _internal_mutable_skip_symbol_prefix()->Clear();
  _internal_mutable_heaps()->Clear();
  _internal_mutable_heap_sampling_intervals()->Clear();
  _internal_mutable_target_installed_by()->Clear();
  _internal_mutable_exclude_heaps()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.continuous_dump_config_ != nullptr);
    _impl_.continuous_dump_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.sampling_interval_bytes_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.block_client_timeout_us_) -
        reinterpret_cast<char*>(&_impl_.sampling_interval_bytes_)) + sizeof(_impl_.block_client_timeout_us_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.stream_allocations_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disable_vfork_detection_) -
        reinterpret_cast<char*>(&_impl_.stream_allocations_)) + sizeof(_impl_.disable_vfork_detection_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.adaptive_sampling_shmem_threshold_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.adaptive_sampling_max_sampling_interval_bytes_) -
        reinterpret_cast<char*>(&_impl_.adaptive_sampling_shmem_threshold_)) + sizeof(_impl_.adaptive_sampling_max_sampling_interval_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapprofdConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sampling_interval_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          _impl_.sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string process_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_process_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.HeapprofdConfig.process_cmdline");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool all = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_all(&has_bits);
          _impl_.all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuous_dump_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string skip_symbol_prefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_skip_symbol_prefix();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.HeapprofdConfig.skip_symbol_prefix");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shmem_size_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_shmem_size_bytes(&has_bits);
          _impl_.shmem_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool block_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_block_client(&has_bits);
          _impl_.block_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool no_startup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_no_startup(&has_bits);
          _impl_.no_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool no_running = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_no_running(&has_bits);
          _impl_.no_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool dump_at_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_dump_at_max(&has_bits);
          _impl_.dump_at_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 block_client_timeout_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_block_client_timeout_us(&has_bits);
          _impl_.block_client_timeout_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 min_anonymous_memory_kb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_min_anonymous_memory_kb(&has_bits);
          _impl_.min_anonymous_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 max_heapprofd_memory_kb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_max_heapprofd_memory_kb(&has_bits);
          _impl_.max_heapprofd_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 max_heapprofd_cpu_secs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_max_heapprofd_cpu_secs(&has_bits);
          _impl_.max_heapprofd_cpu_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_fork_teardown = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_disable_fork_teardown(&has_bits);
          _impl_.disable_fork_teardown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_vfork_detection = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_disable_vfork_detection(&has_bits);
          _impl_.disable_vfork_detection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string heaps = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_heaps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.HeapprofdConfig.heaps");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool all_heaps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 168)) {
          _Internal::set_has_all_heaps(&has_bits);
          _impl_.all_heaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 heap_sampling_intervals = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_heap_sampling_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_heap_sampling_intervals(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool stream_allocations = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_stream_allocations(&has_bits);
          _impl_.stream_allocations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 adaptive_sampling_shmem_threshold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          _Internal::set_has_adaptive_sampling_shmem_threshold(&has_bits);
          _impl_.adaptive_sampling_shmem_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 200)) {
          _Internal::set_has_adaptive_sampling_max_sampling_interval_bytes(&has_bits);
          _impl_.adaptive_sampling_max_sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string target_installed_by = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_target_installed_by();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.HeapprofdConfig.target_installed_by");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string exclude_heaps = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_exclude_heaps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.HeapprofdConfig.exclude_heaps");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeapprofdConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapprofdConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 sampling_interval_bytes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sampling_interval_bytes(), target);
  }

  // repeated string process_cmdline = 2;
  for (int i = 0, n = this->_internal_process_cmdline_size(); i < n; ++i) {
    const auto& s = this->_internal_process_cmdline(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.HeapprofdConfig.process_cmdline");
    target = stream->WriteString(2, s, target);
  }

  // repeated uint64 pid = 4;
  for (int i = 0, n = this->_internal_pid_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_pid(i), target);
  }

  // optional bool all = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_all(), target);
  }

  // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::continuous_dump_config(this),
        _Internal::continuous_dump_config(this).GetCachedSize(), target, stream);
  }

  // repeated string skip_symbol_prefix = 7;
  for (int i = 0, n = this->_internal_skip_symbol_prefix_size(); i < n; ++i) {
    const auto& s = this->_internal_skip_symbol_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.HeapprofdConfig.skip_symbol_prefix");
    target = stream->WriteString(7, s, target);
  }

  // optional uint64 shmem_size_bytes = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_shmem_size_bytes(), target);
  }

  // optional bool block_client = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_block_client(), target);
  }

  // optional bool no_startup = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_no_startup(), target);
  }

  // optional bool no_running = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_no_running(), target);
  }

  // optional bool dump_at_max = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_dump_at_max(), target);
  }

  // optional uint32 block_client_timeout_us = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_block_client_timeout_us(), target);
  }

  // optional uint32 min_anonymous_memory_kb = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_min_anonymous_memory_kb(), target);
  }

  // optional uint32 max_heapprofd_memory_kb = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_max_heapprofd_memory_kb(), target);
  }

  // optional uint64 max_heapprofd_cpu_secs = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_max_heapprofd_cpu_secs(), target);
  }

  // optional bool disable_fork_teardown = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_disable_fork_teardown(), target);
  }

  // optional bool disable_vfork_detection = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_disable_vfork_detection(), target);
  }

  // repeated string heaps = 20;
  for (int i = 0, n = this->_internal_heaps_size(); i < n; ++i) {
    const auto& s = this->_internal_heaps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.HeapprofdConfig.heaps");
    target = stream->WriteString(20, s, target);
  }

  // optional bool all_heaps = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_all_heaps(), target);
  }

  // repeated uint64 heap_sampling_intervals = 22;
  for (int i = 0, n = this->_internal_heap_sampling_intervals_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        22, this->_internal_heap_sampling_intervals(i), target);
  }

  // optional bool stream_allocations = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_stream_allocations(), target);
  }

  // optional uint64 adaptive_sampling_shmem_threshold = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        24, this->_internal_adaptive_sampling_shmem_threshold(), target);
  }

  // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        25, this->_internal_adaptive_sampling_max_sampling_interval_bytes(), target);
  }

  // repeated string target_installed_by = 26;
  for (int i = 0, n = this->_internal_target_installed_by_size(); i < n; ++i) {
    const auto& s = this->_internal_target_installed_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.HeapprofdConfig.target_installed_by");
    target = stream->WriteString(26, s, target);
  }

  // repeated string exclude_heaps = 27;
  for (int i = 0, n = this->_internal_exclude_heaps_size(); i < n; ++i) {
    const auto& s = this->_internal_exclude_heaps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.HeapprofdConfig.exclude_heaps");
    target = stream->WriteString(27, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapprofdConfig)
  return target;
}

::size_t HeapprofdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapprofdConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string process_cmdline = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_process_cmdline().size());
  for (int i = 0, n = _internal_process_cmdline().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_process_cmdline().Get(i));
  }

  // repeated uint64 pid = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_pid())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_pid_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated string skip_symbol_prefix = 7;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_skip_symbol_prefix().size());
  for (int i = 0, n = _internal_skip_symbol_prefix().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_skip_symbol_prefix().Get(i));
  }

  // repeated string heaps = 20;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_heaps().size());
  for (int i = 0, n = _internal_heaps().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_heaps().Get(i));
  }

  // repeated uint64 heap_sampling_intervals = 22;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_heap_sampling_intervals())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_heap_sampling_intervals_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated string target_installed_by = 26;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_target_installed_by().size());
  for (int i = 0, n = _internal_target_installed_by().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_target_installed_by().Get(i));
  }

  // repeated string exclude_heaps = 27;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_exclude_heaps().size());
  for (int i = 0, n = _internal_exclude_heaps().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_exclude_heaps().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.HeapprofdConfig.ContinuousDumpConfig continuous_dump_config = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.continuous_dump_config_);
    }

    // optional uint64 sampling_interval_bytes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sampling_interval_bytes());
    }

    // optional uint64 shmem_size_bytes = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shmem_size_bytes());
    }

    // optional bool no_startup = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool no_running = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool dump_at_max = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool disable_fork_teardown = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3;
    }

    // optional uint32 block_client_timeout_us = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_block_client_timeout_us());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool stream_allocations = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3;
    }

    // optional bool all_heaps = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3;
    }

    // optional bool all = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool block_client = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional uint32 min_anonymous_memory_kb = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_min_anonymous_memory_kb());
    }

    // optional uint64 max_heapprofd_cpu_secs = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_max_heapprofd_cpu_secs());
    }

    // optional uint32 max_heapprofd_memory_kb = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_max_heapprofd_memory_kb());
    }

    // optional bool disable_vfork_detection = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint64 adaptive_sampling_shmem_threshold = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_adaptive_sampling_shmem_threshold());
    }

    // optional uint64 adaptive_sampling_max_sampling_interval_bytes = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_adaptive_sampling_max_sampling_interval_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapprofdConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapprofdConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapprofdConfig::GetClassData() const { return &_class_data_; }


void HeapprofdConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapprofdConfig*>(&to_msg);
  auto& from = static_cast<const HeapprofdConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapprofdConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_process_cmdline()->MergeFrom(from._internal_process_cmdline());
  _this->_impl_.pid_.MergeFrom(from._impl_.pid_);
  _this->_internal_mutable_skip_symbol_prefix()->MergeFrom(from._internal_skip_symbol_prefix());
  _this->_internal_mutable_heaps()->MergeFrom(from._internal_heaps());
  _this->_impl_.heap_sampling_intervals_.MergeFrom(from._impl_.heap_sampling_intervals_);
  _this->_internal_mutable_target_installed_by()->MergeFrom(from._internal_target_installed_by());
  _this->_internal_mutable_exclude_heaps()->MergeFrom(from._internal_exclude_heaps());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_continuous_dump_config()->::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig::MergeFrom(
          from._internal_continuous_dump_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sampling_interval_bytes_ = from._impl_.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shmem_size_bytes_ = from._impl_.shmem_size_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.no_startup_ = from._impl_.no_startup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.no_running_ = from._impl_.no_running_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dump_at_max_ = from._impl_.dump_at_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.disable_fork_teardown_ = from._impl_.disable_fork_teardown_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.block_client_timeout_us_ = from._impl_.block_client_timeout_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stream_allocations_ = from._impl_.stream_allocations_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.all_heaps_ = from._impl_.all_heaps_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.all_ = from._impl_.all_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.block_client_ = from._impl_.block_client_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.min_anonymous_memory_kb_ = from._impl_.min_anonymous_memory_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.max_heapprofd_cpu_secs_ = from._impl_.max_heapprofd_cpu_secs_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_heapprofd_memory_kb_ = from._impl_.max_heapprofd_memory_kb_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.disable_vfork_detection_ = from._impl_.disable_vfork_detection_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.adaptive_sampling_shmem_threshold_ = from._impl_.adaptive_sampling_shmem_threshold_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.adaptive_sampling_max_sampling_interval_bytes_ = from._impl_.adaptive_sampling_max_sampling_interval_bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapprofdConfig::CopyFrom(const HeapprofdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapprofdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapprofdConfig::IsInitialized() const {
  return true;
}

void HeapprofdConfig::InternalSwap(HeapprofdConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_process_cmdline()->InternalSwap(
      other->_internal_mutable_process_cmdline());
  _impl_.pid_.InternalSwap(&other->_impl_.pid_);
  _internal_mutable_skip_symbol_prefix()->InternalSwap(
      other->_internal_mutable_skip_symbol_prefix());
  _internal_mutable_heaps()->InternalSwap(
      other->_internal_mutable_heaps());
  _impl_.heap_sampling_intervals_.InternalSwap(&other->_impl_.heap_sampling_intervals_);
  _internal_mutable_target_installed_by()->InternalSwap(
      other->_internal_mutable_target_installed_by());
  _internal_mutable_exclude_heaps()->InternalSwap(
      other->_internal_mutable_exclude_heaps());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapprofdConfig, _impl_.adaptive_sampling_max_sampling_interval_bytes_)
      + sizeof(HeapprofdConfig::_impl_.adaptive_sampling_max_sampling_interval_bytes_)
      - PROTOBUF_FIELD_OFFSET(HeapprofdConfig, _impl_.continuous_dump_config_)>(
          reinterpret_cast<char*>(&_impl_.continuous_dump_config_),
          reinterpret_cast<char*>(&other->_impl_.continuous_dump_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapprofdConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fprofiling_2fheapprofd_5fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapprofdConfig_ContinuousDumpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapprofdConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapprofdConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapprofdConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
