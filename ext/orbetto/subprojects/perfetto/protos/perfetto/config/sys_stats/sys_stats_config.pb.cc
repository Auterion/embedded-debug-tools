// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/sys_stats/sys_stats_config.proto

#include "protos/perfetto/config/sys_stats/sys_stats_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR SysStatsConfig::SysStatsConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meminfo_counters_)*/ {}

  , /*decltype(_impl_.vmstat_counters_)*/ {}

  , /*decltype(_impl_.stat_counters_)*/ {}

  , /*decltype(_impl_.meminfo_period_ms_)*/ 0u

  , /*decltype(_impl_.vmstat_period_ms_)*/ 0u

  , /*decltype(_impl_.stat_period_ms_)*/ 0u

  , /*decltype(_impl_.devfreq_period_ms_)*/ 0u

  , /*decltype(_impl_.cpufreq_period_ms_)*/ 0u

  , /*decltype(_impl_.buddyinfo_period_ms_)*/ 0u

  , /*decltype(_impl_.diskstat_period_ms_)*/ 0u
} {}
struct SysStatsConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStatsConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStatsConfigDefaultTypeInternal() {}
  union {
    SysStatsConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStatsConfigDefaultTypeInternal _SysStatsConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.meminfo_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.meminfo_counters_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.vmstat_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.vmstat_counters_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.stat_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.stat_counters_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.devfreq_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.cpufreq_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.buddyinfo_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStatsConfig, _impl_.diskstat_period_ms_),
    0,
    ~0u,
    1,
    ~0u,
    2,
    ~0u,
    3,
    4,
    5,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 18, -1, sizeof(::perfetto::protos::SysStatsConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_SysStatsConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n7protos/perfetto/config/sys_stats/sys_s"
    "tats_config.proto\022\017perfetto.protos\032/prot"
    "os/perfetto/common/sys_stats_counters.pr"
    "oto\"\204\004\n\016SysStatsConfig\022\031\n\021meminfo_period"
    "_ms\030\001 \001(\r\022:\n\020meminfo_counters\030\002 \003(\0162 .pe"
    "rfetto.protos.MeminfoCounters\022\030\n\020vmstat_"
    "period_ms\030\003 \001(\r\0228\n\017vmstat_counters\030\004 \003(\016"
    "2\037.perfetto.protos.VmstatCounters\022\026\n\016sta"
    "t_period_ms\030\005 \001(\r\022C\n\rstat_counters\030\006 \003(\016"
    "2,.perfetto.protos.SysStatsConfig.StatCo"
    "unters\022\031\n\021devfreq_period_ms\030\007 \001(\r\022\031\n\021cpu"
    "freq_period_ms\030\010 \001(\r\022\033\n\023buddyinfo_period"
    "_ms\030\t \001(\r\022\032\n\022diskstat_period_ms\030\n \001(\r\"{\n"
    "\014StatCounters\022\024\n\020STAT_UNSPECIFIED\020\000\022\022\n\016S"
    "TAT_CPU_TIMES\020\001\022\023\n\017STAT_IRQ_COUNTS\020\002\022\027\n\023"
    "STAT_SOFTIRQ_COUNTS\020\003\022\023\n\017STAT_FORK_COUNT"
    "\020\004"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto = {
    false,
    false,
    642,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto,
    "protos/perfetto/config/sys_stats/sys_stats_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_once,
    descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SysStatsConfig_StatCounters_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto[0];
}
bool SysStatsConfig_StatCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_UNSPECIFIED;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_CPU_TIMES;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_IRQ_COUNTS;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_SOFTIRQ_COUNTS;
constexpr SysStatsConfig_StatCounters SysStatsConfig::STAT_FORK_COUNT;
constexpr SysStatsConfig_StatCounters SysStatsConfig::StatCounters_MIN;
constexpr SysStatsConfig_StatCounters SysStatsConfig::StatCounters_MAX;
constexpr int SysStatsConfig::StatCounters_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SysStatsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStatsConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStatsConfig, _impl_._has_bits_);
  static void set_has_meminfo_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vmstat_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stat_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_devfreq_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cpufreq_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buddyinfo_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_diskstat_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SysStatsConfig::SysStatsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStatsConfig)
}
SysStatsConfig::SysStatsConfig(const SysStatsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStatsConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meminfo_counters_) { from._internal_meminfo_counters() }

    , decltype(_impl_.vmstat_counters_) { from._internal_vmstat_counters() }

    , decltype(_impl_.stat_counters_) { from._internal_stat_counters() }

    , decltype(_impl_.meminfo_period_ms_) {}

    , decltype(_impl_.vmstat_period_ms_) {}

    , decltype(_impl_.stat_period_ms_) {}

    , decltype(_impl_.devfreq_period_ms_) {}

    , decltype(_impl_.cpufreq_period_ms_) {}

    , decltype(_impl_.buddyinfo_period_ms_) {}

    , decltype(_impl_.diskstat_period_ms_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.meminfo_period_ms_, &from._impl_.meminfo_period_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.diskstat_period_ms_) -
    reinterpret_cast<char*>(&_impl_.meminfo_period_ms_)) + sizeof(_impl_.diskstat_period_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStatsConfig)
}

inline void SysStatsConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meminfo_counters_) { arena }

    , decltype(_impl_.vmstat_counters_) { arena }

    , decltype(_impl_.stat_counters_) { arena }

    , decltype(_impl_.meminfo_period_ms_) { 0u }

    , decltype(_impl_.vmstat_period_ms_) { 0u }

    , decltype(_impl_.stat_period_ms_) { 0u }

    , decltype(_impl_.devfreq_period_ms_) { 0u }

    , decltype(_impl_.cpufreq_period_ms_) { 0u }

    , decltype(_impl_.buddyinfo_period_ms_) { 0u }

    , decltype(_impl_.diskstat_period_ms_) { 0u }

  };
}

SysStatsConfig::~SysStatsConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStatsConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStatsConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_meminfo_counters()->~RepeatedField();
  _internal_mutable_vmstat_counters()->~RepeatedField();
  _internal_mutable_stat_counters()->~RepeatedField();
}

void SysStatsConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStatsConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_meminfo_counters()->Clear();
  _internal_mutable_vmstat_counters()->Clear();
  _internal_mutable_stat_counters()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.meminfo_period_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.diskstat_period_ms_) -
        reinterpret_cast<char*>(&_impl_.meminfo_period_ms_)) + sizeof(_impl_.diskstat_period_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStatsConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 meminfo_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_meminfo_period_ms(&has_bits);
          _impl_.meminfo_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MeminfoCounters_IsValid(static_cast<int>(val)))) {
              _internal_add_meminfo_counters(static_cast<::perfetto::protos::MeminfoCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_meminfo_counters(), ptr, ctx, ::perfetto::protos::MeminfoCounters_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 vmstat_period_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_vmstat_period_ms(&has_bits);
          _impl_.vmstat_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VmstatCounters_IsValid(static_cast<int>(val)))) {
              _internal_add_vmstat_counters(static_cast<::perfetto::protos::VmstatCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_vmstat_counters(), ptr, ctx, ::perfetto::protos::VmstatCounters_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 stat_period_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_stat_period_ms(&has_bits);
          _impl_.stat_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::SysStatsConfig_StatCounters_IsValid(static_cast<int>(val)))) {
              _internal_add_stat_counters(static_cast<::perfetto::protos::SysStatsConfig_StatCounters>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_stat_counters(), ptr, ctx, ::perfetto::protos::SysStatsConfig_StatCounters_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 devfreq_period_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_devfreq_period_ms(&has_bits);
          _impl_.devfreq_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 cpufreq_period_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_cpufreq_period_ms(&has_bits);
          _impl_.cpufreq_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 buddyinfo_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_buddyinfo_period_ms(&has_bits);
          _impl_.buddyinfo_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 diskstat_period_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_diskstat_period_ms(&has_bits);
          _impl_.diskstat_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStatsConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStatsConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 meminfo_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_meminfo_period_ms(), target);
  }

  // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
  for (int i = 0, n = this->_internal_meminfo_counters_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_meminfo_counters(i), target);
  }

  // optional uint32 vmstat_period_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_vmstat_period_ms(), target);
  }

  // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
  for (int i = 0, n = this->_internal_vmstat_counters_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_vmstat_counters(i), target);
  }

  // optional uint32 stat_period_ms = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_stat_period_ms(), target);
  }

  // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
  for (int i = 0, n = this->_internal_stat_counters_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_stat_counters(i), target);
  }

  // optional uint32 devfreq_period_ms = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_devfreq_period_ms(), target);
  }

  // optional uint32 cpufreq_period_ms = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_cpufreq_period_ms(), target);
  }

  // optional uint32 buddyinfo_period_ms = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_buddyinfo_period_ms(), target);
  }

  // optional uint32 diskstat_period_ms = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_diskstat_period_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStatsConfig)
  return target;
}

::size_t SysStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStatsConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_meminfo_counters_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_meminfo_counters(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_vmstat_counters_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_vmstat_counters(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_stat_counters_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_stat_counters(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 meminfo_period_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_meminfo_period_ms());
    }

    // optional uint32 vmstat_period_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_vmstat_period_ms());
    }

    // optional uint32 stat_period_ms = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_stat_period_ms());
    }

    // optional uint32 devfreq_period_ms = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_devfreq_period_ms());
    }

    // optional uint32 cpufreq_period_ms = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpufreq_period_ms());
    }

    // optional uint32 buddyinfo_period_ms = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_buddyinfo_period_ms());
    }

    // optional uint32 diskstat_period_ms = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_diskstat_period_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStatsConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStatsConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStatsConfig::GetClassData() const { return &_class_data_; }


void SysStatsConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStatsConfig*>(&to_msg);
  auto& from = static_cast<const SysStatsConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStatsConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_meminfo_counters()->MergeFrom(from._internal_meminfo_counters());
  _this->_internal_mutable_vmstat_counters()->MergeFrom(from._internal_vmstat_counters());
  _this->_internal_mutable_stat_counters()->MergeFrom(from._internal_stat_counters());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.meminfo_period_ms_ = from._impl_.meminfo_period_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vmstat_period_ms_ = from._impl_.vmstat_period_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stat_period_ms_ = from._impl_.stat_period_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.devfreq_period_ms_ = from._impl_.devfreq_period_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cpufreq_period_ms_ = from._impl_.cpufreq_period_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.buddyinfo_period_ms_ = from._impl_.buddyinfo_period_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.diskstat_period_ms_ = from._impl_.diskstat_period_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStatsConfig::CopyFrom(const SysStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStatsConfig::IsInitialized() const {
  return true;
}

void SysStatsConfig::InternalSwap(SysStatsConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_meminfo_counters()->InternalSwap(
      other->_internal_mutable_meminfo_counters());
  _internal_mutable_vmstat_counters()->InternalSwap(
      other->_internal_mutable_vmstat_counters());
  _internal_mutable_stat_counters()->InternalSwap(
      other->_internal_mutable_stat_counters());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStatsConfig, _impl_.diskstat_period_ms_)
      + sizeof(SysStatsConfig::_impl_.diskstat_period_ms_)
      - PROTOBUF_FIELD_OFFSET(SysStatsConfig, _impl_.meminfo_period_ms_)>(
          reinterpret_cast<char*>(&_impl_.meminfo_period_ms_),
          reinterpret_cast<char*>(&other->_impl_.meminfo_period_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStatsConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStatsConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStatsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStatsConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
