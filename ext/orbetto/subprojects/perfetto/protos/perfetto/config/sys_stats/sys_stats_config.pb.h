// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/sys_stats/sys_stats_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/common/sys_stats_counters.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class SysStatsConfig;
struct SysStatsConfigDefaultTypeInternal;
extern SysStatsConfigDefaultTypeInternal _SysStatsConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::SysStatsConfig* Arena::CreateMaybeMessage<::perfetto::protos::SysStatsConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum SysStatsConfig_StatCounters : int {
  SysStatsConfig_StatCounters_STAT_UNSPECIFIED = 0,
  SysStatsConfig_StatCounters_STAT_CPU_TIMES = 1,
  SysStatsConfig_StatCounters_STAT_IRQ_COUNTS = 2,
  SysStatsConfig_StatCounters_STAT_SOFTIRQ_COUNTS = 3,
  SysStatsConfig_StatCounters_STAT_FORK_COUNT = 4,
};

bool SysStatsConfig_StatCounters_IsValid(int value);
constexpr SysStatsConfig_StatCounters SysStatsConfig_StatCounters_StatCounters_MIN = static_cast<SysStatsConfig_StatCounters>(0);
constexpr SysStatsConfig_StatCounters SysStatsConfig_StatCounters_StatCounters_MAX = static_cast<SysStatsConfig_StatCounters>(4);
constexpr int SysStatsConfig_StatCounters_StatCounters_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SysStatsConfig_StatCounters_descriptor();
template <typename T>
const std::string& SysStatsConfig_StatCounters_Name(T value) {
  static_assert(std::is_same<T, SysStatsConfig_StatCounters>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatCounters_Name().");
  return SysStatsConfig_StatCounters_Name(static_cast<SysStatsConfig_StatCounters>(value));
}
template <>
inline const std::string& SysStatsConfig_StatCounters_Name(SysStatsConfig_StatCounters value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SysStatsConfig_StatCounters_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool SysStatsConfig_StatCounters_Parse(absl::string_view name, SysStatsConfig_StatCounters* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SysStatsConfig_StatCounters>(
      SysStatsConfig_StatCounters_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SysStatsConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SysStatsConfig) */ {
 public:
  inline SysStatsConfig() : SysStatsConfig(nullptr) {}
  ~SysStatsConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SysStatsConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SysStatsConfig(const SysStatsConfig& from);
  SysStatsConfig(SysStatsConfig&& from) noexcept
    : SysStatsConfig() {
    *this = ::std::move(from);
  }

  inline SysStatsConfig& operator=(const SysStatsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SysStatsConfig& operator=(SysStatsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SysStatsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SysStatsConfig* internal_default_instance() {
    return reinterpret_cast<const SysStatsConfig*>(
               &_SysStatsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SysStatsConfig& a, SysStatsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SysStatsConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SysStatsConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SysStatsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SysStatsConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SysStatsConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SysStatsConfig& from) {
    SysStatsConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SysStatsConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SysStatsConfig";
  }
  protected:
  explicit SysStatsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StatCounters = SysStatsConfig_StatCounters;
  static constexpr StatCounters STAT_UNSPECIFIED = SysStatsConfig_StatCounters_STAT_UNSPECIFIED;
  static constexpr StatCounters STAT_CPU_TIMES = SysStatsConfig_StatCounters_STAT_CPU_TIMES;
  static constexpr StatCounters STAT_IRQ_COUNTS = SysStatsConfig_StatCounters_STAT_IRQ_COUNTS;
  static constexpr StatCounters STAT_SOFTIRQ_COUNTS = SysStatsConfig_StatCounters_STAT_SOFTIRQ_COUNTS;
  static constexpr StatCounters STAT_FORK_COUNT = SysStatsConfig_StatCounters_STAT_FORK_COUNT;
  static inline bool StatCounters_IsValid(int value) {
    return SysStatsConfig_StatCounters_IsValid(value);
  }
  static constexpr StatCounters StatCounters_MIN = SysStatsConfig_StatCounters_StatCounters_MIN;
  static constexpr StatCounters StatCounters_MAX = SysStatsConfig_StatCounters_StatCounters_MAX;
  static constexpr int StatCounters_ARRAYSIZE = SysStatsConfig_StatCounters_StatCounters_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatCounters_descriptor() {
    return SysStatsConfig_StatCounters_descriptor();
  }
  template <typename T>
  static inline const std::string& StatCounters_Name(T value) {
    return SysStatsConfig_StatCounters_Name(value);
  }
  static inline bool StatCounters_Parse(absl::string_view name, StatCounters* value) {
    return SysStatsConfig_StatCounters_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeminfoCountersFieldNumber = 2,
    kVmstatCountersFieldNumber = 4,
    kStatCountersFieldNumber = 6,
    kMeminfoPeriodMsFieldNumber = 1,
    kVmstatPeriodMsFieldNumber = 3,
    kStatPeriodMsFieldNumber = 5,
    kDevfreqPeriodMsFieldNumber = 7,
    kCpufreqPeriodMsFieldNumber = 8,
    kBuddyinfoPeriodMsFieldNumber = 9,
    kDiskstatPeriodMsFieldNumber = 10,
  };
  // repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
  int meminfo_counters_size() const;
  private:
  int _internal_meminfo_counters_size() const;

  public:
  void clear_meminfo_counters() ;
  public:
  ::perfetto::protos::MeminfoCounters meminfo_counters(int index) const;
  void set_meminfo_counters(int index, ::perfetto::protos::MeminfoCounters value);
  void add_meminfo_counters(::perfetto::protos::MeminfoCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& meminfo_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_meminfo_counters();

  private:
  ::perfetto::protos::MeminfoCounters _internal_meminfo_counters(int index) const;
  void _internal_add_meminfo_counters(::perfetto::protos::MeminfoCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_meminfo_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_meminfo_counters();

  public:
  // repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
  int vmstat_counters_size() const;
  private:
  int _internal_vmstat_counters_size() const;

  public:
  void clear_vmstat_counters() ;
  public:
  ::perfetto::protos::VmstatCounters vmstat_counters(int index) const;
  void set_vmstat_counters(int index, ::perfetto::protos::VmstatCounters value);
  void add_vmstat_counters(::perfetto::protos::VmstatCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& vmstat_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_vmstat_counters();

  private:
  ::perfetto::protos::VmstatCounters _internal_vmstat_counters(int index) const;
  void _internal_add_vmstat_counters(::perfetto::protos::VmstatCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_vmstat_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_vmstat_counters();

  public:
  // repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
  int stat_counters_size() const;
  private:
  int _internal_stat_counters_size() const;

  public:
  void clear_stat_counters() ;
  public:
  ::perfetto::protos::SysStatsConfig_StatCounters stat_counters(int index) const;
  void set_stat_counters(int index, ::perfetto::protos::SysStatsConfig_StatCounters value);
  void add_stat_counters(::perfetto::protos::SysStatsConfig_StatCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& stat_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_stat_counters();

  private:
  ::perfetto::protos::SysStatsConfig_StatCounters _internal_stat_counters(int index) const;
  void _internal_add_stat_counters(::perfetto::protos::SysStatsConfig_StatCounters value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_stat_counters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_stat_counters();

  public:
  // optional uint32 meminfo_period_ms = 1;
  bool has_meminfo_period_ms() const;
  void clear_meminfo_period_ms() ;
  ::uint32_t meminfo_period_ms() const;
  void set_meminfo_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_meminfo_period_ms() const;
  void _internal_set_meminfo_period_ms(::uint32_t value);

  public:
  // optional uint32 vmstat_period_ms = 3;
  bool has_vmstat_period_ms() const;
  void clear_vmstat_period_ms() ;
  ::uint32_t vmstat_period_ms() const;
  void set_vmstat_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_vmstat_period_ms() const;
  void _internal_set_vmstat_period_ms(::uint32_t value);

  public:
  // optional uint32 stat_period_ms = 5;
  bool has_stat_period_ms() const;
  void clear_stat_period_ms() ;
  ::uint32_t stat_period_ms() const;
  void set_stat_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_stat_period_ms() const;
  void _internal_set_stat_period_ms(::uint32_t value);

  public:
  // optional uint32 devfreq_period_ms = 7;
  bool has_devfreq_period_ms() const;
  void clear_devfreq_period_ms() ;
  ::uint32_t devfreq_period_ms() const;
  void set_devfreq_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_devfreq_period_ms() const;
  void _internal_set_devfreq_period_ms(::uint32_t value);

  public:
  // optional uint32 cpufreq_period_ms = 8;
  bool has_cpufreq_period_ms() const;
  void clear_cpufreq_period_ms() ;
  ::uint32_t cpufreq_period_ms() const;
  void set_cpufreq_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_cpufreq_period_ms() const;
  void _internal_set_cpufreq_period_ms(::uint32_t value);

  public:
  // optional uint32 buddyinfo_period_ms = 9;
  bool has_buddyinfo_period_ms() const;
  void clear_buddyinfo_period_ms() ;
  ::uint32_t buddyinfo_period_ms() const;
  void set_buddyinfo_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_buddyinfo_period_ms() const;
  void _internal_set_buddyinfo_period_ms(::uint32_t value);

  public:
  // optional uint32 diskstat_period_ms = 10;
  bool has_diskstat_period_ms() const;
  void clear_diskstat_period_ms() ;
  ::uint32_t diskstat_period_ms() const;
  void set_diskstat_period_ms(::uint32_t value);

  private:
  ::uint32_t _internal_diskstat_period_ms() const;
  void _internal_set_diskstat_period_ms(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SysStatsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> meminfo_counters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> vmstat_counters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> stat_counters_;
    ::uint32_t meminfo_period_ms_;
    ::uint32_t vmstat_period_ms_;
    ::uint32_t stat_period_ms_;
    ::uint32_t devfreq_period_ms_;
    ::uint32_t cpufreq_period_ms_;
    ::uint32_t buddyinfo_period_ms_;
    ::uint32_t diskstat_period_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SysStatsConfig

// optional uint32 meminfo_period_ms = 1;
inline bool SysStatsConfig::has_meminfo_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SysStatsConfig::clear_meminfo_period_ms() {
  _impl_.meminfo_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SysStatsConfig::meminfo_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.meminfo_period_ms)
  return _internal_meminfo_period_ms();
}
inline void SysStatsConfig::set_meminfo_period_ms(::uint32_t value) {
  _internal_set_meminfo_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.meminfo_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_meminfo_period_ms() const {
  return _impl_.meminfo_period_ms_;
}
inline void SysStatsConfig::_internal_set_meminfo_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.meminfo_period_ms_ = value;
}

// repeated .perfetto.protos.MeminfoCounters meminfo_counters = 2;
inline int SysStatsConfig::_internal_meminfo_counters_size() const {
  return _impl_.meminfo_counters_.size();
}
inline int SysStatsConfig::meminfo_counters_size() const {
  return _internal_meminfo_counters_size();
}
inline void SysStatsConfig::clear_meminfo_counters() {
  _internal_mutable_meminfo_counters()->Clear();
}
inline ::perfetto::protos::MeminfoCounters SysStatsConfig::meminfo_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.meminfo_counters)
  return _internal_meminfo_counters(index);
}
inline void SysStatsConfig::set_meminfo_counters(int index, ::perfetto::protos::MeminfoCounters value) {
  assert(::perfetto::protos::MeminfoCounters_IsValid(value));
  _internal_mutable_meminfo_counters()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.meminfo_counters)
}
inline void SysStatsConfig::add_meminfo_counters(::perfetto::protos::MeminfoCounters value) {
  _internal_add_meminfo_counters(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStatsConfig.meminfo_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& SysStatsConfig::meminfo_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStatsConfig.meminfo_counters)
  return _internal_meminfo_counters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* SysStatsConfig::mutable_meminfo_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStatsConfig.meminfo_counters)
  return _internal_mutable_meminfo_counters();
}
inline ::perfetto::protos::MeminfoCounters SysStatsConfig::_internal_meminfo_counters(int index) const {
  return static_cast<::perfetto::protos::MeminfoCounters>(_internal_meminfo_counters().Get(index));
}
inline void SysStatsConfig::_internal_add_meminfo_counters(::perfetto::protos::MeminfoCounters value) {
  assert(::perfetto::protos::MeminfoCounters_IsValid(value));
  _internal_mutable_meminfo_counters()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& SysStatsConfig::_internal_meminfo_counters() const {
  return _impl_.meminfo_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* SysStatsConfig::_internal_mutable_meminfo_counters() {
  return &_impl_.meminfo_counters_;
}

// optional uint32 vmstat_period_ms = 3;
inline bool SysStatsConfig::has_vmstat_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SysStatsConfig::clear_vmstat_period_ms() {
  _impl_.vmstat_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SysStatsConfig::vmstat_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.vmstat_period_ms)
  return _internal_vmstat_period_ms();
}
inline void SysStatsConfig::set_vmstat_period_ms(::uint32_t value) {
  _internal_set_vmstat_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.vmstat_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_vmstat_period_ms() const {
  return _impl_.vmstat_period_ms_;
}
inline void SysStatsConfig::_internal_set_vmstat_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vmstat_period_ms_ = value;
}

// repeated .perfetto.protos.VmstatCounters vmstat_counters = 4;
inline int SysStatsConfig::_internal_vmstat_counters_size() const {
  return _impl_.vmstat_counters_.size();
}
inline int SysStatsConfig::vmstat_counters_size() const {
  return _internal_vmstat_counters_size();
}
inline void SysStatsConfig::clear_vmstat_counters() {
  _internal_mutable_vmstat_counters()->Clear();
}
inline ::perfetto::protos::VmstatCounters SysStatsConfig::vmstat_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.vmstat_counters)
  return _internal_vmstat_counters(index);
}
inline void SysStatsConfig::set_vmstat_counters(int index, ::perfetto::protos::VmstatCounters value) {
  assert(::perfetto::protos::VmstatCounters_IsValid(value));
  _internal_mutable_vmstat_counters()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.vmstat_counters)
}
inline void SysStatsConfig::add_vmstat_counters(::perfetto::protos::VmstatCounters value) {
  _internal_add_vmstat_counters(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStatsConfig.vmstat_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& SysStatsConfig::vmstat_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStatsConfig.vmstat_counters)
  return _internal_vmstat_counters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* SysStatsConfig::mutable_vmstat_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStatsConfig.vmstat_counters)
  return _internal_mutable_vmstat_counters();
}
inline ::perfetto::protos::VmstatCounters SysStatsConfig::_internal_vmstat_counters(int index) const {
  return static_cast<::perfetto::protos::VmstatCounters>(_internal_vmstat_counters().Get(index));
}
inline void SysStatsConfig::_internal_add_vmstat_counters(::perfetto::protos::VmstatCounters value) {
  assert(::perfetto::protos::VmstatCounters_IsValid(value));
  _internal_mutable_vmstat_counters()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& SysStatsConfig::_internal_vmstat_counters() const {
  return _impl_.vmstat_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* SysStatsConfig::_internal_mutable_vmstat_counters() {
  return &_impl_.vmstat_counters_;
}

// optional uint32 stat_period_ms = 5;
inline bool SysStatsConfig::has_stat_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SysStatsConfig::clear_stat_period_ms() {
  _impl_.stat_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SysStatsConfig::stat_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.stat_period_ms)
  return _internal_stat_period_ms();
}
inline void SysStatsConfig::set_stat_period_ms(::uint32_t value) {
  _internal_set_stat_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.stat_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_stat_period_ms() const {
  return _impl_.stat_period_ms_;
}
inline void SysStatsConfig::_internal_set_stat_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stat_period_ms_ = value;
}

// repeated .perfetto.protos.SysStatsConfig.StatCounters stat_counters = 6;
inline int SysStatsConfig::_internal_stat_counters_size() const {
  return _impl_.stat_counters_.size();
}
inline int SysStatsConfig::stat_counters_size() const {
  return _internal_stat_counters_size();
}
inline void SysStatsConfig::clear_stat_counters() {
  _internal_mutable_stat_counters()->Clear();
}
inline ::perfetto::protos::SysStatsConfig_StatCounters SysStatsConfig::stat_counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.stat_counters)
  return _internal_stat_counters(index);
}
inline void SysStatsConfig::set_stat_counters(int index, ::perfetto::protos::SysStatsConfig_StatCounters value) {
  assert(::perfetto::protos::SysStatsConfig_StatCounters_IsValid(value));
  _internal_mutable_stat_counters()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.stat_counters)
}
inline void SysStatsConfig::add_stat_counters(::perfetto::protos::SysStatsConfig_StatCounters value) {
  _internal_add_stat_counters(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.SysStatsConfig.stat_counters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& SysStatsConfig::stat_counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SysStatsConfig.stat_counters)
  return _internal_stat_counters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* SysStatsConfig::mutable_stat_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SysStatsConfig.stat_counters)
  return _internal_mutable_stat_counters();
}
inline ::perfetto::protos::SysStatsConfig_StatCounters SysStatsConfig::_internal_stat_counters(int index) const {
  return static_cast<::perfetto::protos::SysStatsConfig_StatCounters>(_internal_stat_counters().Get(index));
}
inline void SysStatsConfig::_internal_add_stat_counters(::perfetto::protos::SysStatsConfig_StatCounters value) {
  assert(::perfetto::protos::SysStatsConfig_StatCounters_IsValid(value));
  _internal_mutable_stat_counters()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& SysStatsConfig::_internal_stat_counters() const {
  return _impl_.stat_counters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* SysStatsConfig::_internal_mutable_stat_counters() {
  return &_impl_.stat_counters_;
}

// optional uint32 devfreq_period_ms = 7;
inline bool SysStatsConfig::has_devfreq_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SysStatsConfig::clear_devfreq_period_ms() {
  _impl_.devfreq_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SysStatsConfig::devfreq_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.devfreq_period_ms)
  return _internal_devfreq_period_ms();
}
inline void SysStatsConfig::set_devfreq_period_ms(::uint32_t value) {
  _internal_set_devfreq_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.devfreq_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_devfreq_period_ms() const {
  return _impl_.devfreq_period_ms_;
}
inline void SysStatsConfig::_internal_set_devfreq_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.devfreq_period_ms_ = value;
}

// optional uint32 cpufreq_period_ms = 8;
inline bool SysStatsConfig::has_cpufreq_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SysStatsConfig::clear_cpufreq_period_ms() {
  _impl_.cpufreq_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SysStatsConfig::cpufreq_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.cpufreq_period_ms)
  return _internal_cpufreq_period_ms();
}
inline void SysStatsConfig::set_cpufreq_period_ms(::uint32_t value) {
  _internal_set_cpufreq_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.cpufreq_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_cpufreq_period_ms() const {
  return _impl_.cpufreq_period_ms_;
}
inline void SysStatsConfig::_internal_set_cpufreq_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cpufreq_period_ms_ = value;
}

// optional uint32 buddyinfo_period_ms = 9;
inline bool SysStatsConfig::has_buddyinfo_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SysStatsConfig::clear_buddyinfo_period_ms() {
  _impl_.buddyinfo_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SysStatsConfig::buddyinfo_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.buddyinfo_period_ms)
  return _internal_buddyinfo_period_ms();
}
inline void SysStatsConfig::set_buddyinfo_period_ms(::uint32_t value) {
  _internal_set_buddyinfo_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.buddyinfo_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_buddyinfo_period_ms() const {
  return _impl_.buddyinfo_period_ms_;
}
inline void SysStatsConfig::_internal_set_buddyinfo_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.buddyinfo_period_ms_ = value;
}

// optional uint32 diskstat_period_ms = 10;
inline bool SysStatsConfig::has_diskstat_period_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SysStatsConfig::clear_diskstat_period_ms() {
  _impl_.diskstat_period_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t SysStatsConfig::diskstat_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SysStatsConfig.diskstat_period_ms)
  return _internal_diskstat_period_ms();
}
inline void SysStatsConfig::set_diskstat_period_ms(::uint32_t value) {
  _internal_set_diskstat_period_ms(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SysStatsConfig.diskstat_period_ms)
}
inline ::uint32_t SysStatsConfig::_internal_diskstat_period_ms() const {
  return _impl_.diskstat_period_ms_;
}
inline void SysStatsConfig::_internal_set_diskstat_period_ms(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.diskstat_period_ms_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::SysStatsConfig_StatCounters> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::SysStatsConfig_StatCounters>() {
  return ::perfetto::protos::SysStatsConfig_StatCounters_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fsys_5fstats_2fsys_5fstats_5fconfig_2eproto_2epb_2eh
