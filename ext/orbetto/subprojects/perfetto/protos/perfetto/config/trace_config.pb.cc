// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/trace_config.proto

#include "protos/perfetto/config/trace_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_BufferConfig::TraceConfig_BufferConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_kb_)*/ 0u

  , /*decltype(_impl_.fill_policy_)*/ 0
} {}
struct TraceConfig_BufferConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_BufferConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_BufferConfigDefaultTypeInternal() {}
  union {
    TraceConfig_BufferConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_BufferConfigDefaultTypeInternal _TraceConfig_BufferConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_DataSource::TraceConfig_DataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.producer_name_filter_)*/{}
  , /*decltype(_impl_.producer_name_regex_filter_)*/{}
  , /*decltype(_impl_.config_)*/nullptr} {}
struct TraceConfig_DataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_DataSourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_DataSourceDefaultTypeInternal() {}
  union {
    TraceConfig_DataSource _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_DataSourceDefaultTypeInternal _TraceConfig_DataSource_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disable_clock_snapshotting_)*/ false

  , /*decltype(_impl_.disable_trace_config_)*/ false

  , /*decltype(_impl_.disable_system_info_)*/ false

  , /*decltype(_impl_.disable_service_events_)*/ false

  , /*decltype(_impl_.primary_trace_clock_)*/ 0

  , /*decltype(_impl_.snapshot_interval_ms_)*/ 0u

  , /*decltype(_impl_.prefer_suspend_clock_for_snapshot_)*/ false

  , /*decltype(_impl_.disable_chunk_usage_histograms_)*/ false
} {}
struct TraceConfig_BuiltinDataSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_BuiltinDataSourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_BuiltinDataSourceDefaultTypeInternal() {}
  union {
    TraceConfig_BuiltinDataSource _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_BuiltinDataSourceDefaultTypeInternal _TraceConfig_BuiltinDataSource_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.producer_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.shm_size_kb_)*/ 0u

  , /*decltype(_impl_.page_size_kb_)*/ 0u
} {}
struct TraceConfig_ProducerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_ProducerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_ProducerConfigDefaultTypeInternal() {}
  union {
    TraceConfig_ProducerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_ProducerConfigDefaultTypeInternal _TraceConfig_ProducerConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.triggering_alert_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.triggering_config_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.triggering_subscription_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.triggering_config_uid_)*/ 0
} {}
struct TraceConfig_StatsdMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_StatsdMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_StatsdMetadataDefaultTypeInternal() {}
  union {
    TraceConfig_StatsdMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_StatsdMetadataDefaultTypeInternal _TraceConfig_StatsdMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_upload_per_day_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_tracing_buffer_size_kb_)*/ 0u
} {}
struct TraceConfig_GuardrailOverridesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_GuardrailOverridesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_GuardrailOverridesDefaultTypeInternal() {}
  union {
    TraceConfig_GuardrailOverrides _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_GuardrailOverridesDefaultTypeInternal _TraceConfig_GuardrailOverrides_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.producer_name_regex_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.stop_delay_ms_)*/ 0u

  , /*decltype(_impl_.max_per_24_h_)*/ 0u

  , /*decltype(_impl_.skip_probability_)*/ 0
} {}
struct TraceConfig_TriggerConfig_TriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig_TriggerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TriggerConfig_TriggerDefaultTypeInternal() {}
  union {
    TraceConfig_TriggerConfig_Trigger _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TriggerConfig_TriggerDefaultTypeInternal _TraceConfig_TriggerConfig_Trigger_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.triggers_)*/{}
  , /*decltype(_impl_.trigger_mode_)*/ 0

  , /*decltype(_impl_.trigger_timeout_ms_)*/ 0u

  , /*decltype(_impl_.use_clone_snapshot_if_available_)*/ false
} {}
struct TraceConfig_TriggerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TriggerConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TriggerConfigDefaultTypeInternal() {}
  union {
    TraceConfig_TriggerConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TriggerConfigDefaultTypeInternal _TraceConfig_TriggerConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clear_period_ms_)*/ 0u
} {}
struct TraceConfig_IncrementalStateConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_IncrementalStateConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_IncrementalStateConfigDefaultTypeInternal() {}
  union {
    TraceConfig_IncrementalStateConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_IncrementalStateConfigDefaultTypeInternal _TraceConfig_IncrementalStateConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destination_package_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_class_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.privacy_level_)*/ 0

  , /*decltype(_impl_.skip_incidentd_)*/ false

  , /*decltype(_impl_.skip_dropbox_)*/ false
} {}
struct TraceConfig_IncidentReportConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_IncidentReportConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_IncidentReportConfigDefaultTypeInternal() {}
  union {
    TraceConfig_IncidentReportConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_IncidentReportConfigDefaultTypeInternal _TraceConfig_IncidentReportConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterRule::TraceConfig_TraceFilter_StringFilterRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.regex_pattern_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.atrace_payload_starts_with_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.policy_)*/ 0
} {}
struct TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal() {}
  union {
    TraceConfig_TraceFilter_StringFilterRule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TraceFilter_StringFilterRuleDefaultTypeInternal _TraceConfig_TraceFilter_StringFilterRule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterChain::TraceConfig_TraceFilter_StringFilterChain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal() {}
  union {
    TraceConfig_TraceFilter_StringFilterChain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TraceFilter_StringFilterChainDefaultTypeInternal _TraceConfig_TraceFilter_StringFilterChain_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_TraceFilter::TraceConfig_TraceFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytecode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bytecode_v2_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.string_filter_chain_)*/nullptr} {}
struct TraceConfig_TraceFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_TraceFilterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_TraceFilterDefaultTypeInternal() {}
  union {
    TraceConfig_TraceFilter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_TraceFilterDefaultTypeInternal _TraceConfig_TraceFilter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_AndroidReportConfig::TraceConfig_AndroidReportConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reporter_service_package_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reporter_service_class_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_report_)*/ false

  , /*decltype(_impl_.use_pipe_in_framework_for_testing_)*/ false
} {}
struct TraceConfig_AndroidReportConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_AndroidReportConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_AndroidReportConfigDefaultTypeInternal() {}
  union {
    TraceConfig_AndroidReportConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_AndroidReportConfigDefaultTypeInternal _TraceConfig_AndroidReportConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig_CmdTraceStartDelay::TraceConfig_CmdTraceStartDelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_delay_ms_)*/ 0u

  , /*decltype(_impl_.max_delay_ms_)*/ 0u
} {}
struct TraceConfig_CmdTraceStartDelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfig_CmdTraceStartDelayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfig_CmdTraceStartDelayDefaultTypeInternal() {}
  union {
    TraceConfig_CmdTraceStartDelay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfig_CmdTraceStartDelayDefaultTypeInternal _TraceConfig_CmdTraceStartDelay_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceConfig::TraceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buffers_)*/{}
  , /*decltype(_impl_.data_sources_)*/{}
  , /*decltype(_impl_.producers_)*/{}
  , /*decltype(_impl_.activate_triggers_)*/{}
  , /*decltype(_impl_.unique_session_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.output_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.statsd_metadata_)*/nullptr
  , /*decltype(_impl_.guardrail_overrides_)*/nullptr
  , /*decltype(_impl_.trigger_config_)*/nullptr
  , /*decltype(_impl_.builtin_data_sources_)*/nullptr
  , /*decltype(_impl_.incremental_state_config_)*/nullptr
  , /*decltype(_impl_.incident_report_config_)*/nullptr
  , /*decltype(_impl_.trace_filter_)*/nullptr
  , /*decltype(_impl_.android_report_config_)*/nullptr
  , /*decltype(_impl_.cmd_trace_start_delay_)*/nullptr
  , /*decltype(_impl_.duration_ms_)*/ 0u

  , /*decltype(_impl_.lockdown_mode_)*/ 0

  , /*decltype(_impl_.max_file_size_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.file_write_period_ms_)*/ 0u

  , /*decltype(_impl_.flush_period_ms_)*/ 0u

  , /*decltype(_impl_.flush_timeout_ms_)*/ 0u

  , /*decltype(_impl_.prefer_suspend_clock_for_duration_)*/ false

  , /*decltype(_impl_.enable_extra_guardrails_)*/ false

  , /*decltype(_impl_.write_into_file_)*/ false

  , /*decltype(_impl_.deferred_start_)*/ false

  , /*decltype(_impl_.data_source_stop_timeout_ms_)*/ 0u

  , /*decltype(_impl_.compression_type_)*/ 0

  , /*decltype(_impl_.notify_traceur_)*/ false

  , /*decltype(_impl_.allow_user_build_tracing_)*/ false

  , /*decltype(_impl_.compress_from_cli_)*/ false

  , /*decltype(_impl_.bugreport_score_)*/ 0

  , /*decltype(_impl_.trace_uuid_msb_)*/ ::int64_t{0}

  , /*decltype(_impl_.trace_uuid_lsb_)*/ ::int64_t{0}

  , /*decltype(_impl_.statsd_logging_)*/ 0
} {}
struct TraceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfigDefaultTypeInternal() {}
  union {
    TraceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BufferConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BufferConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BufferConfig, _impl_.size_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BufferConfig, _impl_.fill_policy_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_DataSource, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_DataSource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_DataSource, _impl_.config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_DataSource, _impl_.producer_name_filter_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_DataSource, _impl_.producer_name_regex_filter_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.disable_clock_snapshotting_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.disable_trace_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.disable_system_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.disable_service_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.primary_trace_clock_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.snapshot_interval_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.prefer_suspend_clock_for_snapshot_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_BuiltinDataSource, _impl_.disable_chunk_usage_histograms_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_ProducerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_ProducerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_ProducerConfig, _impl_.producer_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_ProducerConfig, _impl_.shm_size_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_ProducerConfig, _impl_.page_size_kb_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_StatsdMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_StatsdMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_StatsdMetadata, _impl_.triggering_alert_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_StatsdMetadata, _impl_.triggering_config_uid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_StatsdMetadata, _impl_.triggering_config_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_StatsdMetadata, _impl_.triggering_subscription_id_),
    0,
    3,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_GuardrailOverrides, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_GuardrailOverrides, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_GuardrailOverrides, _impl_.max_upload_per_day_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_GuardrailOverrides, _impl_.max_tracing_buffer_size_kb_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _impl_.producer_name_regex_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _impl_.stop_delay_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _impl_.max_per_24_h_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig_Trigger, _impl_.skip_probability_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig, _impl_.trigger_mode_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig, _impl_.use_clone_snapshot_if_available_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig, _impl_.triggers_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TriggerConfig, _impl_.trigger_timeout_ms_),
    0,
    2,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncrementalStateConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncrementalStateConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncrementalStateConfig, _impl_.clear_period_ms_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _impl_.destination_package_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _impl_.destination_class_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _impl_.privacy_level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _impl_.skip_incidentd_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_IncidentReportConfig, _impl_.skip_dropbox_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule, _impl_.policy_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule, _impl_.regex_pattern_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule, _impl_.atrace_payload_starts_with_),
    2,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain, _impl_.rules_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter, _impl_.bytecode_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter, _impl_.bytecode_v2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_TraceFilter, _impl_.string_filter_chain_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_AndroidReportConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_AndroidReportConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_AndroidReportConfig, _impl_.reporter_service_package_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_AndroidReportConfig, _impl_.reporter_service_class_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_AndroidReportConfig, _impl_.skip_report_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_AndroidReportConfig, _impl_.use_pipe_in_framework_for_testing_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_CmdTraceStartDelay, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_CmdTraceStartDelay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_CmdTraceStartDelay, _impl_.min_delay_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig_CmdTraceStartDelay, _impl_.max_delay_ms_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.buffers_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.data_sources_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.builtin_data_sources_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.duration_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.prefer_suspend_clock_for_duration_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.enable_extra_guardrails_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.lockdown_mode_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.producers_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.statsd_metadata_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.write_into_file_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.output_path_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.file_write_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.max_file_size_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.guardrail_overrides_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.deferred_start_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.flush_period_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.flush_timeout_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.data_source_stop_timeout_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.notify_traceur_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.bugreport_score_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.trigger_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.activate_triggers_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.incremental_state_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.allow_user_build_tracing_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.unique_session_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.compression_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.compress_from_cli_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.incident_report_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.statsd_logging_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.trace_uuid_msb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.trace_uuid_lsb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.trace_filter_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.android_report_config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceConfig, _impl_.cmd_trace_start_delay_),
    ~0u,
    ~0u,
    5,
    11,
    17,
    18,
    12,
    ~0u,
    2,
    19,
    1,
    14,
    13,
    3,
    20,
    15,
    16,
    21,
    23,
    26,
    4,
    ~0u,
    6,
    24,
    0,
    22,
    25,
    7,
    29,
    27,
    28,
    8,
    9,
    10,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::TraceConfig_BufferConfig)},
        { 12, 23, -1, sizeof(::perfetto::protos::TraceConfig_DataSource)},
        { 26, 42, -1, sizeof(::perfetto::protos::TraceConfig_BuiltinDataSource)},
        { 50, 61, -1, sizeof(::perfetto::protos::TraceConfig_ProducerConfig)},
        { 64, 76, -1, sizeof(::perfetto::protos::TraceConfig_StatsdMetadata)},
        { 80, 90, -1, sizeof(::perfetto::protos::TraceConfig_GuardrailOverrides)},
        { 92, 105, -1, sizeof(::perfetto::protos::TraceConfig_TriggerConfig_Trigger)},
        { 110, 122, -1, sizeof(::perfetto::protos::TraceConfig_TriggerConfig)},
        { 126, 135, -1, sizeof(::perfetto::protos::TraceConfig_IncrementalStateConfig)},
        { 136, 149, -1, sizeof(::perfetto::protos::TraceConfig_IncidentReportConfig)},
        { 154, 165, -1, sizeof(::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule)},
        { 168, -1, -1, sizeof(::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain)},
        { 177, 188, -1, sizeof(::perfetto::protos::TraceConfig_TraceFilter)},
        { 191, 203, -1, sizeof(::perfetto::protos::TraceConfig_AndroidReportConfig)},
        { 207, 217, -1, sizeof(::perfetto::protos::TraceConfig_CmdTraceStartDelay)},
        { 219, 261, -1, sizeof(::perfetto::protos::TraceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TraceConfig_BufferConfig_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_DataSource_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_BuiltinDataSource_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_ProducerConfig_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_StatsdMetadata_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_GuardrailOverrides_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_TriggerConfig_Trigger_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_TriggerConfig_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_IncrementalStateConfig_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_IncidentReportConfig_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_TraceFilter_StringFilterRule_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_TraceFilter_StringFilterChain_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_TraceFilter_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_AndroidReportConfig_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_CmdTraceStartDelay_default_instance_._instance,
    &::perfetto::protos::_TraceConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)protos/perfetto/config/trace_config.pr"
    "oto\022\017perfetto.protos\032*protos/perfetto/co"
    "mmon/builtin_clock.proto\032/protos/perfett"
    "o/config/data_source_config.proto\"\337!\n\013Tr"
    "aceConfig\022:\n\007buffers\030\001 \003(\0132).perfetto.pr"
    "otos.TraceConfig.BufferConfig\022=\n\014data_so"
    "urces\030\002 \003(\0132\'.perfetto.protos.TraceConfi"
    "g.DataSource\022L\n\024builtin_data_sources\030\024 \001"
    "(\0132..perfetto.protos.TraceConfig.Builtin"
    "DataSource\022\023\n\013duration_ms\030\003 \001(\r\022)\n!prefe"
    "r_suspend_clock_for_duration\030$ \001(\010\022\037\n\027en"
    "able_extra_guardrails\030\004 \001(\010\022I\n\rlockdown_"
    "mode\030\005 \001(\01622.perfetto.protos.TraceConfig"
    ".LockdownModeOperation\022>\n\tproducers\030\006 \003("
    "\0132+.perfetto.protos.TraceConfig.Producer"
    "Config\022D\n\017statsd_metadata\030\007 \001(\0132+.perfet"
    "to.protos.TraceConfig.StatsdMetadata\022\027\n\017"
    "write_into_file\030\010 \001(\010\022\023\n\013output_path\030\035 \001"
    "(\t\022\034\n\024file_write_period_ms\030\t \001(\r\022\033\n\023max_"
    "file_size_bytes\030\n \001(\004\022L\n\023guardrail_overr"
    "ides\030\013 \001(\0132/.perfetto.protos.TraceConfig"
    ".GuardrailOverrides\022\026\n\016deferred_start\030\014 "
    "\001(\010\022\027\n\017flush_period_ms\030\r \001(\r\022\030\n\020flush_ti"
    "meout_ms\030\016 \001(\r\022#\n\033data_source_stop_timeo"
    "ut_ms\030\027 \001(\r\022\026\n\016notify_traceur\030\020 \001(\010\022\027\n\017b"
    "ugreport_score\030\036 \001(\005\022B\n\016trigger_config\030\021"
    " \001(\0132*.perfetto.protos.TraceConfig.Trigg"
    "erConfig\022\031\n\021activate_triggers\030\022 \003(\t\022U\n\030i"
    "ncremental_state_config\030\025 \001(\01323.perfetto"
    ".protos.TraceConfig.IncrementalStateConf"
    "ig\022 \n\030allow_user_build_tracing\030\023 \001(\010\022\033\n\023"
    "unique_session_name\030\026 \001(\t\022F\n\020compression"
    "_type\030\030 \001(\0162,.perfetto.protos.TraceConfi"
    "g.CompressionType\022\031\n\021compress_from_cli\030%"
    " \001(\010\022Q\n\026incident_report_config\030\031 \001(\01321.p"
    "erfetto.protos.TraceConfig.IncidentRepor"
    "tConfig\022B\n\016statsd_logging\030\037 \001(\0162*.perfet"
    "to.protos.TraceConfig.StatsdLogging\022\032\n\016t"
    "race_uuid_msb\030\033 \001(\003B\002\030\001\022\032\n\016trace_uuid_ls"
    "b\030\034 \001(\003B\002\030\001\022>\n\014trace_filter\030! \001(\0132(.perf"
    "etto.protos.TraceConfig.TraceFilter\022O\n\025a"
    "ndroid_report_config\030\" \001(\01320.perfetto.pr"
    "otos.TraceConfig.AndroidReportConfig\022N\n\025"
    "cmd_trace_start_delay\030# \001(\0132/.perfetto.p"
    "rotos.TraceConfig.CmdTraceStartDelay\032\263\001\n"
    "\014BufferConfig\022\017\n\007size_kb\030\001 \001(\r\022I\n\013fill_p"
    "olicy\030\004 \001(\01624.perfetto.protos.TraceConfi"
    "g.BufferConfig.FillPolicy\";\n\nFillPolicy\022"
    "\017\n\013UNSPECIFIED\020\000\022\017\n\013RING_BUFFER\020\001\022\013\n\007DIS"
    "CARD\020\002J\004\010\002\020\003J\004\010\003\020\004\032\201\001\n\nDataSource\0221\n\006con"
    "fig\030\001 \001(\0132!.perfetto.protos.DataSourceCo"
    "nfig\022\034\n\024producer_name_filter\030\002 \003(\t\022\"\n\032pr"
    "oducer_name_regex_filter\030\003 \003(\t\032\277\002\n\021Built"
    "inDataSource\022\"\n\032disable_clock_snapshotti"
    "ng\030\001 \001(\010\022\034\n\024disable_trace_config\030\002 \001(\010\022\033"
    "\n\023disable_system_info\030\003 \001(\010\022\036\n\026disable_s"
    "ervice_events\030\004 \001(\010\022:\n\023primary_trace_clo"
    "ck\030\005 \001(\0162\035.perfetto.protos.BuiltinClock\022"
    "\034\n\024snapshot_interval_ms\030\006 \001(\r\022)\n!prefer_"
    "suspend_clock_for_snapshot\030\007 \001(\010\022&\n\036disa"
    "ble_chunk_usage_histograms\030\010 \001(\010\032R\n\016Prod"
    "ucerConfig\022\025\n\rproducer_name\030\001 \001(\t\022\023\n\013shm"
    "_size_kb\030\002 \001(\r\022\024\n\014page_size_kb\030\003 \001(\r\032\216\001\n"
    "\016StatsdMetadata\022\033\n\023triggering_alert_id\030\001"
    " \001(\003\022\035\n\025triggering_config_uid\030\002 \001(\005\022\034\n\024t"
    "riggering_config_id\030\003 \001(\003\022\"\n\032triggering_"
    "subscription_id\030\004 \001(\003\032Z\n\022GuardrailOverri"
    "des\022 \n\030max_upload_per_day_bytes\030\001 \001(\004\022\"\n"
    "\032max_tracing_buffer_size_kb\030\002 \001(\r\032\276\003\n\rTr"
    "iggerConfig\022L\n\014trigger_mode\030\001 \001(\01626.perf"
    "etto.protos.TraceConfig.TriggerConfig.Tr"
    "iggerMode\022\'\n\037use_clone_snapshot_if_avail"
    "able\030\004 \001(\010\022D\n\010triggers\030\002 \003(\01322.perfetto."
    "protos.TraceConfig.TriggerConfig.Trigger"
    "\022\032\n\022trigger_timeout_ms\030\003 \001(\r\032{\n\007Trigger\022"
    "\014\n\004name\030\001 \001(\t\022\033\n\023producer_name_regex\030\002 \001"
    "(\t\022\025\n\rstop_delay_ms\030\003 \001(\r\022\024\n\014max_per_24_"
    "h\030\004 \001(\r\022\030\n\020skip_probability\030\005 \001(\001\"W\n\013Tri"
    "ggerMode\022\017\n\013UNSPECIFIED\020\000\022\021\n\rSTART_TRACI"
    "NG\020\001\022\020\n\014STOP_TRACING\020\002\022\022\n\016CLONE_SNAPSHOT"
    "\020\003\0321\n\026IncrementalStateConfig\022\027\n\017clear_pe"
    "riod_ms\030\001 \001(\r\032\227\001\n\024IncidentReportConfig\022\033"
    "\n\023destination_package\030\001 \001(\t\022\031\n\021destinati"
    "on_class\030\002 \001(\t\022\025\n\rprivacy_level\030\003 \001(\005\022\026\n"
    "\016skip_incidentd\030\005 \001(\010\022\030\n\014skip_dropbox\030\004 "
    "\001(\010B\002\030\001\032\247\004\n\013TraceFilter\022\020\n\010bytecode\030\001 \001("
    "\014\022\023\n\013bytecode_v2\030\002 \001(\014\022W\n\023string_filter_"
    "chain\030\003 \001(\0132:.perfetto.protos.TraceConfi"
    "g.TraceFilter.StringFilterChain\032\232\001\n\020Stri"
    "ngFilterRule\022K\n\006policy\030\001 \001(\0162;.perfetto."
    "protos.TraceConfig.TraceFilter.StringFil"
    "terPolicy\022\025\n\rregex_pattern\030\002 \001(\t\022\"\n\032atra"
    "ce_payload_starts_with\030\003 \001(\t\032]\n\021StringFi"
    "lterChain\022H\n\005rules\030\001 \003(\01329.perfetto.prot"
    "os.TraceConfig.TraceFilter.StringFilterR"
    "ule\"\233\001\n\022StringFilterPolicy\022\023\n\017SFP_UNSPEC"
    "IFIED\020\000\022\033\n\027SFP_MATCH_REDACT_GROUPS\020\001\022\"\n\036"
    "SFP_ATRACE_MATCH_REDACT_GROUPS\020\002\022\023\n\017SFP_"
    "MATCH_BREAK\020\003\022\032\n\026SFP_ATRACE_MATCH_BREAK\020"
    "\004\032\227\001\n\023AndroidReportConfig\022 \n\030reporter_se"
    "rvice_package\030\001 \001(\t\022\036\n\026reporter_service_"
    "class\030\002 \001(\t\022\023\n\013skip_report\030\003 \001(\010\022)\n!use_"
    "pipe_in_framework_for_testing\030\004 \001(\010\032@\n\022C"
    "mdTraceStartDelay\022\024\n\014min_delay_ms\030\001 \001(\r\022"
    "\024\n\014max_delay_ms\030\002 \001(\r\"U\n\025LockdownModeOpe"
    "ration\022\026\n\022LOCKDOWN_UNCHANGED\020\000\022\022\n\016LOCKDO"
    "WN_CLEAR\020\001\022\020\n\014LOCKDOWN_SET\020\002\"Q\n\017Compress"
    "ionType\022 \n\034COMPRESSION_TYPE_UNSPECIFIED\020"
    "\000\022\034\n\030COMPRESSION_TYPE_DEFLATE\020\001\"h\n\rStats"
    "dLogging\022\036\n\032STATSD_LOGGING_UNSPECIFIED\020\000"
    "\022\032\n\026STATSD_LOGGING_ENABLED\020\001\022\033\n\027STATSD_L"
    "OGGING_DISABLED\020\002J\004\010\017\020\020J\004\010\032\020\033J\004\010 \020!"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_deps[2] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2fbuiltin_5fclock_2eproto,
        &::descriptor_table_protos_2fperfetto_2fconfig_2fdata_5fsource_5fconfig_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto = {
    false,
    false,
    4475,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto,
    "protos/perfetto/config/trace_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
    descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_deps,
    2,
    16,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceConfig_BufferConfig_FillPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[0];
}
bool TraceConfig_BufferConfig_FillPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::UNSPECIFIED;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::RING_BUFFER;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::DISCARD;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::FillPolicy_MIN;
constexpr TraceConfig_BufferConfig_FillPolicy TraceConfig_BufferConfig::FillPolicy_MAX;
constexpr int TraceConfig_BufferConfig::FillPolicy_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceConfig_TriggerConfig_TriggerMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[1];
}
bool TraceConfig_TriggerConfig_TriggerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::UNSPECIFIED;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::START_TRACING;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::STOP_TRACING;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::CLONE_SNAPSHOT;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::TriggerMode_MIN;
constexpr TraceConfig_TriggerConfig_TriggerMode TraceConfig_TriggerConfig::TriggerMode_MAX;
constexpr int TraceConfig_TriggerConfig::TriggerMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceConfig_TraceFilter_StringFilterPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[2];
}
bool TraceConfig_TraceFilter_StringFilterPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_UNSPECIFIED;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_MATCH_REDACT_GROUPS;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_ATRACE_MATCH_REDACT_GROUPS;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_MATCH_BREAK;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::SFP_ATRACE_MATCH_BREAK;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::StringFilterPolicy_MIN;
constexpr TraceConfig_TraceFilter_StringFilterPolicy TraceConfig_TraceFilter::StringFilterPolicy_MAX;
constexpr int TraceConfig_TraceFilter::StringFilterPolicy_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceConfig_LockdownModeOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[3];
}
bool TraceConfig_LockdownModeOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_UNCHANGED;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_CLEAR;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LOCKDOWN_SET;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LockdownModeOperation_MIN;
constexpr TraceConfig_LockdownModeOperation TraceConfig::LockdownModeOperation_MAX;
constexpr int TraceConfig::LockdownModeOperation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceConfig_CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[4];
}
bool TraceConfig_CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceConfig_CompressionType TraceConfig::COMPRESSION_TYPE_UNSPECIFIED;
constexpr TraceConfig_CompressionType TraceConfig::COMPRESSION_TYPE_DEFLATE;
constexpr TraceConfig_CompressionType TraceConfig::CompressionType_MIN;
constexpr TraceConfig_CompressionType TraceConfig::CompressionType_MAX;
constexpr int TraceConfig::CompressionType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceConfig_StatsdLogging_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[5];
}
bool TraceConfig_StatsdLogging_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceConfig_StatsdLogging TraceConfig::STATSD_LOGGING_UNSPECIFIED;
constexpr TraceConfig_StatsdLogging TraceConfig::STATSD_LOGGING_ENABLED;
constexpr TraceConfig_StatsdLogging TraceConfig::STATSD_LOGGING_DISABLED;
constexpr TraceConfig_StatsdLogging TraceConfig::StatsdLogging_MIN;
constexpr TraceConfig_StatsdLogging TraceConfig::StatsdLogging_MAX;
constexpr int TraceConfig::StatsdLogging_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TraceConfig_BufferConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_BufferConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_BufferConfig, _impl_._has_bits_);
  static void set_has_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_BufferConfig::TraceConfig_BufferConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.BufferConfig)
}
TraceConfig_BufferConfig::TraceConfig_BufferConfig(const TraceConfig_BufferConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.BufferConfig)
}

inline void TraceConfig_BufferConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_kb_) { 0u }

    , decltype(_impl_.fill_policy_) { 0 }

  };
}

TraceConfig_BufferConfig::~TraceConfig_BufferConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.BufferConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_BufferConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_BufferConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_BufferConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.BufferConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.size_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fill_policy_) -
        reinterpret_cast<char*>(&_impl_.size_kb_)) + sizeof(_impl_.fill_policy_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_BufferConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 size_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_size_kb(&has_bits);
          _impl_.size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_BufferConfig_FillPolicy_IsValid(static_cast<int>(val)))) {
            _internal_set_fill_policy(static_cast<::perfetto::protos::TraceConfig_BufferConfig_FillPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_BufferConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.BufferConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 size_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_size_kb(), target);
  }

  // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_fill_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.BufferConfig)
  return target;
}

::size_t TraceConfig_BufferConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.BufferConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 size_kb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_size_kb());
    }

    // optional .perfetto.protos.TraceConfig.BufferConfig.FillPolicy fill_policy = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_fill_policy());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_BufferConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_BufferConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_BufferConfig::GetClassData() const { return &_class_data_; }


void TraceConfig_BufferConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_BufferConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig_BufferConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.BufferConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.size_kb_ = from._impl_.size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fill_policy_ = from._impl_.fill_policy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_BufferConfig::CopyFrom(const TraceConfig_BufferConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.BufferConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_BufferConfig::IsInitialized() const {
  return true;
}

void TraceConfig_BufferConfig::InternalSwap(TraceConfig_BufferConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_BufferConfig, _impl_.fill_policy_)
      + sizeof(TraceConfig_BufferConfig::_impl_.fill_policy_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_BufferConfig, _impl_.size_kb_)>(
          reinterpret_cast<char*>(&_impl_.size_kb_),
          reinterpret_cast<char*>(&other->_impl_.size_kb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_BufferConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[0]);
}
// ===================================================================

class TraceConfig_DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_DataSource>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_DataSource, _impl_._has_bits_);
  static const ::perfetto::protos::DataSourceConfig& config(const TraceConfig_DataSource* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::DataSourceConfig&
TraceConfig_DataSource::_Internal::config(const TraceConfig_DataSource* msg) {
  return *msg->_impl_.config_;
}
void TraceConfig_DataSource::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TraceConfig_DataSource::TraceConfig_DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.DataSource)
}
TraceConfig_DataSource::TraceConfig_DataSource(const TraceConfig_DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_DataSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_filter_){from._impl_.producer_name_filter_}
    , decltype(_impl_.producer_name_regex_filter_){from._impl_.producer_name_regex_filter_}
    , decltype(_impl_.config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.config_ = new ::perfetto::protos::DataSourceConfig(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.DataSource)
}

inline void TraceConfig_DataSource::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_filter_){arena}
    , decltype(_impl_.producer_name_regex_filter_){arena}
    , decltype(_impl_.config_){nullptr}
  };
}

TraceConfig_DataSource::~TraceConfig_DataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.DataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_DataSource::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_producer_name_filter()->~RepeatedPtrField();
  _internal_mutable_producer_name_regex_filter()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void TraceConfig_DataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.DataSource)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_producer_name_filter()->Clear();
  _internal_mutable_producer_name_regex_filter()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_DataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.DataSourceConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string producer_name_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_producer_name_filter();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.DataSource.producer_name_filter");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string producer_name_regex_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_producer_name_regex_filter();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_DataSource::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.DataSource)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.DataSourceConfig config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // repeated string producer_name_filter = 2;
  for (int i = 0, n = this->_internal_producer_name_filter_size(); i < n; ++i) {
    const auto& s = this->_internal_producer_name_filter(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.DataSource.producer_name_filter");
    target = stream->WriteString(2, s, target);
  }

  // repeated string producer_name_regex_filter = 3;
  for (int i = 0, n = this->_internal_producer_name_regex_filter_size(); i < n; ++i) {
    const auto& s = this->_internal_producer_name_regex_filter(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.DataSource.producer_name_regex_filter");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.DataSource)
  return target;
}

::size_t TraceConfig_DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.DataSource)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string producer_name_filter = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_producer_name_filter().size());
  for (int i = 0, n = _internal_producer_name_filter().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_producer_name_filter().Get(i));
  }

  // repeated string producer_name_regex_filter = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_producer_name_regex_filter().size());
  for (int i = 0, n = _internal_producer_name_regex_filter().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_producer_name_regex_filter().Get(i));
  }

  // optional .perfetto.protos.DataSourceConfig config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_DataSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_DataSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_DataSource::GetClassData() const { return &_class_data_; }


void TraceConfig_DataSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_DataSource*>(&to_msg);
  auto& from = static_cast<const TraceConfig_DataSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.DataSource)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_producer_name_filter()->MergeFrom(from._internal_producer_name_filter());
  _this->_internal_mutable_producer_name_regex_filter()->MergeFrom(from._internal_producer_name_regex_filter());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_config()->::perfetto::protos::DataSourceConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_DataSource::CopyFrom(const TraceConfig_DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_DataSource::IsInitialized() const {
  return true;
}

void TraceConfig_DataSource::InternalSwap(TraceConfig_DataSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_producer_name_filter()->InternalSwap(
      other->_internal_mutable_producer_name_filter());
  _internal_mutable_producer_name_regex_filter()->InternalSwap(
      other->_internal_mutable_producer_name_regex_filter());
  swap(_impl_.config_, other->_impl_.config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_DataSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[1]);
}
// ===================================================================

class TraceConfig_BuiltinDataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_BuiltinDataSource>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_BuiltinDataSource, _impl_._has_bits_);
  static void set_has_disable_clock_snapshotting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disable_system_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_disable_service_events(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_primary_trace_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_snapshot_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefer_suspend_clock_for_snapshot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disable_chunk_usage_histograms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.BuiltinDataSource)
}
TraceConfig_BuiltinDataSource::TraceConfig_BuiltinDataSource(const TraceConfig_BuiltinDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.BuiltinDataSource)
}

inline void TraceConfig_BuiltinDataSource::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disable_clock_snapshotting_) { false }

    , decltype(_impl_.disable_trace_config_) { false }

    , decltype(_impl_.disable_system_info_) { false }

    , decltype(_impl_.disable_service_events_) { false }

    , decltype(_impl_.primary_trace_clock_) { 0 }

    , decltype(_impl_.snapshot_interval_ms_) { 0u }

    , decltype(_impl_.prefer_suspend_clock_for_snapshot_) { false }

    , decltype(_impl_.disable_chunk_usage_histograms_) { false }

  };
}

TraceConfig_BuiltinDataSource::~TraceConfig_BuiltinDataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.BuiltinDataSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_BuiltinDataSource::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_BuiltinDataSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_BuiltinDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.disable_clock_snapshotting_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disable_chunk_usage_histograms_) -
        reinterpret_cast<char*>(&_impl_.disable_clock_snapshotting_)) + sizeof(_impl_.disable_chunk_usage_histograms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_BuiltinDataSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool disable_clock_snapshotting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_disable_clock_snapshotting(&has_bits);
          _impl_.disable_clock_snapshotting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_trace_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_disable_trace_config(&has_bits);
          _impl_.disable_trace_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_system_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_disable_system_info(&has_bits);
          _impl_.disable_system_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_service_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_disable_service_events(&has_bits);
          _impl_.disable_service_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BuiltinClock_IsValid(static_cast<int>(val)))) {
            _internal_set_primary_trace_clock(static_cast<::perfetto::protos::BuiltinClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 snapshot_interval_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_snapshot_interval_ms(&has_bits);
          _impl_.snapshot_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool prefer_suspend_clock_for_snapshot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_prefer_suspend_clock_for_snapshot(&has_bits);
          _impl_.prefer_suspend_clock_for_snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disable_chunk_usage_histograms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_disable_chunk_usage_histograms(&has_bits);
          _impl_.disable_chunk_usage_histograms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_BuiltinDataSource::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool disable_clock_snapshotting = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_disable_clock_snapshotting(), target);
  }

  // optional bool disable_trace_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_disable_trace_config(), target);
  }

  // optional bool disable_system_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_disable_system_info(), target);
  }

  // optional bool disable_service_events = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_disable_service_events(), target);
  }

  // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_primary_trace_clock(), target);
  }

  // optional uint32 snapshot_interval_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_snapshot_interval_ms(), target);
  }

  // optional bool prefer_suspend_clock_for_snapshot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_prefer_suspend_clock_for_snapshot(), target);
  }

  // optional bool disable_chunk_usage_histograms = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_disable_chunk_usage_histograms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.BuiltinDataSource)
  return target;
}

::size_t TraceConfig_BuiltinDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool disable_clock_snapshotting = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool disable_trace_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool disable_system_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool disable_service_events = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional .perfetto.protos.BuiltinClock primary_trace_clock = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_primary_trace_clock());
    }

    // optional uint32 snapshot_interval_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_snapshot_interval_ms());
    }

    // optional bool prefer_suspend_clock_for_snapshot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool disable_chunk_usage_histograms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_BuiltinDataSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_BuiltinDataSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_BuiltinDataSource::GetClassData() const { return &_class_data_; }


void TraceConfig_BuiltinDataSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_BuiltinDataSource*>(&to_msg);
  auto& from = static_cast<const TraceConfig_BuiltinDataSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.disable_clock_snapshotting_ = from._impl_.disable_clock_snapshotting_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disable_trace_config_ = from._impl_.disable_trace_config_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.disable_system_info_ = from._impl_.disable_system_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.disable_service_events_ = from._impl_.disable_service_events_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.primary_trace_clock_ = from._impl_.primary_trace_clock_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.snapshot_interval_ms_ = from._impl_.snapshot_interval_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.prefer_suspend_clock_for_snapshot_ = from._impl_.prefer_suspend_clock_for_snapshot_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.disable_chunk_usage_histograms_ = from._impl_.disable_chunk_usage_histograms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_BuiltinDataSource::CopyFrom(const TraceConfig_BuiltinDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.BuiltinDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_BuiltinDataSource::IsInitialized() const {
  return true;
}

void TraceConfig_BuiltinDataSource::InternalSwap(TraceConfig_BuiltinDataSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_BuiltinDataSource, _impl_.disable_chunk_usage_histograms_)
      + sizeof(TraceConfig_BuiltinDataSource::_impl_.disable_chunk_usage_histograms_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_BuiltinDataSource, _impl_.disable_clock_snapshotting_)>(
          reinterpret_cast<char*>(&_impl_.disable_clock_snapshotting_),
          reinterpret_cast<char*>(&other->_impl_.disable_clock_snapshotting_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_BuiltinDataSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[2]);
}
// ===================================================================

class TraceConfig_ProducerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_ProducerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_ProducerConfig, _impl_._has_bits_);
  static void set_has_producer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shm_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.ProducerConfig)
}
TraceConfig_ProducerConfig::TraceConfig_ProducerConfig(const TraceConfig_ProducerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_ProducerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_) {}

    , decltype(_impl_.shm_size_kb_) {}

    , decltype(_impl_.page_size_kb_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.producer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.producer_name_.Set(from._internal_producer_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shm_size_kb_, &from._impl_.shm_size_kb_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.page_size_kb_) -
    reinterpret_cast<char*>(&_impl_.shm_size_kb_)) + sizeof(_impl_.page_size_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.ProducerConfig)
}

inline void TraceConfig_ProducerConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_name_) {}

    , decltype(_impl_.shm_size_kb_) { 0u }

    , decltype(_impl_.page_size_kb_) { 0u }

  };
  _impl_.producer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.producer_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_ProducerConfig::~TraceConfig_ProducerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.ProducerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_ProducerConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.producer_name_.Destroy();
}

void TraceConfig_ProducerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_ProducerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.ProducerConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.producer_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.shm_size_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.page_size_kb_) -
        reinterpret_cast<char*>(&_impl_.shm_size_kb_)) + sizeof(_impl_.page_size_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_ProducerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string producer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_producer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.ProducerConfig.producer_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 shm_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_shm_size_kb(&has_bits);
          _impl_.shm_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 page_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_page_size_kb(&has_bits);
          _impl_.page_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_ProducerConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.ProducerConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string producer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_producer_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.ProducerConfig.producer_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 shm_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_shm_size_kb(), target);
  }

  // optional uint32 page_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_page_size_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.ProducerConfig)
  return target;
}

::size_t TraceConfig_ProducerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.ProducerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string producer_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_producer_name());
    }

    // optional uint32 shm_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_shm_size_kb());
    }

    // optional uint32 page_size_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_page_size_kb());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_ProducerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_ProducerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_ProducerConfig::GetClassData() const { return &_class_data_; }


void TraceConfig_ProducerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_ProducerConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig_ProducerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.ProducerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_producer_name(from._internal_producer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shm_size_kb_ = from._impl_.shm_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.page_size_kb_ = from._impl_.page_size_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_ProducerConfig::CopyFrom(const TraceConfig_ProducerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.ProducerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_ProducerConfig::IsInitialized() const {
  return true;
}

void TraceConfig_ProducerConfig::InternalSwap(TraceConfig_ProducerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_name_, lhs_arena,
                                       &other->_impl_.producer_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_ProducerConfig, _impl_.page_size_kb_)
      + sizeof(TraceConfig_ProducerConfig::_impl_.page_size_kb_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_ProducerConfig, _impl_.shm_size_kb_)>(
          reinterpret_cast<char*>(&_impl_.shm_size_kb_),
          reinterpret_cast<char*>(&other->_impl_.shm_size_kb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_ProducerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[3]);
}
// ===================================================================

class TraceConfig_StatsdMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_StatsdMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_StatsdMetadata, _impl_._has_bits_);
  static void set_has_triggering_alert_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_triggering_config_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_triggering_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_triggering_subscription_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.StatsdMetadata)
}
TraceConfig_StatsdMetadata::TraceConfig_StatsdMetadata(const TraceConfig_StatsdMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.StatsdMetadata)
}

inline void TraceConfig_StatsdMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggering_alert_id_) { ::int64_t{0} }

    , decltype(_impl_.triggering_config_id_) { ::int64_t{0} }

    , decltype(_impl_.triggering_subscription_id_) { ::int64_t{0} }

    , decltype(_impl_.triggering_config_uid_) { 0 }

  };
}

TraceConfig_StatsdMetadata::~TraceConfig_StatsdMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.StatsdMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_StatsdMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_StatsdMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_StatsdMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.StatsdMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.triggering_alert_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.triggering_config_uid_) -
        reinterpret_cast<char*>(&_impl_.triggering_alert_id_)) + sizeof(_impl_.triggering_config_uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_StatsdMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 triggering_alert_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_triggering_alert_id(&has_bits);
          _impl_.triggering_alert_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 triggering_config_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_triggering_config_uid(&has_bits);
          _impl_.triggering_config_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 triggering_config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_triggering_config_id(&has_bits);
          _impl_.triggering_config_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 triggering_subscription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_triggering_subscription_id(&has_bits);
          _impl_.triggering_subscription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_StatsdMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.StatsdMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 triggering_alert_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_triggering_alert_id(), target);
  }

  // optional int32 triggering_config_uid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_triggering_config_uid(), target);
  }

  // optional int64 triggering_config_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_triggering_config_id(), target);
  }

  // optional int64 triggering_subscription_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_triggering_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.StatsdMetadata)
  return target;
}

::size_t TraceConfig_StatsdMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.StatsdMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 triggering_alert_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_triggering_alert_id());
    }

    // optional int64 triggering_config_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_triggering_config_id());
    }

    // optional int64 triggering_subscription_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_triggering_subscription_id());
    }

    // optional int32 triggering_config_uid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_triggering_config_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_StatsdMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_StatsdMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_StatsdMetadata::GetClassData() const { return &_class_data_; }


void TraceConfig_StatsdMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_StatsdMetadata*>(&to_msg);
  auto& from = static_cast<const TraceConfig_StatsdMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.StatsdMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.triggering_alert_id_ = from._impl_.triggering_alert_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.triggering_config_id_ = from._impl_.triggering_config_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.triggering_subscription_id_ = from._impl_.triggering_subscription_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.triggering_config_uid_ = from._impl_.triggering_config_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_StatsdMetadata::CopyFrom(const TraceConfig_StatsdMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.StatsdMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_StatsdMetadata::IsInitialized() const {
  return true;
}

void TraceConfig_StatsdMetadata::InternalSwap(TraceConfig_StatsdMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_StatsdMetadata, _impl_.triggering_config_uid_)
      + sizeof(TraceConfig_StatsdMetadata::_impl_.triggering_config_uid_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_StatsdMetadata, _impl_.triggering_alert_id_)>(
          reinterpret_cast<char*>(&_impl_.triggering_alert_id_),
          reinterpret_cast<char*>(&other->_impl_.triggering_alert_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_StatsdMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[4]);
}
// ===================================================================

class TraceConfig_GuardrailOverrides::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_GuardrailOverrides>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_GuardrailOverrides, _impl_._has_bits_);
  static void set_has_max_upload_per_day_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_tracing_buffer_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.GuardrailOverrides)
}
TraceConfig_GuardrailOverrides::TraceConfig_GuardrailOverrides(const TraceConfig_GuardrailOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.GuardrailOverrides)
}

inline void TraceConfig_GuardrailOverrides::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_upload_per_day_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.max_tracing_buffer_size_kb_) { 0u }

  };
}

TraceConfig_GuardrailOverrides::~TraceConfig_GuardrailOverrides() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.GuardrailOverrides)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_GuardrailOverrides::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_GuardrailOverrides::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_GuardrailOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_upload_per_day_bytes_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_tracing_buffer_size_kb_) -
        reinterpret_cast<char*>(&_impl_.max_upload_per_day_bytes_)) + sizeof(_impl_.max_tracing_buffer_size_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_GuardrailOverrides::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 max_upload_per_day_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_max_upload_per_day_bytes(&has_bits);
          _impl_.max_upload_per_day_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 max_tracing_buffer_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_max_tracing_buffer_size_kb(&has_bits);
          _impl_.max_tracing_buffer_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_GuardrailOverrides::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 max_upload_per_day_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_max_upload_per_day_bytes(), target);
  }

  // optional uint32 max_tracing_buffer_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_tracing_buffer_size_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.GuardrailOverrides)
  return target;
}

::size_t TraceConfig_GuardrailOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_upload_per_day_bytes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_max_upload_per_day_bytes());
    }

    // optional uint32 max_tracing_buffer_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_max_tracing_buffer_size_kb());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_GuardrailOverrides::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_GuardrailOverrides::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_GuardrailOverrides::GetClassData() const { return &_class_data_; }


void TraceConfig_GuardrailOverrides::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_GuardrailOverrides*>(&to_msg);
  auto& from = static_cast<const TraceConfig_GuardrailOverrides&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_upload_per_day_bytes_ = from._impl_.max_upload_per_day_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_tracing_buffer_size_kb_ = from._impl_.max_tracing_buffer_size_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_GuardrailOverrides::CopyFrom(const TraceConfig_GuardrailOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.GuardrailOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_GuardrailOverrides::IsInitialized() const {
  return true;
}

void TraceConfig_GuardrailOverrides::InternalSwap(TraceConfig_GuardrailOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_GuardrailOverrides, _impl_.max_tracing_buffer_size_kb_)
      + sizeof(TraceConfig_GuardrailOverrides::_impl_.max_tracing_buffer_size_kb_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_GuardrailOverrides, _impl_.max_upload_per_day_bytes_)>(
          reinterpret_cast<char*>(&_impl_.max_upload_per_day_bytes_),
          reinterpret_cast<char*>(&other->_impl_.max_upload_per_day_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_GuardrailOverrides::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[5]);
}
// ===================================================================

class TraceConfig_TriggerConfig_Trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TriggerConfig_Trigger>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig_Trigger, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_name_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_per_24_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}
TraceConfig_TriggerConfig_Trigger::TraceConfig_TriggerConfig_Trigger(const TraceConfig_TriggerConfig_Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_TriggerConfig_Trigger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.producer_name_regex_) {}

    , decltype(_impl_.stop_delay_ms_) {}

    , decltype(_impl_.max_per_24_h_) {}

    , decltype(_impl_.skip_probability_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.producer_name_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.producer_name_regex_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.producer_name_regex_.Set(from._internal_producer_name_regex(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stop_delay_ms_, &from._impl_.stop_delay_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.skip_probability_) -
    reinterpret_cast<char*>(&_impl_.stop_delay_ms_)) + sizeof(_impl_.skip_probability_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
}

inline void TraceConfig_TriggerConfig_Trigger::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.producer_name_regex_) {}

    , decltype(_impl_.stop_delay_ms_) { 0u }

    , decltype(_impl_.max_per_24_h_) { 0u }

    , decltype(_impl_.skip_probability_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_name_regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.producer_name_regex_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_TriggerConfig_Trigger::~TraceConfig_TriggerConfig_Trigger() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TriggerConfig_Trigger::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.producer_name_regex_.Destroy();
}

void TraceConfig_TriggerConfig_Trigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TriggerConfig_Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.producer_name_regex_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.stop_delay_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.skip_probability_) -
        reinterpret_cast<char*>(&_impl_.stop_delay_ms_)) + sizeof(_impl_.skip_probability_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_TriggerConfig_Trigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.TriggerConfig.Trigger.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string producer_name_regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_producer_name_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 stop_delay_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_stop_delay_ms(&has_bits);
          _impl_.stop_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 max_per_24_h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_max_per_24_h(&has_bits);
          _impl_.max_per_24_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double skip_probability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_skip_probability(&has_bits);
          _impl_.skip_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_TriggerConfig_Trigger::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.TriggerConfig.Trigger.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string producer_name_regex = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_producer_name_regex();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.TriggerConfig.Trigger.producer_name_regex");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 stop_delay_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_stop_delay_ms(), target);
  }

  // optional uint32 max_per_24_h = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_max_per_24_h(), target);
  }

  // optional double skip_probability = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_skip_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  return target;
}

::size_t TraceConfig_TriggerConfig_Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string producer_name_regex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_producer_name_regex());
    }

    // optional uint32 stop_delay_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_stop_delay_ms());
    }

    // optional uint32 max_per_24_h = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_max_per_24_h());
    }

    // optional double skip_probability = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_TriggerConfig_Trigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_TriggerConfig_Trigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_TriggerConfig_Trigger::GetClassData() const { return &_class_data_; }


void TraceConfig_TriggerConfig_Trigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_TriggerConfig_Trigger*>(&to_msg);
  auto& from = static_cast<const TraceConfig_TriggerConfig_Trigger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_producer_name_regex(from._internal_producer_name_regex());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stop_delay_ms_ = from._impl_.stop_delay_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_per_24_h_ = from._impl_.max_per_24_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.skip_probability_ = from._impl_.skip_probability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_TriggerConfig_Trigger::CopyFrom(const TraceConfig_TriggerConfig_Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TriggerConfig.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TriggerConfig_Trigger::IsInitialized() const {
  return true;
}

void TraceConfig_TriggerConfig_Trigger::InternalSwap(TraceConfig_TriggerConfig_Trigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_name_regex_, lhs_arena,
                                       &other->_impl_.producer_name_regex_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig_Trigger, _impl_.skip_probability_)
      + sizeof(TraceConfig_TriggerConfig_Trigger::_impl_.skip_probability_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig_Trigger, _impl_.stop_delay_ms_)>(
          reinterpret_cast<char*>(&_impl_.stop_delay_ms_),
          reinterpret_cast<char*>(&other->_impl_.stop_delay_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_TriggerConfig_Trigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[6]);
}
// ===================================================================

class TraceConfig_TriggerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TriggerConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig, _impl_._has_bits_);
  static void set_has_trigger_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_clone_snapshot_if_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trigger_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TriggerConfig)
}
TraceConfig_TriggerConfig::TraceConfig_TriggerConfig(const TraceConfig_TriggerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_TriggerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggers_){from._impl_.triggers_}
    , decltype(_impl_.trigger_mode_) {}

    , decltype(_impl_.trigger_timeout_ms_) {}

    , decltype(_impl_.use_clone_snapshot_if_available_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.trigger_mode_, &from._impl_.trigger_mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.use_clone_snapshot_if_available_) -
    reinterpret_cast<char*>(&_impl_.trigger_mode_)) + sizeof(_impl_.use_clone_snapshot_if_available_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TriggerConfig)
}

inline void TraceConfig_TriggerConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggers_){arena}
    , decltype(_impl_.trigger_mode_) { 0 }

    , decltype(_impl_.trigger_timeout_ms_) { 0u }

    , decltype(_impl_.use_clone_snapshot_if_available_) { false }

  };
}

TraceConfig_TriggerConfig::~TraceConfig_TriggerConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TriggerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TriggerConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_triggers()->~RepeatedPtrField();
}

void TraceConfig_TriggerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TriggerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TriggerConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_triggers()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.trigger_mode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_clone_snapshot_if_available_) -
        reinterpret_cast<char*>(&_impl_.trigger_mode_)) + sizeof(_impl_.use_clone_snapshot_if_available_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_TriggerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode_IsValid(static_cast<int>(val)))) {
            _internal_set_trigger_mode(static_cast<::perfetto::protos::TraceConfig_TriggerConfig_TriggerMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 trigger_timeout_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_trigger_timeout_ms(&has_bits);
          _impl_.trigger_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool use_clone_snapshot_if_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_use_clone_snapshot_if_available(&has_bits);
          _impl_.use_clone_snapshot_if_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_TriggerConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TriggerConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_trigger_mode(), target);
  }

  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triggers_size()); i < n; i++) {
    const auto& repfield = this->_internal_triggers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 trigger_timeout_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_trigger_timeout_ms(), target);
  }

  // optional bool use_clone_snapshot_if_available = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_use_clone_snapshot_if_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TriggerConfig)
  return target;
}

::size_t TraceConfig_TriggerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TriggerConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TriggerConfig.Trigger triggers = 2;
  total_size += 1UL * this->_internal_triggers_size();
  for (const auto& msg : this->_internal_triggers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.TraceConfig.TriggerConfig.TriggerMode trigger_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_trigger_mode());
    }

    // optional uint32 trigger_timeout_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_trigger_timeout_ms());
    }

    // optional bool use_clone_snapshot_if_available = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_TriggerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_TriggerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_TriggerConfig::GetClassData() const { return &_class_data_; }


void TraceConfig_TriggerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_TriggerConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig_TriggerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TriggerConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_triggers()->MergeFrom(from._internal_triggers());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.trigger_mode_ = from._impl_.trigger_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.trigger_timeout_ms_ = from._impl_.trigger_timeout_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.use_clone_snapshot_if_available_ = from._impl_.use_clone_snapshot_if_available_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_TriggerConfig::CopyFrom(const TraceConfig_TriggerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TriggerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TriggerConfig::IsInitialized() const {
  return true;
}

void TraceConfig_TriggerConfig::InternalSwap(TraceConfig_TriggerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_triggers()->InternalSwap(other->_internal_mutable_triggers());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig, _impl_.use_clone_snapshot_if_available_)
      + sizeof(TraceConfig_TriggerConfig::_impl_.use_clone_snapshot_if_available_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_TriggerConfig, _impl_.trigger_mode_)>(
          reinterpret_cast<char*>(&_impl_.trigger_mode_),
          reinterpret_cast<char*>(&other->_impl_.trigger_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_TriggerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[7]);
}
// ===================================================================

class TraceConfig_IncrementalStateConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_IncrementalStateConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_IncrementalStateConfig, _impl_._has_bits_);
  static void set_has_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
}
TraceConfig_IncrementalStateConfig::TraceConfig_IncrementalStateConfig(const TraceConfig_IncrementalStateConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
}

inline void TraceConfig_IncrementalStateConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_period_ms_) { 0u }

  };
}

TraceConfig_IncrementalStateConfig::~TraceConfig_IncrementalStateConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.IncrementalStateConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_IncrementalStateConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_IncrementalStateConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_IncrementalStateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clear_period_ms_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_IncrementalStateConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 clear_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_clear_period_ms(&has_bits);
          _impl_.clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_IncrementalStateConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 clear_period_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_clear_period_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.IncrementalStateConfig)
  return target;
}

::size_t TraceConfig_IncrementalStateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 clear_period_ms = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_clear_period_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_IncrementalStateConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_IncrementalStateConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_IncrementalStateConfig::GetClassData() const { return &_class_data_; }


void TraceConfig_IncrementalStateConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_IncrementalStateConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig_IncrementalStateConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_clear_period_ms(from._internal_clear_period_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_IncrementalStateConfig::CopyFrom(const TraceConfig_IncrementalStateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.IncrementalStateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_IncrementalStateConfig::IsInitialized() const {
  return true;
}

void TraceConfig_IncrementalStateConfig::InternalSwap(TraceConfig_IncrementalStateConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.clear_period_ms_, other->_impl_.clear_period_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_IncrementalStateConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[8]);
}
// ===================================================================

class TraceConfig_IncidentReportConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_IncidentReportConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_IncidentReportConfig, _impl_._has_bits_);
  static void set_has_destination_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privacy_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skip_incidentd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip_dropbox(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.IncidentReportConfig)
}
TraceConfig_IncidentReportConfig::TraceConfig_IncidentReportConfig(const TraceConfig_IncidentReportConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_IncidentReportConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_package_) {}

    , decltype(_impl_.destination_class_) {}

    , decltype(_impl_.privacy_level_) {}

    , decltype(_impl_.skip_incidentd_) {}

    , decltype(_impl_.skip_dropbox_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.destination_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.destination_package_.Set(from._internal_destination_package(), _this->GetArenaForAllocation());
  }
  _impl_.destination_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.destination_class_.Set(from._internal_destination_class(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.privacy_level_, &from._impl_.privacy_level_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.skip_dropbox_) -
    reinterpret_cast<char*>(&_impl_.privacy_level_)) + sizeof(_impl_.skip_dropbox_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.IncidentReportConfig)
}

inline void TraceConfig_IncidentReportConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destination_package_) {}

    , decltype(_impl_.destination_class_) {}

    , decltype(_impl_.privacy_level_) { 0 }

    , decltype(_impl_.skip_incidentd_) { false }

    , decltype(_impl_.skip_dropbox_) { false }

  };
  _impl_.destination_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_IncidentReportConfig::~TraceConfig_IncidentReportConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.IncidentReportConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_IncidentReportConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.destination_package_.Destroy();
  _impl_.destination_class_.Destroy();
}

void TraceConfig_IncidentReportConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_IncidentReportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destination_package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.destination_class_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.privacy_level_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.skip_dropbox_) -
        reinterpret_cast<char*>(&_impl_.privacy_level_)) + sizeof(_impl_.skip_dropbox_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_IncidentReportConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string destination_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_destination_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.IncidentReportConfig.destination_package");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string destination_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_destination_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.IncidentReportConfig.destination_class");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 privacy_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_privacy_level(&has_bits);
          _impl_.privacy_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool skip_dropbox = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_skip_dropbox(&has_bits);
          _impl_.skip_dropbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool skip_incidentd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_skip_incidentd(&has_bits);
          _impl_.skip_incidentd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_IncidentReportConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string destination_package = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_destination_package();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.IncidentReportConfig.destination_package");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string destination_class = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_destination_class();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.IncidentReportConfig.destination_class");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 privacy_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_privacy_level(), target);
  }

  // optional bool skip_dropbox = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_skip_dropbox(), target);
  }

  // optional bool skip_incidentd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_skip_incidentd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.IncidentReportConfig)
  return target;
}

::size_t TraceConfig_IncidentReportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string destination_package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_destination_package());
    }

    // optional string destination_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_destination_class());
    }

    // optional int32 privacy_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_privacy_level());
    }

    // optional bool skip_incidentd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool skip_dropbox = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_IncidentReportConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_IncidentReportConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_IncidentReportConfig::GetClassData() const { return &_class_data_; }


void TraceConfig_IncidentReportConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_IncidentReportConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig_IncidentReportConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destination_package(from._internal_destination_package());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_destination_class(from._internal_destination_class());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.privacy_level_ = from._impl_.privacy_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.skip_incidentd_ = from._impl_.skip_incidentd_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.skip_dropbox_ = from._impl_.skip_dropbox_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_IncidentReportConfig::CopyFrom(const TraceConfig_IncidentReportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.IncidentReportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_IncidentReportConfig::IsInitialized() const {
  return true;
}

void TraceConfig_IncidentReportConfig::InternalSwap(TraceConfig_IncidentReportConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_package_, lhs_arena,
                                       &other->_impl_.destination_package_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_class_, lhs_arena,
                                       &other->_impl_.destination_class_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_IncidentReportConfig, _impl_.skip_dropbox_)
      + sizeof(TraceConfig_IncidentReportConfig::_impl_.skip_dropbox_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_IncidentReportConfig, _impl_.privacy_level_)>(
          reinterpret_cast<char*>(&_impl_.privacy_level_),
          reinterpret_cast<char*>(&other->_impl_.privacy_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_IncidentReportConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[9]);
}
// ===================================================================

class TraceConfig_TraceFilter_StringFilterRule::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TraceFilter_StringFilterRule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_TraceFilter_StringFilterRule, _impl_._has_bits_);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_regex_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atrace_payload_starts_with(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_TraceFilter_StringFilterRule::TraceConfig_TraceFilter_StringFilterRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
}
TraceConfig_TraceFilter_StringFilterRule::TraceConfig_TraceFilter_StringFilterRule(const TraceConfig_TraceFilter_StringFilterRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_TraceFilter_StringFilterRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regex_pattern_) {}

    , decltype(_impl_.atrace_payload_starts_with_) {}

    , decltype(_impl_.policy_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.regex_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.regex_pattern_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.regex_pattern_.Set(from._internal_regex_pattern(), _this->GetArenaForAllocation());
  }
  _impl_.atrace_payload_starts_with_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.atrace_payload_starts_with_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.atrace_payload_starts_with_.Set(from._internal_atrace_payload_starts_with(), _this->GetArenaForAllocation());
  }
  _this->_impl_.policy_ = from._impl_.policy_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
}

inline void TraceConfig_TraceFilter_StringFilterRule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regex_pattern_) {}

    , decltype(_impl_.atrace_payload_starts_with_) {}

    , decltype(_impl_.policy_) { 0 }

  };
  _impl_.regex_pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.regex_pattern_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atrace_payload_starts_with_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.atrace_payload_starts_with_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_TraceFilter_StringFilterRule::~TraceConfig_TraceFilter_StringFilterRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TraceFilter_StringFilterRule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regex_pattern_.Destroy();
  _impl_.atrace_payload_starts_with_.Destroy();
}

void TraceConfig_TraceFilter_StringFilterRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TraceFilter_StringFilterRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.regex_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.atrace_payload_starts_with_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.policy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_TraceFilter_StringFilterRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy_IsValid(static_cast<int>(val)))) {
            _internal_set_policy(static_cast<::perfetto::protos::TraceConfig_TraceFilter_StringFilterPolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string regex_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_regex_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string atrace_payload_starts_with = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_atrace_payload_starts_with();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_TraceFilter_StringFilterRule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_policy(), target);
  }

  // optional string regex_pattern = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_regex_pattern();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.regex_pattern");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string atrace_payload_starts_with = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_atrace_payload_starts_with();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.atrace_payload_starts_with");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  return target;
}

::size_t TraceConfig_TraceFilter_StringFilterRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string regex_pattern = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_regex_pattern());
    }

    // optional string atrace_payload_starts_with = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_atrace_payload_starts_with());
    }

    // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy policy = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_policy());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_TraceFilter_StringFilterRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_TraceFilter_StringFilterRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_TraceFilter_StringFilterRule::GetClassData() const { return &_class_data_; }


void TraceConfig_TraceFilter_StringFilterRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_TraceFilter_StringFilterRule*>(&to_msg);
  auto& from = static_cast<const TraceConfig_TraceFilter_StringFilterRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_regex_pattern(from._internal_regex_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_atrace_payload_starts_with(from._internal_atrace_payload_starts_with());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.policy_ = from._impl_.policy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_TraceFilter_StringFilterRule::CopyFrom(const TraceConfig_TraceFilter_StringFilterRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TraceFilter_StringFilterRule::IsInitialized() const {
  return true;
}

void TraceConfig_TraceFilter_StringFilterRule::InternalSwap(TraceConfig_TraceFilter_StringFilterRule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.regex_pattern_, lhs_arena,
                                       &other->_impl_.regex_pattern_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.atrace_payload_starts_with_, lhs_arena,
                                       &other->_impl_.atrace_payload_starts_with_, rhs_arena);
  swap(_impl_.policy_, other->_impl_.policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_TraceFilter_StringFilterRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[10]);
}
// ===================================================================

class TraceConfig_TraceFilter_StringFilterChain::_Internal {
 public:
};

TraceConfig_TraceFilter_StringFilterChain::TraceConfig_TraceFilter_StringFilterChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
}
TraceConfig_TraceFilter_StringFilterChain::TraceConfig_TraceFilter_StringFilterChain(const TraceConfig_TraceFilter_StringFilterChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_TraceFilter_StringFilterChain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
}

inline void TraceConfig_TraceFilter_StringFilterChain::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TraceConfig_TraceFilter_StringFilterChain::~TraceConfig_TraceFilter_StringFilterChain() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TraceFilter_StringFilterChain::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rules()->~RepeatedPtrField();
}

void TraceConfig_TraceFilter_StringFilterChain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TraceFilter_StringFilterChain::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rules()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_TraceFilter_StringFilterChain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_TraceFilter_StringFilterChain::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  return target;
}

::size_t TraceConfig_TraceFilter_StringFilterChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.TraceFilter.StringFilterRule rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_internal_rules()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_TraceFilter_StringFilterChain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_TraceFilter_StringFilterChain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_TraceFilter_StringFilterChain::GetClassData() const { return &_class_data_; }


void TraceConfig_TraceFilter_StringFilterChain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_TraceFilter_StringFilterChain*>(&to_msg);
  auto& from = static_cast<const TraceConfig_TraceFilter_StringFilterChain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rules()->MergeFrom(from._internal_rules());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_TraceFilter_StringFilterChain::CopyFrom(const TraceConfig_TraceFilter_StringFilterChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TraceFilter_StringFilterChain::IsInitialized() const {
  return true;
}

void TraceConfig_TraceFilter_StringFilterChain::InternalSwap(TraceConfig_TraceFilter_StringFilterChain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rules()->InternalSwap(other->_internal_mutable_rules());
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_TraceFilter_StringFilterChain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[11]);
}
// ===================================================================

class TraceConfig_TraceFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_TraceFilter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_TraceFilter, _impl_._has_bits_);
  static void set_has_bytecode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytecode_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain& string_filter_chain(const TraceConfig_TraceFilter* msg);
  static void set_has_string_filter_chain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain&
TraceConfig_TraceFilter::_Internal::string_filter_chain(const TraceConfig_TraceFilter* msg) {
  return *msg->_impl_.string_filter_chain_;
}
TraceConfig_TraceFilter::TraceConfig_TraceFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.TraceFilter)
}
TraceConfig_TraceFilter::TraceConfig_TraceFilter(const TraceConfig_TraceFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_TraceFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytecode_) {}

    , decltype(_impl_.bytecode_v2_) {}

    , decltype(_impl_.string_filter_chain_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bytecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytecode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.bytecode_.Set(from._internal_bytecode(), _this->GetArenaForAllocation());
  }
  _impl_.bytecode_v2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytecode_v2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.bytecode_v2_.Set(from._internal_bytecode_v2(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.string_filter_chain_ = new ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain(*from._impl_.string_filter_chain_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.TraceFilter)
}

inline void TraceConfig_TraceFilter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytecode_) {}

    , decltype(_impl_.bytecode_v2_) {}

    , decltype(_impl_.string_filter_chain_){nullptr}
  };
  _impl_.bytecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytecode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytecode_v2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytecode_v2_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_TraceFilter::~TraceConfig_TraceFilter() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.TraceFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_TraceFilter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bytecode_.Destroy();
  _impl_.bytecode_v2_.Destroy();
  if (this != internal_default_instance()) delete _impl_.string_filter_chain_;
}

void TraceConfig_TraceFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_TraceFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.TraceFilter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bytecode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bytecode_v2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.string_filter_chain_ != nullptr);
      _impl_.string_filter_chain_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_TraceFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes bytecode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bytecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes bytecode_v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bytecode_v2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_filter_chain(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_TraceFilter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.TraceFilter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes bytecode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_bytecode();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional bytes bytecode_v2 = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_bytecode_v2();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::string_filter_chain(this),
        _Internal::string_filter_chain(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.TraceFilter)
  return target;
}

::size_t TraceConfig_TraceFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.TraceFilter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes bytecode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bytecode());
    }

    // optional bytes bytecode_v2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bytecode_v2());
    }

    // optional .perfetto.protos.TraceConfig.TraceFilter.StringFilterChain string_filter_chain = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.string_filter_chain_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_TraceFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_TraceFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_TraceFilter::GetClassData() const { return &_class_data_; }


void TraceConfig_TraceFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_TraceFilter*>(&to_msg);
  auto& from = static_cast<const TraceConfig_TraceFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.TraceFilter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bytecode(from._internal_bytecode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bytecode_v2(from._internal_bytecode_v2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_string_filter_chain()->::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain::MergeFrom(
          from._internal_string_filter_chain());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_TraceFilter::CopyFrom(const TraceConfig_TraceFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.TraceFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_TraceFilter::IsInitialized() const {
  return true;
}

void TraceConfig_TraceFilter::InternalSwap(TraceConfig_TraceFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytecode_, lhs_arena,
                                       &other->_impl_.bytecode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytecode_v2_, lhs_arena,
                                       &other->_impl_.bytecode_v2_, rhs_arena);
  swap(_impl_.string_filter_chain_, other->_impl_.string_filter_chain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_TraceFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[12]);
}
// ===================================================================

class TraceConfig_AndroidReportConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_AndroidReportConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_AndroidReportConfig, _impl_._has_bits_);
  static void set_has_reporter_service_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reporter_service_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skip_report(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_pipe_in_framework_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TraceConfig_AndroidReportConfig::TraceConfig_AndroidReportConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.AndroidReportConfig)
}
TraceConfig_AndroidReportConfig::TraceConfig_AndroidReportConfig(const TraceConfig_AndroidReportConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig_AndroidReportConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reporter_service_package_) {}

    , decltype(_impl_.reporter_service_class_) {}

    , decltype(_impl_.skip_report_) {}

    , decltype(_impl_.use_pipe_in_framework_for_testing_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reporter_service_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reporter_service_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.reporter_service_package_.Set(from._internal_reporter_service_package(), _this->GetArenaForAllocation());
  }
  _impl_.reporter_service_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reporter_service_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.reporter_service_class_.Set(from._internal_reporter_service_class(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_report_, &from._impl_.skip_report_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.use_pipe_in_framework_for_testing_) -
    reinterpret_cast<char*>(&_impl_.skip_report_)) + sizeof(_impl_.use_pipe_in_framework_for_testing_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.AndroidReportConfig)
}

inline void TraceConfig_AndroidReportConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reporter_service_package_) {}

    , decltype(_impl_.reporter_service_class_) {}

    , decltype(_impl_.skip_report_) { false }

    , decltype(_impl_.use_pipe_in_framework_for_testing_) { false }

  };
  _impl_.reporter_service_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reporter_service_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reporter_service_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reporter_service_class_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig_AndroidReportConfig::~TraceConfig_AndroidReportConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.AndroidReportConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_AndroidReportConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reporter_service_package_.Destroy();
  _impl_.reporter_service_class_.Destroy();
}

void TraceConfig_AndroidReportConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_AndroidReportConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reporter_service_package_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reporter_service_class_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.skip_report_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.use_pipe_in_framework_for_testing_) -
      reinterpret_cast<char*>(&_impl_.skip_report_)) + sizeof(_impl_.use_pipe_in_framework_for_testing_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_AndroidReportConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string reporter_service_package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reporter_service_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string reporter_service_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reporter_service_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool skip_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_skip_report(&has_bits);
          _impl_.skip_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool use_pipe_in_framework_for_testing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_use_pipe_in_framework_for_testing(&has_bits);
          _impl_.use_pipe_in_framework_for_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_AndroidReportConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string reporter_service_package = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_reporter_service_package();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_package");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string reporter_service_class = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_reporter_service_class();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.AndroidReportConfig.reporter_service_class");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool skip_report = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_skip_report(), target);
  }

  // optional bool use_pipe_in_framework_for_testing = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_use_pipe_in_framework_for_testing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.AndroidReportConfig)
  return target;
}

::size_t TraceConfig_AndroidReportConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string reporter_service_package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_reporter_service_package());
    }

    // optional string reporter_service_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_reporter_service_class());
    }

    // optional bool skip_report = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool use_pipe_in_framework_for_testing = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_AndroidReportConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_AndroidReportConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_AndroidReportConfig::GetClassData() const { return &_class_data_; }


void TraceConfig_AndroidReportConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_AndroidReportConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig_AndroidReportConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reporter_service_package(from._internal_reporter_service_package());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_reporter_service_class(from._internal_reporter_service_class());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.skip_report_ = from._impl_.skip_report_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.use_pipe_in_framework_for_testing_ = from._impl_.use_pipe_in_framework_for_testing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_AndroidReportConfig::CopyFrom(const TraceConfig_AndroidReportConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.AndroidReportConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_AndroidReportConfig::IsInitialized() const {
  return true;
}

void TraceConfig_AndroidReportConfig::InternalSwap(TraceConfig_AndroidReportConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporter_service_package_, lhs_arena,
                                       &other->_impl_.reporter_service_package_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporter_service_class_, lhs_arena,
                                       &other->_impl_.reporter_service_class_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_AndroidReportConfig, _impl_.use_pipe_in_framework_for_testing_)
      + sizeof(TraceConfig_AndroidReportConfig::_impl_.use_pipe_in_framework_for_testing_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_AndroidReportConfig, _impl_.skip_report_)>(
          reinterpret_cast<char*>(&_impl_.skip_report_),
          reinterpret_cast<char*>(&other->_impl_.skip_report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_AndroidReportConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[13]);
}
// ===================================================================

class TraceConfig_CmdTraceStartDelay::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig_CmdTraceStartDelay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig_CmdTraceStartDelay, _impl_._has_bits_);
  static void set_has_min_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TraceConfig_CmdTraceStartDelay::TraceConfig_CmdTraceStartDelay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig.CmdTraceStartDelay)
}
TraceConfig_CmdTraceStartDelay::TraceConfig_CmdTraceStartDelay(const TraceConfig_CmdTraceStartDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig.CmdTraceStartDelay)
}

inline void TraceConfig_CmdTraceStartDelay::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_delay_ms_) { 0u }

    , decltype(_impl_.max_delay_ms_) { 0u }

  };
}

TraceConfig_CmdTraceStartDelay::~TraceConfig_CmdTraceStartDelay() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig_CmdTraceStartDelay::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceConfig_CmdTraceStartDelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig_CmdTraceStartDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_delay_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_delay_ms_) -
        reinterpret_cast<char*>(&_impl_.min_delay_ms_)) + sizeof(_impl_.max_delay_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig_CmdTraceStartDelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 min_delay_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_min_delay_ms(&has_bits);
          _impl_.min_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 max_delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_max_delay_ms(&has_bits);
          _impl_.max_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig_CmdTraceStartDelay::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 min_delay_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_min_delay_ms(), target);
  }

  // optional uint32 max_delay_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  return target;
}

::size_t TraceConfig_CmdTraceStartDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min_delay_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_min_delay_ms());
    }

    // optional uint32 max_delay_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_max_delay_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig_CmdTraceStartDelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig_CmdTraceStartDelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig_CmdTraceStartDelay::GetClassData() const { return &_class_data_; }


void TraceConfig_CmdTraceStartDelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig_CmdTraceStartDelay*>(&to_msg);
  auto& from = static_cast<const TraceConfig_CmdTraceStartDelay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_delay_ms_ = from._impl_.min_delay_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_delay_ms_ = from._impl_.max_delay_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig_CmdTraceStartDelay::CopyFrom(const TraceConfig_CmdTraceStartDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig.CmdTraceStartDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig_CmdTraceStartDelay::IsInitialized() const {
  return true;
}

void TraceConfig_CmdTraceStartDelay::InternalSwap(TraceConfig_CmdTraceStartDelay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig_CmdTraceStartDelay, _impl_.max_delay_ms_)
      + sizeof(TraceConfig_CmdTraceStartDelay::_impl_.max_delay_ms_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig_CmdTraceStartDelay, _impl_.min_delay_ms_)>(
          reinterpret_cast<char*>(&_impl_.min_delay_ms_),
          reinterpret_cast<char*>(&other->_impl_.min_delay_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig_CmdTraceStartDelay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[14]);
}
// ===================================================================

class TraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_._has_bits_);
  static const ::perfetto::protos::TraceConfig_BuiltinDataSource& builtin_data_sources(const TraceConfig* msg);
  static void set_has_builtin_data_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_prefer_suspend_clock_for_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_extra_guardrails(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lockdown_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::perfetto::protos::TraceConfig_StatsdMetadata& statsd_metadata(const TraceConfig* msg);
  static void set_has_statsd_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_write_into_file(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_output_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_write_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::TraceConfig_GuardrailOverrides& guardrail_overrides(const TraceConfig* msg);
  static void set_has_guardrail_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deferred_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_flush_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_flush_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_data_source_stop_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_notify_traceur(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_bugreport_score(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::perfetto::protos::TraceConfig_TriggerConfig& trigger_config(const TraceConfig* msg);
  static void set_has_trigger_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::TraceConfig_IncrementalStateConfig& incremental_state_config(const TraceConfig* msg);
  static void set_has_incremental_state_config(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_allow_user_build_tracing(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_unique_session_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compression_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_compress_from_cli(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::perfetto::protos::TraceConfig_IncidentReportConfig& incident_report_config(const TraceConfig* msg);
  static void set_has_incident_report_config(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_statsd_logging(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_trace_uuid_msb(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_trace_uuid_lsb(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::perfetto::protos::TraceConfig_TraceFilter& trace_filter(const TraceConfig* msg);
  static void set_has_trace_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::TraceConfig_AndroidReportConfig& android_report_config(const TraceConfig* msg);
  static void set_has_android_report_config(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::TraceConfig_CmdTraceStartDelay& cmd_trace_start_delay(const TraceConfig* msg);
  static void set_has_cmd_trace_start_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::perfetto::protos::TraceConfig_BuiltinDataSource&
TraceConfig::_Internal::builtin_data_sources(const TraceConfig* msg) {
  return *msg->_impl_.builtin_data_sources_;
}
const ::perfetto::protos::TraceConfig_StatsdMetadata&
TraceConfig::_Internal::statsd_metadata(const TraceConfig* msg) {
  return *msg->_impl_.statsd_metadata_;
}
const ::perfetto::protos::TraceConfig_GuardrailOverrides&
TraceConfig::_Internal::guardrail_overrides(const TraceConfig* msg) {
  return *msg->_impl_.guardrail_overrides_;
}
const ::perfetto::protos::TraceConfig_TriggerConfig&
TraceConfig::_Internal::trigger_config(const TraceConfig* msg) {
  return *msg->_impl_.trigger_config_;
}
const ::perfetto::protos::TraceConfig_IncrementalStateConfig&
TraceConfig::_Internal::incremental_state_config(const TraceConfig* msg) {
  return *msg->_impl_.incremental_state_config_;
}
const ::perfetto::protos::TraceConfig_IncidentReportConfig&
TraceConfig::_Internal::incident_report_config(const TraceConfig* msg) {
  return *msg->_impl_.incident_report_config_;
}
const ::perfetto::protos::TraceConfig_TraceFilter&
TraceConfig::_Internal::trace_filter(const TraceConfig* msg) {
  return *msg->_impl_.trace_filter_;
}
const ::perfetto::protos::TraceConfig_AndroidReportConfig&
TraceConfig::_Internal::android_report_config(const TraceConfig* msg) {
  return *msg->_impl_.android_report_config_;
}
const ::perfetto::protos::TraceConfig_CmdTraceStartDelay&
TraceConfig::_Internal::cmd_trace_start_delay(const TraceConfig* msg) {
  return *msg->_impl_.cmd_trace_start_delay_;
}
TraceConfig::TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffers_){from._impl_.buffers_}
    , decltype(_impl_.data_sources_){from._impl_.data_sources_}
    , decltype(_impl_.producers_){from._impl_.producers_}
    , decltype(_impl_.activate_triggers_){from._impl_.activate_triggers_}
    , decltype(_impl_.unique_session_name_) {}

    , decltype(_impl_.output_path_) {}

    , decltype(_impl_.statsd_metadata_){nullptr}
    , decltype(_impl_.guardrail_overrides_){nullptr}
    , decltype(_impl_.trigger_config_){nullptr}
    , decltype(_impl_.builtin_data_sources_){nullptr}
    , decltype(_impl_.incremental_state_config_){nullptr}
    , decltype(_impl_.incident_report_config_){nullptr}
    , decltype(_impl_.trace_filter_){nullptr}
    , decltype(_impl_.android_report_config_){nullptr}
    , decltype(_impl_.cmd_trace_start_delay_){nullptr}
    , decltype(_impl_.duration_ms_) {}

    , decltype(_impl_.lockdown_mode_) {}

    , decltype(_impl_.max_file_size_bytes_) {}

    , decltype(_impl_.file_write_period_ms_) {}

    , decltype(_impl_.flush_period_ms_) {}

    , decltype(_impl_.flush_timeout_ms_) {}

    , decltype(_impl_.prefer_suspend_clock_for_duration_) {}

    , decltype(_impl_.enable_extra_guardrails_) {}

    , decltype(_impl_.write_into_file_) {}

    , decltype(_impl_.deferred_start_) {}

    , decltype(_impl_.data_source_stop_timeout_ms_) {}

    , decltype(_impl_.compression_type_) {}

    , decltype(_impl_.notify_traceur_) {}

    , decltype(_impl_.allow_user_build_tracing_) {}

    , decltype(_impl_.compress_from_cli_) {}

    , decltype(_impl_.bugreport_score_) {}

    , decltype(_impl_.trace_uuid_msb_) {}

    , decltype(_impl_.trace_uuid_lsb_) {}

    , decltype(_impl_.statsd_logging_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_session_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_session_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.unique_session_name_.Set(from._internal_unique_session_name(), _this->GetArenaForAllocation());
  }
  _impl_.output_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.output_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.output_path_.Set(from._internal_output_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.statsd_metadata_ = new ::perfetto::protos::TraceConfig_StatsdMetadata(*from._impl_.statsd_metadata_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.guardrail_overrides_ = new ::perfetto::protos::TraceConfig_GuardrailOverrides(*from._impl_.guardrail_overrides_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.trigger_config_ = new ::perfetto::protos::TraceConfig_TriggerConfig(*from._impl_.trigger_config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.builtin_data_sources_ = new ::perfetto::protos::TraceConfig_BuiltinDataSource(*from._impl_.builtin_data_sources_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.incremental_state_config_ = new ::perfetto::protos::TraceConfig_IncrementalStateConfig(*from._impl_.incremental_state_config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.incident_report_config_ = new ::perfetto::protos::TraceConfig_IncidentReportConfig(*from._impl_.incident_report_config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.trace_filter_ = new ::perfetto::protos::TraceConfig_TraceFilter(*from._impl_.trace_filter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.android_report_config_ = new ::perfetto::protos::TraceConfig_AndroidReportConfig(*from._impl_.android_report_config_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.cmd_trace_start_delay_ = new ::perfetto::protos::TraceConfig_CmdTraceStartDelay(*from._impl_.cmd_trace_start_delay_);
  }
  ::memcpy(&_impl_.duration_ms_, &from._impl_.duration_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.statsd_logging_) -
    reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.statsd_logging_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceConfig)
}

inline void TraceConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffers_){arena}
    , decltype(_impl_.data_sources_){arena}
    , decltype(_impl_.producers_){arena}
    , decltype(_impl_.activate_triggers_){arena}
    , decltype(_impl_.unique_session_name_) {}

    , decltype(_impl_.output_path_) {}

    , decltype(_impl_.statsd_metadata_){nullptr}
    , decltype(_impl_.guardrail_overrides_){nullptr}
    , decltype(_impl_.trigger_config_){nullptr}
    , decltype(_impl_.builtin_data_sources_){nullptr}
    , decltype(_impl_.incremental_state_config_){nullptr}
    , decltype(_impl_.incident_report_config_){nullptr}
    , decltype(_impl_.trace_filter_){nullptr}
    , decltype(_impl_.android_report_config_){nullptr}
    , decltype(_impl_.cmd_trace_start_delay_){nullptr}
    , decltype(_impl_.duration_ms_) { 0u }

    , decltype(_impl_.lockdown_mode_) { 0 }

    , decltype(_impl_.max_file_size_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.file_write_period_ms_) { 0u }

    , decltype(_impl_.flush_period_ms_) { 0u }

    , decltype(_impl_.flush_timeout_ms_) { 0u }

    , decltype(_impl_.prefer_suspend_clock_for_duration_) { false }

    , decltype(_impl_.enable_extra_guardrails_) { false }

    , decltype(_impl_.write_into_file_) { false }

    , decltype(_impl_.deferred_start_) { false }

    , decltype(_impl_.data_source_stop_timeout_ms_) { 0u }

    , decltype(_impl_.compression_type_) { 0 }

    , decltype(_impl_.notify_traceur_) { false }

    , decltype(_impl_.allow_user_build_tracing_) { false }

    , decltype(_impl_.compress_from_cli_) { false }

    , decltype(_impl_.bugreport_score_) { 0 }

    , decltype(_impl_.trace_uuid_msb_) { ::int64_t{0} }

    , decltype(_impl_.trace_uuid_lsb_) { ::int64_t{0} }

    , decltype(_impl_.statsd_logging_) { 0 }

  };
  _impl_.unique_session_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_session_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.output_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buffers()->~RepeatedPtrField();
  _internal_mutable_data_sources()->~RepeatedPtrField();
  _internal_mutable_producers()->~RepeatedPtrField();
  _internal_mutable_activate_triggers()->~RepeatedPtrField();
  _impl_.unique_session_name_.Destroy();
  _impl_.output_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.statsd_metadata_;
  if (this != internal_default_instance()) delete _impl_.guardrail_overrides_;
  if (this != internal_default_instance()) delete _impl_.trigger_config_;
  if (this != internal_default_instance()) delete _impl_.builtin_data_sources_;
  if (this != internal_default_instance()) delete _impl_.incremental_state_config_;
  if (this != internal_default_instance()) delete _impl_.incident_report_config_;
  if (this != internal_default_instance()) delete _impl_.trace_filter_;
  if (this != internal_default_instance()) delete _impl_.android_report_config_;
  if (this != internal_default_instance()) delete _impl_.cmd_trace_start_delay_;
}

void TraceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buffers()->Clear();
  _internal_mutable_data_sources()->Clear();
  _internal_mutable_producers()->Clear();
  _internal_mutable_activate_triggers()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.unique_session_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.output_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.statsd_metadata_ != nullptr);
      _impl_.statsd_metadata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.guardrail_overrides_ != nullptr);
      _impl_.guardrail_overrides_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.trigger_config_ != nullptr);
      _impl_.trigger_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.builtin_data_sources_ != nullptr);
      _impl_.builtin_data_sources_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.incremental_state_config_ != nullptr);
      _impl_.incremental_state_config_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.incident_report_config_ != nullptr);
      _impl_.incident_report_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.trace_filter_ != nullptr);
      _impl_.trace_filter_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.android_report_config_ != nullptr);
      _impl_.android_report_config_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.cmd_trace_start_delay_ != nullptr);
      _impl_.cmd_trace_start_delay_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.duration_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flush_period_ms_) -
        reinterpret_cast<char*>(&_impl_.duration_ms_)) + sizeof(_impl_.flush_period_ms_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.flush_timeout_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.notify_traceur_) -
        reinterpret_cast<char*>(&_impl_.flush_timeout_ms_)) + sizeof(_impl_.notify_traceur_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.allow_user_build_tracing_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.statsd_logging_) -
        reinterpret_cast<char*>(&_impl_.allow_user_build_tracing_)) + sizeof(_impl_.statsd_logging_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          _impl_.duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enable_extra_guardrails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_extra_guardrails(&has_bits);
          _impl_.enable_extra_guardrails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_LockdownModeOperation_IsValid(static_cast<int>(val)))) {
            _internal_set_lockdown_mode(static_cast<::perfetto::protos::TraceConfig_LockdownModeOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_producers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_statsd_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool write_into_file = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_write_into_file(&has_bits);
          _impl_.write_into_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 file_write_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_file_write_period_ms(&has_bits);
          _impl_.file_write_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 max_file_size_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_max_file_size_bytes(&has_bits);
          _impl_.max_file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_guardrail_overrides(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool deferred_start = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_deferred_start(&has_bits);
          _impl_.deferred_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flush_period_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_flush_period_ms(&has_bits);
          _impl_.flush_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flush_timeout_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_flush_timeout_ms(&has_bits);
          _impl_.flush_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool notify_traceur = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_notify_traceur(&has_bits);
          _impl_.notify_traceur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string activate_triggers = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_activate_triggers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.activate_triggers");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool allow_user_build_tracing = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_allow_user_build_tracing(&has_bits);
          _impl_.allow_user_build_tracing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_builtin_data_sources(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_incremental_state_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string unique_session_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_unique_session_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.unique_session_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_source_stop_timeout_ms = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_data_source_stop_timeout_ms(&has_bits);
          _impl_.data_source_stop_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_CompressionType_IsValid(static_cast<int>(val)))) {
            _internal_set_compression_type(static_cast<::perfetto::protos::TraceConfig_CompressionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_incident_report_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 trace_uuid_msb = 27 [deprecated = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 216)) {
          _Internal::set_has_trace_uuid_msb(&has_bits);
          _impl_.trace_uuid_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 trace_uuid_lsb = 28 [deprecated = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 224)) {
          _Internal::set_has_trace_uuid_lsb(&has_bits);
          _impl_.trace_uuid_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string output_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_output_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TraceConfig.output_path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 bugreport_score = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 240)) {
          _Internal::set_has_bugreport_score(&has_bits);
          _impl_.bugreport_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 248)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceConfig_StatsdLogging_IsValid(static_cast<int>(val)))) {
            _internal_set_statsd_logging(static_cast<::perfetto::protos::TraceConfig_StatsdLogging>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_filter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_android_report_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_trace_start_delay(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool prefer_suspend_clock_for_duration = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_prefer_suspend_clock_for_duration(&has_bits);
          _impl_.prefer_suspend_clock_for_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool compress_from_cli = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_compress_from_cli(&has_bits);
          _impl_.compress_from_cli_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffers_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 duration_ms = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_duration_ms(), target);
  }

  // optional bool enable_extra_guardrails = 4;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_enable_extra_guardrails(), target);
  }

  // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_lockdown_mode(), target);
  }

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_producers_size()); i < n; i++) {
    const auto& repfield = this->_internal_producers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::statsd_metadata(this),
        _Internal::statsd_metadata(this).GetCachedSize(), target, stream);
  }

  // optional bool write_into_file = 8;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_write_into_file(), target);
  }

  // optional uint32 file_write_period_ms = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_file_write_period_ms(), target);
  }

  // optional uint64 max_file_size_bytes = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_max_file_size_bytes(), target);
  }

  // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::guardrail_overrides(this),
        _Internal::guardrail_overrides(this).GetCachedSize(), target, stream);
  }

  // optional bool deferred_start = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_deferred_start(), target);
  }

  // optional uint32 flush_period_ms = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_flush_period_ms(), target);
  }

  // optional uint32 flush_timeout_ms = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_flush_timeout_ms(), target);
  }

  // optional bool notify_traceur = 16;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_notify_traceur(), target);
  }

  // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::trigger_config(this),
        _Internal::trigger_config(this).GetCachedSize(), target, stream);
  }

  // repeated string activate_triggers = 18;
  for (int i = 0, n = this->_internal_activate_triggers_size(); i < n; ++i) {
    const auto& s = this->_internal_activate_triggers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.activate_triggers");
    target = stream->WriteString(18, s, target);
  }

  // optional bool allow_user_build_tracing = 19;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_allow_user_build_tracing(), target);
  }

  // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::builtin_data_sources(this),
        _Internal::builtin_data_sources(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::incremental_state_config(this),
        _Internal::incremental_state_config(this).GetCachedSize(), target, stream);
  }

  // optional string unique_session_name = 22;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_unique_session_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.unique_session_name");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional uint32 data_source_stop_timeout_ms = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        23, this->_internal_data_source_stop_timeout_ms(), target);
  }

  // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        24, this->_internal_compression_type(), target);
  }

  // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::incident_report_config(this),
        _Internal::incident_report_config(this).GetCachedSize(), target, stream);
  }

  // optional int64 trace_uuid_msb = 27 [deprecated = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        27, this->_internal_trace_uuid_msb(), target);
  }

  // optional int64 trace_uuid_lsb = 28 [deprecated = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        28, this->_internal_trace_uuid_lsb(), target);
  }

  // optional string output_path = 29;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_output_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TraceConfig.output_path");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // optional int32 bugreport_score = 30;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        30, this->_internal_bugreport_score(), target);
  }

  // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        31, this->_internal_statsd_logging(), target);
  }

  // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::trace_filter(this),
        _Internal::trace_filter(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::android_report_config(this),
        _Internal::android_report_config(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::cmd_trace_start_delay(this),
        _Internal::cmd_trace_start_delay(this).GetCachedSize(), target, stream);
  }

  // optional bool prefer_suspend_clock_for_duration = 36;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        36, this->_internal_prefer_suspend_clock_for_duration(), target);
  }

  // optional bool compress_from_cli = 37;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        37, this->_internal_compress_from_cli(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceConfig)
  return target;
}

::size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceConfig.BufferConfig buffers = 1;
  total_size += 1UL * this->_internal_buffers_size();
  for (const auto& msg : this->_internal_buffers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TraceConfig.DataSource data_sources = 2;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->_internal_data_sources()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TraceConfig.ProducerConfig producers = 6;
  total_size += 1UL * this->_internal_producers_size();
  for (const auto& msg : this->_internal_producers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string activate_triggers = 18;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_activate_triggers().size());
  for (int i = 0, n = _internal_activate_triggers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_activate_triggers().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_session_name = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_unique_session_name());
    }

    // optional string output_path = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_output_path());
    }

    // optional .perfetto.protos.TraceConfig.StatsdMetadata statsd_metadata = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.statsd_metadata_);
    }

    // optional .perfetto.protos.TraceConfig.GuardrailOverrides guardrail_overrides = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.guardrail_overrides_);
    }

    // optional .perfetto.protos.TraceConfig.TriggerConfig trigger_config = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trigger_config_);
    }

    // optional .perfetto.protos.TraceConfig.BuiltinDataSource builtin_data_sources = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.builtin_data_sources_);
    }

    // optional .perfetto.protos.TraceConfig.IncrementalStateConfig incremental_state_config = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.incremental_state_config_);
    }

    // optional .perfetto.protos.TraceConfig.IncidentReportConfig incident_report_config = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.incident_report_config_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.TraceConfig.TraceFilter trace_filter = 33;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trace_filter_);
    }

    // optional .perfetto.protos.TraceConfig.AndroidReportConfig android_report_config = 34;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.android_report_config_);
    }

    // optional .perfetto.protos.TraceConfig.CmdTraceStartDelay cmd_trace_start_delay = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_trace_start_delay_);
    }

    // optional uint32 duration_ms = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_duration_ms());
    }

    // optional .perfetto.protos.TraceConfig.LockdownModeOperation lockdown_mode = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_lockdown_mode());
    }

    // optional uint64 max_file_size_bytes = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_max_file_size_bytes());
    }

    // optional uint32 file_write_period_ms = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_file_write_period_ms());
    }

    // optional uint32 flush_period_ms = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flush_period_ms());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 flush_timeout_ms = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flush_timeout_ms());
    }

    // optional bool prefer_suspend_clock_for_duration = 36;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional bool enable_extra_guardrails = 4;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2;
    }

    // optional bool write_into_file = 8;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2;
    }

    // optional bool deferred_start = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2;
    }

    // optional uint32 data_source_stop_timeout_ms = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_data_source_stop_timeout_ms());
    }

    // optional .perfetto.protos.TraceConfig.CompressionType compression_type = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_compression_type());
    }

    // optional bool notify_traceur = 16;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional bool allow_user_build_tracing = 19;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3;
    }

    // optional bool compress_from_cli = 37;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3;
    }

    // optional int32 bugreport_score = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_bugreport_score());
    }

    // optional int64 trace_uuid_msb = 27 [deprecated = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_trace_uuid_msb());
    }

    // optional int64 trace_uuid_lsb = 28 [deprecated = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_trace_uuid_lsb());
    }

    // optional .perfetto.protos.TraceConfig.StatsdLogging statsd_logging = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_statsd_logging());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig::GetClassData() const { return &_class_data_; }


void TraceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buffers()->MergeFrom(from._internal_buffers());
  _this->_internal_mutable_data_sources()->MergeFrom(from._internal_data_sources());
  _this->_internal_mutable_producers()->MergeFrom(from._internal_producers());
  _this->_internal_mutable_activate_triggers()->MergeFrom(from._internal_activate_triggers());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unique_session_name(from._internal_unique_session_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_output_path(from._internal_output_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_statsd_metadata()->::perfetto::protos::TraceConfig_StatsdMetadata::MergeFrom(
          from._internal_statsd_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_guardrail_overrides()->::perfetto::protos::TraceConfig_GuardrailOverrides::MergeFrom(
          from._internal_guardrail_overrides());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_trigger_config()->::perfetto::protos::TraceConfig_TriggerConfig::MergeFrom(
          from._internal_trigger_config());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_builtin_data_sources()->::perfetto::protos::TraceConfig_BuiltinDataSource::MergeFrom(
          from._internal_builtin_data_sources());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_incremental_state_config()->::perfetto::protos::TraceConfig_IncrementalStateConfig::MergeFrom(
          from._internal_incremental_state_config());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_incident_report_config()->::perfetto::protos::TraceConfig_IncidentReportConfig::MergeFrom(
          from._internal_incident_report_config());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_trace_filter()->::perfetto::protos::TraceConfig_TraceFilter::MergeFrom(
          from._internal_trace_filter());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_android_report_config()->::perfetto::protos::TraceConfig_AndroidReportConfig::MergeFrom(
          from._internal_android_report_config());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_cmd_trace_start_delay()->::perfetto::protos::TraceConfig_CmdTraceStartDelay::MergeFrom(
          from._internal_cmd_trace_start_delay());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.duration_ms_ = from._impl_.duration_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.lockdown_mode_ = from._impl_.lockdown_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.max_file_size_bytes_ = from._impl_.max_file_size_bytes_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.file_write_period_ms_ = from._impl_.file_write_period_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.flush_period_ms_ = from._impl_.flush_period_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.flush_timeout_ms_ = from._impl_.flush_timeout_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.prefer_suspend_clock_for_duration_ = from._impl_.prefer_suspend_clock_for_duration_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.enable_extra_guardrails_ = from._impl_.enable_extra_guardrails_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.write_into_file_ = from._impl_.write_into_file_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.deferred_start_ = from._impl_.deferred_start_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.data_source_stop_timeout_ms_ = from._impl_.data_source_stop_timeout_ms_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.compression_type_ = from._impl_.compression_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.notify_traceur_ = from._impl_.notify_traceur_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.allow_user_build_tracing_ = from._impl_.allow_user_build_tracing_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.compress_from_cli_ = from._impl_.compress_from_cli_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.bugreport_score_ = from._impl_.bugreport_score_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.trace_uuid_msb_ = from._impl_.trace_uuid_msb_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.trace_uuid_lsb_ = from._impl_.trace_uuid_lsb_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.statsd_logging_ = from._impl_.statsd_logging_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_buffers()->InternalSwap(other->_internal_mutable_buffers());
  _internal_mutable_data_sources()->InternalSwap(other->_internal_mutable_data_sources());
  _internal_mutable_producers()->InternalSwap(other->_internal_mutable_producers());
  _internal_mutable_activate_triggers()->InternalSwap(
      other->_internal_mutable_activate_triggers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_session_name_, lhs_arena,
                                       &other->_impl_.unique_session_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.output_path_, lhs_arena,
                                       &other->_impl_.output_path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_.statsd_logging_)
      + sizeof(TraceConfig::_impl_.statsd_logging_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_.statsd_metadata_)>(
          reinterpret_cast<char*>(&_impl_.statsd_metadata_),
          reinterpret_cast<char*>(&other->_impl_.statsd_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2ftrace_5fconfig_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_BufferConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_BufferConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_BufferConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_DataSource*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_DataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_BuiltinDataSource*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_BuiltinDataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_BuiltinDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_ProducerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_ProducerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_ProducerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_StatsdMetadata*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_StatsdMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_StatsdMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_GuardrailOverrides*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_GuardrailOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_GuardrailOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TriggerConfig_Trigger*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TriggerConfig_Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TriggerConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TriggerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TriggerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_IncrementalStateConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_IncrementalStateConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_IncrementalStateConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_IncidentReportConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_IncidentReportConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_IncidentReportConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TraceFilter_StringFilterChain >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_TraceFilter*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_TraceFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_TraceFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_AndroidReportConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_AndroidReportConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_AndroidReportConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig_CmdTraceStartDelay*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig_CmdTraceStartDelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig_CmdTraceStartDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
