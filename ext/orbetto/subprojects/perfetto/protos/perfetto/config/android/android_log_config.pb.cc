// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/android_log_config.proto

#include "protos/perfetto/config/android/android_log_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR AndroidLogConfig::AndroidLogConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.log_ids_)*/ {}

  , /*decltype(_impl_.filter_tags_)*/{}
  , /*decltype(_impl_.min_prio_)*/ 0
} {}
struct AndroidLogConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndroidLogConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndroidLogConfigDefaultTypeInternal() {}
  union {
    AndroidLogConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndroidLogConfigDefaultTypeInternal _AndroidLogConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidLogConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidLogConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidLogConfig, _impl_.log_ids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidLogConfig, _impl_.min_prio_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AndroidLogConfig, _impl_.filter_tags_),
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::perfetto::protos::AndroidLogConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_AndroidLogConfig_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n7protos/perfetto/config/android/android"
    "_log_config.proto\022\017perfetto.protos\0322prot"
    "os/perfetto/common/android_log_constants"
    ".proto\"\224\001\n\020AndroidLogConfig\022.\n\007log_ids\030\001"
    " \003(\0162\035.perfetto.protos.AndroidLogId\0225\n\010m"
    "in_prio\030\003 \001(\0162#.perfetto.protos.AndroidL"
    "ogPriority\022\023\n\013filter_tags\030\004 \003(\tJ\004\010\002\020\003"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2fandroid_5flog_5fconstants_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto = {
    false,
    false,
    277,
    descriptor_table_protodef_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto,
    "protos/perfetto/config/android/android_log_config.proto",
    &descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_once,
    descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto(&descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class AndroidLogConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidLogConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AndroidLogConfig, _impl_._has_bits_);
  static void set_has_min_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AndroidLogConfig::AndroidLogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AndroidLogConfig)
}
AndroidLogConfig::AndroidLogConfig(const AndroidLogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AndroidLogConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_ids_) { from._internal_log_ids() }

    , decltype(_impl_.filter_tags_){from._impl_.filter_tags_}
    , decltype(_impl_.min_prio_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.min_prio_ = from._impl_.min_prio_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AndroidLogConfig)
}

inline void AndroidLogConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_ids_) { arena }

    , decltype(_impl_.filter_tags_){arena}
    , decltype(_impl_.min_prio_) { 0 }

  };
}

AndroidLogConfig::~AndroidLogConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AndroidLogConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AndroidLogConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_log_ids()->~RepeatedField();
  _internal_mutable_filter_tags()->~RepeatedPtrField();
}

void AndroidLogConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AndroidLogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AndroidLogConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_log_ids()->Clear();
  _internal_mutable_filter_tags()->Clear();
  _impl_.min_prio_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidLogConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.AndroidLogId log_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidLogId_IsValid(static_cast<int>(val)))) {
              _internal_add_log_ids(static_cast<::perfetto::protos::AndroidLogId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_log_ids(), ptr, ctx, ::perfetto::protos::AndroidLogId_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::AndroidLogPriority_IsValid(static_cast<int>(val)))) {
            _internal_set_min_prio(static_cast<::perfetto::protos::AndroidLogPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string filter_tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filter_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.AndroidLogConfig.filter_tags");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AndroidLogConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AndroidLogConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidLogId log_ids = 1;
  for (int i = 0, n = this->_internal_log_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_log_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_min_prio(), target);
  }

  // repeated string filter_tags = 4;
  for (int i = 0, n = this->_internal_filter_tags_size(); i < n; ++i) {
    const auto& s = this->_internal_filter_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.AndroidLogConfig.filter_tags");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AndroidLogConfig)
  return target;
}

::size_t AndroidLogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AndroidLogConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AndroidLogId log_ids = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_log_ids_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_log_ids(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated string filter_tags = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_filter_tags().size());
  for (int i = 0, n = _internal_filter_tags().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_filter_tags().Get(i));
  }

  // optional .perfetto.protos.AndroidLogPriority min_prio = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_min_prio());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AndroidLogConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AndroidLogConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AndroidLogConfig::GetClassData() const { return &_class_data_; }


void AndroidLogConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AndroidLogConfig*>(&to_msg);
  auto& from = static_cast<const AndroidLogConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AndroidLogConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_log_ids()->MergeFrom(from._internal_log_ids());
  _this->_internal_mutable_filter_tags()->MergeFrom(from._internal_filter_tags());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_min_prio(from._internal_min_prio());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AndroidLogConfig::CopyFrom(const AndroidLogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AndroidLogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidLogConfig::IsInitialized() const {
  return true;
}

void AndroidLogConfig::InternalSwap(AndroidLogConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_log_ids()->InternalSwap(
      other->_internal_mutable_log_ids());
  _internal_mutable_filter_tags()->InternalSwap(
      other->_internal_mutable_filter_tags());
  swap(_impl_.min_prio_, other->_impl_.min_prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidLogConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_getter, &descriptor_table_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fconfig_2fandroid_2fandroid_5flog_5fconfig_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::AndroidLogConfig*
Arena::CreateMaybeMessage< ::perfetto::protos::AndroidLogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AndroidLogConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
